{
	"id": "ef4bb57983d788f05de4a78cb60d5ffb",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.7.6",
	"solcLongVersion": "0.7.6+commit.7338295f",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/SwapRouter_flattened.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\n// File: contracts/libraries/PoolAddress.sol\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\r\nlibrary PoolAddress {\r\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\r\n\r\n    /// @notice The identifying key of the pool\r\n    struct PoolKey {\r\n        address token0;\r\n        address token1;\r\n        uint24 fee;\r\n    }\r\n\r\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\r\n    /// @param tokenA The first token of a pool, unsorted\r\n    /// @param tokenB The second token of a pool, unsorted\r\n    /// @param fee The fee level of the pool\r\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\r\n    function getPoolKey(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint24 fee\r\n    ) internal pure returns (PoolKey memory) {\r\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\r\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\r\n    }\r\n\r\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\r\n    /// @param factory The Uniswap V3 factory contract address\r\n    /// @param key The PoolKey\r\n    /// @return pool The contract address of the V3 pool\r\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\r\n        require(key.token0 < key.token1);\r\n        pool = address(\r\n            uint256(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        hex'ff',\r\n                        factory,\r\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\r\n                        POOL_INIT_CODE_HASH\r\n                    )\r\n                )\r\n            )\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/BytesLib.sol\r\n\r\n\r\n/*\r\n * @title Solidity Bytes Arrays Utils\r\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\r\n *\r\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\r\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\r\n */\r\npragma solidity >=0.5.0 <0.8.0;\r\n\r\nlibrary BytesLib {\r\n    function slice(\r\n        bytes memory _bytes,\r\n        uint256 _start,\r\n        uint256 _length\r\n    ) internal pure returns (bytes memory) {\r\n        require(_length + 31 >= _length, 'slice_overflow');\r\n        require(_start + _length >= _start, 'slice_overflow');\r\n        require(_bytes.length >= _start + _length, 'slice_outOfBounds');\r\n\r\n        bytes memory tempBytes;\r\n\r\n        assembly {\r\n            switch iszero(_length)\r\n                case 0 {\r\n                    // Get a location of some free memory and store it in tempBytes as\r\n                    // Solidity does for memory variables.\r\n                    tempBytes := mload(0x40)\r\n\r\n                    // The first word of the slice result is potentially a partial\r\n                    // word read from the original array. To read it, we calculate\r\n                    // the length of that partial word and start copying that many\r\n                    // bytes into the array. The first word we copy will start with\r\n                    // data we don't care about, but the last `lengthmod` bytes will\r\n                    // land at the beginning of the contents of the new array. When\r\n                    // we're done copying, we overwrite the full first word with\r\n                    // the actual length of the slice.\r\n                    let lengthmod := and(_length, 31)\r\n\r\n                    // The multiplication in the next line is necessary\r\n                    // because when slicing multiples of 32 bytes (lengthmod == 0)\r\n                    // the following copy loop was copying the origin's length\r\n                    // and then ending prematurely not copying everything it should.\r\n                    let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\r\n                    let end := add(mc, _length)\r\n\r\n                    for {\r\n                        // The multiplication in the next line has the same exact purpose\r\n                        // as the one above.\r\n                        let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\r\n                    } lt(mc, end) {\r\n                        mc := add(mc, 0x20)\r\n                        cc := add(cc, 0x20)\r\n                    } {\r\n                        mstore(mc, mload(cc))\r\n                    }\r\n\r\n                    mstore(tempBytes, _length)\r\n\r\n                    //update free-memory pointer\r\n                    //allocating the array padded to 32 bytes like the compiler does now\r\n                    mstore(0x40, and(add(mc, 31), not(31)))\r\n                }\r\n                //if we want a zero-length slice let's just return a zero-length array\r\n                default {\r\n                    tempBytes := mload(0x40)\r\n                    //zero out the 32 bytes slice we are about to return\r\n                    //we need to do it because Solidity does not garbage collect\r\n                    mstore(tempBytes, 0)\r\n\r\n                    mstore(0x40, add(tempBytes, 0x20))\r\n                }\r\n        }\r\n\r\n        return tempBytes;\r\n    }\r\n\r\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\r\n        require(_start + 20 >= _start, 'toAddress_overflow');\r\n        require(_bytes.length >= _start + 20, 'toAddress_outOfBounds');\r\n        address tempAddress;\r\n\r\n        assembly {\r\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\r\n        }\r\n\r\n        return tempAddress;\r\n    }\r\n\r\n    function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\r\n        require(_start + 3 >= _start, 'toUint24_overflow');\r\n        require(_bytes.length >= _start + 3, 'toUint24_outOfBounds');\r\n        uint24 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x3), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/Path.sol\r\n\r\n\r\npragma solidity >=0.6.0;\r\n\r\n\r\n/// @title Functions for manipulating path data for multihop swaps\r\nlibrary Path {\r\n    using BytesLib for bytes;\r\n\r\n    /// @dev The length of the bytes encoded address\r\n    uint256 private constant ADDR_SIZE = 20;\r\n    /// @dev The length of the bytes encoded fee\r\n    uint256 private constant FEE_SIZE = 3;\r\n\r\n    /// @dev The offset of a single token address and pool fee\r\n    uint256 private constant NEXT_OFFSET = ADDR_SIZE + FEE_SIZE;\r\n    /// @dev The offset of an encoded pool key\r\n    uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;\r\n    /// @dev The minimum length of an encoding that contains 2 or more pools\r\n    uint256 private constant MULTIPLE_POOLS_MIN_LENGTH = POP_OFFSET + NEXT_OFFSET;\r\n\r\n    /// @notice Returns true iff the path contains two or more pools\r\n    /// @param path The encoded swap path\r\n    /// @return True if path contains two or more pools, otherwise false\r\n    function hasMultiplePools(bytes memory path) internal pure returns (bool) {\r\n        return path.length >= MULTIPLE_POOLS_MIN_LENGTH;\r\n    }\r\n\r\n    /// @notice Returns the number of pools in the path\r\n    /// @param path The encoded swap path\r\n    /// @return The number of pools in the path\r\n    function numPools(bytes memory path) internal pure returns (uint256) {\r\n        // Ignore the first token address. From then on every fee and token offset indicates a pool.\r\n        return ((path.length - ADDR_SIZE) / NEXT_OFFSET);\r\n    }\r\n\r\n    /// @notice Decodes the first pool in path\r\n    /// @param path The bytes encoded swap path\r\n    /// @return tokenA The first token of the given pool\r\n    /// @return tokenB The second token of the given pool\r\n    /// @return fee The fee level of the pool\r\n    function decodeFirstPool(bytes memory path)\r\n        internal\r\n        pure\r\n        returns (\r\n            address tokenA,\r\n            address tokenB,\r\n            uint24 fee\r\n        )\r\n    {\r\n        tokenA = path.toAddress(0);\r\n        fee = path.toUint24(ADDR_SIZE);\r\n        tokenB = path.toAddress(NEXT_OFFSET);\r\n    }\r\n\r\n    /// @notice Gets the segment corresponding to the first pool in the path\r\n    /// @param path The bytes encoded swap path\r\n    /// @return The segment containing all data necessary to target the first pool in the path\r\n    function getFirstPool(bytes memory path) internal pure returns (bytes memory) {\r\n        return path.slice(0, POP_OFFSET);\r\n    }\r\n\r\n    /// @notice Skips a token + fee element from the buffer and returns the remainder\r\n    /// @param path The swap path\r\n    /// @return The remaining token + fee elements in the path\r\n    function skipToken(bytes memory path) internal pure returns (bytes memory) {\r\n        return path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET);\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/external/IERC20PermitAllowed.sol\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Interface for permit\r\n/// @notice Interface used by DAI/CHAI for permit\r\ninterface IERC20PermitAllowed {\r\n    /// @notice Approve the spender to spend some tokens via the holder signature\r\n    /// @dev This is the permit interface used by DAI and CHAI\r\n    /// @param holder The address of the token holder, the token owner\r\n    /// @param spender The address of the token spender\r\n    /// @param nonce The holder's nonce, increases at each call to permit\r\n    /// @param expiry The timestamp at which the permit is no longer valid\r\n    /// @param allowed Boolean that sets approval amount, true for type(uint256).max and false for 0\r\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\r\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\r\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\r\n    function permit(\r\n        address holder,\r\n        address spender,\r\n        uint256 nonce,\r\n        uint256 expiry,\r\n        bool allowed,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n}\r\n\r\n// File: contracts/interfaces/ISelfPermit.sol\r\n\r\n\r\npragma solidity >=0.7.5;\r\n\r\n/// @title Self Permit\r\n/// @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\r\ninterface ISelfPermit {\r\n    /// @notice Permits this contract to spend a given token from `msg.sender`\r\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\r\n    /// @param token The address of the token spent\r\n    /// @param value The amount that can be spent of token\r\n    /// @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\r\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\r\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\r\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\r\n    function selfPermit(\r\n        address token,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external payable;\r\n\r\n    /// @notice Permits this contract to spend a given token from `msg.sender`\r\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\r\n    /// Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit\r\n    /// @param token The address of the token spent\r\n    /// @param value The amount that can be spent of token\r\n    /// @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\r\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\r\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\r\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\r\n    function selfPermitIfNecessary(\r\n        address token,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external payable;\r\n\r\n    /// @notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\r\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this)\r\n    /// @param token The address of the token spent\r\n    /// @param nonce The current nonce of the owner\r\n    /// @param expiry The timestamp at which the permit is no longer valid\r\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\r\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\r\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\r\n    function selfPermitAllowed(\r\n        address token,\r\n        uint256 nonce,\r\n        uint256 expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external payable;\r\n\r\n    /// @notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\r\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this)\r\n    /// Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.\r\n    /// @param token The address of the token spent\r\n    /// @param nonce The current nonce of the owner\r\n    /// @param expiry The timestamp at which the permit is no longer valid\r\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\r\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\r\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\r\n    function selfPermitAllowedIfNecessary(\r\n        address token,\r\n        uint256 nonce,\r\n        uint256 expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external payable;\r\n}\r\n\r\n// File: @openzeppelin/contracts/drafts/IERC20Permit.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\r\n     * given `owner`'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// File: contracts/interfaces/IMulticall.sol\r\n\r\n\r\npragma solidity >=0.7.5;\r\n\r\n/// @title Multicall interface\r\n/// @notice Enables calling multiple methods in a single call to the contract\r\ninterface IMulticall {\r\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\r\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\r\n    /// @param data The encoded function data for each of the calls to make to this contract\r\n    /// @return results The results from each of the calls passed in via data\r\n    function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\r\n}\r\n\r\n// File: contracts/base/Multicall.sol\r\n\r\n\r\npragma solidity =0.7.6;\r\n\r\n\r\n/// @title Multicall\r\n/// @notice Enables calling multiple methods in a single call to the contract\r\nabstract contract Multicall is IMulticall {\r\n    /// @inheritdoc IMulticall\r\n    function multicall(bytes[] calldata data) public payable override returns (bytes[] memory results) {\r\n        results = new bytes[](data.length);\r\n        for (uint256 i = 0; i < data.length; i++) {\r\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\r\n\r\n            if (!success) {\r\n                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\r\n                if (result.length < 68) revert();\r\n                assembly {\r\n                    result := add(result, 0x04)\r\n                }\r\n                revert(abi.decode(result, (string)));\r\n            }\r\n\r\n            results[i] = result;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IPeripheryPayments.sol\r\n\r\n\r\npragma solidity >=0.7.5;\r\n\r\n/// @title Periphery Payments\r\n/// @notice Functions to ease deposits and withdrawals of ETH\r\ninterface IPeripheryPayments {\r\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\r\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\r\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\r\n    /// @param recipient The address receiving ETH\r\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\r\n\r\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\r\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\r\n    /// that use ether for the input amount\r\n    function refundETH() external payable;\r\n\r\n    /// @notice Transfers the full amount of a token held by this contract to recipient\r\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\r\n    /// @param token The contract address of the token which will be transferred to `recipient`\r\n    /// @param amountMinimum The minimum amount of token required for a transfer\r\n    /// @param recipient The destination address of the token\r\n    function sweepToken(\r\n        address token,\r\n        uint256 amountMinimum,\r\n        address recipient\r\n    ) external payable;\r\n}\r\n\r\n// File: contracts/interfaces/IPeripheryPaymentsWithFee.sol\r\n\r\n\r\npragma solidity >=0.7.5;\r\n\r\n\r\n/// @title Periphery Payments\r\n/// @notice Functions to ease deposits and withdrawals of ETH\r\ninterface IPeripheryPaymentsWithFee is IPeripheryPayments {\r\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH, with a percentage between\r\n    /// 0 (exclusive), and 1 (inclusive) going to feeRecipient\r\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\r\n    function unwrapWETH9WithFee(\r\n        uint256 amountMinimum,\r\n        address recipient,\r\n        uint256 feeBips,\r\n        address feeRecipient\r\n    ) external payable;\r\n\r\n    /// @notice Transfers the full amount of a token held by this contract to recipient, with a percentage between\r\n    /// 0 (exclusive) and 1 (inclusive) going to feeRecipient\r\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\r\n    function sweepTokenWithFee(\r\n        address token,\r\n        uint256 amountMinimum,\r\n        address recipient,\r\n        uint256 feeBips,\r\n        address feeRecipient\r\n    ) external payable;\r\n}\r\n\r\n// File: @thinkincoin-libs/uniswap-v3-core/contracts/libraries/LowGasSafeMath.sol\r\n\r\n\r\npragma solidity >=0.7.0;\r\n\r\n/// @title Optimized overflow and underflow safe math operations\r\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\r\nlibrary LowGasSafeMath {\r\n    /// @notice Returns x + y, reverts if sum overflows uint256\r\n    /// @param x The augend\r\n    /// @param y The addend\r\n    /// @return z The sum of x and y\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n\r\n    /// @notice Returns x - y, reverts if underflows\r\n    /// @param x The minuend\r\n    /// @param y The subtrahend\r\n    /// @return z The difference of x and y\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n\r\n    /// @notice Returns x * y, reverts if overflows\r\n    /// @param x The multiplicand\r\n    /// @param y The multiplier\r\n    /// @return z The product of x and y\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(x == 0 || (z = x * y) / x == y);\r\n    }\r\n\r\n    /// @notice Returns x + y, reverts if overflows or underflows\r\n    /// @param x The augend\r\n    /// @param y The addend\r\n    /// @return z The sum of x and y\r\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\r\n        require((z = x + y) >= x == (y >= 0));\r\n    }\r\n\r\n    /// @notice Returns x - y, reverts if overflows or underflows\r\n    /// @param x The minuend\r\n    /// @param y The subtrahend\r\n    /// @return z The difference of x and y\r\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\r\n        require((z = x - y) <= x == (y >= 0));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/base/SelfPermit.sol\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n/// @title Self Permit\r\n/// @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\r\n/// @dev These functions are expected to be embedded in multicalls to allow EOAs to approve a contract and call a function\r\n/// that requires an approval in a single transaction.\r\nabstract contract SelfPermit is ISelfPermit {\r\n    /// @inheritdoc ISelfPermit\r\n    function selfPermit(\r\n        address token,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public payable override {\r\n        IERC20Permit(token).permit(msg.sender, address(this), value, deadline, v, r, s);\r\n    }\r\n\r\n    /// @inheritdoc ISelfPermit\r\n    function selfPermitIfNecessary(\r\n        address token,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external payable override {\r\n        if (IERC20(token).allowance(msg.sender, address(this)) < value) selfPermit(token, value, deadline, v, r, s);\r\n    }\r\n\r\n    /// @inheritdoc ISelfPermit\r\n    function selfPermitAllowed(\r\n        address token,\r\n        uint256 nonce,\r\n        uint256 expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public payable override {\r\n        IERC20PermitAllowed(token).permit(msg.sender, address(this), nonce, expiry, true, v, r, s);\r\n    }\r\n\r\n    /// @inheritdoc ISelfPermit\r\n    function selfPermitAllowedIfNecessary(\r\n        address token,\r\n        uint256 nonce,\r\n        uint256 expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external payable override {\r\n        if (IERC20(token).allowance(msg.sender, address(this)) < type(uint256).max)\r\n            selfPermitAllowed(token, nonce, expiry, v, r, s);\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/TransferHelper.sol\r\n\r\n\r\npragma solidity >=0.6.0;\r\n\r\n\r\nlibrary TransferHelper {\r\n    /// @notice Transfers tokens from the targeted address to the given destination\r\n    /// @notice Errors with 'STF' if transfer fails\r\n    /// @param token The contract address of the token to be transferred\r\n    /// @param from The originating address from which the tokens will be transferred\r\n    /// @param to The destination address of the transfer\r\n    /// @param value The amount to be transferred\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\r\n    }\r\n\r\n    /// @notice Transfers tokens from msg.sender to a recipient\r\n    /// @dev Errors with ST if transfer fails\r\n    /// @param token The contract address of the token which will be transferred\r\n    /// @param to The recipient of the transfer\r\n    /// @param value The value of the transfer\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\r\n    }\r\n\r\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\r\n    /// @dev Errors with 'SA' if transfer fails\r\n    /// @param token The contract address of the token to be approved\r\n    /// @param to The target of the approval\r\n    /// @param value The amount of the given token the target will be allowed to spend\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\r\n    }\r\n\r\n    /// @notice Transfers ETH to the recipient address\r\n    /// @dev Fails with `STE`\r\n    /// @param to The destination of the transfer\r\n    /// @param value The value to be transferred\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, 'STE');\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/external/IWETH9.sol\r\n\r\n\r\npragma solidity =0.7.6;\r\n\r\n\r\n/// @title Interface for WETH9\r\ninterface IWETH9 is IERC20 {\r\n    /// @notice Deposit ether to get wrapped ether\r\n    function deposit() external payable;\r\n\r\n    /// @notice Withdraw wrapped ether to get ether\r\n    function withdraw(uint256) external;\r\n}\r\n\r\n// File: contracts/base/BlockTimestamp.sol\r\n\r\n\r\npragma solidity =0.7.6;\r\n\r\n/// @title Function for getting block timestamp\r\n/// @dev Base contract that is overridden for tests\r\nabstract contract BlockTimestamp {\r\n    /// @dev Method that exists purely to be overridden for tests\r\n    /// @return The current block timestamp\r\n    function _blockTimestamp() internal view virtual returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n}\r\n\r\n// File: contracts/base/PeripheryValidation.sol\r\n\r\n\r\npragma solidity =0.7.6;\r\n\r\n\r\nabstract contract PeripheryValidation is BlockTimestamp {\r\n    modifier checkDeadline(uint256 deadline) {\r\n        require(_blockTimestamp() <= deadline, 'Transaction too old');\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IPeripheryImmutableState.sol\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Immutable state\r\n/// @notice Functions that return immutable state of the router\r\ninterface IPeripheryImmutableState {\r\n    /// @return Returns the address of the Uniswap V3 factory\r\n    function factory() external view returns (address);\r\n\r\n    /// @return Returns the address of WETH9\r\n    function WETH9() external view returns (address);\r\n}\r\n\r\n// File: contracts/base/PeripheryImmutableState.sol\r\n\r\n\r\npragma solidity =0.7.6;\r\n\r\n\r\n/// @title Immutable state\r\n/// @notice Immutable state used by periphery contracts\r\nabstract contract PeripheryImmutableState is IPeripheryImmutableState {\r\n    /// @inheritdoc IPeripheryImmutableState\r\n    address public immutable override factory;\r\n    /// @inheritdoc IPeripheryImmutableState\r\n    address public immutable override WETH9;\r\n\r\n    constructor(address _factory, address _WETH9) {\r\n        factory = _factory;\r\n        WETH9 = _WETH9;\r\n    }\r\n}\r\n\r\n// File: contracts/base/PeripheryPayments.sol\r\n\r\n\r\npragma solidity >=0.7.5;\r\n\r\n\r\n\r\n\r\n\r\n\r\nabstract contract PeripheryPayments is IPeripheryPayments, PeripheryImmutableState {\r\n    receive() external payable {\r\n        require(msg.sender == WETH9, 'Not WETH9');\r\n    }\r\n\r\n    /// @inheritdoc IPeripheryPayments\r\n    function unwrapWETH9(uint256 amountMinimum, address recipient) public payable override {\r\n        uint256 balanceWETH9 = IWETH9(WETH9).balanceOf(address(this));\r\n        require(balanceWETH9 >= amountMinimum, 'Insufficient WETH9');\r\n\r\n        if (balanceWETH9 > 0) {\r\n            IWETH9(WETH9).withdraw(balanceWETH9);\r\n            TransferHelper.safeTransferETH(recipient, balanceWETH9);\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc IPeripheryPayments\r\n    function sweepToken(\r\n        address token,\r\n        uint256 amountMinimum,\r\n        address recipient\r\n    ) public payable override {\r\n        uint256 balanceToken = IERC20(token).balanceOf(address(this));\r\n        require(balanceToken >= amountMinimum, 'Insufficient token');\r\n\r\n        if (balanceToken > 0) {\r\n            TransferHelper.safeTransfer(token, recipient, balanceToken);\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc IPeripheryPayments\r\n    function refundETH() external payable override {\r\n        if (address(this).balance > 0) TransferHelper.safeTransferETH(msg.sender, address(this).balance);\r\n    }\r\n\r\n    /// @param token The token to pay\r\n    /// @param payer The entity that must pay\r\n    /// @param recipient The entity that will receive payment\r\n    /// @param value The amount to pay\r\n    function pay(\r\n        address token,\r\n        address payer,\r\n        address recipient,\r\n        uint256 value\r\n    ) internal {\r\n        if (token == WETH9 && address(this).balance >= value) {\r\n            // pay with WETH9\r\n            IWETH9(WETH9).deposit{value: value}(); // wrap only what is needed to pay\r\n            IWETH9(WETH9).transfer(recipient, value);\r\n        } else if (payer == address(this)) {\r\n            // pay with tokens already in the contract (for the exact input multihop case)\r\n            TransferHelper.safeTransfer(token, recipient, value);\r\n        } else {\r\n            // pull payment\r\n            TransferHelper.safeTransferFrom(token, payer, recipient, value);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/base/PeripheryPaymentsWithFee.sol\r\n\r\n\r\npragma solidity >=0.7.5;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nabstract contract PeripheryPaymentsWithFee is PeripheryPayments, IPeripheryPaymentsWithFee {\r\n    using LowGasSafeMath for uint256;\r\n\r\n    /// @inheritdoc IPeripheryPaymentsWithFee\r\n    function unwrapWETH9WithFee(\r\n        uint256 amountMinimum,\r\n        address recipient,\r\n        uint256 feeBips,\r\n        address feeRecipient\r\n    ) public payable override {\r\n        require(feeBips > 0 && feeBips <= 100);\r\n\r\n        uint256 balanceWETH9 = IWETH9(WETH9).balanceOf(address(this));\r\n        require(balanceWETH9 >= amountMinimum, 'Insufficient WETH9');\r\n\r\n        if (balanceWETH9 > 0) {\r\n            IWETH9(WETH9).withdraw(balanceWETH9);\r\n            uint256 feeAmount = balanceWETH9.mul(feeBips) / 10_000;\r\n            if (feeAmount > 0) TransferHelper.safeTransferETH(feeRecipient, feeAmount);\r\n            TransferHelper.safeTransferETH(recipient, balanceWETH9 - feeAmount);\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc IPeripheryPaymentsWithFee\r\n    function sweepTokenWithFee(\r\n        address token,\r\n        uint256 amountMinimum,\r\n        address recipient,\r\n        uint256 feeBips,\r\n        address feeRecipient\r\n    ) public payable override {\r\n        require(feeBips > 0 && feeBips <= 100);\r\n\r\n        uint256 balanceToken = IERC20(token).balanceOf(address(this));\r\n        require(balanceToken >= amountMinimum, 'Insufficient token');\r\n\r\n        if (balanceToken > 0) {\r\n            uint256 feeAmount = balanceToken.mul(feeBips) / 10_000;\r\n            if (feeAmount > 0) TransferHelper.safeTransfer(token, feeRecipient, feeAmount);\r\n            TransferHelper.safeTransfer(token, recipient, balanceToken - feeAmount);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @thinkincoin-libs/uniswap-v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Callback for IUniswapV3PoolActions#swap\r\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\r\ninterface IUniswapV3SwapCallback {\r\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\r\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\r\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\r\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\r\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\r\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\r\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\r\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\r\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\r\n    function uniswapV3SwapCallback(\r\n        int256 amount0Delta,\r\n        int256 amount1Delta,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: contracts/interfaces/ISwapRouter.sol\r\n\r\n\r\npragma solidity >=0.7.5;\r\n\r\n\r\n/// @title Router token swapping functionality\r\n/// @notice Functions for swapping tokens via Uniswap V3\r\ninterface ISwapRouter is IUniswapV3SwapCallback {\r\n    struct ExactInputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\r\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\r\n    /// @return amountOut The amount of the received token\r\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\r\n\r\n    struct ExactInputParams {\r\n        bytes path;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n    }\r\n\r\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\r\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\r\n    /// @return amountOut The amount of the received token\r\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\r\n\r\n    struct ExactOutputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountOut;\r\n        uint256 amountInMaximum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\r\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\r\n    /// @return amountIn The amount of the input token\r\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\r\n\r\n    struct ExactOutputParams {\r\n        bytes path;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountOut;\r\n        uint256 amountInMaximum;\r\n    }\r\n\r\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\r\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\r\n    /// @return amountIn The amount of the input token\r\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\r\n}\r\n\r\n// File: @thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Events emitted by a pool\r\n/// @notice Contains all events emitted by the pool\r\ninterface IUniswapV3PoolEvents {\r\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\r\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\r\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\r\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\r\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\r\n\r\n    /// @notice Emitted when liquidity is minted for a given position\r\n    /// @param sender The address that minted the liquidity\r\n    /// @param owner The owner of the position and recipient of any minted liquidity\r\n    /// @param tickLower The lower tick of the position\r\n    /// @param tickUpper The upper tick of the position\r\n    /// @param amount The amount of liquidity minted to the position range\r\n    /// @param amount0 How much token0 was required for the minted liquidity\r\n    /// @param amount1 How much token1 was required for the minted liquidity\r\n    event Mint(\r\n        address sender,\r\n        address indexed owner,\r\n        int24 indexed tickLower,\r\n        int24 indexed tickUpper,\r\n        uint128 amount,\r\n        uint256 amount0,\r\n        uint256 amount1\r\n    );\r\n\r\n    /// @notice Emitted when fees are collected by the owner of a position\r\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\r\n    /// @param owner The owner of the position for which fees are collected\r\n    /// @param tickLower The lower tick of the position\r\n    /// @param tickUpper The upper tick of the position\r\n    /// @param amount0 The amount of token0 fees collected\r\n    /// @param amount1 The amount of token1 fees collected\r\n    event Collect(\r\n        address indexed owner,\r\n        address recipient,\r\n        int24 indexed tickLower,\r\n        int24 indexed tickUpper,\r\n        uint128 amount0,\r\n        uint128 amount1\r\n    );\r\n\r\n    /// @notice Emitted when a position's liquidity is removed\r\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\r\n    /// @param owner The owner of the position for which liquidity is removed\r\n    /// @param tickLower The lower tick of the position\r\n    /// @param tickUpper The upper tick of the position\r\n    /// @param amount The amount of liquidity to remove\r\n    /// @param amount0 The amount of token0 withdrawn\r\n    /// @param amount1 The amount of token1 withdrawn\r\n    event Burn(\r\n        address indexed owner,\r\n        int24 indexed tickLower,\r\n        int24 indexed tickUpper,\r\n        uint128 amount,\r\n        uint256 amount0,\r\n        uint256 amount1\r\n    );\r\n\r\n    /// @notice Emitted by the pool for any swaps between token0 and token1\r\n    /// @param sender The address that initiated the swap call, and that received the callback\r\n    /// @param recipient The address that received the output of the swap\r\n    /// @param amount0 The delta of the token0 balance of the pool\r\n    /// @param amount1 The delta of the token1 balance of the pool\r\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\r\n    /// @param liquidity The liquidity of the pool after the swap\r\n    /// @param tick The log base 1.0001 of price of the pool after the swap\r\n    event Swap(\r\n        address indexed sender,\r\n        address indexed recipient,\r\n        int256 amount0,\r\n        int256 amount1,\r\n        uint160 sqrtPriceX96,\r\n        uint128 liquidity,\r\n        int24 tick\r\n    );\r\n\r\n    /// @notice Emitted by the pool for any flashes of token0/token1\r\n    /// @param sender The address that initiated the swap call, and that received the callback\r\n    /// @param recipient The address that received the tokens from flash\r\n    /// @param amount0 The amount of token0 that was flashed\r\n    /// @param amount1 The amount of token1 that was flashed\r\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\r\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\r\n    event Flash(\r\n        address indexed sender,\r\n        address indexed recipient,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        uint256 paid0,\r\n        uint256 paid1\r\n    );\r\n\r\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\r\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\r\n    /// just before a mint/swap/burn.\r\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\r\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\r\n    event IncreaseObservationCardinalityNext(\r\n        uint16 observationCardinalityNextOld,\r\n        uint16 observationCardinalityNextNew\r\n    );\r\n\r\n    /// @notice Emitted when the protocol fee is changed by the pool\r\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\r\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\r\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\r\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\r\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\r\n\r\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\r\n    /// @param sender The address that collects the protocol fees\r\n    /// @param recipient The address that receives the collected protocol fees\r\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\r\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\r\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\r\n}\r\n\r\n// File: @thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Permissioned pool actions\r\n/// @notice Contains pool methods that may only be called by the factory owner\r\ninterface IUniswapV3PoolOwnerActions {\r\n    /// @notice Set the denominator of the protocol's % share of the fees\r\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\r\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\r\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\r\n\r\n    /// @notice Collect the protocol fee accrued to the pool\r\n    /// @param recipient The address to which collected protocol fees should be sent\r\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\r\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\r\n    /// @return amount0 The protocol fee collected in token0\r\n    /// @return amount1 The protocol fee collected in token1\r\n    function collectProtocol(\r\n        address recipient,\r\n        uint128 amount0Requested,\r\n        uint128 amount1Requested\r\n    ) external returns (uint128 amount0, uint128 amount1);\r\n}\r\n\r\n// File: @thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Permissionless pool actions\r\n/// @notice Contains pool methods that can be called by anyone\r\ninterface IUniswapV3PoolActions {\r\n    /// @notice Sets the initial price for the pool\r\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\r\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\r\n    function initialize(uint160 sqrtPriceX96) external;\r\n\r\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\r\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\r\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\r\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\r\n    /// @param recipient The address for which the liquidity will be created\r\n    /// @param tickLower The lower tick of the position in which to add liquidity\r\n    /// @param tickUpper The upper tick of the position in which to add liquidity\r\n    /// @param amount The amount of liquidity to mint\r\n    /// @param data Any data that should be passed through to the callback\r\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\r\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\r\n    function mint(\r\n        address recipient,\r\n        int24 tickLower,\r\n        int24 tickUpper,\r\n        uint128 amount,\r\n        bytes calldata data\r\n    ) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    /// @notice Collects tokens owed to a position\r\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\r\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\r\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\r\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\r\n    /// @param recipient The address which should receive the fees collected\r\n    /// @param tickLower The lower tick of the position for which to collect fees\r\n    /// @param tickUpper The upper tick of the position for which to collect fees\r\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\r\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\r\n    /// @return amount0 The amount of fees collected in token0\r\n    /// @return amount1 The amount of fees collected in token1\r\n    function collect(\r\n        address recipient,\r\n        int24 tickLower,\r\n        int24 tickUpper,\r\n        uint128 amount0Requested,\r\n        uint128 amount1Requested\r\n    ) external returns (uint128 amount0, uint128 amount1);\r\n\r\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\r\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\r\n    /// @dev Fees must be collected separately via a call to #collect\r\n    /// @param tickLower The lower tick of the position for which to burn liquidity\r\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\r\n    /// @param amount How much liquidity to burn\r\n    /// @return amount0 The amount of token0 sent to the recipient\r\n    /// @return amount1 The amount of token1 sent to the recipient\r\n    function burn(\r\n        int24 tickLower,\r\n        int24 tickUpper,\r\n        uint128 amount\r\n    ) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    /// @notice Swap token0 for token1, or token1 for token0\r\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\r\n    /// @param recipient The address to receive the output of the swap\r\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\r\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\r\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\r\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\r\n    /// @param data Any data to be passed through to the callback\r\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\r\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\r\n    function swap(\r\n        address recipient,\r\n        bool zeroForOne,\r\n        int256 amountSpecified,\r\n        uint160 sqrtPriceLimitX96,\r\n        bytes calldata data\r\n    ) external returns (int256 amount0, int256 amount1);\r\n\r\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\r\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\r\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\r\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\r\n    /// @param recipient The address which will receive the token0 and token1 amounts\r\n    /// @param amount0 The amount of token0 to send\r\n    /// @param amount1 The amount of token1 to send\r\n    /// @param data Any data to be passed through to the callback\r\n    function flash(\r\n        address recipient,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\r\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\r\n    /// the input observationCardinalityNext.\r\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\r\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\r\n}\r\n\r\n// File: @thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Pool state that is not stored\r\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\r\n/// blockchain. The functions here may have variable gas costs.\r\ninterface IUniswapV3PoolDerivedState {\r\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\r\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\r\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\r\n    /// you must call it with secondsAgos = [3600, 0].\r\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\r\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\r\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\r\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\r\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\r\n    /// timestamp\r\n    function observe(uint32[] calldata secondsAgos)\r\n        external\r\n        view\r\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\r\n\r\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\r\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\r\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\r\n    /// snapshot is taken and the second snapshot is taken.\r\n    /// @param tickLower The lower tick of the range\r\n    /// @param tickUpper The upper tick of the range\r\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\r\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\r\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\r\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\r\n        external\r\n        view\r\n        returns (\r\n            int56 tickCumulativeInside,\r\n            uint160 secondsPerLiquidityInsideX128,\r\n            uint32 secondsInside\r\n        );\r\n}\r\n\r\n// File: @thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Pool state that can change\r\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\r\n/// per transaction\r\ninterface IUniswapV3PoolState {\r\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\r\n    /// when accessed externally.\r\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\r\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\r\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\r\n    /// boundary.\r\n    /// observationIndex The index of the last oracle observation that was written,\r\n    /// observationCardinality The current maximum number of observations stored in the pool,\r\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\r\n    /// feeProtocol The protocol fee for both tokens of the pool.\r\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\r\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\r\n    /// unlocked Whether the pool is currently locked to reentrancy\r\n    function slot0()\r\n        external\r\n        view\r\n        returns (\r\n            uint160 sqrtPriceX96,\r\n            int24 tick,\r\n            uint16 observationIndex,\r\n            uint16 observationCardinality,\r\n            uint16 observationCardinalityNext,\r\n            uint8 feeProtocol,\r\n            bool unlocked\r\n        );\r\n\r\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\r\n    /// @dev This value can overflow the uint256\r\n    function feeGrowthGlobal0X128() external view returns (uint256);\r\n\r\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\r\n    /// @dev This value can overflow the uint256\r\n    function feeGrowthGlobal1X128() external view returns (uint256);\r\n\r\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\r\n    /// @dev Protocol fees will never exceed uint128 max in either token\r\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\r\n\r\n    /// @notice The currently in range liquidity available to the pool\r\n    /// @dev This value has no relationship to the total liquidity across all ticks\r\n    function liquidity() external view returns (uint128);\r\n\r\n    /// @notice Look up information about a specific tick in the pool\r\n    /// @param tick The tick to look up\r\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\r\n    /// tick upper,\r\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\r\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\r\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\r\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\r\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\r\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\r\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\r\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\r\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\r\n    /// a specific position.\r\n    function ticks(int24 tick)\r\n        external\r\n        view\r\n        returns (\r\n            uint128 liquidityGross,\r\n            int128 liquidityNet,\r\n            uint256 feeGrowthOutside0X128,\r\n            uint256 feeGrowthOutside1X128,\r\n            int56 tickCumulativeOutside,\r\n            uint160 secondsPerLiquidityOutsideX128,\r\n            uint32 secondsOutside,\r\n            bool initialized\r\n        );\r\n\r\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\r\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\r\n\r\n    /// @notice Returns the information about a position by the position's key\r\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\r\n    /// @return _liquidity The amount of liquidity in the position,\r\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\r\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\r\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\r\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\r\n    function positions(bytes32 key)\r\n        external\r\n        view\r\n        returns (\r\n            uint128 _liquidity,\r\n            uint256 feeGrowthInside0LastX128,\r\n            uint256 feeGrowthInside1LastX128,\r\n            uint128 tokensOwed0,\r\n            uint128 tokensOwed1\r\n        );\r\n\r\n    /// @notice Returns data about a specific observation index\r\n    /// @param index The element of the observations array to fetch\r\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\r\n    /// ago, rather than at a specific index in the array.\r\n    /// @return blockTimestamp The timestamp of the observation,\r\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\r\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\r\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\r\n    function observations(uint256 index)\r\n        external\r\n        view\r\n        returns (\r\n            uint32 blockTimestamp,\r\n            int56 tickCumulative,\r\n            uint160 secondsPerLiquidityCumulativeX128,\r\n            bool initialized\r\n        );\r\n}\r\n\r\n// File: @thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Pool state that never changes\r\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\r\ninterface IUniswapV3PoolImmutables {\r\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\r\n    /// @return The contract address\r\n    function factory() external view returns (address);\r\n\r\n    /// @notice The first of the two tokens of the pool, sorted by address\r\n    /// @return The token contract address\r\n    function token0() external view returns (address);\r\n\r\n    /// @notice The second of the two tokens of the pool, sorted by address\r\n    /// @return The token contract address\r\n    function token1() external view returns (address);\r\n\r\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\r\n    /// @return The fee\r\n    function fee() external view returns (uint24);\r\n\r\n    /// @notice The pool tick spacing\r\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\r\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\r\n    /// This value is an int24 to avoid casting even though it is always positive.\r\n    /// @return The tick spacing\r\n    function tickSpacing() external view returns (int24);\r\n\r\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\r\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\r\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\r\n    /// @return The max amount of liquidity per tick\r\n    function maxLiquidityPerTick() external view returns (uint128);\r\n}\r\n\r\n// File: @thinkincoin-libs/uniswap-v3-core/contracts/interfaces/IUniswapV3Pool.sol\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title The interface for a Uniswap V3 Pool\r\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\r\n/// to the ERC20 specification\r\n/// @dev The pool interface is broken up into many smaller pieces\r\ninterface IUniswapV3Pool is\r\n    IUniswapV3PoolImmutables,\r\n    IUniswapV3PoolState,\r\n    IUniswapV3PoolDerivedState,\r\n    IUniswapV3PoolActions,\r\n    IUniswapV3PoolOwnerActions,\r\n    IUniswapV3PoolEvents\r\n{\r\n\r\n}\r\n\r\n// File: contracts/libraries/CallbackValidation.sol\r\n\r\n\r\npragma solidity =0.7.6;\r\n\r\n\r\n\r\n/// @notice Provides validation for callbacks from Uniswap V3 Pools\r\nlibrary CallbackValidation {\r\n    /// @notice Returns the address of a valid Uniswap V3 Pool\r\n    /// @param factory The contract address of the Uniswap V3 factory\r\n    /// @param tokenA The contract address of either token0 or token1\r\n    /// @param tokenB The contract address of the other token\r\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\r\n    /// @return pool The V3 pool contract address\r\n    function verifyCallback(\r\n        address factory,\r\n        address tokenA,\r\n        address tokenB,\r\n        uint24 fee\r\n    ) internal view returns (IUniswapV3Pool pool) {\r\n        return verifyCallback(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee));\r\n    }\r\n\r\n    /// @notice Returns the address of a valid Uniswap V3 Pool\r\n    /// @param factory The contract address of the Uniswap V3 factory\r\n    /// @param poolKey The identifying key of the V3 pool\r\n    /// @return pool The V3 pool contract address\r\n    function verifyCallback(address factory, PoolAddress.PoolKey memory poolKey)\r\n        internal\r\n        view\r\n        returns (IUniswapV3Pool pool)\r\n    {\r\n        pool = IUniswapV3Pool(PoolAddress.computeAddress(factory, poolKey));\r\n        require(msg.sender == address(pool));\r\n    }\r\n}\r\n\r\n// File: @thinkincoin-libs/uniswap-v3-core/contracts/libraries/TickMath.sol\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Math library for computing sqrt prices from ticks and vice versa\r\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\r\n/// prices between 2**-128 and 2**128\r\nlibrary TickMath {\r\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\r\n    int24 internal constant MIN_TICK = -887272;\r\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\r\n    int24 internal constant MAX_TICK = -MIN_TICK;\r\n\r\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\r\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\r\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\r\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\r\n\r\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\r\n    /// @dev Throws if |tick| > max tick\r\n    /// @param tick The input tick for the above formula\r\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\r\n    /// at the given tick\r\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\r\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\r\n        require(absTick <= uint256(MAX_TICK), 'T');\r\n\r\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\r\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\r\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\r\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\r\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\r\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\r\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\r\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\r\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\r\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\r\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\r\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\r\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\r\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\r\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\r\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\r\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\r\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\r\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\r\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\r\n\r\n        if (tick > 0) ratio = type(uint256).max / ratio;\r\n\r\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\r\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\r\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\r\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\r\n    }\r\n\r\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\r\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\r\n    /// ever return.\r\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\r\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\r\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\r\n        // second inequality must be < because the price can never reach the price at the max tick\r\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\r\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\r\n\r\n        uint256 r = ratio;\r\n        uint256 msb = 0;\r\n\r\n        assembly {\r\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(5, gt(r, 0xFFFFFFFF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(4, gt(r, 0xFFFF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(3, gt(r, 0xFF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(2, gt(r, 0xF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(1, gt(r, 0x3))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := gt(r, 0x1)\r\n            msb := or(msb, f)\r\n        }\r\n\r\n        if (msb >= 128) r = ratio >> (msb - 127);\r\n        else r = ratio << (127 - msb);\r\n\r\n        int256 log_2 = (int256(msb) - 128) << 64;\r\n\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(63, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(62, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(61, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(60, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(59, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(58, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(57, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(56, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(55, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(54, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(53, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(52, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(51, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(50, f))\r\n        }\r\n\r\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\r\n\r\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\r\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\r\n\r\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\r\n    }\r\n}\r\n\r\n// File: @thinkincoin-libs/uniswap-v3-core/contracts/libraries/SafeCast.sol\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Safe casting methods\r\n/// @notice Contains methods for safely casting between types\r\nlibrary SafeCast {\r\n    /// @notice Cast a uint256 to a uint160, revert on overflow\r\n    /// @param y The uint256 to be downcasted\r\n    /// @return z The downcasted integer, now type uint160\r\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\r\n        require((z = uint160(y)) == y);\r\n    }\r\n\r\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\r\n    /// @param y The int256 to be downcasted\r\n    /// @return z The downcasted integer, now type int128\r\n    function toInt128(int256 y) internal pure returns (int128 z) {\r\n        require((z = int128(y)) == y);\r\n    }\r\n\r\n    /// @notice Cast a uint256 to a int256, revert on overflow\r\n    /// @param y The uint256 to be casted\r\n    /// @return z The casted integer, now type int256\r\n    function toInt256(uint256 y) internal pure returns (int256 z) {\r\n        require(y < 2**255);\r\n        z = int256(y);\r\n    }\r\n}\r\n\r\n// File: contracts/SwapRouter.sol\r\n\r\n\r\npragma solidity =0.7.6;\r\npragma abicoder v2;\r\n\r\n/// @title Uniswap V3 Swap Router\r\n/// @notice Router for stateless execution of swaps against Uniswap V3\r\ncontract SwapRouter is\r\n    ISwapRouter,\r\n    PeripheryImmutableState,\r\n    PeripheryValidation,\r\n    PeripheryPaymentsWithFee,\r\n    Multicall,\r\n    SelfPermit\r\n{\r\n    using Path for bytes;\r\n    using SafeCast for uint256;\r\n\r\n    /// @dev Used as the placeholder value for amountInCached, because the computed amount in for an exact output swap\r\n    /// can never actually be this value\r\n    uint256 private constant DEFAULT_AMOUNT_IN_CACHED = type(uint256).max;\r\n\r\n    /// @dev Transient storage variable used for returning the computed amount in for an exact output swap.\r\n    uint256 private amountInCached = DEFAULT_AMOUNT_IN_CACHED;\r\n\r\n    constructor(address _factory, address _WETH9) PeripheryImmutableState(_factory, _WETH9) {}\r\n\r\n    /// @dev Returns the pool for the given token pair and fee. The pool contract may or may not exist.\r\n    function getPool(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint24 fee\r\n    ) private view returns (IUniswapV3Pool) {\r\n        return IUniswapV3Pool(PoolAddress.computeAddress(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee)));\r\n    }\r\n\r\n    struct SwapCallbackData {\r\n        bytes path;\r\n        address payer;\r\n    }\r\n\r\n    /// @inheritdoc IUniswapV3SwapCallback\r\n    function uniswapV3SwapCallback(\r\n        int256 amount0Delta,\r\n        int256 amount1Delta,\r\n        bytes calldata _data\r\n    ) external override {\r\n        require(amount0Delta > 0 || amount1Delta > 0); // swaps entirely within 0-liquidity regions are not supported\r\n        SwapCallbackData memory data = abi.decode(_data, (SwapCallbackData));\r\n        (address tokenIn, address tokenOut, uint24 fee) = data.path.decodeFirstPool();\r\n        CallbackValidation.verifyCallback(factory, tokenIn, tokenOut, fee);\r\n\r\n        (bool isExactInput, uint256 amountToPay) =\r\n            amount0Delta > 0\r\n                ? (tokenIn < tokenOut, uint256(amount0Delta))\r\n                : (tokenOut < tokenIn, uint256(amount1Delta));\r\n        if (isExactInput) {\r\n            pay(tokenIn, data.payer, msg.sender, amountToPay);\r\n        } else {\r\n            // either initiate the next swap or pay\r\n            if (data.path.hasMultiplePools()) {\r\n                data.path = data.path.skipToken();\r\n                exactOutputInternal(amountToPay, msg.sender, 0, data);\r\n            } else {\r\n                amountInCached = amountToPay;\r\n                tokenIn = tokenOut; // swap in/out because exact output swaps are reversed\r\n                pay(tokenIn, data.payer, msg.sender, amountToPay);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Performs a single exact input swap\r\n    function exactInputInternal(\r\n        uint256 amountIn,\r\n        address recipient,\r\n        uint160 sqrtPriceLimitX96,\r\n        SwapCallbackData memory data\r\n    ) private returns (uint256 amountOut) {\r\n        // allow swapping to the router address with address 0\r\n        if (recipient == address(0)) recipient = address(this);\r\n\r\n        (address tokenIn, address tokenOut, uint24 fee) = data.path.decodeFirstPool();\r\n\r\n        bool zeroForOne = tokenIn < tokenOut;\r\n\r\n        (int256 amount0, int256 amount1) =\r\n            getPool(tokenIn, tokenOut, fee).swap(\r\n                recipient,\r\n                zeroForOne,\r\n                amountIn.toInt256(),\r\n                sqrtPriceLimitX96 == 0\r\n                    ? (zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1)\r\n                    : sqrtPriceLimitX96,\r\n                abi.encode(data)\r\n            );\r\n\r\n        return uint256(-(zeroForOne ? amount1 : amount0));\r\n    }\r\n\r\n    /// @inheritdoc ISwapRouter\r\n    function exactInputSingle(ExactInputSingleParams calldata params)\r\n        external\r\n        payable\r\n        override\r\n        checkDeadline(params.deadline)\r\n        returns (uint256 amountOut)\r\n    {\r\n        amountOut = exactInputInternal(\r\n            params.amountIn,\r\n            params.recipient,\r\n            params.sqrtPriceLimitX96,\r\n            SwapCallbackData({path: abi.encodePacked(params.tokenIn, params.fee, params.tokenOut), payer: msg.sender})\r\n        );\r\n        require(amountOut >= params.amountOutMinimum, 'Too little received');\r\n    }\r\n\r\n    /// @inheritdoc ISwapRouter\r\n    function exactInput(ExactInputParams memory params)\r\n        external\r\n        payable\r\n        override\r\n        checkDeadline(params.deadline)\r\n        returns (uint256 amountOut)\r\n    {\r\n        address payer = msg.sender; // msg.sender pays for the first hop\r\n\r\n        while (true) {\r\n            bool hasMultiplePools = params.path.hasMultiplePools();\r\n\r\n            // the outputs of prior swaps become the inputs to subsequent ones\r\n            params.amountIn = exactInputInternal(\r\n                params.amountIn,\r\n                hasMultiplePools ? address(this) : params.recipient, // for intermediate swaps, this contract custodies\r\n                0,\r\n                SwapCallbackData({\r\n                    path: params.path.getFirstPool(), // only the first pool in the path is necessary\r\n                    payer: payer\r\n                })\r\n            );\r\n\r\n            // decide whether to continue or terminate\r\n            if (hasMultiplePools) {\r\n                payer = address(this); // at this point, the caller has paid\r\n                params.path = params.path.skipToken();\r\n            } else {\r\n                amountOut = params.amountIn;\r\n                break;\r\n            }\r\n        }\r\n\r\n        require(amountOut >= params.amountOutMinimum, 'Too little received');\r\n    }\r\n\r\n    /// @dev Performs a single exact output swap\r\n    function exactOutputInternal(\r\n        uint256 amountOut,\r\n        address recipient,\r\n        uint160 sqrtPriceLimitX96,\r\n        SwapCallbackData memory data\r\n    ) private returns (uint256 amountIn) {\r\n        // allow swapping to the router address with address 0\r\n        if (recipient == address(0)) recipient = address(this);\r\n\r\n        (address tokenOut, address tokenIn, uint24 fee) = data.path.decodeFirstPool();\r\n\r\n        bool zeroForOne = tokenIn < tokenOut;\r\n\r\n        (int256 amount0Delta, int256 amount1Delta) =\r\n            getPool(tokenIn, tokenOut, fee).swap(\r\n                recipient,\r\n                zeroForOne,\r\n                -amountOut.toInt256(),\r\n                sqrtPriceLimitX96 == 0\r\n                    ? (zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1)\r\n                    : sqrtPriceLimitX96,\r\n                abi.encode(data)\r\n            );\r\n\r\n        uint256 amountOutReceived;\r\n        (amountIn, amountOutReceived) = zeroForOne\r\n            ? (uint256(amount0Delta), uint256(-amount1Delta))\r\n            : (uint256(amount1Delta), uint256(-amount0Delta));\r\n        // it's technically possible to not receive the full output amount,\r\n        // so if no price limit has been specified, require this possibility away\r\n        if (sqrtPriceLimitX96 == 0) require(amountOutReceived == amountOut);\r\n    }\r\n\r\n    /// @inheritdoc ISwapRouter\r\n    function exactOutputSingle(ExactOutputSingleParams calldata params)\r\n        external\r\n        payable\r\n        override\r\n        checkDeadline(params.deadline)\r\n        returns (uint256 amountIn)\r\n    {\r\n        // avoid an SLOAD by using the swap return data\r\n        amountIn = exactOutputInternal(\r\n            params.amountOut,\r\n            params.recipient,\r\n            params.sqrtPriceLimitX96,\r\n            SwapCallbackData({path: abi.encodePacked(params.tokenOut, params.fee, params.tokenIn), payer: msg.sender})\r\n        );\r\n\r\n        require(amountIn <= params.amountInMaximum, 'Too much requested');\r\n        // has to be reset even though we don't use it in the single hop case\r\n        amountInCached = DEFAULT_AMOUNT_IN_CACHED;\r\n    }\r\n\r\n    /// @inheritdoc ISwapRouter\r\n    function exactOutput(ExactOutputParams calldata params)\r\n        external\r\n        payable\r\n        override\r\n        checkDeadline(params.deadline)\r\n        returns (uint256 amountIn)\r\n    {\r\n        // it's okay that the payer is fixed to msg.sender here, as they're only paying for the \"final\" exact output\r\n        // swap, which happens first, and subsequent swaps are paid for within nested callback frames\r\n        exactOutputInternal(\r\n            params.amountOut,\r\n            params.recipient,\r\n            0,\r\n            SwapCallbackData({path: params.path, payer: msg.sender})\r\n        );\r\n\r\n        amountIn = amountInCached;\r\n        require(amountIn <= params.amountInMaximum, 'Too much requested');\r\n        amountInCached = DEFAULT_AMOUNT_IN_CACHED;\r\n    }\r\n}\r\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/SwapRouter_flattened.sol": {
				"BlockTimestamp": {
					"abi": [],
					"devdoc": {
						"details": "Base contract that is overridden for tests",
						"kind": "dev",
						"methods": {},
						"title": "Function for getting block timestamp",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Base contract that is overridden for tests\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Function for getting block timestamp\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapRouter_flattened.sol\":\"BlockTimestamp\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SwapRouter_flattened.sol\":{\"keccak256\":\"0xcf1b41bf0cccca5e629d64d60c6017a4d9216bcfc15f13cb44666bd333a64622\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb61746d170c341525404f902539ab06649109533f6db310ef3e0a39dfb00566\",\"dweb:/ipfs/QmWDhgoTVqeFhBxaK5cLCCmbL27rHHo48r8YnN3cLcfpmu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"BytesLib": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/SwapRouter_flattened.sol\":2307:6222  library BytesLib {\r... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/SwapRouter_flattened.sol\":2307:6222  library BytesLib {\r... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220db4fdf6f71f3aef661113073ff897e7e23ea8e7aeaaff6d25ace06d3d403e4f564736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220db4fdf6f71f3aef661113073ff897e7e23ea8e7aeaaff6d25ace06d3d403e4f564736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDB 0x4F 0xDF PUSH16 0x71F3AEF661113073FF897E7E23EA8E7A 0xEA 0xAF 0xF6 0xD2 GAS 0xCE MOD 0xD3 0xD4 SUB 0xE4 CREATE2 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "2307:3915:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220db4fdf6f71f3aef661113073ff897e7e23ea8e7aeaaff6d25ace06d3d403e4f564736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDB 0x4F 0xDF PUSH16 0x71F3AEF661113073FF897E7E23EA8E7A 0xEA 0xAF 0xF6 0xD2 GAS 0xCE MOD 0xD3 0xD4 SUB 0xE4 CREATE2 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "2307:3915:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"slice(bytes memory,uint256,uint256)": "infinite",
								"toAddress(bytes memory,uint256)": "infinite",
								"toUint24(bytes memory,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 2307,
									"end": 6222,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 2307,
									"end": 6222,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 2307,
									"end": 6222,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 2307,
									"end": 6222,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 2307,
									"end": 6222,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 2307,
									"end": 6222,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 2307,
									"end": 6222,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 2307,
									"end": 6222,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2307,
									"end": 6222,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2307,
									"end": 6222,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2307,
									"end": 6222,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 2307,
									"end": 6222,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 2307,
									"end": 6222,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 2307,
									"end": 6222,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 2307,
									"end": 6222,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 2307,
									"end": 6222,
									"name": "INVALID",
									"source": 0
								},
								{
									"begin": 2307,
									"end": 6222,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 2307,
									"end": 6222,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2307,
									"end": 6222,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 2307,
									"end": 6222,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2307,
									"end": 6222,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 2307,
									"end": 6222,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 2307,
									"end": 6222,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2307,
									"end": 6222,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 2307,
									"end": 6222,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 2307,
									"end": 6222,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2307,
									"end": 6222,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220db4fdf6f71f3aef661113073ff897e7e23ea8e7aeaaff6d25ace06d3d403e4f564736f6c63430007060033",
									".code": [
										{
											"begin": 2307,
											"end": 6222,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 2307,
											"end": 6222,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 2307,
											"end": 6222,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2307,
											"end": 6222,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 2307,
											"end": 6222,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2307,
											"end": 6222,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2307,
											"end": 6222,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2307,
											"end": 6222,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2307,
											"end": 6222,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapRouter_flattened.sol\":\"BytesLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SwapRouter_flattened.sol\":{\"keccak256\":\"0xcf1b41bf0cccca5e629d64d60c6017a4d9216bcfc15f13cb44666bd333a64622\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb61746d170c341525404f902539ab06649109533f6db310ef3e0a39dfb00566\",\"dweb:/ipfs/QmWDhgoTVqeFhBxaK5cLCCmbL27rHHo48r8YnN3cLcfpmu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"CallbackValidation": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/SwapRouter_flattened.sol\":65732:66996  library CallbackValidation {\r... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/SwapRouter_flattened.sol\":65732:66996  library CallbackValidation {\r... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212205c3a6b42b48b1f3e71fcdfbdedde4cfaf68f8bcba3909930823ec3da66754e7c64736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205c3a6b42b48b1f3e71fcdfbdedde4cfaf68f8bcba3909930823ec3da66754e7c64736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5C GASPRICE PUSH12 0x42B48B1F3E71FCDFBDEDDE4C STATICCALL 0xF6 DUP16 DUP12 0xCB LOG3 SWAP1 SWAP10 ADDRESS DUP3 RETURNDATACOPY 0xC3 0xDA PUSH7 0x754E7C64736F6C PUSH4 0x43000706 STOP CALLER ",
							"sourceMap": "65732:1264:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205c3a6b42b48b1f3e71fcdfbdedde4cfaf68f8bcba3909930823ec3da66754e7c64736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5C GASPRICE PUSH12 0x42B48B1F3E71FCDFBDEDDE4C STATICCALL 0xF6 DUP16 DUP12 0xCB LOG3 SWAP1 SWAP10 ADDRESS DUP3 RETURNDATACOPY 0xC3 0xDA PUSH7 0x754E7C64736F6C PUSH4 0x43000706 STOP CALLER ",
							"sourceMap": "65732:1264:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"verifyCallback(address,address,address,uint24)": "infinite",
								"verifyCallback(address,struct PoolAddress.PoolKey memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 65732,
									"end": 66996,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 65732,
									"end": 66996,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 65732,
									"end": 66996,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 65732,
									"end": 66996,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 65732,
									"end": 66996,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 65732,
									"end": 66996,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 65732,
									"end": 66996,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 65732,
									"end": 66996,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 65732,
									"end": 66996,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 65732,
									"end": 66996,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 65732,
									"end": 66996,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 65732,
									"end": 66996,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 65732,
									"end": 66996,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 65732,
									"end": 66996,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 65732,
									"end": 66996,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 65732,
									"end": 66996,
									"name": "INVALID",
									"source": 0
								},
								{
									"begin": 65732,
									"end": 66996,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 65732,
									"end": 66996,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 65732,
									"end": 66996,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 65732,
									"end": 66996,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 65732,
									"end": 66996,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 65732,
									"end": 66996,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 65732,
									"end": 66996,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 65732,
									"end": 66996,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 65732,
									"end": 66996,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 65732,
									"end": 66996,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 65732,
									"end": 66996,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212205c3a6b42b48b1f3e71fcdfbdedde4cfaf68f8bcba3909930823ec3da66754e7c64736f6c63430007060033",
									".code": [
										{
											"begin": 65732,
											"end": 66996,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 65732,
											"end": 66996,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 65732,
											"end": 66996,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 65732,
											"end": 66996,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 65732,
											"end": 66996,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 65732,
											"end": 66996,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 65732,
											"end": 66996,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 65732,
											"end": 66996,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 65732,
											"end": 66996,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Provides validation for callbacks from Uniswap V3 Pools\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapRouter_flattened.sol\":\"CallbackValidation\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SwapRouter_flattened.sol\":{\"keccak256\":\"0xcf1b41bf0cccca5e629d64d60c6017a4d9216bcfc15f13cb44666bd333a64622\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb61746d170c341525404f902539ab06649109533f6db310ef3e0a39dfb00566\",\"dweb:/ipfs/QmWDhgoTVqeFhBxaK5cLCCmbL27rHHo48r8YnN3cLcfpmu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Provides validation for callbacks from Uniswap V3 Pools",
						"version": 1
					}
				},
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapRouter_flattened.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SwapRouter_flattened.sol\":{\"keccak256\":\"0xcf1b41bf0cccca5e629d64d60c6017a4d9216bcfc15f13cb44666bd333a64622\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb61746d170c341525404f902539ab06649109533f6db310ef3e0a39dfb00566\",\"dweb:/ipfs/QmWDhgoTVqeFhBxaK5cLCCmbL27rHHo48r8YnN3cLcfpmu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over `owner`'s tokens, given `owner`'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over `owner`'s tokens, given `owner`'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapRouter_flattened.sol\":\"IERC20Permit\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SwapRouter_flattened.sol\":{\"keccak256\":\"0xcf1b41bf0cccca5e629d64d60c6017a4d9216bcfc15f13cb44666bd333a64622\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb61746d170c341525404f902539ab06649109533f6db310ef3e0a39dfb00566\",\"dweb:/ipfs/QmWDhgoTVqeFhBxaK5cLCCmbL27rHHo48r8YnN3cLcfpmu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC20PermitAllowed": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "holder",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "nonce",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "expiry",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "allowed",
									"type": "bool"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)": {
								"details": "This is the permit interface used by DAI and CHAI",
								"params": {
									"allowed": "Boolean that sets approval amount, true for type(uint256).max and false for 0",
									"expiry": "The timestamp at which the permit is no longer valid",
									"holder": "The address of the token holder, the token owner",
									"nonce": "The holder's nonce, increases at each call to permit",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"spender": "The address of the token spender",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							}
						},
						"title": "Interface for permit",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)": "8fcbaf0c"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)\":{\"details\":\"This is the permit interface used by DAI and CHAI\",\"params\":{\"allowed\":\"Boolean that sets approval amount, true for type(uint256).max and false for 0\",\"expiry\":\"The timestamp at which the permit is no longer valid\",\"holder\":\"The address of the token holder, the token owner\",\"nonce\":\"The holder's nonce, increases at each call to permit\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"spender\":\"The address of the token spender\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}}},\"title\":\"Interface for permit\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)\":{\"notice\":\"Approve the spender to spend some tokens via the holder signature\"}},\"notice\":\"Interface used by DAI/CHAI for permit\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapRouter_flattened.sol\":\"IERC20PermitAllowed\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SwapRouter_flattened.sol\":{\"keccak256\":\"0xcf1b41bf0cccca5e629d64d60c6017a4d9216bcfc15f13cb44666bd333a64622\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb61746d170c341525404f902539ab06649109533f6db310ef3e0a39dfb00566\",\"dweb:/ipfs/QmWDhgoTVqeFhBxaK5cLCCmbL27rHHo48r8YnN3cLcfpmu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)": {
								"notice": "Approve the spender to spend some tokens via the holder signature"
							}
						},
						"notice": "Interface used by DAI/CHAI for permit",
						"version": 1
					}
				},
				"IMulticall": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes[]",
									"name": "data",
									"type": "bytes[]"
								}
							],
							"name": "multicall",
							"outputs": [
								{
									"internalType": "bytes[]",
									"name": "results",
									"type": "bytes[]"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"multicall(bytes[])": {
								"details": "The `msg.value` should not be trusted for any method callable from multicall.",
								"params": {
									"data": "The encoded function data for each of the calls to make to this contract"
								},
								"returns": {
									"results": "The results from each of the calls passed in via data"
								}
							}
						},
						"title": "Multicall interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"multicall(bytes[])": "ac9650d8"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"multicall(bytes[])\":{\"details\":\"The `msg.value` should not be trusted for any method callable from multicall.\",\"params\":{\"data\":\"The encoded function data for each of the calls to make to this contract\"},\"returns\":{\"results\":\"The results from each of the calls passed in via data\"}}},\"title\":\"Multicall interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"multicall(bytes[])\":{\"notice\":\"Call multiple functions in the current contract and return the data from all of them if they all succeed\"}},\"notice\":\"Enables calling multiple methods in a single call to the contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapRouter_flattened.sol\":\"IMulticall\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SwapRouter_flattened.sol\":{\"keccak256\":\"0xcf1b41bf0cccca5e629d64d60c6017a4d9216bcfc15f13cb44666bd333a64622\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb61746d170c341525404f902539ab06649109533f6db310ef3e0a39dfb00566\",\"dweb:/ipfs/QmWDhgoTVqeFhBxaK5cLCCmbL27rHHo48r8YnN3cLcfpmu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"multicall(bytes[])": {
								"notice": "Call multiple functions in the current contract and return the data from all of them if they all succeed"
							}
						},
						"notice": "Enables calling multiple methods in a single call to the contract",
						"version": 1
					}
				},
				"IPeripheryImmutableState": {
					"abi": [
						{
							"inputs": [],
							"name": "WETH9",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"WETH9()": {
								"returns": {
									"_0": "Returns the address of WETH9"
								}
							},
							"factory()": {
								"returns": {
									"_0": "Returns the address of the Uniswap V3 factory"
								}
							}
						},
						"title": "Immutable state",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"WETH9()": "4aa4a4fc",
							"factory()": "c45a0155"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"WETH9()\":{\"returns\":{\"_0\":\"Returns the address of WETH9\"}},\"factory()\":{\"returns\":{\"_0\":\"Returns the address of the Uniswap V3 factory\"}}},\"title\":\"Immutable state\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Functions that return immutable state of the router\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapRouter_flattened.sol\":\"IPeripheryImmutableState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SwapRouter_flattened.sol\":{\"keccak256\":\"0xcf1b41bf0cccca5e629d64d60c6017a4d9216bcfc15f13cb44666bd333a64622\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb61746d170c341525404f902539ab06649109533f6db310ef3e0a39dfb00566\",\"dweb:/ipfs/QmWDhgoTVqeFhBxaK5cLCCmbL27rHHo48r8YnN3cLcfpmu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Functions that return immutable state of the router",
						"version": 1
					}
				},
				"IPeripheryPayments": {
					"abi": [
						{
							"inputs": [],
							"name": "refundETH",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "sweepToken",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "unwrapWETH9",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"refundETH()": {
								"details": "Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount"
							},
							"sweepToken(address,uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing the token from users",
								"params": {
									"amountMinimum": "The minimum amount of token required for a transfer",
									"recipient": "The destination address of the token",
									"token": "The contract address of the token which will be transferred to `recipient`"
								}
							},
							"unwrapWETH9(uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.",
								"params": {
									"amountMinimum": "The minimum amount of WETH9 to unwrap",
									"recipient": "The address receiving ETH"
								}
							}
						},
						"title": "Periphery Payments",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"refundETH()": "12210e8a",
							"sweepToken(address,uint256,address)": "df2ab5bb",
							"unwrapWETH9(uint256,address)": "49404b7c"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"refundETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH9\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"refundETH()\":{\"details\":\"Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount\"},\"sweepToken(address,uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing the token from users\",\"params\":{\"amountMinimum\":\"The minimum amount of token required for a transfer\",\"recipient\":\"The destination address of the token\",\"token\":\"The contract address of the token which will be transferred to `recipient`\"}},\"unwrapWETH9(uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\",\"params\":{\"amountMinimum\":\"The minimum amount of WETH9 to unwrap\",\"recipient\":\"The address receiving ETH\"}}},\"title\":\"Periphery Payments\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"refundETH()\":{\"notice\":\"Refunds any ETH balance held by this contract to the `msg.sender`\"},\"sweepToken(address,uint256,address)\":{\"notice\":\"Transfers the full amount of a token held by this contract to recipient\"},\"unwrapWETH9(uint256,address)\":{\"notice\":\"Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\"}},\"notice\":\"Functions to ease deposits and withdrawals of ETH\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapRouter_flattened.sol\":\"IPeripheryPayments\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SwapRouter_flattened.sol\":{\"keccak256\":\"0xcf1b41bf0cccca5e629d64d60c6017a4d9216bcfc15f13cb44666bd333a64622\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb61746d170c341525404f902539ab06649109533f6db310ef3e0a39dfb00566\",\"dweb:/ipfs/QmWDhgoTVqeFhBxaK5cLCCmbL27rHHo48r8YnN3cLcfpmu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"refundETH()": {
								"notice": "Refunds any ETH balance held by this contract to the `msg.sender`"
							},
							"sweepToken(address,uint256,address)": {
								"notice": "Transfers the full amount of a token held by this contract to recipient"
							},
							"unwrapWETH9(uint256,address)": {
								"notice": "Unwraps the contract's WETH9 balance and sends it to recipient as ETH."
							}
						},
						"notice": "Functions to ease deposits and withdrawals of ETH",
						"version": 1
					}
				},
				"IPeripheryPaymentsWithFee": {
					"abi": [
						{
							"inputs": [],
							"name": "refundETH",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "sweepToken",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "feeBips",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "feeRecipient",
									"type": "address"
								}
							],
							"name": "sweepTokenWithFee",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "unwrapWETH9",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "feeBips",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "feeRecipient",
									"type": "address"
								}
							],
							"name": "unwrapWETH9WithFee",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"refundETH()": {
								"details": "Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount"
							},
							"sweepToken(address,uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing the token from users",
								"params": {
									"amountMinimum": "The minimum amount of token required for a transfer",
									"recipient": "The destination address of the token",
									"token": "The contract address of the token which will be transferred to `recipient`"
								}
							},
							"sweepTokenWithFee(address,uint256,address,uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing the token from users"
							},
							"unwrapWETH9(uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.",
								"params": {
									"amountMinimum": "The minimum amount of WETH9 to unwrap",
									"recipient": "The address receiving ETH"
								}
							},
							"unwrapWETH9WithFee(uint256,address,uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users."
							}
						},
						"title": "Periphery Payments",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"refundETH()": "12210e8a",
							"sweepToken(address,uint256,address)": "df2ab5bb",
							"sweepTokenWithFee(address,uint256,address,uint256,address)": "e0e189a0",
							"unwrapWETH9(uint256,address)": "49404b7c",
							"unwrapWETH9WithFee(uint256,address,uint256,address)": "9b2c0a37"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"refundETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeBips\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"sweepTokenWithFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH9\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeBips\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH9WithFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"refundETH()\":{\"details\":\"Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount\"},\"sweepToken(address,uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing the token from users\",\"params\":{\"amountMinimum\":\"The minimum amount of token required for a transfer\",\"recipient\":\"The destination address of the token\",\"token\":\"The contract address of the token which will be transferred to `recipient`\"}},\"sweepTokenWithFee(address,uint256,address,uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing the token from users\"},\"unwrapWETH9(uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\",\"params\":{\"amountMinimum\":\"The minimum amount of WETH9 to unwrap\",\"recipient\":\"The address receiving ETH\"}},\"unwrapWETH9WithFee(uint256,address,uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\"}},\"title\":\"Periphery Payments\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"refundETH()\":{\"notice\":\"Refunds any ETH balance held by this contract to the `msg.sender`\"},\"sweepToken(address,uint256,address)\":{\"notice\":\"Transfers the full amount of a token held by this contract to recipient\"},\"sweepTokenWithFee(address,uint256,address,uint256,address)\":{\"notice\":\"Transfers the full amount of a token held by this contract to recipient, with a percentage between 0 (exclusive) and 1 (inclusive) going to feeRecipient\"},\"unwrapWETH9(uint256,address)\":{\"notice\":\"Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\"},\"unwrapWETH9WithFee(uint256,address,uint256,address)\":{\"notice\":\"Unwraps the contract's WETH9 balance and sends it to recipient as ETH, with a percentage between 0 (exclusive), and 1 (inclusive) going to feeRecipient\"}},\"notice\":\"Functions to ease deposits and withdrawals of ETH\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapRouter_flattened.sol\":\"IPeripheryPaymentsWithFee\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SwapRouter_flattened.sol\":{\"keccak256\":\"0xcf1b41bf0cccca5e629d64d60c6017a4d9216bcfc15f13cb44666bd333a64622\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb61746d170c341525404f902539ab06649109533f6db310ef3e0a39dfb00566\",\"dweb:/ipfs/QmWDhgoTVqeFhBxaK5cLCCmbL27rHHo48r8YnN3cLcfpmu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"refundETH()": {
								"notice": "Refunds any ETH balance held by this contract to the `msg.sender`"
							},
							"sweepToken(address,uint256,address)": {
								"notice": "Transfers the full amount of a token held by this contract to recipient"
							},
							"sweepTokenWithFee(address,uint256,address,uint256,address)": {
								"notice": "Transfers the full amount of a token held by this contract to recipient, with a percentage between 0 (exclusive) and 1 (inclusive) going to feeRecipient"
							},
							"unwrapWETH9(uint256,address)": {
								"notice": "Unwraps the contract's WETH9 balance and sends it to recipient as ETH."
							},
							"unwrapWETH9WithFee(uint256,address,uint256,address)": {
								"notice": "Unwraps the contract's WETH9 balance and sends it to recipient as ETH, with a percentage between 0 (exclusive), and 1 (inclusive) going to feeRecipient"
							}
						},
						"notice": "Functions to ease deposits and withdrawals of ETH",
						"version": 1
					}
				},
				"ISelfPermit": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "nonce",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "expiry",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermitAllowed",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "nonce",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "expiry",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermitAllowedIfNecessary",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermitIfNecessary",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this).",
								"params": {
									"deadline": "A timestamp, the current blocktime must be less than or equal to this timestamp",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`",
									"value": "The amount that can be spent of token"
								}
							},
							"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this)",
								"params": {
									"expiry": "The timestamp at which the permit is no longer valid",
									"nonce": "The current nonce of the owner",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this) Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.",
								"params": {
									"expiry": "The timestamp at which the permit is no longer valid",
									"nonce": "The current nonce of the owner",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this). Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit",
								"params": {
									"deadline": "A timestamp, the current blocktime must be less than or equal to this timestamp",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`",
									"value": "The amount that can be spent of token"
								}
							}
						},
						"title": "Self Permit",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": "f3995c67",
							"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": "4659a494",
							"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": "a4a78f0c",
							"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": "c2e3140a"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitAllowed\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitAllowedIfNecessary\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitIfNecessary\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this).\",\"params\":{\"deadline\":\"A timestamp, the current blocktime must be less than or equal to this timestamp\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\",\"value\":\"The amount that can be spent of token\"}},\"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this)\",\"params\":{\"expiry\":\"The timestamp at which the permit is no longer valid\",\"nonce\":\"The current nonce of the owner\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this) Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.\",\"params\":{\"expiry\":\"The timestamp at which the permit is no longer valid\",\"nonce\":\"The current nonce of the owner\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this). Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit\",\"params\":{\"deadline\":\"A timestamp, the current blocktime must be less than or equal to this timestamp\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\",\"value\":\"The amount that can be spent of token\"}}},\"title\":\"Self Permit\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend a given token from `msg.sender`\"},\"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\"},\"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\"},\"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend a given token from `msg.sender`\"}},\"notice\":\"Functionality to call permit on any EIP-2612-compliant token for use in the route\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapRouter_flattened.sol\":\"ISelfPermit\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SwapRouter_flattened.sol\":{\"keccak256\":\"0xcf1b41bf0cccca5e629d64d60c6017a4d9216bcfc15f13cb44666bd333a64622\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb61746d170c341525404f902539ab06649109533f6db310ef3e0a39dfb00566\",\"dweb:/ipfs/QmWDhgoTVqeFhBxaK5cLCCmbL27rHHo48r8YnN3cLcfpmu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend a given token from `msg.sender`"
							},
							"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter"
							},
							"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter"
							},
							"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend a given token from `msg.sender`"
							}
						},
						"notice": "Functionality to call permit on any EIP-2612-compliant token for use in the route",
						"version": 1
					}
				},
				"ISwapRouter": {
					"abi": [
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "bytes",
											"name": "path",
											"type": "bytes"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountIn",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOutMinimum",
											"type": "uint256"
										}
									],
									"internalType": "struct ISwapRouter.ExactInputParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactInput",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "tokenIn",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "tokenOut",
											"type": "address"
										},
										{
											"internalType": "uint24",
											"name": "fee",
											"type": "uint24"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountIn",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOutMinimum",
											"type": "uint256"
										},
										{
											"internalType": "uint160",
											"name": "sqrtPriceLimitX96",
											"type": "uint160"
										}
									],
									"internalType": "struct ISwapRouter.ExactInputSingleParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactInputSingle",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "bytes",
											"name": "path",
											"type": "bytes"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOut",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountInMaximum",
											"type": "uint256"
										}
									],
									"internalType": "struct ISwapRouter.ExactOutputParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactOutput",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "tokenIn",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "tokenOut",
											"type": "address"
										},
										{
											"internalType": "uint24",
											"name": "fee",
											"type": "uint24"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOut",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountInMaximum",
											"type": "uint256"
										},
										{
											"internalType": "uint160",
											"name": "sqrtPriceLimitX96",
											"type": "uint160"
										}
									],
									"internalType": "struct ISwapRouter.ExactOutputSingleParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactOutputSingle",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int256",
									"name": "amount0Delta",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1Delta",
									"type": "int256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "uniswapV3SwapCallback",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"exactInput((bytes,address,uint256,uint256,uint256))": {
								"params": {
									"params": "The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata"
								},
								"returns": {
									"amountOut": "The amount of the received token"
								}
							},
							"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
								"params": {
									"params": "The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata"
								},
								"returns": {
									"amountOut": "The amount of the received token"
								}
							},
							"exactOutput((bytes,address,uint256,uint256,uint256))": {
								"params": {
									"params": "The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata"
								},
								"returns": {
									"amountIn": "The amount of the input token"
								}
							},
							"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
								"params": {
									"params": "The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata"
								},
								"returns": {
									"amountIn": "The amount of the input token"
								}
							},
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"details": "In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.",
								"params": {
									"amount0Delta": "The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.",
									"amount1Delta": "The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.",
									"data": "Any data passed through by the caller via the IUniswapV3PoolActions#swap call"
								}
							}
						},
						"title": "Router token swapping functionality",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"exactInput((bytes,address,uint256,uint256,uint256))": "c04b8d59",
							"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": "414bf389",
							"exactOutput((bytes,address,uint256,uint256,uint256))": "f28c0498",
							"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": "db3e2198",
							"uniswapV3SwapCallback(int256,int256,bytes)": "fa461e33"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"internalType\":\"struct ISwapRouter.ExactInputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ISwapRouter.ExactInputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"}],\"internalType\":\"struct ISwapRouter.ExactOutputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ISwapRouter.ExactOutputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"exactInput((bytes,address,uint256,uint256,uint256))\":{\"params\":{\"params\":\"The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\"},\"returns\":{\"amountOut\":\"The amount of the received token\"}},\"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"params\":{\"params\":\"The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\"},\"returns\":{\"amountOut\":\"The amount of the received token\"}},\"exactOutput((bytes,address,uint256,uint256,uint256))\":{\"params\":{\"params\":\"The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\"},\"returns\":{\"amountIn\":\"The amount of the input token\"}},\"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"params\":{\"params\":\"The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\"},\"returns\":{\"amountIn\":\"The amount of the input token\"}},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the IUniswapV3PoolActions#swap call\"}}},\"title\":\"Router token swapping functionality\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"exactInput((bytes,address,uint256,uint256,uint256))\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another along the specified path\"},\"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another token\"},\"exactOutput((bytes,address,uint256,uint256,uint256))\":{\"notice\":\"Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\"},\"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"notice\":\"Swaps as little as possible of one token for `amountOut` of another token\"},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\"}},\"notice\":\"Functions for swapping tokens via Uniswap V3\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapRouter_flattened.sol\":\"ISwapRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SwapRouter_flattened.sol\":{\"keccak256\":\"0xcf1b41bf0cccca5e629d64d60c6017a4d9216bcfc15f13cb44666bd333a64622\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb61746d170c341525404f902539ab06649109533f6db310ef3e0a39dfb00566\",\"dweb:/ipfs/QmWDhgoTVqeFhBxaK5cLCCmbL27rHHo48r8YnN3cLcfpmu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"exactInput((bytes,address,uint256,uint256,uint256))": {
								"notice": "Swaps `amountIn` of one token for as much as possible of another along the specified path"
							},
							"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
								"notice": "Swaps `amountIn` of one token for as much as possible of another token"
							},
							"exactOutput((bytes,address,uint256,uint256,uint256))": {
								"notice": "Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)"
							},
							"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
								"notice": "Swaps as little as possible of one token for `amountOut` of another token"
							},
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"notice": "Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap."
							}
						},
						"notice": "Functions for swapping tokens via Uniswap V3",
						"version": 1
					}
				},
				"IUniswapV3Pool": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Burn",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "Collect",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "CollectProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid1",
									"type": "uint256"
								}
							],
							"name": "Flash",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextOld",
									"type": "uint16"
								},
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextNew",
									"type": "uint16"
								}
							],
							"name": "IncreaseObservationCardinalityNext",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Initialize",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Mint",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0New",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1New",
									"type": "uint8"
								}
							],
							"name": "SetFeeProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Swap",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								}
							],
							"name": "burn",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collectProtocol",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "fee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal0X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal1X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "flash",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								}
							],
							"name": "increaseObservationCardinalityNext",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "liquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "maxLiquidityPerTick",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "observations",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "blockTimestamp",
									"type": "uint32"
								},
								{
									"internalType": "int56",
									"name": "tickCumulative",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityCumulativeX128",
									"type": "uint160"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint32[]",
									"name": "secondsAgos",
									"type": "uint32[]"
								}
							],
							"name": "observe",
							"outputs": [
								{
									"internalType": "int56[]",
									"name": "tickCumulatives",
									"type": "int56[]"
								},
								{
									"internalType": "uint160[]",
									"name": "secondsPerLiquidityCumulativeX128s",
									"type": "uint160[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "_liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside0LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside1LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "protocolFees",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "token0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "token1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint8",
									"name": "feeProtocol0",
									"type": "uint8"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol1",
									"type": "uint8"
								}
							],
							"name": "setFeeProtocol",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "slot0",
							"outputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								},
								{
									"internalType": "uint16",
									"name": "observationIndex",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinality",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol",
									"type": "uint8"
								},
								{
									"internalType": "bool",
									"name": "unlocked",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								}
							],
							"name": "snapshotCumulativesInside",
							"outputs": [
								{
									"internalType": "int56",
									"name": "tickCumulativeInside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityInsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsInside",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "zeroForOne",
									"type": "bool"
								},
								{
									"internalType": "int256",
									"name": "amountSpecified",
									"type": "int256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceLimitX96",
									"type": "uint160"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "swap",
							"outputs": [
								{
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int16",
									"name": "wordPosition",
									"type": "int16"
								}
							],
							"name": "tickBitmap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tickSpacing",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "ticks",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "liquidityGross",
									"type": "uint128"
								},
								{
									"internalType": "int128",
									"name": "liquidityNet",
									"type": "int128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside0X128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside1X128",
									"type": "uint256"
								},
								{
									"internalType": "int56",
									"name": "tickCumulativeOutside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityOutsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsOutside",
									"type": "uint32"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token0",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token1",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "The pool interface is broken up into many smaller pieces",
						"kind": "dev",
						"methods": {
							"burn(int24,int24,uint128)": {
								"details": "Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect",
								"params": {
									"amount": "How much liquidity to burn",
									"tickLower": "The lower tick of the position for which to burn liquidity",
									"tickUpper": "The upper tick of the position for which to burn liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 sent to the recipient",
									"amount1": "The amount of token1 sent to the recipient"
								}
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"details": "Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.",
								"params": {
									"amount0Requested": "How much token0 should be withdrawn from the fees owed",
									"amount1Requested": "How much token1 should be withdrawn from the fees owed",
									"recipient": "The address which should receive the fees collected",
									"tickLower": "The lower tick of the position for which to collect fees",
									"tickUpper": "The upper tick of the position for which to collect fees"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"collectProtocol(address,uint128,uint128)": {
								"params": {
									"amount0Requested": "The maximum amount of token0 to send, can be 0 to collect fees in only token1",
									"amount1Requested": "The maximum amount of token1 to send, can be 0 to collect fees in only token0",
									"recipient": "The address to which collected protocol fees should be sent"
								},
								"returns": {
									"amount0": "The protocol fee collected in token0",
									"amount1": "The protocol fee collected in token1"
								}
							},
							"factory()": {
								"returns": {
									"_0": "The contract address"
								}
							},
							"fee()": {
								"returns": {
									"_0": "The fee"
								}
							},
							"feeGrowthGlobal0X128()": {
								"details": "This value can overflow the uint256"
							},
							"feeGrowthGlobal1X128()": {
								"details": "This value can overflow the uint256"
							},
							"flash(address,uint256,uint256,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback",
								"params": {
									"amount0": "The amount of token0 to send",
									"amount1": "The amount of token1 to send",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address which will receive the token0 and token1 amounts"
								}
							},
							"increaseObservationCardinalityNext(uint16)": {
								"details": "This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.",
								"params": {
									"observationCardinalityNext": "The desired minimum number of observations for the pool to store"
								}
							},
							"initialize(uint160)": {
								"details": "Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value",
								"params": {
									"sqrtPriceX96": "the initial sqrt price of the pool as a Q64.96"
								}
							},
							"liquidity()": {
								"details": "This value has no relationship to the total liquidity across all ticks"
							},
							"maxLiquidityPerTick()": {
								"details": "This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool",
								"returns": {
									"_0": "The max amount of liquidity per tick"
								}
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.",
								"params": {
									"amount": "The amount of liquidity to mint",
									"data": "Any data that should be passed through to the callback",
									"recipient": "The address for which the liquidity will be created",
									"tickLower": "The lower tick of the position in which to add liquidity",
									"tickUpper": "The upper tick of the position in which to add liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback",
									"amount1": "The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
								}
							},
							"observations(uint256)": {
								"details": "You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.",
								"params": {
									"index": "The element of the observations array to fetch"
								},
								"returns": {
									"blockTimestamp": "The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use"
								}
							},
							"observe(uint32[])": {
								"details": "To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.",
								"params": {
									"secondsAgos": "From how long ago each cumulative tick and liquidity value should be returned"
								},
								"returns": {
									"secondsPerLiquidityCumulativeX128s": "Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp",
									"tickCumulatives": "Cumulative tick values as of each `secondsAgos` from the current block timestamp"
								}
							},
							"positions(bytes32)": {
								"params": {
									"key": "The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper"
								},
								"returns": {
									"_liquidity": "The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
								}
							},
							"protocolFees()": {
								"details": "Protocol fees will never exceed uint128 max in either token"
							},
							"setFeeProtocol(uint8,uint8)": {
								"params": {
									"feeProtocol0": "new protocol fee for token0 of the pool",
									"feeProtocol1": "new protocol fee for token1 of the pool"
								}
							},
							"slot0()": {
								"returns": {
									"sqrtPriceX96": "The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy"
								}
							},
							"snapshotCumulativesInside(int24,int24)": {
								"details": "Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.",
								"params": {
									"tickLower": "The lower tick of the range",
									"tickUpper": "The upper tick of the range"
								},
								"returns": {
									"secondsInside": "The snapshot of seconds per liquidity for the range",
									"secondsPerLiquidityInsideX128": "The snapshot of seconds per liquidity for the range",
									"tickCumulativeInside": "The snapshot of the tick accumulator for the range"
								}
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback",
								"params": {
									"amountSpecified": "The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address to receive the output of the swap",
									"sqrtPriceLimitX96": "The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap",
									"zeroForOne": "The direction of the swap, true for token0 to token1, false for token1 to token0"
								},
								"returns": {
									"amount0": "The delta of the balance of token0 of the pool, exact when negative, minimum when positive",
									"amount1": "The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
								}
							},
							"tickSpacing()": {
								"details": "Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.",
								"returns": {
									"_0": "The tick spacing"
								}
							},
							"ticks(int24)": {
								"params": {
									"tick": "The tick to look up"
								},
								"returns": {
									"liquidityGross": "the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position."
								}
							},
							"token0()": {
								"returns": {
									"_0": "The token contract address"
								}
							},
							"token1()": {
								"returns": {
									"_0": "The token contract address"
								}
							}
						},
						"title": "The interface for a Uniswap V3 Pool",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"burn(int24,int24,uint128)": "a34123a7",
							"collect(address,int24,int24,uint128,uint128)": "4f1eb3d8",
							"collectProtocol(address,uint128,uint128)": "85b66729",
							"factory()": "c45a0155",
							"fee()": "ddca3f43",
							"feeGrowthGlobal0X128()": "f3058399",
							"feeGrowthGlobal1X128()": "46141319",
							"flash(address,uint256,uint256,bytes)": "490e6cbc",
							"increaseObservationCardinalityNext(uint16)": "32148f67",
							"initialize(uint160)": "f637731d",
							"liquidity()": "1a686502",
							"maxLiquidityPerTick()": "70cf754a",
							"mint(address,int24,int24,uint128,bytes)": "3c8a7d8d",
							"observations(uint256)": "252c09d7",
							"observe(uint32[])": "883bdbfd",
							"positions(bytes32)": "514ea4bf",
							"protocolFees()": "1ad8b03b",
							"setFeeProtocol(uint8,uint8)": "8206a4d1",
							"slot0()": "3850c7bd",
							"snapshotCumulativesInside(int24,int24)": "a38807f2",
							"swap(address,bool,int256,uint160,bytes)": "128acb08",
							"tickBitmap(int16)": "5339c296",
							"tickSpacing()": "d0c93a7c",
							"ticks(int24)": "f30dba93",
							"token0()": "0dfe1681",
							"token1()": "d21220a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"CollectProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0New\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1New\",\"type\":\"uint8\"}],\"name\":\"SetFeeProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collectProtocol\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal0X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal1X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"token0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"token1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feeProtocol0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol1\",\"type\":\"uint8\"}],\"name\":\"setFeeProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The pool interface is broken up into many smaller pieces\",\"kind\":\"dev\",\"methods\":{\"burn(int24,int24,uint128)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"collect(address,int24,int24,uint128,uint128)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"collectProtocol(address,uint128,uint128)\":{\"params\":{\"amount0Requested\":\"The maximum amount of token0 to send, can be 0 to collect fees in only token1\",\"amount1Requested\":\"The maximum amount of token1 to send, can be 0 to collect fees in only token0\",\"recipient\":\"The address to which collected protocol fees should be sent\"},\"returns\":{\"amount0\":\"The protocol fee collected in token0\",\"amount1\":\"The protocol fee collected in token1\"}},\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"fee()\":{\"returns\":{\"_0\":\"The fee\"}},\"feeGrowthGlobal0X128()\":{\"details\":\"This value can overflow the uint256\"},\"feeGrowthGlobal1X128()\":{\"details\":\"This value can overflow the uint256\"},\"flash(address,uint256,uint256,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback\",\"params\":{\"amount0\":\"The amount of token0 to send\",\"amount1\":\"The amount of token1 to send\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address which will receive the token0 and token1 amounts\"}},\"increaseObservationCardinalityNext(uint16)\":{\"details\":\"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.\",\"params\":{\"observationCardinalityNext\":\"The desired minimum number of observations for the pool to store\"}},\"initialize(uint160)\":{\"details\":\"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\",\"params\":{\"sqrtPriceX96\":\"the initial sqrt price of the pool as a Q64.96\"}},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticks\"},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"mint(address,int24,int24,uint128,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.\",\"params\":{\"amount\":\"The amount of liquidity to mint\",\"data\":\"Any data that should be passed through to the callback\",\"recipient\":\"The address for which the liquidity will be created\",\"tickLower\":\"The lower tick of the position in which to add liquidity\",\"tickUpper\":\"The upper tick of the position in which to add liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"amount1\":\"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\"}},\"observations(uint256)\":{\"details\":\"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.\",\"params\":{\"index\":\"The element of the observations array to fetch\"},\"returns\":{\"blockTimestamp\":\"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use\"}},\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulativeX128s\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}},\"positions(bytes32)\":{\"params\":{\"key\":\"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\"},\"returns\":{\"_liquidity\":\"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\"}},\"protocolFees()\":{\"details\":\"Protocol fees will never exceed uint128 max in either token\"},\"setFeeProtocol(uint8,uint8)\":{\"params\":{\"feeProtocol0\":\"new protocol fee for token0 of the pool\",\"feeProtocol1\":\"new protocol fee for token1 of the pool\"}},\"slot0()\":{\"returns\":{\"sqrtPriceX96\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy\"}},\"snapshotCumulativesInside(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"secondsInside\":\"The snapshot of seconds per liquidity for the range\",\"secondsPerLiquidityInsideX128\":\"The snapshot of seconds per liquidity for the range\",\"tickCumulativeInside\":\"The snapshot of the tick accumulator for the range\"}},\"swap(address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\",\"params\":{\"amountSpecified\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address to receive the output of the swap\",\"sqrtPriceLimitX96\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"zeroForOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"ticks(int24)\":{\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"liquidityGross\":\"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"title\":\"The interface for a Uniswap V3 Pool\",\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when a position's liquidity is removed\"},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"notice\":\"Emitted when fees are collected by the owner of a position\"},\"CollectProtocol(address,address,uint128,uint128)\":{\"notice\":\"Emitted when the collected protocol fees are withdrawn by the factory owner\"},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted by the pool for any flashes of token0/token1\"},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"notice\":\"Emitted by the pool for increases to the number of observations that can be stored\"},\"Initialize(uint160,int24)\":{\"notice\":\"Emitted exactly once by a pool when #initialize is first called on the pool\"},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is minted for a given position\"},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"notice\":\"Emitted when the protocol fee is changed by the pool\"},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"notice\":\"Emitted by the pool for any swaps between token0 and token1\"}},\"kind\":\"user\",\"methods\":{\"burn(int24,int24,uint128)\":{\"notice\":\"Burn liquidity from the sender and account tokens owed for the liquidity to the position\"},\"collect(address,int24,int24,uint128,uint128)\":{\"notice\":\"Collects tokens owed to a position\"},\"collectProtocol(address,uint128,uint128)\":{\"notice\":\"Collect the protocol fee accrued to the pool\"},\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\"},\"fee()\":{\"notice\":\"The pool's fee in hundredths of a bip, i.e. 1e-6\"},\"feeGrowthGlobal0X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"feeGrowthGlobal1X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"},\"flash(address,uint256,uint256,bytes)\":{\"notice\":\"Receive token0 and/or token1 and pay it back, plus a fee, in the callback\"},\"increaseObservationCardinalityNext(uint16)\":{\"notice\":\"Increase the maximum number of price and liquidity observations that this pool will store\"},\"initialize(uint160)\":{\"notice\":\"Sets the initial price for the pool\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"mint(address,int24,int24,uint128,bytes)\":{\"notice\":\"Adds liquidity for the given recipient/tickLower/tickUpper position\"},\"observations(uint256)\":{\"notice\":\"Returns data about a specific observation index\"},\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"protocolFees()\":{\"notice\":\"The amounts of token0 and token1 that are owed to the protocol\"},\"setFeeProtocol(uint8,uint8)\":{\"notice\":\"Set the denominator of the protocol's % share of the fees\"},\"slot0()\":{\"notice\":\"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.\"},\"snapshotCumulativesInside(int24,int24)\":{\"notice\":\"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\"},\"swap(address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0\"},\"tickBitmap(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickBitmap for more information\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"notice\":\"A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform to the ERC20 specification\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapRouter_flattened.sol\":\"IUniswapV3Pool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SwapRouter_flattened.sol\":{\"keccak256\":\"0xcf1b41bf0cccca5e629d64d60c6017a4d9216bcfc15f13cb44666bd333a64622\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb61746d170c341525404f902539ab06649109533f6db310ef3e0a39dfb00566\",\"dweb:/ipfs/QmWDhgoTVqeFhBxaK5cLCCmbL27rHHo48r8YnN3cLcfpmu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when a position's liquidity is removed"
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"notice": "Emitted when fees are collected by the owner of a position"
							},
							"CollectProtocol(address,address,uint128,uint128)": {
								"notice": "Emitted when the collected protocol fees are withdrawn by the factory owner"
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"notice": "Emitted by the pool for any flashes of token0/token1"
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"notice": "Emitted by the pool for increases to the number of observations that can be stored"
							},
							"Initialize(uint160,int24)": {
								"notice": "Emitted exactly once by a pool when #initialize is first called on the pool"
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is minted for a given position"
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"notice": "Emitted when the protocol fee is changed by the pool"
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"notice": "Emitted by the pool for any swaps between token0 and token1"
							}
						},
						"kind": "user",
						"methods": {
							"burn(int24,int24,uint128)": {
								"notice": "Burn liquidity from the sender and account tokens owed for the liquidity to the position"
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"notice": "Collects tokens owed to a position"
							},
							"collectProtocol(address,uint128,uint128)": {
								"notice": "Collect the protocol fee accrued to the pool"
							},
							"factory()": {
								"notice": "The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface"
							},
							"fee()": {
								"notice": "The pool's fee in hundredths of a bip, i.e. 1e-6"
							},
							"feeGrowthGlobal0X128()": {
								"notice": "The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"
							},
							"feeGrowthGlobal1X128()": {
								"notice": "The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"
							},
							"flash(address,uint256,uint256,bytes)": {
								"notice": "Receive token0 and/or token1 and pay it back, plus a fee, in the callback"
							},
							"increaseObservationCardinalityNext(uint16)": {
								"notice": "Increase the maximum number of price and liquidity observations that this pool will store"
							},
							"initialize(uint160)": {
								"notice": "Sets the initial price for the pool"
							},
							"liquidity()": {
								"notice": "The currently in range liquidity available to the pool"
							},
							"maxLiquidityPerTick()": {
								"notice": "The maximum amount of position liquidity that can use any tick in the range"
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"notice": "Adds liquidity for the given recipient/tickLower/tickUpper position"
							},
							"observations(uint256)": {
								"notice": "Returns data about a specific observation index"
							},
							"observe(uint32[])": {
								"notice": "Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"
							},
							"positions(bytes32)": {
								"notice": "Returns the information about a position by the position's key"
							},
							"protocolFees()": {
								"notice": "The amounts of token0 and token1 that are owed to the protocol"
							},
							"setFeeProtocol(uint8,uint8)": {
								"notice": "Set the denominator of the protocol's % share of the fees"
							},
							"slot0()": {
								"notice": "The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally."
							},
							"snapshotCumulativesInside(int24,int24)": {
								"notice": "Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"notice": "Swap token0 for token1, or token1 for token0"
							},
							"tickBitmap(int16)": {
								"notice": "Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
							},
							"tickSpacing()": {
								"notice": "The pool tick spacing"
							},
							"ticks(int24)": {
								"notice": "Look up information about a specific tick in the pool"
							},
							"token0()": {
								"notice": "The first of the two tokens of the pool, sorted by address"
							},
							"token1()": {
								"notice": "The second of the two tokens of the pool, sorted by address"
							}
						},
						"notice": "A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform to the ERC20 specification",
						"version": 1
					}
				},
				"IUniswapV3PoolActions": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								}
							],
							"name": "burn",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "flash",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								}
							],
							"name": "increaseObservationCardinalityNext",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "zeroForOne",
									"type": "bool"
								},
								{
									"internalType": "int256",
									"name": "amountSpecified",
									"type": "int256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceLimitX96",
									"type": "uint160"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "swap",
							"outputs": [
								{
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"burn(int24,int24,uint128)": {
								"details": "Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect",
								"params": {
									"amount": "How much liquidity to burn",
									"tickLower": "The lower tick of the position for which to burn liquidity",
									"tickUpper": "The upper tick of the position for which to burn liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 sent to the recipient",
									"amount1": "The amount of token1 sent to the recipient"
								}
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"details": "Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.",
								"params": {
									"amount0Requested": "How much token0 should be withdrawn from the fees owed",
									"amount1Requested": "How much token1 should be withdrawn from the fees owed",
									"recipient": "The address which should receive the fees collected",
									"tickLower": "The lower tick of the position for which to collect fees",
									"tickUpper": "The upper tick of the position for which to collect fees"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"flash(address,uint256,uint256,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback",
								"params": {
									"amount0": "The amount of token0 to send",
									"amount1": "The amount of token1 to send",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address which will receive the token0 and token1 amounts"
								}
							},
							"increaseObservationCardinalityNext(uint16)": {
								"details": "This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.",
								"params": {
									"observationCardinalityNext": "The desired minimum number of observations for the pool to store"
								}
							},
							"initialize(uint160)": {
								"details": "Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value",
								"params": {
									"sqrtPriceX96": "the initial sqrt price of the pool as a Q64.96"
								}
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.",
								"params": {
									"amount": "The amount of liquidity to mint",
									"data": "Any data that should be passed through to the callback",
									"recipient": "The address for which the liquidity will be created",
									"tickLower": "The lower tick of the position in which to add liquidity",
									"tickUpper": "The upper tick of the position in which to add liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback",
									"amount1": "The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
								}
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback",
								"params": {
									"amountSpecified": "The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address to receive the output of the swap",
									"sqrtPriceLimitX96": "The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap",
									"zeroForOne": "The direction of the swap, true for token0 to token1, false for token1 to token0"
								},
								"returns": {
									"amount0": "The delta of the balance of token0 of the pool, exact when negative, minimum when positive",
									"amount1": "The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
								}
							}
						},
						"title": "Permissionless pool actions",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"burn(int24,int24,uint128)": "a34123a7",
							"collect(address,int24,int24,uint128,uint128)": "4f1eb3d8",
							"flash(address,uint256,uint256,bytes)": "490e6cbc",
							"increaseObservationCardinalityNext(uint16)": "32148f67",
							"initialize(uint160)": "f637731d",
							"mint(address,int24,int24,uint128,bytes)": "3c8a7d8d",
							"swap(address,bool,int256,uint160,bytes)": "128acb08"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(int24,int24,uint128)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"collect(address,int24,int24,uint128,uint128)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"flash(address,uint256,uint256,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback\",\"params\":{\"amount0\":\"The amount of token0 to send\",\"amount1\":\"The amount of token1 to send\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address which will receive the token0 and token1 amounts\"}},\"increaseObservationCardinalityNext(uint16)\":{\"details\":\"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.\",\"params\":{\"observationCardinalityNext\":\"The desired minimum number of observations for the pool to store\"}},\"initialize(uint160)\":{\"details\":\"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\",\"params\":{\"sqrtPriceX96\":\"the initial sqrt price of the pool as a Q64.96\"}},\"mint(address,int24,int24,uint128,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.\",\"params\":{\"amount\":\"The amount of liquidity to mint\",\"data\":\"Any data that should be passed through to the callback\",\"recipient\":\"The address for which the liquidity will be created\",\"tickLower\":\"The lower tick of the position in which to add liquidity\",\"tickUpper\":\"The upper tick of the position in which to add liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"amount1\":\"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\"}},\"swap(address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\",\"params\":{\"amountSpecified\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address to receive the output of the swap\",\"sqrtPriceLimitX96\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"zeroForOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}}},\"title\":\"Permissionless pool actions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(int24,int24,uint128)\":{\"notice\":\"Burn liquidity from the sender and account tokens owed for the liquidity to the position\"},\"collect(address,int24,int24,uint128,uint128)\":{\"notice\":\"Collects tokens owed to a position\"},\"flash(address,uint256,uint256,bytes)\":{\"notice\":\"Receive token0 and/or token1 and pay it back, plus a fee, in the callback\"},\"increaseObservationCardinalityNext(uint16)\":{\"notice\":\"Increase the maximum number of price and liquidity observations that this pool will store\"},\"initialize(uint160)\":{\"notice\":\"Sets the initial price for the pool\"},\"mint(address,int24,int24,uint128,bytes)\":{\"notice\":\"Adds liquidity for the given recipient/tickLower/tickUpper position\"},\"swap(address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0\"}},\"notice\":\"Contains pool methods that can be called by anyone\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapRouter_flattened.sol\":\"IUniswapV3PoolActions\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SwapRouter_flattened.sol\":{\"keccak256\":\"0xcf1b41bf0cccca5e629d64d60c6017a4d9216bcfc15f13cb44666bd333a64622\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb61746d170c341525404f902539ab06649109533f6db310ef3e0a39dfb00566\",\"dweb:/ipfs/QmWDhgoTVqeFhBxaK5cLCCmbL27rHHo48r8YnN3cLcfpmu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"burn(int24,int24,uint128)": {
								"notice": "Burn liquidity from the sender and account tokens owed for the liquidity to the position"
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"notice": "Collects tokens owed to a position"
							},
							"flash(address,uint256,uint256,bytes)": {
								"notice": "Receive token0 and/or token1 and pay it back, plus a fee, in the callback"
							},
							"increaseObservationCardinalityNext(uint16)": {
								"notice": "Increase the maximum number of price and liquidity observations that this pool will store"
							},
							"initialize(uint160)": {
								"notice": "Sets the initial price for the pool"
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"notice": "Adds liquidity for the given recipient/tickLower/tickUpper position"
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"notice": "Swap token0 for token1, or token1 for token0"
							}
						},
						"notice": "Contains pool methods that can be called by anyone",
						"version": 1
					}
				},
				"IUniswapV3PoolDerivedState": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint32[]",
									"name": "secondsAgos",
									"type": "uint32[]"
								}
							],
							"name": "observe",
							"outputs": [
								{
									"internalType": "int56[]",
									"name": "tickCumulatives",
									"type": "int56[]"
								},
								{
									"internalType": "uint160[]",
									"name": "secondsPerLiquidityCumulativeX128s",
									"type": "uint160[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								}
							],
							"name": "snapshotCumulativesInside",
							"outputs": [
								{
									"internalType": "int56",
									"name": "tickCumulativeInside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityInsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsInside",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"observe(uint32[])": {
								"details": "To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.",
								"params": {
									"secondsAgos": "From how long ago each cumulative tick and liquidity value should be returned"
								},
								"returns": {
									"secondsPerLiquidityCumulativeX128s": "Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp",
									"tickCumulatives": "Cumulative tick values as of each `secondsAgos` from the current block timestamp"
								}
							},
							"snapshotCumulativesInside(int24,int24)": {
								"details": "Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.",
								"params": {
									"tickLower": "The lower tick of the range",
									"tickUpper": "The upper tick of the range"
								},
								"returns": {
									"secondsInside": "The snapshot of seconds per liquidity for the range",
									"secondsPerLiquidityInsideX128": "The snapshot of seconds per liquidity for the range",
									"tickCumulativeInside": "The snapshot of the tick accumulator for the range"
								}
							}
						},
						"title": "Pool state that is not stored",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"observe(uint32[])": "883bdbfd",
							"snapshotCumulativesInside(int24,int24)": "a38807f2"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulativeX128s\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}},\"snapshotCumulativesInside(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"secondsInside\":\"The snapshot of seconds per liquidity for the range\",\"secondsPerLiquidityInsideX128\":\"The snapshot of seconds per liquidity for the range\",\"tickCumulativeInside\":\"The snapshot of the tick accumulator for the range\"}}},\"title\":\"Pool state that is not stored\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"snapshotCumulativesInside(int24,int24)\":{\"notice\":\"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\"}},\"notice\":\"Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapRouter_flattened.sol\":\"IUniswapV3PoolDerivedState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SwapRouter_flattened.sol\":{\"keccak256\":\"0xcf1b41bf0cccca5e629d64d60c6017a4d9216bcfc15f13cb44666bd333a64622\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb61746d170c341525404f902539ab06649109533f6db310ef3e0a39dfb00566\",\"dweb:/ipfs/QmWDhgoTVqeFhBxaK5cLCCmbL27rHHo48r8YnN3cLcfpmu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"observe(uint32[])": {
								"notice": "Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"
							},
							"snapshotCumulativesInside(int24,int24)": {
								"notice": "Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"
							}
						},
						"notice": "Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.",
						"version": 1
					}
				},
				"IUniswapV3PoolEvents": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Burn",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "Collect",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "CollectProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid1",
									"type": "uint256"
								}
							],
							"name": "Flash",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextOld",
									"type": "uint16"
								},
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextNew",
									"type": "uint16"
								}
							],
							"name": "IncreaseObservationCardinalityNext",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Initialize",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Mint",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0New",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1New",
									"type": "uint8"
								}
							],
							"name": "SetFeeProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Swap",
							"type": "event"
						}
					],
					"devdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"details": "Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect",
								"params": {
									"amount": "The amount of liquidity to remove",
									"amount0": "The amount of token0 withdrawn",
									"amount1": "The amount of token1 withdrawn",
									"owner": "The owner of the position for which liquidity is removed",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"details": "Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees",
								"params": {
									"amount0": "The amount of token0 fees collected",
									"amount1": "The amount of token1 fees collected",
									"owner": "The owner of the position for which fees are collected",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"CollectProtocol(address,address,uint128,uint128)": {
								"params": {
									"amount0": "The amount of token1 protocol fees that is withdrawn",
									"recipient": "The address that receives the collected protocol fees",
									"sender": "The address that collects the protocol fees"
								}
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"params": {
									"amount0": "The amount of token0 that was flashed",
									"amount1": "The amount of token1 that was flashed",
									"paid0": "The amount of token0 paid for the flash, which can exceed the amount0 plus the fee",
									"paid1": "The amount of token1 paid for the flash, which can exceed the amount1 plus the fee",
									"recipient": "The address that received the tokens from flash",
									"sender": "The address that initiated the swap call, and that received the callback"
								}
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"details": "observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.",
								"params": {
									"observationCardinalityNextNew": "The updated value of the next observation cardinality",
									"observationCardinalityNextOld": "The previous value of the next observation cardinality"
								}
							},
							"Initialize(uint160,int24)": {
								"details": "Mint/Burn/Swap cannot be emitted by the pool before Initialize",
								"params": {
									"sqrtPriceX96": "The initial sqrt price of the pool, as a Q64.96",
									"tick": "The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"
								}
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"params": {
									"amount": "The amount of liquidity minted to the position range",
									"amount0": "How much token0 was required for the minted liquidity",
									"amount1": "How much token1 was required for the minted liquidity",
									"owner": "The owner of the position and recipient of any minted liquidity",
									"sender": "The address that minted the liquidity",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"params": {
									"feeProtocol0New": "The updated value of the token0 protocol fee",
									"feeProtocol0Old": "The previous value of the token0 protocol fee",
									"feeProtocol1New": "The updated value of the token1 protocol fee",
									"feeProtocol1Old": "The previous value of the token1 protocol fee"
								}
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"params": {
									"amount0": "The delta of the token0 balance of the pool",
									"amount1": "The delta of the token1 balance of the pool",
									"liquidity": "The liquidity of the pool after the swap",
									"recipient": "The address that received the output of the swap",
									"sender": "The address that initiated the swap call, and that received the callback",
									"sqrtPriceX96": "The sqrt(price) of the pool after the swap, as a Q64.96",
									"tick": "The log base 1.0001 of price of the pool after the swap"
								}
							}
						},
						"kind": "dev",
						"methods": {},
						"title": "Events emitted by a pool",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"CollectProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0New\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1New\",\"type\":\"uint8\"}],\"name\":\"SetFeeProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"details\":\"Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\",\"params\":{\"amount\":\"The amount of liquidity to remove\",\"amount0\":\"The amount of token0 withdrawn\",\"amount1\":\"The amount of token1 withdrawn\",\"owner\":\"The owner of the position for which liquidity is removed\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"details\":\"Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\",\"params\":{\"amount0\":\"The amount of token0 fees collected\",\"amount1\":\"The amount of token1 fees collected\",\"owner\":\"The owner of the position for which fees are collected\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"CollectProtocol(address,address,uint128,uint128)\":{\"params\":{\"amount0\":\"The amount of token1 protocol fees that is withdrawn\",\"recipient\":\"The address that receives the collected protocol fees\",\"sender\":\"The address that collects the protocol fees\"}},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"amount0\":\"The amount of token0 that was flashed\",\"amount1\":\"The amount of token1 that was flashed\",\"paid0\":\"The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\",\"paid1\":\"The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\",\"recipient\":\"The address that received the tokens from flash\",\"sender\":\"The address that initiated the swap call, and that received the callback\"}},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"details\":\"observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.\",\"params\":{\"observationCardinalityNextNew\":\"The updated value of the next observation cardinality\",\"observationCardinalityNextOld\":\"The previous value of the next observation cardinality\"}},\"Initialize(uint160,int24)\":{\"details\":\"Mint/Burn/Swap cannot be emitted by the pool before Initialize\",\"params\":{\"sqrtPriceX96\":\"The initial sqrt price of the pool, as a Q64.96\",\"tick\":\"The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\"}},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of liquidity minted to the position range\",\"amount0\":\"How much token0 was required for the minted liquidity\",\"amount1\":\"How much token1 was required for the minted liquidity\",\"owner\":\"The owner of the position and recipient of any minted liquidity\",\"sender\":\"The address that minted the liquidity\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"params\":{\"feeProtocol0New\":\"The updated value of the token0 protocol fee\",\"feeProtocol0Old\":\"The previous value of the token0 protocol fee\",\"feeProtocol1New\":\"The updated value of the token1 protocol fee\",\"feeProtocol1Old\":\"The previous value of the token1 protocol fee\"}},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"params\":{\"amount0\":\"The delta of the token0 balance of the pool\",\"amount1\":\"The delta of the token1 balance of the pool\",\"liquidity\":\"The liquidity of the pool after the swap\",\"recipient\":\"The address that received the output of the swap\",\"sender\":\"The address that initiated the swap call, and that received the callback\",\"sqrtPriceX96\":\"The sqrt(price) of the pool after the swap, as a Q64.96\",\"tick\":\"The log base 1.0001 of price of the pool after the swap\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"Events emitted by a pool\",\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when a position's liquidity is removed\"},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"notice\":\"Emitted when fees are collected by the owner of a position\"},\"CollectProtocol(address,address,uint128,uint128)\":{\"notice\":\"Emitted when the collected protocol fees are withdrawn by the factory owner\"},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted by the pool for any flashes of token0/token1\"},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"notice\":\"Emitted by the pool for increases to the number of observations that can be stored\"},\"Initialize(uint160,int24)\":{\"notice\":\"Emitted exactly once by a pool when #initialize is first called on the pool\"},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is minted for a given position\"},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"notice\":\"Emitted when the protocol fee is changed by the pool\"},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"notice\":\"Emitted by the pool for any swaps between token0 and token1\"}},\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains all events emitted by the pool\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapRouter_flattened.sol\":\"IUniswapV3PoolEvents\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SwapRouter_flattened.sol\":{\"keccak256\":\"0xcf1b41bf0cccca5e629d64d60c6017a4d9216bcfc15f13cb44666bd333a64622\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb61746d170c341525404f902539ab06649109533f6db310ef3e0a39dfb00566\",\"dweb:/ipfs/QmWDhgoTVqeFhBxaK5cLCCmbL27rHHo48r8YnN3cLcfpmu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when a position's liquidity is removed"
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"notice": "Emitted when fees are collected by the owner of a position"
							},
							"CollectProtocol(address,address,uint128,uint128)": {
								"notice": "Emitted when the collected protocol fees are withdrawn by the factory owner"
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"notice": "Emitted by the pool for any flashes of token0/token1"
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"notice": "Emitted by the pool for increases to the number of observations that can be stored"
							},
							"Initialize(uint160,int24)": {
								"notice": "Emitted exactly once by a pool when #initialize is first called on the pool"
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is minted for a given position"
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"notice": "Emitted when the protocol fee is changed by the pool"
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"notice": "Emitted by the pool for any swaps between token0 and token1"
							}
						},
						"kind": "user",
						"methods": {},
						"notice": "Contains all events emitted by the pool",
						"version": 1
					}
				},
				"IUniswapV3PoolImmutables": {
					"abi": [
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "fee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "maxLiquidityPerTick",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tickSpacing",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token0",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token1",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"factory()": {
								"returns": {
									"_0": "The contract address"
								}
							},
							"fee()": {
								"returns": {
									"_0": "The fee"
								}
							},
							"maxLiquidityPerTick()": {
								"details": "This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool",
								"returns": {
									"_0": "The max amount of liquidity per tick"
								}
							},
							"tickSpacing()": {
								"details": "Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.",
								"returns": {
									"_0": "The tick spacing"
								}
							},
							"token0()": {
								"returns": {
									"_0": "The token contract address"
								}
							},
							"token1()": {
								"returns": {
									"_0": "The token contract address"
								}
							}
						},
						"title": "Pool state that never changes",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"factory()": "c45a0155",
							"fee()": "ddca3f43",
							"maxLiquidityPerTick()": "70cf754a",
							"tickSpacing()": "d0c93a7c",
							"token0()": "0dfe1681",
							"token1()": "d21220a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"fee()\":{\"returns\":{\"_0\":\"The fee\"}},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"title\":\"Pool state that never changes\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\"},\"fee()\":{\"notice\":\"The pool's fee in hundredths of a bip, i.e. 1e-6\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"notice\":\"These parameters are fixed for a pool forever, i.e., the methods will always return the same values\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapRouter_flattened.sol\":\"IUniswapV3PoolImmutables\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SwapRouter_flattened.sol\":{\"keccak256\":\"0xcf1b41bf0cccca5e629d64d60c6017a4d9216bcfc15f13cb44666bd333a64622\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb61746d170c341525404f902539ab06649109533f6db310ef3e0a39dfb00566\",\"dweb:/ipfs/QmWDhgoTVqeFhBxaK5cLCCmbL27rHHo48r8YnN3cLcfpmu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"factory()": {
								"notice": "The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface"
							},
							"fee()": {
								"notice": "The pool's fee in hundredths of a bip, i.e. 1e-6"
							},
							"maxLiquidityPerTick()": {
								"notice": "The maximum amount of position liquidity that can use any tick in the range"
							},
							"tickSpacing()": {
								"notice": "The pool tick spacing"
							},
							"token0()": {
								"notice": "The first of the two tokens of the pool, sorted by address"
							},
							"token1()": {
								"notice": "The second of the two tokens of the pool, sorted by address"
							}
						},
						"notice": "These parameters are fixed for a pool forever, i.e., the methods will always return the same values",
						"version": 1
					}
				},
				"IUniswapV3PoolOwnerActions": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collectProtocol",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint8",
									"name": "feeProtocol0",
									"type": "uint8"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol1",
									"type": "uint8"
								}
							],
							"name": "setFeeProtocol",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"collectProtocol(address,uint128,uint128)": {
								"params": {
									"amount0Requested": "The maximum amount of token0 to send, can be 0 to collect fees in only token1",
									"amount1Requested": "The maximum amount of token1 to send, can be 0 to collect fees in only token0",
									"recipient": "The address to which collected protocol fees should be sent"
								},
								"returns": {
									"amount0": "The protocol fee collected in token0",
									"amount1": "The protocol fee collected in token1"
								}
							},
							"setFeeProtocol(uint8,uint8)": {
								"params": {
									"feeProtocol0": "new protocol fee for token0 of the pool",
									"feeProtocol1": "new protocol fee for token1 of the pool"
								}
							}
						},
						"title": "Permissioned pool actions",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"collectProtocol(address,uint128,uint128)": "85b66729",
							"setFeeProtocol(uint8,uint8)": "8206a4d1"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collectProtocol\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feeProtocol0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol1\",\"type\":\"uint8\"}],\"name\":\"setFeeProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"collectProtocol(address,uint128,uint128)\":{\"params\":{\"amount0Requested\":\"The maximum amount of token0 to send, can be 0 to collect fees in only token1\",\"amount1Requested\":\"The maximum amount of token1 to send, can be 0 to collect fees in only token0\",\"recipient\":\"The address to which collected protocol fees should be sent\"},\"returns\":{\"amount0\":\"The protocol fee collected in token0\",\"amount1\":\"The protocol fee collected in token1\"}},\"setFeeProtocol(uint8,uint8)\":{\"params\":{\"feeProtocol0\":\"new protocol fee for token0 of the pool\",\"feeProtocol1\":\"new protocol fee for token1 of the pool\"}}},\"title\":\"Permissioned pool actions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"collectProtocol(address,uint128,uint128)\":{\"notice\":\"Collect the protocol fee accrued to the pool\"},\"setFeeProtocol(uint8,uint8)\":{\"notice\":\"Set the denominator of the protocol's % share of the fees\"}},\"notice\":\"Contains pool methods that may only be called by the factory owner\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapRouter_flattened.sol\":\"IUniswapV3PoolOwnerActions\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SwapRouter_flattened.sol\":{\"keccak256\":\"0xcf1b41bf0cccca5e629d64d60c6017a4d9216bcfc15f13cb44666bd333a64622\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb61746d170c341525404f902539ab06649109533f6db310ef3e0a39dfb00566\",\"dweb:/ipfs/QmWDhgoTVqeFhBxaK5cLCCmbL27rHHo48r8YnN3cLcfpmu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"collectProtocol(address,uint128,uint128)": {
								"notice": "Collect the protocol fee accrued to the pool"
							},
							"setFeeProtocol(uint8,uint8)": {
								"notice": "Set the denominator of the protocol's % share of the fees"
							}
						},
						"notice": "Contains pool methods that may only be called by the factory owner",
						"version": 1
					}
				},
				"IUniswapV3PoolState": {
					"abi": [
						{
							"inputs": [],
							"name": "feeGrowthGlobal0X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal1X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "liquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "observations",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "blockTimestamp",
									"type": "uint32"
								},
								{
									"internalType": "int56",
									"name": "tickCumulative",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityCumulativeX128",
									"type": "uint160"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "_liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside0LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside1LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "protocolFees",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "token0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "token1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "slot0",
							"outputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								},
								{
									"internalType": "uint16",
									"name": "observationIndex",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinality",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol",
									"type": "uint8"
								},
								{
									"internalType": "bool",
									"name": "unlocked",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int16",
									"name": "wordPosition",
									"type": "int16"
								}
							],
							"name": "tickBitmap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "ticks",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "liquidityGross",
									"type": "uint128"
								},
								{
									"internalType": "int128",
									"name": "liquidityNet",
									"type": "int128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside0X128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside1X128",
									"type": "uint256"
								},
								{
									"internalType": "int56",
									"name": "tickCumulativeOutside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityOutsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsOutside",
									"type": "uint32"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"feeGrowthGlobal0X128()": {
								"details": "This value can overflow the uint256"
							},
							"feeGrowthGlobal1X128()": {
								"details": "This value can overflow the uint256"
							},
							"liquidity()": {
								"details": "This value has no relationship to the total liquidity across all ticks"
							},
							"observations(uint256)": {
								"details": "You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.",
								"params": {
									"index": "The element of the observations array to fetch"
								},
								"returns": {
									"blockTimestamp": "The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use"
								}
							},
							"positions(bytes32)": {
								"params": {
									"key": "The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper"
								},
								"returns": {
									"_liquidity": "The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
								}
							},
							"protocolFees()": {
								"details": "Protocol fees will never exceed uint128 max in either token"
							},
							"slot0()": {
								"returns": {
									"sqrtPriceX96": "The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy"
								}
							},
							"ticks(int24)": {
								"params": {
									"tick": "The tick to look up"
								},
								"returns": {
									"liquidityGross": "the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position."
								}
							}
						},
						"title": "Pool state that can change",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"feeGrowthGlobal0X128()": "f3058399",
							"feeGrowthGlobal1X128()": "46141319",
							"liquidity()": "1a686502",
							"observations(uint256)": "252c09d7",
							"positions(bytes32)": "514ea4bf",
							"protocolFees()": "1ad8b03b",
							"slot0()": "3850c7bd",
							"tickBitmap(int16)": "5339c296",
							"ticks(int24)": "f30dba93"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"feeGrowthGlobal0X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal1X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"token0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"token1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"feeGrowthGlobal0X128()\":{\"details\":\"This value can overflow the uint256\"},\"feeGrowthGlobal1X128()\":{\"details\":\"This value can overflow the uint256\"},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticks\"},\"observations(uint256)\":{\"details\":\"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.\",\"params\":{\"index\":\"The element of the observations array to fetch\"},\"returns\":{\"blockTimestamp\":\"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use\"}},\"positions(bytes32)\":{\"params\":{\"key\":\"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\"},\"returns\":{\"_liquidity\":\"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\"}},\"protocolFees()\":{\"details\":\"Protocol fees will never exceed uint128 max in either token\"},\"slot0()\":{\"returns\":{\"sqrtPriceX96\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy\"}},\"ticks(int24)\":{\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"liquidityGross\":\"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\"}}},\"title\":\"Pool state that can change\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"feeGrowthGlobal0X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"feeGrowthGlobal1X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"observations(uint256)\":{\"notice\":\"Returns data about a specific observation index\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"protocolFees()\":{\"notice\":\"The amounts of token0 and token1 that are owed to the protocol\"},\"slot0()\":{\"notice\":\"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.\"},\"tickBitmap(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickBitmap for more information\"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"}},\"notice\":\"These methods compose the pool's state, and can change with any frequency including multiple times per transaction\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapRouter_flattened.sol\":\"IUniswapV3PoolState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SwapRouter_flattened.sol\":{\"keccak256\":\"0xcf1b41bf0cccca5e629d64d60c6017a4d9216bcfc15f13cb44666bd333a64622\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb61746d170c341525404f902539ab06649109533f6db310ef3e0a39dfb00566\",\"dweb:/ipfs/QmWDhgoTVqeFhBxaK5cLCCmbL27rHHo48r8YnN3cLcfpmu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"feeGrowthGlobal0X128()": {
								"notice": "The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"
							},
							"feeGrowthGlobal1X128()": {
								"notice": "The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"
							},
							"liquidity()": {
								"notice": "The currently in range liquidity available to the pool"
							},
							"observations(uint256)": {
								"notice": "Returns data about a specific observation index"
							},
							"positions(bytes32)": {
								"notice": "Returns the information about a position by the position's key"
							},
							"protocolFees()": {
								"notice": "The amounts of token0 and token1 that are owed to the protocol"
							},
							"slot0()": {
								"notice": "The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally."
							},
							"tickBitmap(int16)": {
								"notice": "Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
							},
							"ticks(int24)": {
								"notice": "Look up information about a specific tick in the pool"
							}
						},
						"notice": "These methods compose the pool's state, and can change with any frequency including multiple times per transaction",
						"version": 1
					}
				},
				"IUniswapV3SwapCallback": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "int256",
									"name": "amount0Delta",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1Delta",
									"type": "int256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "uniswapV3SwapCallback",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"details": "In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.",
								"params": {
									"amount0Delta": "The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.",
									"amount1Delta": "The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.",
									"data": "Any data passed through by the caller via the IUniswapV3PoolActions#swap call"
								}
							}
						},
						"title": "Callback for IUniswapV3PoolActions#swap",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"uniswapV3SwapCallback(int256,int256,bytes)": "fa461e33"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the IUniswapV3PoolActions#swap call\"}}},\"title\":\"Callback for IUniswapV3PoolActions#swap\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\"}},\"notice\":\"Any contract that calls IUniswapV3PoolActions#swap must implement this interface\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapRouter_flattened.sol\":\"IUniswapV3SwapCallback\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SwapRouter_flattened.sol\":{\"keccak256\":\"0xcf1b41bf0cccca5e629d64d60c6017a4d9216bcfc15f13cb44666bd333a64622\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb61746d170c341525404f902539ab06649109533f6db310ef3e0a39dfb00566\",\"dweb:/ipfs/QmWDhgoTVqeFhBxaK5cLCCmbL27rHHo48r8YnN3cLcfpmu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"notice": "Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap."
							}
						},
						"notice": "Any contract that calls IUniswapV3PoolActions#swap must implement this interface",
						"version": 1
					}
				},
				"IWETH9": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "deposit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "withdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"title": "Interface for WETH9",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"deposit()": "d0e30db0",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"withdraw(uint256)": "2e1a7d4d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"title\":\"Interface for WETH9\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit()\":{\"notice\":\"Deposit ether to get wrapped ether\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw wrapped ether to get ether\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapRouter_flattened.sol\":\"IWETH9\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SwapRouter_flattened.sol\":{\"keccak256\":\"0xcf1b41bf0cccca5e629d64d60c6017a4d9216bcfc15f13cb44666bd333a64622\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb61746d170c341525404f902539ab06649109533f6db310ef3e0a39dfb00566\",\"dweb:/ipfs/QmWDhgoTVqeFhBxaK5cLCCmbL27rHHo48r8YnN3cLcfpmu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"deposit()": {
								"notice": "Deposit ether to get wrapped ether"
							},
							"withdraw(uint256)": {
								"notice": "Withdraw wrapped ether to get ether"
							}
						},
						"version": 1
					}
				},
				"LowGasSafeMath": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Optimized overflow and underflow safe math operations",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/SwapRouter_flattened.sol\":21044:22530  library LowGasSafeMath {\r... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/SwapRouter_flattened.sol\":21044:22530  library LowGasSafeMath {\r... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212203c5251d5fdf282406b3ac5d14ec98cf0b2ec8612d8e94bbfc8d791cb501d9c1864736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203c5251d5fdf282406b3ac5d14ec98cf0b2ec8612d8e94bbfc8d791cb501d9c1864736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODECOPY MSTORE MLOAD 0xD5 REVERT CALLCODE DUP3 BLOCKHASH PUSH12 0x3AC5D14EC98CF0B2EC8612D8 0xE9 0x4B 0xBF 0xC8 0xD7 SWAP2 0xCB POP SAR SWAP13 XOR PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "21044:1486:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203c5251d5fdf282406b3ac5d14ec98cf0b2ec8612d8e94bbfc8d791cb501d9c1864736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODECOPY MSTORE MLOAD 0xD5 REVERT CALLCODE DUP3 BLOCKHASH PUSH12 0x3AC5D14EC98CF0B2EC8612D8 0xE9 0x4B 0xBF 0xC8 0xD7 SWAP2 0xCB POP SAR SWAP13 XOR PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "21044:1486:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"add(int256,int256)": "infinite",
								"add(uint256,uint256)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(int256,int256)": "infinite",
								"sub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 21044,
									"end": 22530,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 21044,
									"end": 22530,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 21044,
									"end": 22530,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 21044,
									"end": 22530,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 21044,
									"end": 22530,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 21044,
									"end": 22530,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 21044,
									"end": 22530,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 21044,
									"end": 22530,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 21044,
									"end": 22530,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 21044,
									"end": 22530,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 21044,
									"end": 22530,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 21044,
									"end": 22530,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 21044,
									"end": 22530,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 21044,
									"end": 22530,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 21044,
									"end": 22530,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 21044,
									"end": 22530,
									"name": "INVALID",
									"source": 0
								},
								{
									"begin": 21044,
									"end": 22530,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 21044,
									"end": 22530,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 21044,
									"end": 22530,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 21044,
									"end": 22530,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 21044,
									"end": 22530,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 21044,
									"end": 22530,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 21044,
									"end": 22530,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 21044,
									"end": 22530,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 21044,
									"end": 22530,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 21044,
									"end": 22530,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 21044,
									"end": 22530,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212203c5251d5fdf282406b3ac5d14ec98cf0b2ec8612d8e94bbfc8d791cb501d9c1864736f6c63430007060033",
									".code": [
										{
											"begin": 21044,
											"end": 22530,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 21044,
											"end": 22530,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 21044,
											"end": 22530,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 21044,
											"end": 22530,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 21044,
											"end": 22530,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 21044,
											"end": 22530,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 21044,
											"end": 22530,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 21044,
											"end": 22530,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 21044,
											"end": 22530,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Optimized overflow and underflow safe math operations\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapRouter_flattened.sol\":\"LowGasSafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SwapRouter_flattened.sol\":{\"keccak256\":\"0xcf1b41bf0cccca5e629d64d60c6017a4d9216bcfc15f13cb44666bd333a64622\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb61746d170c341525404f902539ab06649109533f6db310ef3e0a39dfb00566\",\"dweb:/ipfs/QmWDhgoTVqeFhBxaK5cLCCmbL27rHHo48r8YnN3cLcfpmu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost",
						"version": 1
					}
				},
				"Multicall": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes[]",
									"name": "data",
									"type": "bytes[]"
								}
							],
							"name": "multicall",
							"outputs": [
								{
									"internalType": "bytes[]",
									"name": "results",
									"type": "bytes[]"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"multicall(bytes[])": {
								"details": "The `msg.value` should not be trusted for any method callable from multicall.",
								"params": {
									"data": "The encoded function data for each of the calls to make to this contract"
								},
								"returns": {
									"results": "The results from each of the calls passed in via data"
								}
							}
						},
						"title": "Multicall",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"multicall(bytes[])": "ac9650d8"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"multicall(bytes[])\":{\"details\":\"The `msg.value` should not be trusted for any method callable from multicall.\",\"params\":{\"data\":\"The encoded function data for each of the calls to make to this contract\"},\"returns\":{\"results\":\"The results from each of the calls passed in via data\"}}},\"title\":\"Multicall\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"multicall(bytes[])\":{\"notice\":\"Call multiple functions in the current contract and return the data from all of them if they all succeed\"}},\"notice\":\"Enables calling multiple methods in a single call to the contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapRouter_flattened.sol\":\"Multicall\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SwapRouter_flattened.sol\":{\"keccak256\":\"0xcf1b41bf0cccca5e629d64d60c6017a4d9216bcfc15f13cb44666bd333a64622\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb61746d170c341525404f902539ab06649109533f6db310ef3e0a39dfb00566\",\"dweb:/ipfs/QmWDhgoTVqeFhBxaK5cLCCmbL27rHHo48r8YnN3cLcfpmu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"multicall(bytes[])": {
								"notice": "Call multiple functions in the current contract and return the data from all of them if they all succeed"
							}
						},
						"notice": "Enables calling multiple methods in a single call to the contract",
						"version": 1
					}
				},
				"Path": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"ADDR_SIZE": {
								"details": "The length of the bytes encoded address"
							},
							"FEE_SIZE": {
								"details": "The length of the bytes encoded fee"
							},
							"MULTIPLE_POOLS_MIN_LENGTH": {
								"details": "The minimum length of an encoding that contains 2 or more pools"
							},
							"NEXT_OFFSET": {
								"details": "The offset of a single token address and pool fee"
							},
							"POP_OFFSET": {
								"details": "The offset of an encoded pool key"
							}
						},
						"title": "Functions for manipulating path data for multihop swaps",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/SwapRouter_flattened.sol\":6367:9051  library Path {\r... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/SwapRouter_flattened.sol\":6367:9051  library Path {\r... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220395c3bdcb2c6331da5c53a7bb30e3011676f250f31932a071c72adca54d3966264736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220395c3bdcb2c6331da5c53a7bb30e3011676f250f31932a071c72adca54d3966264736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CODECOPY 0x5C EXTCODESIZE 0xDC 0xB2 0xC6 CALLER SAR 0xA5 0xC5 GASPRICE PUSH28 0xB30E3011676F250F31932A071C72ADCA54D3966264736F6C63430007 MOD STOP CALLER ",
							"sourceMap": "6367:2684:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220395c3bdcb2c6331da5c53a7bb30e3011676f250f31932a071c72adca54d3966264736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CODECOPY 0x5C EXTCODESIZE 0xDC 0xB2 0xC6 CALLER SAR 0xA5 0xC5 GASPRICE PUSH28 0xB30E3011676F250F31932A071C72ADCA54D3966264736F6C63430007 MOD STOP CALLER ",
							"sourceMap": "6367:2684:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"decodeFirstPool(bytes memory)": "infinite",
								"getFirstPool(bytes memory)": "infinite",
								"hasMultiplePools(bytes memory)": "infinite",
								"numPools(bytes memory)": "infinite",
								"skipToken(bytes memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 6367,
									"end": 9051,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 6367,
									"end": 9051,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 6367,
									"end": 9051,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 6367,
									"end": 9051,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 6367,
									"end": 9051,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 6367,
									"end": 9051,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 6367,
									"end": 9051,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 6367,
									"end": 9051,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 6367,
									"end": 9051,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 6367,
									"end": 9051,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 6367,
									"end": 9051,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 6367,
									"end": 9051,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 6367,
									"end": 9051,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 6367,
									"end": 9051,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 6367,
									"end": 9051,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 6367,
									"end": 9051,
									"name": "INVALID",
									"source": 0
								},
								{
									"begin": 6367,
									"end": 9051,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 6367,
									"end": 9051,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 6367,
									"end": 9051,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 6367,
									"end": 9051,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 6367,
									"end": 9051,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 6367,
									"end": 9051,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 6367,
									"end": 9051,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 6367,
									"end": 9051,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 6367,
									"end": 9051,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 6367,
									"end": 9051,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 6367,
									"end": 9051,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220395c3bdcb2c6331da5c53a7bb30e3011676f250f31932a071c72adca54d3966264736f6c63430007060033",
									".code": [
										{
											"begin": 6367,
											"end": 9051,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 6367,
											"end": 9051,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 6367,
											"end": 9051,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 6367,
											"end": 9051,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 6367,
											"end": 9051,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6367,
											"end": 9051,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6367,
											"end": 9051,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6367,
											"end": 9051,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6367,
											"end": 9051,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"ADDR_SIZE\":{\"details\":\"The length of the bytes encoded address\"},\"FEE_SIZE\":{\"details\":\"The length of the bytes encoded fee\"},\"MULTIPLE_POOLS_MIN_LENGTH\":{\"details\":\"The minimum length of an encoding that contains 2 or more pools\"},\"NEXT_OFFSET\":{\"details\":\"The offset of a single token address and pool fee\"},\"POP_OFFSET\":{\"details\":\"The offset of an encoded pool key\"}},\"title\":\"Functions for manipulating path data for multihop swaps\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapRouter_flattened.sol\":\"Path\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SwapRouter_flattened.sol\":{\"keccak256\":\"0xcf1b41bf0cccca5e629d64d60c6017a4d9216bcfc15f13cb44666bd333a64622\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb61746d170c341525404f902539ab06649109533f6db310ef3e0a39dfb00566\",\"dweb:/ipfs/QmWDhgoTVqeFhBxaK5cLCCmbL27rHHo48r8YnN3cLcfpmu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"PeripheryImmutableState": {
					"abi": [
						{
							"inputs": [],
							"name": "WETH9",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"WETH9": {
								"return": "Returns the address of WETH9"
							},
							"factory": {
								"return": "Returns the address of the Uniswap V3 factory"
							}
						},
						"title": "Immutable state",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"WETH9()": "4aa4a4fc",
							"factory()": "c45a0155"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"WETH9\":{\"return\":\"Returns the address of WETH9\"},\"factory\":{\"return\":\"Returns the address of the Uniswap V3 factory\"}},\"title\":\"Immutable state\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Immutable state used by periphery contracts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapRouter_flattened.sol\":\"PeripheryImmutableState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SwapRouter_flattened.sol\":{\"keccak256\":\"0xcf1b41bf0cccca5e629d64d60c6017a4d9216bcfc15f13cb44666bd333a64622\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb61746d170c341525404f902539ab06649109533f6db310ef3e0a39dfb00566\",\"dweb:/ipfs/QmWDhgoTVqeFhBxaK5cLCCmbL27rHHo48r8YnN3cLcfpmu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Immutable state used by periphery contracts",
						"version": 1
					}
				},
				"PeripheryPayments": {
					"abi": [
						{
							"inputs": [],
							"name": "WETH9",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "refundETH",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "sweepToken",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "unwrapWETH9",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"refundETH()": {
								"details": "Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount"
							},
							"sweepToken(address,uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing the token from users",
								"params": {
									"amountMinimum": "The minimum amount of token required for a transfer",
									"recipient": "The destination address of the token",
									"token": "The contract address of the token which will be transferred to `recipient`"
								}
							},
							"unwrapWETH9(uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.",
								"params": {
									"amountMinimum": "The minimum amount of WETH9 to unwrap",
									"recipient": "The address receiving ETH"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"WETH9()": "4aa4a4fc",
							"factory()": "c45a0155",
							"refundETH()": "12210e8a",
							"sweepToken(address,uint256,address)": "df2ab5bb",
							"unwrapWETH9(uint256,address)": "49404b7c"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH9\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"refundETH()\":{\"details\":\"Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount\"},\"sweepToken(address,uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing the token from users\",\"params\":{\"amountMinimum\":\"The minimum amount of token required for a transfer\",\"recipient\":\"The destination address of the token\",\"token\":\"The contract address of the token which will be transferred to `recipient`\"}},\"unwrapWETH9(uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\",\"params\":{\"amountMinimum\":\"The minimum amount of WETH9 to unwrap\",\"recipient\":\"The address receiving ETH\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"refundETH()\":{\"notice\":\"Refunds any ETH balance held by this contract to the `msg.sender`\"},\"sweepToken(address,uint256,address)\":{\"notice\":\"Transfers the full amount of a token held by this contract to recipient\"},\"unwrapWETH9(uint256,address)\":{\"notice\":\"Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapRouter_flattened.sol\":\"PeripheryPayments\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SwapRouter_flattened.sol\":{\"keccak256\":\"0xcf1b41bf0cccca5e629d64d60c6017a4d9216bcfc15f13cb44666bd333a64622\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb61746d170c341525404f902539ab06649109533f6db310ef3e0a39dfb00566\",\"dweb:/ipfs/QmWDhgoTVqeFhBxaK5cLCCmbL27rHHo48r8YnN3cLcfpmu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"refundETH()": {
								"notice": "Refunds any ETH balance held by this contract to the `msg.sender`"
							},
							"sweepToken(address,uint256,address)": {
								"notice": "Transfers the full amount of a token held by this contract to recipient"
							},
							"unwrapWETH9(uint256,address)": {
								"notice": "Unwraps the contract's WETH9 balance and sends it to recipient as ETH."
							}
						},
						"version": 1
					}
				},
				"PeripheryPaymentsWithFee": {
					"abi": [
						{
							"inputs": [],
							"name": "WETH9",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "refundETH",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "sweepToken",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "feeBips",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "feeRecipient",
									"type": "address"
								}
							],
							"name": "sweepTokenWithFee",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "unwrapWETH9",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "feeBips",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "feeRecipient",
									"type": "address"
								}
							],
							"name": "unwrapWETH9WithFee",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"refundETH()": {
								"details": "Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount"
							},
							"sweepToken(address,uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing the token from users",
								"params": {
									"amountMinimum": "The minimum amount of token required for a transfer",
									"recipient": "The destination address of the token",
									"token": "The contract address of the token which will be transferred to `recipient`"
								}
							},
							"sweepTokenWithFee(address,uint256,address,uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing the token from users"
							},
							"unwrapWETH9(uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.",
								"params": {
									"amountMinimum": "The minimum amount of WETH9 to unwrap",
									"recipient": "The address receiving ETH"
								}
							},
							"unwrapWETH9WithFee(uint256,address,uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"WETH9()": "4aa4a4fc",
							"factory()": "c45a0155",
							"refundETH()": "12210e8a",
							"sweepToken(address,uint256,address)": "df2ab5bb",
							"sweepTokenWithFee(address,uint256,address,uint256,address)": "e0e189a0",
							"unwrapWETH9(uint256,address)": "49404b7c",
							"unwrapWETH9WithFee(uint256,address,uint256,address)": "9b2c0a37"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeBips\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"sweepTokenWithFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH9\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeBips\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH9WithFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"refundETH()\":{\"details\":\"Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount\"},\"sweepToken(address,uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing the token from users\",\"params\":{\"amountMinimum\":\"The minimum amount of token required for a transfer\",\"recipient\":\"The destination address of the token\",\"token\":\"The contract address of the token which will be transferred to `recipient`\"}},\"sweepTokenWithFee(address,uint256,address,uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing the token from users\"},\"unwrapWETH9(uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\",\"params\":{\"amountMinimum\":\"The minimum amount of WETH9 to unwrap\",\"recipient\":\"The address receiving ETH\"}},\"unwrapWETH9WithFee(uint256,address,uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"refundETH()\":{\"notice\":\"Refunds any ETH balance held by this contract to the `msg.sender`\"},\"sweepToken(address,uint256,address)\":{\"notice\":\"Transfers the full amount of a token held by this contract to recipient\"},\"sweepTokenWithFee(address,uint256,address,uint256,address)\":{\"notice\":\"Transfers the full amount of a token held by this contract to recipient, with a percentage between 0 (exclusive) and 1 (inclusive) going to feeRecipient\"},\"unwrapWETH9(uint256,address)\":{\"notice\":\"Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\"},\"unwrapWETH9WithFee(uint256,address,uint256,address)\":{\"notice\":\"Unwraps the contract's WETH9 balance and sends it to recipient as ETH, with a percentage between 0 (exclusive), and 1 (inclusive) going to feeRecipient\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapRouter_flattened.sol\":\"PeripheryPaymentsWithFee\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SwapRouter_flattened.sol\":{\"keccak256\":\"0xcf1b41bf0cccca5e629d64d60c6017a4d9216bcfc15f13cb44666bd333a64622\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb61746d170c341525404f902539ab06649109533f6db310ef3e0a39dfb00566\",\"dweb:/ipfs/QmWDhgoTVqeFhBxaK5cLCCmbL27rHHo48r8YnN3cLcfpmu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"refundETH()": {
								"notice": "Refunds any ETH balance held by this contract to the `msg.sender`"
							},
							"sweepToken(address,uint256,address)": {
								"notice": "Transfers the full amount of a token held by this contract to recipient"
							},
							"sweepTokenWithFee(address,uint256,address,uint256,address)": {
								"notice": "Transfers the full amount of a token held by this contract to recipient, with a percentage between 0 (exclusive) and 1 (inclusive) going to feeRecipient"
							},
							"unwrapWETH9(uint256,address)": {
								"notice": "Unwraps the contract's WETH9 balance and sends it to recipient as ETH."
							},
							"unwrapWETH9WithFee(uint256,address,uint256,address)": {
								"notice": "Unwraps the contract's WETH9 balance and sends it to recipient as ETH, with a percentage between 0 (exclusive), and 1 (inclusive) going to feeRecipient"
							}
						},
						"version": 1
					}
				},
				"PeripheryValidation": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapRouter_flattened.sol\":\"PeripheryValidation\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SwapRouter_flattened.sol\":{\"keccak256\":\"0xcf1b41bf0cccca5e629d64d60c6017a4d9216bcfc15f13cb44666bd333a64622\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb61746d170c341525404f902539ab06649109533f6db310ef3e0a39dfb00566\",\"dweb:/ipfs/QmWDhgoTVqeFhBxaK5cLCCmbL27rHHo48r8YnN3cLcfpmu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"PoolAddress": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Provides functions for deriving a pool address from the factory, tokens, and the fee",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/SwapRouter_flattened.sol\":221:1916  library PoolAddress {\r... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/SwapRouter_flattened.sol\":221:1916  library PoolAddress {\r... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122089501a16a4e0343ac75bdf42b29e5839f07f491040e07a4ac19e14109248ce5664736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122089501a16a4e0343ac75bdf42b29e5839f07f491040e07a4ac19e14109248ce5664736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP10 POP BYTE AND LOG4 0xE0 CALLVALUE GASPRICE 0xC7 JUMPDEST 0xDF TIMESTAMP 0xB2 SWAP15 PC CODECOPY CREATE PUSH32 0x491040E07A4AC19E14109248CE5664736F6C6343000706003300000000000000 ",
							"sourceMap": "221:1695:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122089501a16a4e0343ac75bdf42b29e5839f07f491040e07a4ac19e14109248ce5664736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP10 POP BYTE AND LOG4 0xE0 CALLVALUE GASPRICE 0xC7 JUMPDEST 0xDF TIMESTAMP 0xB2 SWAP15 PC CODECOPY CREATE PUSH32 0x491040E07A4AC19E14109248CE5664736F6C6343000706003300000000000000 ",
							"sourceMap": "221:1695:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"computeAddress(address,struct PoolAddress.PoolKey memory)": "infinite",
								"getPoolKey(address,address,uint24)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 221,
									"end": 1916,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 221,
									"end": 1916,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 221,
									"end": 1916,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 221,
									"end": 1916,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 221,
									"end": 1916,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 221,
									"end": 1916,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 221,
									"end": 1916,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 221,
									"end": 1916,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 221,
									"end": 1916,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 221,
									"end": 1916,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 221,
									"end": 1916,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 221,
									"end": 1916,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 221,
									"end": 1916,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 221,
									"end": 1916,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 221,
									"end": 1916,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 221,
									"end": 1916,
									"name": "INVALID",
									"source": 0
								},
								{
									"begin": 221,
									"end": 1916,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 221,
									"end": 1916,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 221,
									"end": 1916,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 221,
									"end": 1916,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 221,
									"end": 1916,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 221,
									"end": 1916,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 221,
									"end": 1916,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 221,
									"end": 1916,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 221,
									"end": 1916,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 221,
									"end": 1916,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 221,
									"end": 1916,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122089501a16a4e0343ac75bdf42b29e5839f07f491040e07a4ac19e14109248ce5664736f6c63430007060033",
									".code": [
										{
											"begin": 221,
											"end": 1916,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 221,
											"end": 1916,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 221,
											"end": 1916,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 221,
											"end": 1916,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 221,
											"end": 1916,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 221,
											"end": 1916,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 221,
											"end": 1916,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 221,
											"end": 1916,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 221,
											"end": 1916,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Provides functions for deriving a pool address from the factory, tokens, and the fee\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapRouter_flattened.sol\":\"PoolAddress\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SwapRouter_flattened.sol\":{\"keccak256\":\"0xcf1b41bf0cccca5e629d64d60c6017a4d9216bcfc15f13cb44666bd333a64622\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb61746d170c341525404f902539ab06649109533f6db310ef3e0a39dfb00566\",\"dweb:/ipfs/QmWDhgoTVqeFhBxaK5cLCCmbL27rHHo48r8YnN3cLcfpmu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"SafeCast": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Safe casting methods",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/SwapRouter_flattened.sol\":76051:76955  library SafeCast {\r... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/SwapRouter_flattened.sol\":76051:76955  library SafeCast {\r... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212201c5ffd78a7be549b642d8204a6bd73183ce3f88c082db0cd86c1c8bb08b2bcb464736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201c5ffd78a7be549b642d8204a6bd73183ce3f88c082db0cd86c1c8bb08b2bcb464736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SHR 0x5F REVERT PUSH25 0xA7BE549B642D8204A6BD73183CE3F88C082DB0CD86C1C8BB08 0xB2 0xBC 0xB4 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "76051:904:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201c5ffd78a7be549b642d8204a6bd73183ce3f88c082db0cd86c1c8bb08b2bcb464736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SHR 0x5F REVERT PUSH25 0xA7BE549B642D8204A6BD73183CE3F88C082DB0CD86C1C8BB08 0xB2 0xBC 0xB4 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "76051:904:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"toInt128(int256)": "infinite",
								"toInt256(uint256)": "infinite",
								"toUint160(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 76051,
									"end": 76955,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 76051,
									"end": 76955,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 76051,
									"end": 76955,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 76051,
									"end": 76955,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 76051,
									"end": 76955,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 76051,
									"end": 76955,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 76051,
									"end": 76955,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 76051,
									"end": 76955,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 76051,
									"end": 76955,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 76051,
									"end": 76955,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 76051,
									"end": 76955,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 76051,
									"end": 76955,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 76051,
									"end": 76955,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 76051,
									"end": 76955,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 76051,
									"end": 76955,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 76051,
									"end": 76955,
									"name": "INVALID",
									"source": 0
								},
								{
									"begin": 76051,
									"end": 76955,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 76051,
									"end": 76955,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 76051,
									"end": 76955,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 76051,
									"end": 76955,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 76051,
									"end": 76955,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 76051,
									"end": 76955,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 76051,
									"end": 76955,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 76051,
									"end": 76955,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 76051,
									"end": 76955,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 76051,
									"end": 76955,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 76051,
									"end": 76955,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212201c5ffd78a7be549b642d8204a6bd73183ce3f88c082db0cd86c1c8bb08b2bcb464736f6c63430007060033",
									".code": [
										{
											"begin": 76051,
											"end": 76955,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 76051,
											"end": 76955,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 76051,
											"end": 76955,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 76051,
											"end": 76955,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 76051,
											"end": 76955,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 76051,
											"end": 76955,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 76051,
											"end": 76955,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 76051,
											"end": 76955,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 76051,
											"end": 76955,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Safe casting methods\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains methods for safely casting between types\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapRouter_flattened.sol\":\"SafeCast\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SwapRouter_flattened.sol\":{\"keccak256\":\"0xcf1b41bf0cccca5e629d64d60c6017a4d9216bcfc15f13cb44666bd333a64622\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb61746d170c341525404f902539ab06649109533f6db310ef3e0a39dfb00566\",\"dweb:/ipfs/QmWDhgoTVqeFhBxaK5cLCCmbL27rHHo48r8YnN3cLcfpmu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Contains methods for safely casting between types",
						"version": 1
					}
				},
				"SelfPermit": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "nonce",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "expiry",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermitAllowed",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "nonce",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "expiry",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermitAllowedIfNecessary",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermitIfNecessary",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "These functions are expected to be embedded in multicalls to allow EOAs to approve a contract and call a function that requires an approval in a single transaction.",
						"kind": "dev",
						"methods": {
							"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this).",
								"params": {
									"deadline": "A timestamp, the current blocktime must be less than or equal to this timestamp",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`",
									"value": "The amount that can be spent of token"
								}
							},
							"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this)",
								"params": {
									"expiry": "The timestamp at which the permit is no longer valid",
									"nonce": "The current nonce of the owner",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this) Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.",
								"params": {
									"expiry": "The timestamp at which the permit is no longer valid",
									"nonce": "The current nonce of the owner",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this). Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit",
								"params": {
									"deadline": "A timestamp, the current blocktime must be less than or equal to this timestamp",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`",
									"value": "The amount that can be spent of token"
								}
							}
						},
						"title": "Self Permit",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": "f3995c67",
							"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": "4659a494",
							"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": "a4a78f0c",
							"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": "c2e3140a"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitAllowed\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitAllowedIfNecessary\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitIfNecessary\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"These functions are expected to be embedded in multicalls to allow EOAs to approve a contract and call a function that requires an approval in a single transaction.\",\"kind\":\"dev\",\"methods\":{\"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this).\",\"params\":{\"deadline\":\"A timestamp, the current blocktime must be less than or equal to this timestamp\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\",\"value\":\"The amount that can be spent of token\"}},\"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this)\",\"params\":{\"expiry\":\"The timestamp at which the permit is no longer valid\",\"nonce\":\"The current nonce of the owner\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this) Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.\",\"params\":{\"expiry\":\"The timestamp at which the permit is no longer valid\",\"nonce\":\"The current nonce of the owner\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this). Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit\",\"params\":{\"deadline\":\"A timestamp, the current blocktime must be less than or equal to this timestamp\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\",\"value\":\"The amount that can be spent of token\"}}},\"title\":\"Self Permit\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend a given token from `msg.sender`\"},\"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\"},\"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\"},\"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend a given token from `msg.sender`\"}},\"notice\":\"Functionality to call permit on any EIP-2612-compliant token for use in the route\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapRouter_flattened.sol\":\"SelfPermit\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SwapRouter_flattened.sol\":{\"keccak256\":\"0xcf1b41bf0cccca5e629d64d60c6017a4d9216bcfc15f13cb44666bd333a64622\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb61746d170c341525404f902539ab06649109533f6db310ef3e0a39dfb00566\",\"dweb:/ipfs/QmWDhgoTVqeFhBxaK5cLCCmbL27rHHo48r8YnN3cLcfpmu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend a given token from `msg.sender`"
							},
							"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter"
							},
							"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter"
							},
							"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend a given token from `msg.sender`"
							}
						},
						"notice": "Functionality to call permit on any EIP-2612-compliant token for use in the route",
						"version": 1
					}
				},
				"SwapRouter": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_factory",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_WETH9",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "WETH9",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "bytes",
											"name": "path",
											"type": "bytes"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountIn",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOutMinimum",
											"type": "uint256"
										}
									],
									"internalType": "struct ISwapRouter.ExactInputParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactInput",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "tokenIn",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "tokenOut",
											"type": "address"
										},
										{
											"internalType": "uint24",
											"name": "fee",
											"type": "uint24"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountIn",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOutMinimum",
											"type": "uint256"
										},
										{
											"internalType": "uint160",
											"name": "sqrtPriceLimitX96",
											"type": "uint160"
										}
									],
									"internalType": "struct ISwapRouter.ExactInputSingleParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactInputSingle",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "bytes",
											"name": "path",
											"type": "bytes"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOut",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountInMaximum",
											"type": "uint256"
										}
									],
									"internalType": "struct ISwapRouter.ExactOutputParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactOutput",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "tokenIn",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "tokenOut",
											"type": "address"
										},
										{
											"internalType": "uint24",
											"name": "fee",
											"type": "uint24"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOut",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountInMaximum",
											"type": "uint256"
										},
										{
											"internalType": "uint160",
											"name": "sqrtPriceLimitX96",
											"type": "uint160"
										}
									],
									"internalType": "struct ISwapRouter.ExactOutputSingleParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactOutputSingle",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes[]",
									"name": "data",
									"type": "bytes[]"
								}
							],
							"name": "multicall",
							"outputs": [
								{
									"internalType": "bytes[]",
									"name": "results",
									"type": "bytes[]"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "refundETH",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "nonce",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "expiry",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermitAllowed",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "nonce",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "expiry",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermitAllowedIfNecessary",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermitIfNecessary",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "sweepToken",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "feeBips",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "feeRecipient",
									"type": "address"
								}
							],
							"name": "sweepTokenWithFee",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int256",
									"name": "amount0Delta",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1Delta",
									"type": "int256"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								}
							],
							"name": "uniswapV3SwapCallback",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "unwrapWETH9",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "feeBips",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "feeRecipient",
									"type": "address"
								}
							],
							"name": "unwrapWETH9WithFee",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"exactInput((bytes,address,uint256,uint256,uint256))": {
								"params": {
									"params": "The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata"
								},
								"returns": {
									"amountOut": "The amount of the received token"
								}
							},
							"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
								"params": {
									"params": "The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata"
								},
								"returns": {
									"amountOut": "The amount of the received token"
								}
							},
							"exactOutput((bytes,address,uint256,uint256,uint256))": {
								"params": {
									"params": "The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata"
								},
								"returns": {
									"amountIn": "The amount of the input token"
								}
							},
							"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
								"params": {
									"params": "The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata"
								},
								"returns": {
									"amountIn": "The amount of the input token"
								}
							},
							"multicall(bytes[])": {
								"details": "The `msg.value` should not be trusted for any method callable from multicall.",
								"params": {
									"data": "The encoded function data for each of the calls to make to this contract"
								},
								"returns": {
									"results": "The results from each of the calls passed in via data"
								}
							},
							"refundETH()": {
								"details": "Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount"
							},
							"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this).",
								"params": {
									"deadline": "A timestamp, the current blocktime must be less than or equal to this timestamp",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`",
									"value": "The amount that can be spent of token"
								}
							},
							"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this)",
								"params": {
									"expiry": "The timestamp at which the permit is no longer valid",
									"nonce": "The current nonce of the owner",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this) Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.",
								"params": {
									"expiry": "The timestamp at which the permit is no longer valid",
									"nonce": "The current nonce of the owner",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this). Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit",
								"params": {
									"deadline": "A timestamp, the current blocktime must be less than or equal to this timestamp",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`",
									"value": "The amount that can be spent of token"
								}
							},
							"sweepToken(address,uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing the token from users",
								"params": {
									"amountMinimum": "The minimum amount of token required for a transfer",
									"recipient": "The destination address of the token",
									"token": "The contract address of the token which will be transferred to `recipient`"
								}
							},
							"sweepTokenWithFee(address,uint256,address,uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing the token from users"
							},
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"details": "In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.",
								"params": {
									"amount0Delta": "The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.",
									"amount1Delta": "The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.",
									"data": "Any data passed through by the caller via the IUniswapV3PoolActions#swap call"
								}
							},
							"unwrapWETH9(uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.",
								"params": {
									"amountMinimum": "The minimum amount of WETH9 to unwrap",
									"recipient": "The address receiving ETH"
								}
							},
							"unwrapWETH9WithFee(uint256,address,uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users."
							}
						},
						"stateVariables": {
							"DEFAULT_AMOUNT_IN_CACHED": {
								"details": "Used as the placeholder value for amountInCached, because the computed amount in for an exact output swap can never actually be this value"
							},
							"amountInCached": {
								"details": "Transient storage variable used for returning the computed amount in for an exact output swap."
							}
						},
						"title": "Uniswap V3 Swap Router",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/SwapRouter_flattened.sol\":77153:85715  contract SwapRouter is\r... */\n  mstore(0x40, 0xc0)\n  not(0x00)\n    /* \"contracts/SwapRouter_flattened.sol\":77732:77789  uint256 private amountInCached = DEFAULT_AMOUNT_IN_CACHED */\n  0x00\n  sstore\n    /* \"contracts/SwapRouter_flattened.sol\":77798:77888  constructor(address _factory, address _WETH9) PeripheryImmutableState(_factory, _WETH9) {} */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n  not(sub(shl(0x60, 0x01), 0x01))\n    /* \"contracts/SwapRouter_flattened.sol\":31755:31773  factory = _factory */\n  0x60\n  swap3\n  dup4\n  shl\n  dup2\n  and\n  0x80\n  mstore\n    /* \"contracts/SwapRouter_flattened.sol\":31784:31798  WETH9 = _WETH9 */\n  swap2\n  shl\n  and\n  0xa0\n  mstore\n    /* \"contracts/SwapRouter_flattened.sol\":77153:85715  contract SwapRouter is\r... */\n  jump(tag_9)\n    /* \"#utility.yul\":14:193   */\ntag_10:\n    /* \"#utility.yul\":95:108   */\n  dup1\n  mload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":137:168   */\n  dup2\n  and\n    /* \"#utility.yul\":127:169   */\n  dup2\n  eq\n    /* \"#utility.yul\":117:119   */\n  tag_12\n  jumpi\n    /* \"#utility.yul\":183:184   */\n  0x00\n    /* \"#utility.yul\":180:181   */\n  dup1\n    /* \"#utility.yul\":173:185   */\n  revert\n    /* \"#utility.yul\":117:119   */\ntag_12:\n    /* \"#utility.yul\":76:193   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":198:505   */\ntag_3:\n  0x00\n  dup1\n    /* \"#utility.yul\":338:340   */\n  0x40\n    /* \"#utility.yul\":326:335   */\n  dup4\n    /* \"#utility.yul\":317:324   */\n  dup6\n    /* \"#utility.yul\":313:336   */\n  sub\n    /* \"#utility.yul\":309:341   */\n  slt\n    /* \"#utility.yul\":306:308   */\n  iszero\n  tag_14\n  jumpi\n    /* \"#utility.yul\":359:365   */\n  dup2\n    /* \"#utility.yul\":351:357   */\n  dup3\n    /* \"#utility.yul\":344:366   */\n  revert\n    /* \"#utility.yul\":306:308   */\ntag_14:\n    /* \"#utility.yul\":387:429   */\n  tag_15\n    /* \"#utility.yul\":419:428   */\n  dup4\n    /* \"#utility.yul\":387:429   */\n  tag_10\n  jump\t// in\ntag_15:\n    /* \"#utility.yul\":377:429   */\n  swap2\n  pop\n    /* \"#utility.yul\":448:499   */\n  tag_16\n    /* \"#utility.yul\":495:497   */\n  0x20\n    /* \"#utility.yul\":484:493   */\n  dup5\n    /* \"#utility.yul\":480:498   */\n  add\n    /* \"#utility.yul\":448:499   */\n  tag_10\n  jump\t// in\ntag_16:\n    /* \"#utility.yul\":438:499   */\n  swap1\n  pop\n    /* \"#utility.yul\":296:505   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\ntag_9:\n    /* \"contracts/SwapRouter_flattened.sol\":77153:85715  contract SwapRouter is\r... */\n  shr(0x60, mload(0x80))\n  shr(0x60, mload(0xa0))\n  codecopy(0x00, dataOffset(sub_0), dataSize(sub_0))\n  assignImmutable(\"0x4a12ea77a1a063f26028f31dc447cd01a6aae44cbd0d238cbc76d74f2d67dabb\")\n  assignImmutable(\"0x1c0bab9e06a591c52ac680ae9eef6479e476f64f56be5d259d46a0497cb2a9b9\")\n  return(0x00, dataSize(sub_0))\nstop\n\nsub_0: assembly {\n        /* \"contracts/SwapRouter_flattened.sol\":77153:85715  contract SwapRouter is\r... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0xc04b8d59\n      gt\n      tag_20\n      jumpi\n      dup1\n      0xdf2ab5bb\n      gt\n      tag_21\n      jumpi\n      dup1\n      0xdf2ab5bb\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xe0e189a0\n      eq\n      tag_16\n      jumpi\n      dup1\n      0xf28c0498\n      eq\n      tag_17\n      jumpi\n      dup1\n      0xf3995c67\n      eq\n      tag_18\n      jumpi\n      dup1\n      0xfa461e33\n      eq\n      tag_19\n      jumpi\n      jump(tag_2)\n    tag_21:\n      dup1\n      0xc04b8d59\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xc2e3140a\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xc45a0155\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xdb3e2198\n      eq\n      tag_14\n      jumpi\n      jump(tag_2)\n    tag_20:\n      dup1\n      0x4aa4a4fc\n      gt\n      tag_22\n      jumpi\n      dup1\n      0x4aa4a4fc\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x9b2c0a37\n      eq\n      tag_8\n      jumpi\n      dup1\n      0xa4a78f0c\n      eq\n      tag_9\n      jumpi\n      dup1\n      0xac9650d8\n      eq\n      tag_10\n      jumpi\n      jump(tag_2)\n    tag_22:\n      dup1\n      0x12210e8a\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x414bf389\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x4659a494\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x49404b7c\n      eq\n      tag_6\n      jumpi\n      jump(tag_2)\n    tag_1:\n      jumpi(tag_2, calldatasize)\n        /* \"contracts/SwapRouter_flattened.sol\":32038:32048  msg.sender */\n      caller\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":32052:32057  WETH9 */\n      immutable(\"0x4a12ea77a1a063f26028f31dc447cd01a6aae44cbd0d238cbc76d74f2d67dabb\")\n        /* \"contracts/SwapRouter_flattened.sol\":32038:32057  msg.sender == WETH9 */\n      and\n      eq\n        /* \"contracts/SwapRouter_flattened.sol\":32030:32071  require(msg.sender == WETH9, 'Not WETH9') */\n      tag_25\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_26\n      swap1\n      tag_27\n      jump\t// in\n    tag_26:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_25:\n        /* \"contracts/SwapRouter_flattened.sol\":77153:85715  contract SwapRouter is\r... */\n      stop\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/SwapRouter_flattened.sol\":33034:33196  function refundETH() external payable override {\r... */\n    tag_3:\n      tag_25\n      tag_29\n      jump\t// in\n        /* \"contracts/SwapRouter_flattened.sol\":80771:81332  function exactInputSingle(ExactInputSingleParams calldata params)\r... */\n    tag_4:\n      tag_30\n      tag_31\n      calldatasize\n      0x04\n      tag_32\n      jump\t// in\n    tag_31:\n      tag_33\n      jump\t// in\n    tag_30:\n      mload(0x40)\n      tag_34\n      swap2\n      swap1\n      tag_35\n      jump\t// in\n    tag_34:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/SwapRouter_flattened.sol\":26487:26785  function selfPermitAllowed(\r... */\n    tag_5:\n      tag_25\n      tag_37\n      calldatasize\n      0x04\n      tag_38\n      jump\t// in\n    tag_37:\n      tag_39\n      jump\t// in\n        /* \"contracts/SwapRouter_flattened.sol\":32127:32532  function unwrapWETH9(uint256 amountMinimum, address recipient) public payable override {\r... */\n    tag_6:\n      tag_25\n      tag_41\n      calldatasize\n      0x04\n      tag_42\n      jump\t// in\n    tag_41:\n      tag_43\n      jump\t// in\n        /* \"contracts/SwapRouter_flattened.sol\":31650:31689  address public immutable override WETH9 */\n    tag_7:\n      callvalue\n      dup1\n      iszero\n      tag_44\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_44:\n      pop\n      tag_45\n      tag_46\n      jump\t// in\n    tag_45:\n      mload(0x40)\n      tag_34\n      swap2\n      swap1\n      tag_48\n      jump\t// in\n        /* \"contracts/SwapRouter_flattened.sol\":34400:35115  function unwrapWETH9WithFee(\r... */\n    tag_8:\n      tag_25\n      tag_50\n      calldatasize\n      0x04\n      tag_51\n      jump\t// in\n    tag_50:\n      tag_52\n      jump\t// in\n        /* \"contracts/SwapRouter_flattened.sol\":26826:27184  function selfPermitAllowedIfNecessary(\r... */\n    tag_9:\n      tag_25\n      tag_54\n      calldatasize\n      0x04\n      tag_38\n      jump\t// in\n    tag_54:\n      tag_55\n      jump\t// in\n        /* \"contracts/SwapRouter_flattened.sol\":17428:18097  function multicall(bytes[] calldata data) public payable override returns (bytes[] memory results) {\r... */\n    tag_10:\n      tag_56\n      tag_57\n      calldatasize\n      0x04\n      tag_58\n      jump\t// in\n    tag_57:\n      tag_59\n      jump\t// in\n    tag_56:\n      mload(0x40)\n      tag_34\n      swap2\n      swap1\n      tag_61\n      jump\t// in\n        /* \"contracts/SwapRouter_flattened.sol\":81373:82682  function exactInput(ExactInputParams memory params)\r... */\n    tag_11:\n      tag_30\n      tag_63\n      calldatasize\n      0x04\n      tag_64\n      jump\t// in\n    tag_63:\n      tag_65\n      jump\t// in\n        /* \"contracts/SwapRouter_flattened.sol\":26123:26446  function selfPermitIfNecessary(\r... */\n    tag_12:\n      tag_25\n      tag_68\n      calldatasize\n      0x04\n      tag_38\n      jump\t// in\n    tag_68:\n      tag_69\n      jump\t// in\n        /* \"contracts/SwapRouter_flattened.sol\":31556:31597  address public immutable override factory */\n    tag_13:\n      callvalue\n      dup1\n      iszero\n      tag_70\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_70:\n      pop\n      tag_45\n      tag_72\n      jump\t// in\n        /* \"contracts/SwapRouter_flattened.sol\":84146:84896  function exactOutputSingle(ExactOutputSingleParams calldata params)\r... */\n    tag_14:\n      tag_30\n      tag_75\n      calldatasize\n      0x04\n      tag_32\n      jump\t// in\n    tag_75:\n      tag_77\n      jump\t// in\n        /* \"contracts/SwapRouter_flattened.sol\":32580:32986  function sweepToken(\r... */\n    tag_15:\n      tag_25\n      tag_80\n      calldatasize\n      0x04\n      tag_81\n      jump\t// in\n    tag_80:\n      tag_82\n      jump\t// in\n        /* \"contracts/SwapRouter_flattened.sol\":35170:35865  function sweepTokenWithFee(\r... */\n    tag_16:\n      tag_25\n      tag_84\n      calldatasize\n      0x04\n      tag_85\n      jump\t// in\n    tag_84:\n      tag_86\n      jump\t// in\n        /* \"contracts/SwapRouter_flattened.sol\":84937:85712  function exactOutput(ExactOutputParams calldata params)\r... */\n    tag_17:\n      tag_30\n      tag_88\n      calldatasize\n      0x04\n      tag_89\n      jump\t// in\n    tag_88:\n      tag_90\n      jump\t// in\n        /* \"contracts/SwapRouter_flattened.sol\":25800:26082  function selfPermit(\r... */\n    tag_18:\n      tag_25\n      tag_93\n      calldatasize\n      0x04\n      tag_38\n      jump\t// in\n    tag_93:\n      tag_94\n      jump\t// in\n        /* \"contracts/SwapRouter_flattened.sol\":78393:79714  function uniswapV3SwapCallback(\r... */\n    tag_19:\n      callvalue\n      dup1\n      iszero\n      tag_95\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_95:\n      pop\n      tag_25\n      tag_97\n      calldatasize\n      0x04\n      tag_98\n      jump\t// in\n    tag_97:\n      tag_99\n      jump\t// in\n        /* \"contracts/SwapRouter_flattened.sol\":33034:33196  function refundETH() external payable override {\r... */\n    tag_29:\n        /* \"contracts/SwapRouter_flattened.sol\":33096:33117  address(this).balance */\n      selfbalance\n        /* \"contracts/SwapRouter_flattened.sol\":33096:33121  address(this).balance > 0 */\n      iszero\n        /* \"contracts/SwapRouter_flattened.sol\":33092:33188  if (address(this).balance > 0) TransferHelper.safeTransferETH(msg.sender, address(this).balance) */\n      tag_102\n      jumpi\n        /* \"contracts/SwapRouter_flattened.sol\":33123:33188  TransferHelper.safeTransferETH(msg.sender, address(this).balance) */\n      tag_102\n        /* \"contracts/SwapRouter_flattened.sol\":33154:33164  msg.sender */\n      caller\n        /* \"contracts/SwapRouter_flattened.sol\":33166:33187  address(this).balance */\n      selfbalance\n        /* \"contracts/SwapRouter_flattened.sol\":33123:33153  TransferHelper.safeTransferETH */\n      tag_103\n        /* \"contracts/SwapRouter_flattened.sol\":33123:33188  TransferHelper.safeTransferETH(msg.sender, address(this).balance) */\n      jump\t// in\n    tag_102:\n        /* \"contracts/SwapRouter_flattened.sol\":33034:33196  function refundETH() external payable override {\r... */\n      jump\t// out\n        /* \"contracts/SwapRouter_flattened.sol\":80771:81332  function exactInputSingle(ExactInputSingleParams calldata params)\r... */\n    tag_33:\n        /* \"contracts/SwapRouter_flattened.sol\":80948:80965  uint256 amountOut */\n      0x00\n        /* \"contracts/SwapRouter_flattened.sol\":80913:80919  params */\n      dup2\n        /* \"contracts/SwapRouter_flattened.sol\":80913:80928  params.deadline */\n      0x80\n      add\n      calldataload\n        /* \"contracts/SwapRouter_flattened.sol\":30752:30760  deadline */\n      dup1\n        /* \"contracts/SwapRouter_flattened.sol\":30731:30748  _blockTimestamp() */\n      tag_105\n        /* \"contracts/SwapRouter_flattened.sol\":30731:30746  _blockTimestamp */\n      tag_106\n        /* \"contracts/SwapRouter_flattened.sol\":30731:30748  _blockTimestamp() */\n      jump\t// in\n    tag_105:\n        /* \"contracts/SwapRouter_flattened.sol\":30731:30760  _blockTimestamp() <= deadline */\n      gt\n      iszero\n        /* \"contracts/SwapRouter_flattened.sol\":30723:30784  require(_blockTimestamp() <= deadline, 'Transaction too old') */\n      tag_107\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_26\n      swap1\n      tag_109\n      jump\t// in\n    tag_107:\n        /* \"contracts/SwapRouter_flattened.sol\":80995:81245  exactInputInternal(\r... */\n      tag_111\n        /* \"contracts/SwapRouter_flattened.sol\":81028:81043  params.amountIn */\n      0xa0\n      dup5\n      add\n      calldataload\n        /* \"contracts/SwapRouter_flattened.sol\":81058:81074  params.recipient */\n      tag_112\n      0x80\n      dup7\n      add\n      0x60\n      dup8\n      add\n      tag_113\n      jump\t// in\n    tag_112:\n        /* \"contracts/SwapRouter_flattened.sol\":81089:81113  params.sqrtPriceLimitX96 */\n      tag_114\n      0x0100\n      dup8\n      add\n      0xe0\n      dup9\n      add\n      tag_113\n      jump\t// in\n    tag_114:\n        /* \"contracts/SwapRouter_flattened.sol\":81128:81234  SwapCallbackData({path: abi.encodePacked(params.tokenIn, params.fee, params.tokenOut), payer: msg.sender}) */\n      0x40\n      dup1\n      mload\n      dup1\n      dup3\n      add\n      swap1\n      swap2\n      mstore\n      dup1\n        /* \"contracts/SwapRouter_flattened.sol\":81169:81183  params.tokenIn */\n      tag_116\n      0x20\n      dup11\n      add\n        /* \"contracts/SwapRouter_flattened.sol\":81169:81175  params */\n      dup11\n        /* \"contracts/SwapRouter_flattened.sol\":81169:81183  params.tokenIn */\n      tag_113\n      jump\t// in\n    tag_116:\n        /* \"contracts/SwapRouter_flattened.sol\":81185:81195  params.fee */\n      tag_117\n      0x60\n      dup12\n      add\n      0x40\n      dup13\n      add\n      tag_118\n      jump\t// in\n    tag_117:\n        /* \"contracts/SwapRouter_flattened.sol\":81197:81212  params.tokenOut */\n      tag_119\n      0x40\n      dup13\n      add\n      0x20\n      dup14\n      add\n      tag_113\n      jump\t// in\n    tag_119:\n        /* \"contracts/SwapRouter_flattened.sol\":81152:81213  abi.encodePacked(params.tokenIn, params.fee, params.tokenOut) */\n      add(0x20, mload(0x40))\n      tag_120\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_121\n      jump\t// in\n    tag_120:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"contracts/SwapRouter_flattened.sol\":81128:81234  SwapCallbackData({path: abi.encodePacked(params.tokenIn, params.fee, params.tokenOut), payer: msg.sender}) */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/SwapRouter_flattened.sol\":81222:81232  msg.sender */\n      caller\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":81128:81234  SwapCallbackData({path: abi.encodePacked(params.tokenIn, params.fee, params.tokenOut), payer: msg.sender}) */\n      and\n      dup2\n      mstore\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":80995:81013  exactInputInternal */\n      tag_122\n        /* \"contracts/SwapRouter_flattened.sol\":80995:81245  exactInputInternal(\r... */\n      jump\t// in\n    tag_111:\n        /* \"contracts/SwapRouter_flattened.sol\":80983:81245  amountOut = exactInputInternal(\r... */\n      swap2\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":81277:81283  params */\n      dup3\n        /* \"contracts/SwapRouter_flattened.sol\":81277:81300  params.amountOutMinimum */\n      0xc0\n      add\n      calldataload\n        /* \"contracts/SwapRouter_flattened.sol\":81264:81273  amountOut */\n      dup3\n        /* \"contracts/SwapRouter_flattened.sol\":81264:81300  amountOut >= params.amountOutMinimum */\n      lt\n      iszero\n        /* \"contracts/SwapRouter_flattened.sol\":81256:81324  require(amountOut >= params.amountOutMinimum, 'Too little received') */\n      tag_123\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_26\n      swap1\n      tag_125\n      jump\t// in\n    tag_123:\n        /* \"contracts/SwapRouter_flattened.sol\":80771:81332  function exactInputSingle(ExactInputSingleParams calldata params)\r... */\n      pop\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/SwapRouter_flattened.sol\":26487:26785  function selfPermitAllowed(\r... */\n    tag_39:\n        /* \"contracts/SwapRouter_flattened.sol\":26687:26777  IERC20PermitAllowed(token).permit(msg.sender, address(this), nonce, expiry, true, v, r, s) */\n      mload(0x40)\n      shl(0xe2, 0x23f2ebc3)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":26687:26720  IERC20PermitAllowed(token).permit */\n      dup8\n      and\n      swap1\n      0x8fcbaf0c\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":26687:26777  IERC20PermitAllowed(token).permit(msg.sender, address(this), nonce, expiry, true, v, r, s) */\n      tag_127\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":26721:26731  msg.sender */\n      caller\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":26741:26745  this */\n      address\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":26748:26753  nonce */\n      dup11\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":26755:26761  expiry */\n      dup11\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":26763:26767  true */\n      0x01\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":26769:26770  v */\n      dup12\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":26772:26773  r */\n      dup12\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":26775:26776  s */\n      dup12\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":26687:26777  IERC20PermitAllowed(token).permit(msg.sender, address(this), nonce, expiry, true, v, r, s) */\n      0x04\n      add\n      tag_128\n      jump\t// in\n    tag_127:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_129\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_129:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_131\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_131:\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":26487:26785  function selfPermitAllowed(\r... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/SwapRouter_flattened.sol\":32127:32532  function unwrapWETH9(uint256 amountMinimum, address recipient) public payable override {\r... */\n    tag_43:\n        /* \"contracts/SwapRouter_flattened.sol\":32248:32286  IWETH9(WETH9).balanceOf(address(this)) */\n      mload(0x40)\n      shl(0xe0, 0x70a08231)\n      dup2\n      mstore\n        /* \"contracts/SwapRouter_flattened.sol\":32225:32245  uint256 balanceWETH9 */\n      0x00\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":32255:32260  WETH9 */\n      immutable(\"0x4a12ea77a1a063f26028f31dc447cd01a6aae44cbd0d238cbc76d74f2d67dabb\")\n        /* \"contracts/SwapRouter_flattened.sol\":32248:32271  IWETH9(WETH9).balanceOf */\n      and\n      swap1\n      0x70a08231\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":32248:32286  IWETH9(WETH9).balanceOf(address(this)) */\n      tag_133\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":32280:32284  this */\n      address\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":32248:32286  IWETH9(WETH9).balanceOf(address(this)) */\n      0x04\n      add\n      tag_48\n      jump\t// in\n    tag_133:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_135\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_135:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_137\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_137:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_138\n      swap2\n      swap1\n      tag_139\n      jump\t// in\n    tag_138:\n        /* \"contracts/SwapRouter_flattened.sol\":32225:32286  uint256 balanceWETH9 = IWETH9(WETH9).balanceOf(address(this)) */\n      swap1\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":32321:32334  amountMinimum */\n      dup3\n        /* \"contracts/SwapRouter_flattened.sol\":32305:32317  balanceWETH9 */\n      dup2\n        /* \"contracts/SwapRouter_flattened.sol\":32305:32334  balanceWETH9 >= amountMinimum */\n      lt\n      iszero\n        /* \"contracts/SwapRouter_flattened.sol\":32297:32357  require(balanceWETH9 >= amountMinimum, 'Insufficient WETH9') */\n      tag_140\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_26\n      swap1\n      tag_142\n      jump\t// in\n    tag_140:\n        /* \"contracts/SwapRouter_flattened.sol\":32374:32390  balanceWETH9 > 0 */\n      dup1\n      iszero\n        /* \"contracts/SwapRouter_flattened.sol\":32370:32525  if (balanceWETH9 > 0) {\r... */\n      tag_148\n      jumpi\n        /* \"contracts/SwapRouter_flattened.sol\":32407:32443  IWETH9(WETH9).withdraw(balanceWETH9) */\n      mload(0x40)\n      shl(0xe0, 0x2e1a7d4d)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":32414:32419  WETH9 */\n      immutable(\"0x4a12ea77a1a063f26028f31dc447cd01a6aae44cbd0d238cbc76d74f2d67dabb\")\n        /* \"contracts/SwapRouter_flattened.sol\":32407:32429  IWETH9(WETH9).withdraw */\n      and\n      swap1\n      0x2e1a7d4d\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":32407:32443  IWETH9(WETH9).withdraw(balanceWETH9) */\n      tag_144\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":32430:32442  balanceWETH9 */\n      dup5\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":32407:32443  IWETH9(WETH9).withdraw(balanceWETH9) */\n      0x04\n      add\n      tag_35\n      jump\t// in\n    tag_144:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_145\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_145:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_147\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_147:\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":32458:32513  TransferHelper.safeTransferETH(recipient, balanceWETH9) */\n      tag_148\n        /* \"contracts/SwapRouter_flattened.sol\":32489:32498  recipient */\n      dup3\n        /* \"contracts/SwapRouter_flattened.sol\":32500:32512  balanceWETH9 */\n      dup3\n        /* \"contracts/SwapRouter_flattened.sol\":32458:32488  TransferHelper.safeTransferETH */\n      tag_103\n        /* \"contracts/SwapRouter_flattened.sol\":32458:32513  TransferHelper.safeTransferETH(recipient, balanceWETH9) */\n      jump\t// in\n    tag_148:\n        /* \"contracts/SwapRouter_flattened.sol\":32127:32532  function unwrapWETH9(uint256 amountMinimum, address recipient) public payable override {\r... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/SwapRouter_flattened.sol\":31650:31689  address public immutable override WETH9 */\n    tag_46:\n      immutable(\"0x4a12ea77a1a063f26028f31dc447cd01a6aae44cbd0d238cbc76d74f2d67dabb\")\n      dup2\n      jump\t// out\n        /* \"contracts/SwapRouter_flattened.sol\":34400:35115  function unwrapWETH9WithFee(\r... */\n    tag_52:\n        /* \"contracts/SwapRouter_flattened.sol\":34605:34606  0 */\n      0x00\n        /* \"contracts/SwapRouter_flattened.sol\":34595:34602  feeBips */\n      dup3\n        /* \"contracts/SwapRouter_flattened.sol\":34595:34606  feeBips > 0 */\n      gt\n        /* \"contracts/SwapRouter_flattened.sol\":34595:34624  feeBips > 0 && feeBips <= 100 */\n      dup1\n      iszero\n      tag_150\n      jumpi\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":34621:34624  100 */\n      0x64\n        /* \"contracts/SwapRouter_flattened.sol\":34610:34617  feeBips */\n      dup3\n        /* \"contracts/SwapRouter_flattened.sol\":34610:34624  feeBips <= 100 */\n      gt\n      iszero\n        /* \"contracts/SwapRouter_flattened.sol\":34595:34624  feeBips > 0 && feeBips <= 100 */\n    tag_150:\n        /* \"contracts/SwapRouter_flattened.sol\":34587:34625  require(feeBips > 0 && feeBips <= 100) */\n      tag_151\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_151:\n        /* \"contracts/SwapRouter_flattened.sol\":34661:34699  IWETH9(WETH9).balanceOf(address(this)) */\n      mload(0x40)\n      shl(0xe0, 0x70a08231)\n      dup2\n      mstore\n        /* \"contracts/SwapRouter_flattened.sol\":34638:34658  uint256 balanceWETH9 */\n      0x00\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":34668:34673  WETH9 */\n      immutable(\"0x4a12ea77a1a063f26028f31dc447cd01a6aae44cbd0d238cbc76d74f2d67dabb\")\n        /* \"contracts/SwapRouter_flattened.sol\":34661:34684  IWETH9(WETH9).balanceOf */\n      and\n      swap1\n      0x70a08231\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":34661:34699  IWETH9(WETH9).balanceOf(address(this)) */\n      tag_152\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":34693:34697  this */\n      address\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":34661:34699  IWETH9(WETH9).balanceOf(address(this)) */\n      0x04\n      add\n      tag_48\n      jump\t// in\n    tag_152:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_153\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_153:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_155\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_155:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_156\n      swap2\n      swap1\n      tag_139\n      jump\t// in\n    tag_156:\n        /* \"contracts/SwapRouter_flattened.sol\":34638:34699  uint256 balanceWETH9 = IWETH9(WETH9).balanceOf(address(this)) */\n      swap1\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":34734:34747  amountMinimum */\n      dup5\n        /* \"contracts/SwapRouter_flattened.sol\":34718:34730  balanceWETH9 */\n      dup2\n        /* \"contracts/SwapRouter_flattened.sol\":34718:34747  balanceWETH9 >= amountMinimum */\n      lt\n      iszero\n        /* \"contracts/SwapRouter_flattened.sol\":34710:34770  require(balanceWETH9 >= amountMinimum, 'Insufficient WETH9') */\n      tag_157\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_26\n      swap1\n      tag_142\n      jump\t// in\n    tag_157:\n        /* \"contracts/SwapRouter_flattened.sol\":34787:34803  balanceWETH9 > 0 */\n      dup1\n      iszero\n        /* \"contracts/SwapRouter_flattened.sol\":34783:35108  if (balanceWETH9 > 0) {\r... */\n      tag_159\n      jumpi\n        /* \"contracts/SwapRouter_flattened.sol\":34820:34856  IWETH9(WETH9).withdraw(balanceWETH9) */\n      mload(0x40)\n      shl(0xe0, 0x2e1a7d4d)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":34827:34832  WETH9 */\n      immutable(\"0x4a12ea77a1a063f26028f31dc447cd01a6aae44cbd0d238cbc76d74f2d67dabb\")\n        /* \"contracts/SwapRouter_flattened.sol\":34820:34842  IWETH9(WETH9).withdraw */\n      and\n      swap1\n      0x2e1a7d4d\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":34820:34856  IWETH9(WETH9).withdraw(balanceWETH9) */\n      tag_160\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":34843:34855  balanceWETH9 */\n      dup5\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":34820:34856  IWETH9(WETH9).withdraw(balanceWETH9) */\n      0x04\n      add\n      tag_35\n      jump\t// in\n    tag_160:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_161\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_161:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_163\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_163:\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":34871:34888  uint256 feeAmount */\n      0x00\n        /* \"contracts/SwapRouter_flattened.sol\":34919:34925  10_000 */\n      0x2710\n        /* \"contracts/SwapRouter_flattened.sol\":34891:34916  balanceWETH9.mul(feeBips) */\n      tag_164\n        /* \"contracts/SwapRouter_flattened.sol\":34908:34915  feeBips */\n      dup6\n        /* \"contracts/SwapRouter_flattened.sol\":34891:34903  balanceWETH9 */\n      dup5\n        /* \"contracts/SwapRouter_flattened.sol\":34891:34907  balanceWETH9.mul */\n      tag_165\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":34891:34916  balanceWETH9.mul(feeBips) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_164:\n        /* \"contracts/SwapRouter_flattened.sol\":34891:34925  balanceWETH9.mul(feeBips) / 10_000 */\n      dup2\n      tag_166\n      jumpi\n      invalid\n    tag_166:\n      div\n      swap1\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":34944:34957  feeAmount > 0 */\n      dup1\n      iszero\n        /* \"contracts/SwapRouter_flattened.sol\":34940:35014  if (feeAmount > 0) TransferHelper.safeTransferETH(feeRecipient, feeAmount) */\n      tag_168\n      jumpi\n        /* \"contracts/SwapRouter_flattened.sol\":34959:35014  TransferHelper.safeTransferETH(feeRecipient, feeAmount) */\n      tag_168\n        /* \"contracts/SwapRouter_flattened.sol\":34990:35002  feeRecipient */\n      dup4\n        /* \"contracts/SwapRouter_flattened.sol\":35004:35013  feeAmount */\n      dup3\n        /* \"contracts/SwapRouter_flattened.sol\":34959:34989  TransferHelper.safeTransferETH */\n      tag_103\n        /* \"contracts/SwapRouter_flattened.sol\":34959:35014  TransferHelper.safeTransferETH(feeRecipient, feeAmount) */\n      jump\t// in\n    tag_168:\n        /* \"contracts/SwapRouter_flattened.sol\":35029:35096  TransferHelper.safeTransferETH(recipient, balanceWETH9 - feeAmount) */\n      tag_169\n        /* \"contracts/SwapRouter_flattened.sol\":35060:35069  recipient */\n      dup6\n        /* \"contracts/SwapRouter_flattened.sol\":35086:35095  feeAmount */\n      dup3\n        /* \"contracts/SwapRouter_flattened.sol\":35071:35083  balanceWETH9 */\n      dup5\n        /* \"contracts/SwapRouter_flattened.sol\":35071:35095  balanceWETH9 - feeAmount */\n      sub\n        /* \"contracts/SwapRouter_flattened.sol\":35029:35059  TransferHelper.safeTransferETH */\n      tag_103\n        /* \"contracts/SwapRouter_flattened.sol\":35029:35096  TransferHelper.safeTransferETH(recipient, balanceWETH9 - feeAmount) */\n      jump\t// in\n    tag_169:\n        /* \"contracts/SwapRouter_flattened.sol\":34783:35108  if (balanceWETH9 > 0) {\r... */\n      pop\n    tag_159:\n        /* \"contracts/SwapRouter_flattened.sol\":34400:35115  function unwrapWETH9WithFee(\r... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/SwapRouter_flattened.sol\":26826:27184  function selfPermitAllowedIfNecessary(\r... */\n    tag_55:\n        /* \"contracts/SwapRouter_flattened.sol\":27043:27093  IERC20(token).allowance(msg.sender, address(this)) */\n      mload(0x40)\n      shl(0xe1, 0x6eb1769f)\n      dup2\n      mstore\n      not(0x00)\n        /* \"contracts/SwapRouter_flattened.sol\":27096:27113  type(uint256).max */\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":27043:27066  IERC20(token).allowance */\n      dup9\n      and\n      swap1\n      0xdd62ed3e\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":27043:27093  IERC20(token).allowance(msg.sender, address(this)) */\n      tag_171\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":27067:27077  msg.sender */\n      caller\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":27087:27091  this */\n      address\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":27043:27093  IERC20(token).allowance(msg.sender, address(this)) */\n      0x04\n      add\n      tag_172\n      jump\t// in\n    tag_171:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_173\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_173:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_175\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_175:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_176\n      swap2\n      swap1\n      tag_139\n      jump\t// in\n    tag_176:\n        /* \"contracts/SwapRouter_flattened.sol\":27043:27113  IERC20(token).allowance(msg.sender, address(this)) < type(uint256).max */\n      lt\n        /* \"contracts/SwapRouter_flattened.sol\":27039:27176  if (IERC20(token).allowance(msg.sender, address(this)) < type(uint256).max)\r... */\n      iszero\n      tag_169\n      jumpi\n        /* \"contracts/SwapRouter_flattened.sol\":27128:27176  selfPermitAllowed(token, nonce, expiry, v, r, s) */\n      tag_169\n        /* \"contracts/SwapRouter_flattened.sol\":27146:27151  token */\n      dup7\n        /* \"contracts/SwapRouter_flattened.sol\":27153:27158  nonce */\n      dup7\n        /* \"contracts/SwapRouter_flattened.sol\":27160:27166  expiry */\n      dup7\n        /* \"contracts/SwapRouter_flattened.sol\":27168:27169  v */\n      dup7\n        /* \"contracts/SwapRouter_flattened.sol\":27171:27172  r */\n      dup7\n        /* \"contracts/SwapRouter_flattened.sol\":27174:27175  s */\n      dup7\n        /* \"contracts/SwapRouter_flattened.sol\":27128:27145  selfPermitAllowed */\n      tag_39\n        /* \"contracts/SwapRouter_flattened.sol\":27128:27176  selfPermitAllowed(token, nonce, expiry, v, r, s) */\n      jump\t// in\n        /* \"contracts/SwapRouter_flattened.sol\":17428:18097  function multicall(bytes[] calldata data) public payable override returns (bytes[] memory results) {\r... */\n    tag_59:\n        /* \"contracts/SwapRouter_flattened.sol\":17503:17525  bytes[] memory results */\n      0x60\n        /* \"contracts/SwapRouter_flattened.sol\":17560:17564  data */\n      dup2\n        /* \"contracts/SwapRouter_flattened.sol\":17548:17572  new bytes[](data.length) */\n      0xffffffffffffffff\n      dup2\n      gt\n      dup1\n      iszero\n      tag_180\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_180:\n      pop\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_181\n      jumpi\n      dup2\n      0x20\n      add\n    tag_182:\n      0x60\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      0x01\n      swap1\n      sub\n      swap1\n      dup2\n      tag_182\n      jumpi\n      swap1\n      pop\n    tag_181:\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":17538:17572  results = new bytes[](data.length) */\n      swap1\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":17588:17597  uint256 i */\n      0x00\n        /* \"contracts/SwapRouter_flattened.sol\":17583:18090  for (uint256 i = 0; i < data.length; i++) {\r... */\n    tag_183:\n        /* \"contracts/SwapRouter_flattened.sol\":17603:17618  i < data.length */\n      dup3\n      dup2\n      lt\n        /* \"contracts/SwapRouter_flattened.sol\":17583:18090  for (uint256 i = 0; i < data.length; i++) {\r... */\n      iszero\n      tag_184\n      jumpi\n        /* \"contracts/SwapRouter_flattened.sol\":17641:17653  bool success */\n      0x00\n      dup1\n        /* \"contracts/SwapRouter_flattened.sol\":17686:17690  this */\n      address\n        /* \"contracts/SwapRouter_flattened.sol\":17705:17709  data */\n      dup7\n      dup7\n        /* \"contracts/SwapRouter_flattened.sol\":17710:17711  i */\n      dup6\n        /* \"contracts/SwapRouter_flattened.sol\":17705:17712  data[i] */\n      dup2\n      dup2\n      lt\n      tag_186\n      jumpi\n      invalid\n    tag_186:\n      swap1\n      pop\n      0x20\n      mul\n      dup2\n      add\n      swap1\n      tag_187\n      swap2\n      swap1\n      tag_188\n      jump\t// in\n    tag_187:\n        /* \"contracts/SwapRouter_flattened.sol\":17678:17713  address(this).delegatecall(data[i]) */\n      mload(0x40)\n      tag_189\n      swap3\n      swap2\n      swap1\n      tag_190\n      jump\t// in\n    tag_189:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      gas\n      delegatecall\n      swap2\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_193\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_192)\n    tag_193:\n      0x60\n      swap2\n      pop\n    tag_192:\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":17640:17713  (bool success, bytes memory result) = address(this).delegatecall(data[i]) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":17735:17742  success */\n      dup2\n        /* \"contracts/SwapRouter_flattened.sol\":17730:18043  if (!success) {\r... */\n      tag_194\n      jumpi\n        /* \"contracts/SwapRouter_flattened.sol\":17864:17866  68 */\n      0x44\n        /* \"contracts/SwapRouter_flattened.sol\":17848:17854  result */\n      dup2\n        /* \"contracts/SwapRouter_flattened.sol\":17848:17861  result.length */\n      mload\n        /* \"contracts/SwapRouter_flattened.sol\":17848:17866  result.length < 68 */\n      lt\n        /* \"contracts/SwapRouter_flattened.sol\":17844:17876  if (result.length < 68) revert() */\n      iszero\n      tag_195\n      jumpi\n        /* \"contracts/SwapRouter_flattened.sol\":17868:17876  revert() */\n      0x00\n      dup1\n      revert\n        /* \"contracts/SwapRouter_flattened.sol\":17844:17876  if (result.length < 68) revert() */\n    tag_195:\n        /* \"contracts/SwapRouter_flattened.sol\":17949:17953  0x04 */\n      0x04\n        /* \"contracts/SwapRouter_flattened.sol\":17941:17947  result */\n      dup2\n        /* \"contracts/SwapRouter_flattened.sol\":17937:17954  add(result, 0x04) */\n      add\n        /* \"contracts/SwapRouter_flattened.sol\":17927:17954  result := add(result, 0x04) */\n      swap1\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":18009:18015  result */\n      dup1\n        /* \"contracts/SwapRouter_flattened.sol\":17998:18026  abi.decode(result, (string)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      dup2\n      add\n      swap1\n      tag_196\n      swap2\n      swap1\n      tag_197\n      jump\t// in\n    tag_196:\n        /* \"contracts/SwapRouter_flattened.sol\":17991:18027  revert(abi.decode(result, (string))) */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_26\n      swap2\n      swap1\n      tag_199\n      jump\t// in\n        /* \"contracts/SwapRouter_flattened.sol\":17730:18043  if (!success) {\r... */\n    tag_194:\n        /* \"contracts/SwapRouter_flattened.sol\":18072:18078  result */\n      dup1\n        /* \"contracts/SwapRouter_flattened.sol\":18059:18066  results */\n      dup5\n        /* \"contracts/SwapRouter_flattened.sol\":18067:18068  i */\n      dup5\n        /* \"contracts/SwapRouter_flattened.sol\":18059:18069  results[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_200\n      jumpi\n      invalid\n    tag_200:\n      0x20\n      swap1\n      dup2\n      mul\n      swap2\n      swap1\n      swap2\n      add\n      add\n        /* \"contracts/SwapRouter_flattened.sol\":18059:18078  results[i] = result */\n      mstore\n      pop\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":17620:17623  i++ */\n      0x01\n      add\n        /* \"contracts/SwapRouter_flattened.sol\":17583:18090  for (uint256 i = 0; i < data.length; i++) {\r... */\n      jump(tag_183)\n    tag_184:\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":17428:18097  function multicall(bytes[] calldata data) public payable override returns (bytes[] memory results) {\r... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/SwapRouter_flattened.sol\":81373:82682  function exactInput(ExactInputParams memory params)\r... */\n    tag_65:\n        /* \"contracts/SwapRouter_flattened.sol\":81536:81553  uint256 amountOut */\n      0x00\n        /* \"contracts/SwapRouter_flattened.sol\":81501:81507  params */\n      dup2\n        /* \"contracts/SwapRouter_flattened.sol\":81501:81516  params.deadline */\n      0x40\n      add\n      mload\n        /* \"contracts/SwapRouter_flattened.sol\":30752:30760  deadline */\n      dup1\n        /* \"contracts/SwapRouter_flattened.sol\":30731:30748  _blockTimestamp() */\n      tag_202\n        /* \"contracts/SwapRouter_flattened.sol\":30731:30746  _blockTimestamp */\n      tag_106\n        /* \"contracts/SwapRouter_flattened.sol\":30731:30748  _blockTimestamp() */\n      jump\t// in\n    tag_202:\n        /* \"contracts/SwapRouter_flattened.sol\":30731:30760  _blockTimestamp() <= deadline */\n      gt\n      iszero\n        /* \"contracts/SwapRouter_flattened.sol\":30723:30784  require(_blockTimestamp() <= deadline, 'Transaction too old') */\n      tag_203\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_26\n      swap1\n      tag_109\n      jump\t// in\n    tag_203:\n        /* \"contracts/SwapRouter_flattened.sol\":81587:81597  msg.sender */\n      caller\n        /* \"contracts/SwapRouter_flattened.sol\":81647:82594  while (true) {\r... */\n    tag_206:\n        /* \"contracts/SwapRouter_flattened.sol\":81675:81696  bool hasMultiplePools */\n      0x00\n        /* \"contracts/SwapRouter_flattened.sol\":81699:81729  params.path.hasMultiplePools() */\n      tag_208\n        /* \"contracts/SwapRouter_flattened.sol\":81699:81705  params */\n      dup6\n        /* \"contracts/SwapRouter_flattened.sol\":81699:81710  params.path */\n      0x00\n      add\n      mload\n        /* \"contracts/SwapRouter_flattened.sol\":81699:81727  params.path.hasMultiplePools */\n      tag_209\n        /* \"contracts/SwapRouter_flattened.sol\":81699:81729  params.path.hasMultiplePools() */\n      jump\t// in\n    tag_208:\n        /* \"contracts/SwapRouter_flattened.sol\":81675:81729  bool hasMultiplePools = params.path.hasMultiplePools() */\n      swap1\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":81844:82246  exactInputInternal(\r... */\n      tag_210\n        /* \"contracts/SwapRouter_flattened.sol\":81881:81887  params */\n      dup6\n        /* \"contracts/SwapRouter_flattened.sol\":81881:81896  params.amountIn */\n      0x60\n      add\n      mload\n        /* \"contracts/SwapRouter_flattened.sol\":81915:81931  hasMultiplePools */\n      dup3\n        /* \"contracts/SwapRouter_flattened.sol\":81915:81966  hasMultiplePools ? address(this) : params.recipient */\n      tag_211\n      jumpi\n        /* \"contracts/SwapRouter_flattened.sol\":81950:81956  params */\n      dup7\n        /* \"contracts/SwapRouter_flattened.sol\":81950:81966  params.recipient */\n      0x20\n      add\n      mload\n        /* \"contracts/SwapRouter_flattened.sol\":81915:81966  hasMultiplePools ? address(this) : params.recipient */\n      jump(tag_212)\n    tag_211:\n        /* \"contracts/SwapRouter_flattened.sol\":81942:81946  this */\n      address\n        /* \"contracts/SwapRouter_flattened.sol\":81915:81966  hasMultiplePools ? address(this) : params.recipient */\n    tag_212:\n        /* \"contracts/SwapRouter_flattened.sol\":82036:82037  0 */\n      0x00\n        /* \"contracts/SwapRouter_flattened.sol\":82056:82231  SwapCallbackData({\r... */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n        /* \"contracts/SwapRouter_flattened.sol\":82102:82128  params.path.getFirstPool() */\n      tag_213\n        /* \"contracts/SwapRouter_flattened.sol\":82102:82108  params */\n      dup12\n        /* \"contracts/SwapRouter_flattened.sol\":82102:82113  params.path */\n      0x00\n      add\n      mload\n        /* \"contracts/SwapRouter_flattened.sol\":82102:82126  params.path.getFirstPool */\n      tag_214\n        /* \"contracts/SwapRouter_flattened.sol\":82102:82128  params.path.getFirstPool() */\n      jump\t// in\n    tag_213:\n        /* \"contracts/SwapRouter_flattened.sol\":82056:82231  SwapCallbackData({\r... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/SwapRouter_flattened.sol\":82206:82211  payer */\n      dup8\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":82056:82231  SwapCallbackData({\r... */\n      and\n      dup2\n      mstore\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":81844:81862  exactInputInternal */\n      tag_122\n        /* \"contracts/SwapRouter_flattened.sol\":81844:82246  exactInputInternal(\r... */\n      jump\t// in\n    tag_210:\n        /* \"contracts/SwapRouter_flattened.sol\":81826:81841  params.amountIn */\n      0x60\n      dup7\n      add\n        /* \"contracts/SwapRouter_flattened.sol\":81826:82246  params.amountIn = exactInputInternal(\r... */\n      mstore\n        /* \"contracts/SwapRouter_flattened.sol\":82319:82583  if (hasMultiplePools) {\r... */\n      dup1\n      iszero\n      tag_215\n      jumpi\n        /* \"contracts/SwapRouter_flattened.sol\":82452:82463  params.path */\n      dup5\n      mload\n        /* \"contracts/SwapRouter_flattened.sol\":82376:82380  this */\n      address\n      swap3\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":82452:82475  params.path.skipToken() */\n      tag_216\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":82452:82473  params.path.skipToken */\n      tag_217\n        /* \"contracts/SwapRouter_flattened.sol\":82452:82475  params.path.skipToken() */\n      jump\t// in\n    tag_216:\n        /* \"contracts/SwapRouter_flattened.sol\":82438:82475  params.path = params.path.skipToken() */\n      dup6\n      mstore\n        /* \"contracts/SwapRouter_flattened.sol\":82319:82583  if (hasMultiplePools) {\r... */\n      jump(tag_218)\n    tag_215:\n        /* \"contracts/SwapRouter_flattened.sol\":82528:82534  params */\n      dup5\n        /* \"contracts/SwapRouter_flattened.sol\":82528:82543  params.amountIn */\n      0x60\n      add\n      mload\n        /* \"contracts/SwapRouter_flattened.sol\":82516:82543  amountOut = params.amountIn */\n      swap4\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":82562:82567  break */\n      pop\n      jump(tag_207)\n        /* \"contracts/SwapRouter_flattened.sol\":82319:82583  if (hasMultiplePools) {\r... */\n    tag_218:\n        /* \"contracts/SwapRouter_flattened.sol\":81647:82594  while (true) {\r... */\n      pop\n      jump(tag_206)\n    tag_207:\n        /* \"contracts/SwapRouter_flattened.sol\":82627:82633  params */\n      dup4\n        /* \"contracts/SwapRouter_flattened.sol\":82627:82650  params.amountOutMinimum */\n      0x80\n      add\n      mload\n        /* \"contracts/SwapRouter_flattened.sol\":82614:82623  amountOut */\n      dup4\n        /* \"contracts/SwapRouter_flattened.sol\":82614:82650  amountOut >= params.amountOutMinimum */\n      lt\n      iszero\n        /* \"contracts/SwapRouter_flattened.sol\":82606:82674  require(amountOut >= params.amountOutMinimum, 'Too little received') */\n      tag_219\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_26\n      swap1\n      tag_125\n      jump\t// in\n    tag_219:\n        /* \"contracts/SwapRouter_flattened.sol\":30795:30796  _ */\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":81373:82682  function exactInput(ExactInputParams memory params)\r... */\n      pop\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/SwapRouter_flattened.sol\":26123:26446  function selfPermitIfNecessary(\r... */\n    tag_69:\n        /* \"contracts/SwapRouter_flattened.sol\":26335:26385  IERC20(token).allowance(msg.sender, address(this)) */\n      mload(0x40)\n      shl(0xe1, 0x6eb1769f)\n      dup2\n      mstore\n        /* \"contracts/SwapRouter_flattened.sol\":26388:26393  value */\n      dup6\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":26335:26358  IERC20(token).allowance */\n      dup9\n      and\n      swap1\n      0xdd62ed3e\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":26335:26385  IERC20(token).allowance(msg.sender, address(this)) */\n      tag_222\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":26359:26369  msg.sender */\n      caller\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":26379:26383  this */\n      address\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":26335:26385  IERC20(token).allowance(msg.sender, address(this)) */\n      0x04\n      add\n      tag_172\n      jump\t// in\n    tag_222:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_223\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_223:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_225\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_225:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_226\n      swap2\n      swap1\n      tag_139\n      jump\t// in\n    tag_226:\n        /* \"contracts/SwapRouter_flattened.sol\":26335:26393  IERC20(token).allowance(msg.sender, address(this)) < value */\n      lt\n        /* \"contracts/SwapRouter_flattened.sol\":26331:26438  if (IERC20(token).allowance(msg.sender, address(this)) < value) selfPermit(token, value, deadline, v, r, s) */\n      iszero\n      tag_169\n      jumpi\n        /* \"contracts/SwapRouter_flattened.sol\":26395:26438  selfPermit(token, value, deadline, v, r, s) */\n      tag_169\n        /* \"contracts/SwapRouter_flattened.sol\":26406:26411  token */\n      dup7\n        /* \"contracts/SwapRouter_flattened.sol\":26413:26418  value */\n      dup7\n        /* \"contracts/SwapRouter_flattened.sol\":26420:26428  deadline */\n      dup7\n        /* \"contracts/SwapRouter_flattened.sol\":26430:26431  v */\n      dup7\n        /* \"contracts/SwapRouter_flattened.sol\":26433:26434  r */\n      dup7\n        /* \"contracts/SwapRouter_flattened.sol\":26436:26437  s */\n      dup7\n        /* \"contracts/SwapRouter_flattened.sol\":26395:26405  selfPermit */\n      tag_94\n        /* \"contracts/SwapRouter_flattened.sol\":26395:26438  selfPermit(token, value, deadline, v, r, s) */\n      jump\t// in\n        /* \"contracts/SwapRouter_flattened.sol\":31556:31597  address public immutable override factory */\n    tag_72:\n      immutable(\"0x1c0bab9e06a591c52ac680ae9eef6479e476f64f56be5d259d46a0497cb2a9b9\")\n      dup2\n      jump\t// out\n        /* \"contracts/SwapRouter_flattened.sol\":84146:84896  function exactOutputSingle(ExactOutputSingleParams calldata params)\r... */\n    tag_77:\n        /* \"contracts/SwapRouter_flattened.sol\":84325:84341  uint256 amountIn */\n      0x00\n        /* \"contracts/SwapRouter_flattened.sol\":84290:84296  params */\n      dup2\n        /* \"contracts/SwapRouter_flattened.sol\":84290:84305  params.deadline */\n      0x80\n      add\n      calldataload\n        /* \"contracts/SwapRouter_flattened.sol\":30752:30760  deadline */\n      dup1\n        /* \"contracts/SwapRouter_flattened.sol\":30731:30748  _blockTimestamp() */\n      tag_230\n        /* \"contracts/SwapRouter_flattened.sol\":30731:30746  _blockTimestamp */\n      tag_106\n        /* \"contracts/SwapRouter_flattened.sol\":30731:30748  _blockTimestamp() */\n      jump\t// in\n    tag_230:\n        /* \"contracts/SwapRouter_flattened.sol\":30731:30760  _blockTimestamp() <= deadline */\n      gt\n      iszero\n        /* \"contracts/SwapRouter_flattened.sol\":30723:30784  require(_blockTimestamp() <= deadline, 'Transaction too old') */\n      tag_231\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_26\n      swap1\n      tag_109\n      jump\t// in\n    tag_231:\n        /* \"contracts/SwapRouter_flattened.sol\":84427:84679  exactOutputInternal(\r... */\n      tag_234\n        /* \"contracts/SwapRouter_flattened.sol\":84461:84477  params.amountOut */\n      0xa0\n      dup5\n      add\n      calldataload\n        /* \"contracts/SwapRouter_flattened.sol\":84492:84508  params.recipient */\n      tag_235\n      0x80\n      dup7\n      add\n      0x60\n      dup8\n      add\n      tag_113\n      jump\t// in\n    tag_235:\n        /* \"contracts/SwapRouter_flattened.sol\":84523:84547  params.sqrtPriceLimitX96 */\n      tag_236\n      0x0100\n      dup8\n      add\n      0xe0\n      dup9\n      add\n      tag_113\n      jump\t// in\n    tag_236:\n        /* \"contracts/SwapRouter_flattened.sol\":84562:84668  SwapCallbackData({path: abi.encodePacked(params.tokenOut, params.fee, params.tokenIn), payer: msg.sender}) */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n        /* \"contracts/SwapRouter_flattened.sol\":84603:84609  params */\n      dup9\n        /* \"contracts/SwapRouter_flattened.sol\":84603:84618  params.tokenOut */\n      0x20\n      add\n      0x20\n      dup2\n      add\n      swap1\n      tag_237\n      swap2\n      swap1\n      tag_113\n      jump\t// in\n    tag_237:\n        /* \"contracts/SwapRouter_flattened.sol\":84620:84630  params.fee */\n      tag_238\n      0x60\n      dup12\n      add\n      0x40\n      dup13\n      add\n      tag_118\n      jump\t// in\n    tag_238:\n        /* \"contracts/SwapRouter_flattened.sol\":84632:84646  params.tokenIn */\n      tag_239\n      0x20\n      dup13\n      add\n        /* \"contracts/SwapRouter_flattened.sol\":84632:84638  params */\n      dup13\n        /* \"contracts/SwapRouter_flattened.sol\":84632:84646  params.tokenIn */\n      tag_113\n      jump\t// in\n    tag_239:\n        /* \"contracts/SwapRouter_flattened.sol\":84586:84647  abi.encodePacked(params.tokenOut, params.fee, params.tokenIn) */\n      add(0x20, mload(0x40))\n      tag_240\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_121\n      jump\t// in\n    tag_240:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"contracts/SwapRouter_flattened.sol\":84562:84668  SwapCallbackData({path: abi.encodePacked(params.tokenOut, params.fee, params.tokenIn), payer: msg.sender}) */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/SwapRouter_flattened.sol\":84656:84666  msg.sender */\n      caller\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":84562:84668  SwapCallbackData({path: abi.encodePacked(params.tokenOut, params.fee, params.tokenIn), payer: msg.sender}) */\n      and\n      dup2\n      mstore\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":84427:84446  exactOutputInternal */\n      tag_241\n        /* \"contracts/SwapRouter_flattened.sol\":84427:84679  exactOutputInternal(\r... */\n      jump\t// in\n    tag_234:\n        /* \"contracts/SwapRouter_flattened.sol\":84416:84679  amountIn = exactOutputInternal(\r... */\n      swap2\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":84712:84718  params */\n      dup3\n        /* \"contracts/SwapRouter_flattened.sol\":84712:84734  params.amountInMaximum */\n      0xc0\n      add\n      calldataload\n        /* \"contracts/SwapRouter_flattened.sol\":84700:84708  amountIn */\n      dup3\n        /* \"contracts/SwapRouter_flattened.sol\":84700:84734  amountIn <= params.amountInMaximum */\n      gt\n      iszero\n        /* \"contracts/SwapRouter_flattened.sol\":84692:84757  require(amountIn <= params.amountInMaximum, 'Too much requested') */\n      tag_242\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_26\n      swap1\n      tag_244\n      jump\t// in\n    tag_242:\n      pop\n      not(0x00)\n        /* \"contracts/SwapRouter_flattened.sol\":84847:84861  amountInCached */\n      0x00\n        /* \"contracts/SwapRouter_flattened.sol\":84847:84888  amountInCached = DEFAULT_AMOUNT_IN_CACHED */\n      sstore\n        /* \"contracts/SwapRouter_flattened.sol\":84146:84896  function exactOutputSingle(ExactOutputSingleParams calldata params)\r... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/SwapRouter_flattened.sol\":32580:32986  function sweepToken(\r... */\n    tag_82:\n        /* \"contracts/SwapRouter_flattened.sol\":32749:32787  IERC20(token).balanceOf(address(this)) */\n      mload(0x40)\n      shl(0xe0, 0x70a08231)\n      dup2\n      mstore\n        /* \"contracts/SwapRouter_flattened.sol\":32726:32746  uint256 balanceToken */\n      0x00\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":32749:32772  IERC20(token).balanceOf */\n      dup6\n      and\n      swap1\n      0x70a08231\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":32749:32787  IERC20(token).balanceOf(address(this)) */\n      tag_246\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":32781:32785  this */\n      address\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":32749:32787  IERC20(token).balanceOf(address(this)) */\n      0x04\n      add\n      tag_48\n      jump\t// in\n    tag_246:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_247\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_247:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_249\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_249:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_250\n      swap2\n      swap1\n      tag_139\n      jump\t// in\n    tag_250:\n        /* \"contracts/SwapRouter_flattened.sol\":32726:32787  uint256 balanceToken = IERC20(token).balanceOf(address(this)) */\n      swap1\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":32822:32835  amountMinimum */\n      dup3\n        /* \"contracts/SwapRouter_flattened.sol\":32806:32818  balanceToken */\n      dup2\n        /* \"contracts/SwapRouter_flattened.sol\":32806:32835  balanceToken >= amountMinimum */\n      lt\n      iszero\n        /* \"contracts/SwapRouter_flattened.sol\":32798:32858  require(balanceToken >= amountMinimum, 'Insufficient token') */\n      tag_251\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_26\n      swap1\n      tag_253\n      jump\t// in\n    tag_251:\n        /* \"contracts/SwapRouter_flattened.sol\":32875:32891  balanceToken > 0 */\n      dup1\n      iszero\n        /* \"contracts/SwapRouter_flattened.sol\":32871:32979  if (balanceToken > 0) {\r... */\n      tag_255\n      jumpi\n        /* \"contracts/SwapRouter_flattened.sol\":32908:32967  TransferHelper.safeTransfer(token, recipient, balanceToken) */\n      tag_255\n        /* \"contracts/SwapRouter_flattened.sol\":32936:32941  token */\n      dup5\n        /* \"contracts/SwapRouter_flattened.sol\":32943:32952  recipient */\n      dup4\n        /* \"contracts/SwapRouter_flattened.sol\":32954:32966  balanceToken */\n      dup4\n        /* \"contracts/SwapRouter_flattened.sol\":32908:32935  TransferHelper.safeTransfer */\n      tag_256\n        /* \"contracts/SwapRouter_flattened.sol\":32908:32967  TransferHelper.safeTransfer(token, recipient, balanceToken) */\n      jump\t// in\n    tag_255:\n        /* \"contracts/SwapRouter_flattened.sol\":32580:32986  function sweepToken(\r... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/SwapRouter_flattened.sol\":35170:35865  function sweepTokenWithFee(\r... */\n    tag_86:\n        /* \"contracts/SwapRouter_flattened.sol\":35398:35399  0 */\n      0x00\n        /* \"contracts/SwapRouter_flattened.sol\":35388:35395  feeBips */\n      dup3\n        /* \"contracts/SwapRouter_flattened.sol\":35388:35399  feeBips > 0 */\n      gt\n        /* \"contracts/SwapRouter_flattened.sol\":35388:35417  feeBips > 0 && feeBips <= 100 */\n      dup1\n      iszero\n      tag_258\n      jumpi\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":35414:35417  100 */\n      0x64\n        /* \"contracts/SwapRouter_flattened.sol\":35403:35410  feeBips */\n      dup3\n        /* \"contracts/SwapRouter_flattened.sol\":35403:35417  feeBips <= 100 */\n      gt\n      iszero\n        /* \"contracts/SwapRouter_flattened.sol\":35388:35417  feeBips > 0 && feeBips <= 100 */\n    tag_258:\n        /* \"contracts/SwapRouter_flattened.sol\":35380:35418  require(feeBips > 0 && feeBips <= 100) */\n      tag_259\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_259:\n        /* \"contracts/SwapRouter_flattened.sol\":35454:35492  IERC20(token).balanceOf(address(this)) */\n      mload(0x40)\n      shl(0xe0, 0x70a08231)\n      dup2\n      mstore\n        /* \"contracts/SwapRouter_flattened.sol\":35431:35451  uint256 balanceToken */\n      0x00\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":35454:35477  IERC20(token).balanceOf */\n      dup8\n      and\n      swap1\n      0x70a08231\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":35454:35492  IERC20(token).balanceOf(address(this)) */\n      tag_260\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":35486:35490  this */\n      address\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":35454:35492  IERC20(token).balanceOf(address(this)) */\n      0x04\n      add\n      tag_48\n      jump\t// in\n    tag_260:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_261\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_261:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_263\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_263:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_264\n      swap2\n      swap1\n      tag_139\n      jump\t// in\n    tag_264:\n        /* \"contracts/SwapRouter_flattened.sol\":35431:35492  uint256 balanceToken = IERC20(token).balanceOf(address(this)) */\n      swap1\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":35527:35540  amountMinimum */\n      dup5\n        /* \"contracts/SwapRouter_flattened.sol\":35511:35523  balanceToken */\n      dup2\n        /* \"contracts/SwapRouter_flattened.sol\":35511:35540  balanceToken >= amountMinimum */\n      lt\n      iszero\n        /* \"contracts/SwapRouter_flattened.sol\":35503:35563  require(balanceToken >= amountMinimum, 'Insufficient token') */\n      tag_265\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_26\n      swap1\n      tag_253\n      jump\t// in\n    tag_265:\n        /* \"contracts/SwapRouter_flattened.sol\":35580:35596  balanceToken > 0 */\n      dup1\n      iszero\n        /* \"contracts/SwapRouter_flattened.sol\":35576:35858  if (balanceToken > 0) {\r... */\n      tag_169\n      jumpi\n        /* \"contracts/SwapRouter_flattened.sol\":35613:35630  uint256 feeAmount */\n      0x00\n        /* \"contracts/SwapRouter_flattened.sol\":35661:35667  10_000 */\n      0x2710\n        /* \"contracts/SwapRouter_flattened.sol\":35633:35658  balanceToken.mul(feeBips) */\n      tag_268\n        /* \"contracts/SwapRouter_flattened.sol\":35633:35645  balanceToken */\n      dup4\n        /* \"contracts/SwapRouter_flattened.sol\":35650:35657  feeBips */\n      dup7\n        /* \"contracts/SwapRouter_flattened.sol\":35633:35649  balanceToken.mul */\n      tag_165\n        /* \"contracts/SwapRouter_flattened.sol\":35633:35658  balanceToken.mul(feeBips) */\n      jump\t// in\n    tag_268:\n        /* \"contracts/SwapRouter_flattened.sol\":35633:35667  balanceToken.mul(feeBips) / 10_000 */\n      dup2\n      tag_269\n      jumpi\n      invalid\n    tag_269:\n      div\n      swap1\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":35686:35699  feeAmount > 0 */\n      dup1\n      iszero\n        /* \"contracts/SwapRouter_flattened.sol\":35682:35760  if (feeAmount > 0) TransferHelper.safeTransfer(token, feeRecipient, feeAmount) */\n      tag_271\n      jumpi\n        /* \"contracts/SwapRouter_flattened.sol\":35701:35760  TransferHelper.safeTransfer(token, feeRecipient, feeAmount) */\n      tag_271\n        /* \"contracts/SwapRouter_flattened.sol\":35729:35734  token */\n      dup8\n        /* \"contracts/SwapRouter_flattened.sol\":35736:35748  feeRecipient */\n      dup5\n        /* \"contracts/SwapRouter_flattened.sol\":35750:35759  feeAmount */\n      dup4\n        /* \"contracts/SwapRouter_flattened.sol\":35701:35728  TransferHelper.safeTransfer */\n      tag_256\n        /* \"contracts/SwapRouter_flattened.sol\":35701:35760  TransferHelper.safeTransfer(token, feeRecipient, feeAmount) */\n      jump\t// in\n    tag_271:\n        /* \"contracts/SwapRouter_flattened.sol\":35775:35846  TransferHelper.safeTransfer(token, recipient, balanceToken - feeAmount) */\n      tag_272\n        /* \"contracts/SwapRouter_flattened.sol\":35803:35808  token */\n      dup8\n        /* \"contracts/SwapRouter_flattened.sol\":35810:35819  recipient */\n      dup7\n        /* \"contracts/SwapRouter_flattened.sol\":35836:35845  feeAmount */\n      dup4\n        /* \"contracts/SwapRouter_flattened.sol\":35821:35833  balanceToken */\n      dup6\n        /* \"contracts/SwapRouter_flattened.sol\":35821:35845  balanceToken - feeAmount */\n      sub\n        /* \"contracts/SwapRouter_flattened.sol\":35775:35802  TransferHelper.safeTransfer */\n      tag_256\n        /* \"contracts/SwapRouter_flattened.sol\":35775:35846  TransferHelper.safeTransfer(token, recipient, balanceToken - feeAmount) */\n      jump\t// in\n    tag_272:\n        /* \"contracts/SwapRouter_flattened.sol\":35576:35858  if (balanceToken > 0) {\r... */\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":35170:35865  function sweepTokenWithFee(\r... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/SwapRouter_flattened.sol\":84937:85712  function exactOutput(ExactOutputParams calldata params)\r... */\n    tag_90:\n        /* \"contracts/SwapRouter_flattened.sol\":85104:85120  uint256 amountIn */\n      0x00\n        /* \"contracts/SwapRouter_flattened.sol\":85069:85075  params */\n      dup2\n        /* \"contracts/SwapRouter_flattened.sol\":85069:85084  params.deadline */\n      0x40\n      add\n      calldataload\n        /* \"contracts/SwapRouter_flattened.sol\":30752:30760  deadline */\n      dup1\n        /* \"contracts/SwapRouter_flattened.sol\":30731:30748  _blockTimestamp() */\n      tag_274\n        /* \"contracts/SwapRouter_flattened.sol\":30731:30746  _blockTimestamp */\n      tag_106\n        /* \"contracts/SwapRouter_flattened.sol\":30731:30748  _blockTimestamp() */\n      jump\t// in\n    tag_274:\n        /* \"contracts/SwapRouter_flattened.sol\":30731:30760  _blockTimestamp() <= deadline */\n      gt\n      iszero\n        /* \"contracts/SwapRouter_flattened.sol\":30723:30784  require(_blockTimestamp() <= deadline, 'Transaction too old') */\n      tag_275\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_26\n      swap1\n      tag_109\n      jump\t// in\n    tag_275:\n        /* \"contracts/SwapRouter_flattened.sol\":85359:85538  exactOutputInternal(\r... */\n      tag_278\n        /* \"contracts/SwapRouter_flattened.sol\":85393:85409  params.amountOut */\n      0x60\n      dup5\n      add\n      calldataload\n        /* \"contracts/SwapRouter_flattened.sol\":85424:85440  params.recipient */\n      tag_279\n      0x40\n      dup7\n      add\n      0x20\n      dup8\n      add\n      tag_113\n      jump\t// in\n    tag_279:\n        /* \"contracts/SwapRouter_flattened.sol\":85471:85527  SwapCallbackData({path: params.path, payer: msg.sender}) */\n      0x40\n      dup1\n      mload\n      dup1\n      dup3\n      add\n      swap1\n      swap2\n      mstore\n        /* \"contracts/SwapRouter_flattened.sol\":85455:85456  0 */\n      0x00\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":85471:85527  SwapCallbackData({path: params.path, payer: msg.sender}) */\n      dup1\n        /* \"contracts/SwapRouter_flattened.sol\":85495:85506  params.path */\n      tag_280\n        /* \"contracts/SwapRouter_flattened.sol\":85495:85501  params */\n      dup10\n      dup1\n        /* \"contracts/SwapRouter_flattened.sol\":85495:85506  params.path */\n      tag_188\n      jump\t// in\n    tag_280:\n        /* \"contracts/SwapRouter_flattened.sol\":85471:85527  SwapCallbackData({path: params.path, payer: msg.sender}) */\n      dup1\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap4\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup4\n      dup1\n      dup3\n      dup5\n      calldatacopy\n      0x00\n      swap3\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      pop\n      pop\n      pop\n      swap1\n      dup3\n      mstore\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":85515:85525  msg.sender */\n      caller\n        /* \"contracts/SwapRouter_flattened.sol\":85471:85527  SwapCallbackData({path: params.path, payer: msg.sender}) */\n      0x20\n      swap1\n      swap2\n      add\n      mstore\n        /* \"contracts/SwapRouter_flattened.sol\":85359:85378  exactOutputInternal */\n      tag_241\n        /* \"contracts/SwapRouter_flattened.sol\":85359:85538  exactOutputInternal(\r... */\n      jump\t// in\n    tag_278:\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":85562:85576  amountInCached */\n      sload(0x00)\n        /* \"contracts/SwapRouter_flattened.sol\":85551:85576  amountIn = amountInCached */\n      swap2\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":85607:85613  params */\n      dup3\n        /* \"contracts/SwapRouter_flattened.sol\":85607:85629  params.amountInMaximum */\n      0x80\n      add\n      calldataload\n        /* \"contracts/SwapRouter_flattened.sol\":85595:85603  amountIn */\n      dup3\n        /* \"contracts/SwapRouter_flattened.sol\":85595:85629  amountIn <= params.amountInMaximum */\n      gt\n      iszero\n        /* \"contracts/SwapRouter_flattened.sol\":85587:85652  require(amountIn <= params.amountInMaximum, 'Too much requested') */\n      tag_242\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_26\n      swap1\n      tag_244\n      jump\t// in\n        /* \"contracts/SwapRouter_flattened.sol\":25800:26082  function selfPermit(\r... */\n    tag_94:\n        /* \"contracts/SwapRouter_flattened.sol\":25995:26074  IERC20Permit(token).permit(msg.sender, address(this), value, deadline, v, r, s) */\n      mload(0x40)\n      shl(0xe0, 0xd505accf)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":25995:26021  IERC20Permit(token).permit */\n      dup8\n      and\n      swap1\n      0xd505accf\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":25995:26074  IERC20Permit(token).permit(msg.sender, address(this), value, deadline, v, r, s) */\n      tag_127\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":26022:26032  msg.sender */\n      caller\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":26042:26046  this */\n      address\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":26049:26054  value */\n      dup11\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":26056:26064  deadline */\n      dup11\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":26066:26067  v */\n      dup11\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":26069:26070  r */\n      dup11\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":26072:26073  s */\n      dup11\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":25995:26074  IERC20Permit(token).permit(msg.sender, address(this), value, deadline, v, r, s) */\n      0x04\n      add\n      tag_285\n      jump\t// in\n        /* \"contracts/SwapRouter_flattened.sol\":78393:79714  function uniswapV3SwapCallback(\r... */\n    tag_99:\n        /* \"contracts/SwapRouter_flattened.sol\":78574:78575  0 */\n      0x00\n        /* \"contracts/SwapRouter_flattened.sol\":78559:78571  amount0Delta */\n      dup5\n        /* \"contracts/SwapRouter_flattened.sol\":78559:78575  amount0Delta > 0 */\n      sgt\n        /* \"contracts/SwapRouter_flattened.sol\":78559:78595  amount0Delta > 0 || amount1Delta > 0 */\n      dup1\n      tag_290\n      jumpi\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":78594:78595  0 */\n      0x00\n        /* \"contracts/SwapRouter_flattened.sol\":78579:78591  amount1Delta */\n      dup4\n        /* \"contracts/SwapRouter_flattened.sol\":78579:78595  amount1Delta > 0 */\n      sgt\n        /* \"contracts/SwapRouter_flattened.sol\":78559:78595  amount0Delta > 0 || amount1Delta > 0 */\n    tag_290:\n        /* \"contracts/SwapRouter_flattened.sol\":78551:78596  require(amount0Delta > 0 || amount1Delta > 0) */\n      tag_291\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_291:\n        /* \"contracts/SwapRouter_flattened.sol\":78670:78698  SwapCallbackData memory data */\n      0x00\n        /* \"contracts/SwapRouter_flattened.sol\":78701:78738  abi.decode(_data, (SwapCallbackData)) */\n      tag_292\n      dup3\n      dup5\n      add\n        /* \"contracts/SwapRouter_flattened.sol\":78712:78717  _data */\n      dup5\n        /* \"contracts/SwapRouter_flattened.sol\":78701:78738  abi.decode(_data, (SwapCallbackData)) */\n      tag_293\n      jump\t// in\n    tag_292:\n        /* \"contracts/SwapRouter_flattened.sol\":78670:78738  SwapCallbackData memory data = abi.decode(_data, (SwapCallbackData)) */\n      swap1\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":78750:78765  address tokenIn */\n      0x00\n        /* \"contracts/SwapRouter_flattened.sol\":78767:78783  address tokenOut */\n      dup1\n        /* \"contracts/SwapRouter_flattened.sol\":78785:78795  uint24 fee */\n      0x00\n        /* \"contracts/SwapRouter_flattened.sol\":78799:78826  data.path.decodeFirstPool() */\n      tag_294\n        /* \"contracts/SwapRouter_flattened.sol\":78799:78803  data */\n      dup5\n        /* \"contracts/SwapRouter_flattened.sol\":78799:78808  data.path */\n      0x00\n      add\n      mload\n        /* \"contracts/SwapRouter_flattened.sol\":78799:78824  data.path.decodeFirstPool */\n      tag_295\n        /* \"contracts/SwapRouter_flattened.sol\":78799:78826  data.path.decodeFirstPool() */\n      jump\t// in\n    tag_294:\n        /* \"contracts/SwapRouter_flattened.sol\":78749:78826  (address tokenIn, address tokenOut, uint24 fee) = data.path.decodeFirstPool() */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":78837:78903  CallbackValidation.verifyCallback(factory, tokenIn, tokenOut, fee) */\n      tag_296\n        /* \"contracts/SwapRouter_flattened.sol\":78871:78878  factory */\n      immutable(\"0x1c0bab9e06a591c52ac680ae9eef6479e476f64f56be5d259d46a0497cb2a9b9\")\n        /* \"contracts/SwapRouter_flattened.sol\":78880:78887  tokenIn */\n      dup5\n        /* \"contracts/SwapRouter_flattened.sol\":78889:78897  tokenOut */\n      dup5\n        /* \"contracts/SwapRouter_flattened.sol\":78899:78902  fee */\n      dup5\n        /* \"contracts/SwapRouter_flattened.sol\":78837:78870  CallbackValidation.verifyCallback */\n      tag_297\n        /* \"contracts/SwapRouter_flattened.sol\":78837:78903  CallbackValidation.verifyCallback(factory, tokenIn, tokenOut, fee) */\n      jump\t// in\n    tag_296:\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":78917:78934  bool isExactInput */\n      0x00\n        /* \"contracts/SwapRouter_flattened.sol\":78936:78955  uint256 amountToPay */\n      dup1\n        /* \"contracts/SwapRouter_flattened.sol\":78987:78988  0 */\n      0x00\n        /* \"contracts/SwapRouter_flattened.sol\":78972:78984  amount0Delta */\n      dup11\n        /* \"contracts/SwapRouter_flattened.sol\":78972:78988  amount0Delta > 0 */\n      sgt\n        /* \"contracts/SwapRouter_flattened.sol\":78972:79114  amount0Delta > 0\r... */\n      tag_298\n      jumpi\n        /* \"contracts/SwapRouter_flattened.sol\":79083:79090  tokenIn */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":79072:79090  tokenOut < tokenIn */\n      and\n        /* \"contracts/SwapRouter_flattened.sol\":79072:79080  tokenOut */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":79072:79090  tokenOut < tokenIn */\n      and\n      lt\n        /* \"contracts/SwapRouter_flattened.sol\":79100:79112  amount1Delta */\n      dup10\n        /* \"contracts/SwapRouter_flattened.sol\":78972:79114  amount0Delta > 0\r... */\n      jump(tag_299)\n    tag_298:\n        /* \"contracts/SwapRouter_flattened.sol\":79019:79027  tokenOut */\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":79009:79027  tokenIn < tokenOut */\n      and\n        /* \"contracts/SwapRouter_flattened.sol\":79009:79016  tokenIn */\n      dup6\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":79009:79027  tokenIn < tokenOut */\n      and\n      lt\n        /* \"contracts/SwapRouter_flattened.sol\":79037:79049  amount0Delta */\n      dup11\n        /* \"contracts/SwapRouter_flattened.sol\":78972:79114  amount0Delta > 0\r... */\n    tag_299:\n        /* \"contracts/SwapRouter_flattened.sol\":78916:79114  (bool isExactInput, uint256 amountToPay) =\r... */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":79129:79141  isExactInput */\n      dup2\n        /* \"contracts/SwapRouter_flattened.sol\":79125:79707  if (isExactInput) {\r... */\n      iszero\n      tag_300\n      jumpi\n        /* \"contracts/SwapRouter_flattened.sol\":79158:79207  pay(tokenIn, data.payer, msg.sender, amountToPay) */\n      tag_301\n        /* \"contracts/SwapRouter_flattened.sol\":79162:79169  tokenIn */\n      dup6\n        /* \"contracts/SwapRouter_flattened.sol\":79171:79175  data */\n      dup8\n        /* \"contracts/SwapRouter_flattened.sol\":79171:79181  data.payer */\n      0x20\n      add\n      mload\n        /* \"contracts/SwapRouter_flattened.sol\":79183:79193  msg.sender */\n      caller\n        /* \"contracts/SwapRouter_flattened.sol\":79195:79206  amountToPay */\n      dup5\n        /* \"contracts/SwapRouter_flattened.sol\":79158:79161  pay */\n      tag_302\n        /* \"contracts/SwapRouter_flattened.sol\":79158:79207  pay(tokenIn, data.payer, msg.sender, amountToPay) */\n      jump\t// in\n    tag_301:\n        /* \"contracts/SwapRouter_flattened.sol\":79125:79707  if (isExactInput) {\r... */\n      jump(tag_131)\n    tag_300:\n        /* \"contracts/SwapRouter_flattened.sol\":79297:79306  data.path */\n      dup6\n      mload\n        /* \"contracts/SwapRouter_flattened.sol\":79297:79325  data.path.hasMultiplePools() */\n      tag_304\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":79297:79323  data.path.hasMultiplePools */\n      tag_209\n        /* \"contracts/SwapRouter_flattened.sol\":79297:79325  data.path.hasMultiplePools() */\n      jump\t// in\n    tag_304:\n        /* \"contracts/SwapRouter_flattened.sol\":79293:79696  if (data.path.hasMultiplePools()) {\r... */\n      iszero\n      tag_305\n      jumpi\n        /* \"contracts/SwapRouter_flattened.sol\":79358:79367  data.path */\n      dup6\n      mload\n        /* \"contracts/SwapRouter_flattened.sol\":79358:79379  data.path.skipToken() */\n      tag_306\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":79358:79377  data.path.skipToken */\n      tag_217\n        /* \"contracts/SwapRouter_flattened.sol\":79358:79379  data.path.skipToken() */\n      jump\t// in\n    tag_306:\n        /* \"contracts/SwapRouter_flattened.sol\":79346:79379  data.path = data.path.skipToken() */\n      dup7\n      mstore\n        /* \"contracts/SwapRouter_flattened.sol\":79398:79451  exactOutputInternal(amountToPay, msg.sender, 0, data) */\n      tag_307\n        /* \"contracts/SwapRouter_flattened.sol\":79418:79429  amountToPay */\n      dup2\n        /* \"contracts/SwapRouter_flattened.sol\":79431:79441  msg.sender */\n      caller\n        /* \"contracts/SwapRouter_flattened.sol\":79346:79355  data.path */\n      0x00\n        /* \"contracts/SwapRouter_flattened.sol\":79346:79350  data */\n      dup10\n        /* \"contracts/SwapRouter_flattened.sol\":79398:79417  exactOutputInternal */\n      tag_241\n        /* \"contracts/SwapRouter_flattened.sol\":79398:79451  exactOutputInternal(amountToPay, msg.sender, 0, data) */\n      jump\t// in\n    tag_307:\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":79293:79696  if (data.path.hasMultiplePools()) {\r... */\n      jump(tag_131)\n    tag_305:\n        /* \"contracts/SwapRouter_flattened.sol\":79509:79520  amountToPay */\n      dup1\n        /* \"contracts/SwapRouter_flattened.sol\":79492:79506  amountInCached */\n      0x00\n        /* \"contracts/SwapRouter_flattened.sol\":79492:79520  amountInCached = amountToPay */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":79549:79557  tokenOut */\n      dup4\n        /* \"contracts/SwapRouter_flattened.sol\":79539:79557  tokenIn = tokenOut */\n      swap5\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":79631:79680  pay(tokenIn, data.payer, msg.sender, amountToPay) */\n      tag_131\n        /* \"contracts/SwapRouter_flattened.sol\":79635:79642  tokenIn */\n      dup6\n        /* \"contracts/SwapRouter_flattened.sol\":79644:79648  data */\n      dup8\n        /* \"contracts/SwapRouter_flattened.sol\":79644:79654  data.payer */\n      0x20\n      add\n      mload\n        /* \"contracts/SwapRouter_flattened.sol\":79656:79666  msg.sender */\n      caller\n        /* \"contracts/SwapRouter_flattened.sol\":79668:79679  amountToPay */\n      dup5\n        /* \"contracts/SwapRouter_flattened.sol\":79631:79634  pay */\n      tag_302\n        /* \"contracts/SwapRouter_flattened.sol\":79631:79680  pay(tokenIn, data.payer, msg.sender, amountToPay) */\n      jump\t// in\n        /* \"contracts/SwapRouter_flattened.sol\":29565:29733  function safeTransferETH(address to, uint256 value) internal {\r... */\n    tag_103:\n        /* \"contracts/SwapRouter_flattened.sol\":29678:29690  new bytes(0) */\n      0x40\n      dup1\n      mload\n        /* \"contracts/SwapRouter_flattened.sol\":29638:29650  bool success */\n      0x00\n        /* \"contracts/SwapRouter_flattened.sol\":29678:29690  new bytes(0) */\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      swap1\n      swap3\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":29656:29663  to.call */\n      dup5\n      and\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":29671:29676  value */\n      dup4\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":29656:29691  to.call{value: value}(new bytes(0)) */\n      mload(0x40)\n      tag_313\n      swap2\n      swap1\n      tag_314\n      jump\t// in\n    tag_313:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_317\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_316)\n    tag_317:\n      0x60\n      swap2\n      pop\n    tag_316:\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":29637:29691  (bool success, ) = to.call{value: value}(new bytes(0)) */\n      pop\n      swap1\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":29710:29717  success */\n      dup1\n        /* \"contracts/SwapRouter_flattened.sol\":29702:29725  require(success, 'STE') */\n      tag_148\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_26\n      swap1\n      tag_320\n      jump\t// in\n        /* \"contracts/SwapRouter_flattened.sol\":30411:30519  function _blockTimestamp() internal view virtual returns (uint256) {\r... */\n    tag_106:\n        /* \"contracts/SwapRouter_flattened.sol\":30496:30511  block.timestamp */\n      timestamp\n        /* \"contracts/SwapRouter_flattened.sol\":30411:30519  function _blockTimestamp() internal view virtual returns (uint256) {\r... */\n      swap1\n      jump\t// out\n        /* \"contracts/SwapRouter_flattened.sol\":79771:80730  function exactInputInternal(\r... */\n    tag_122:\n        /* \"contracts/SwapRouter_flattened.sol\":79953:79970  uint256 amountOut */\n      0x00\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":80051:80074  recipient == address(0) */\n      dup5\n      and\n        /* \"contracts/SwapRouter_flattened.sol\":80047:80101  if (recipient == address(0)) recipient = address(this) */\n      tag_323\n      jumpi\n        /* \"contracts/SwapRouter_flattened.sol\":80096:80100  this */\n      address\n        /* \"contracts/SwapRouter_flattened.sol\":80076:80101  recipient = address(this) */\n      swap4\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":80047:80101  if (recipient == address(0)) recipient = address(this) */\n    tag_323:\n        /* \"contracts/SwapRouter_flattened.sol\":80115:80130  address tokenIn */\n      0x00\n        /* \"contracts/SwapRouter_flattened.sol\":80132:80148  address tokenOut */\n      dup1\n        /* \"contracts/SwapRouter_flattened.sol\":80150:80160  uint24 fee */\n      0x00\n        /* \"contracts/SwapRouter_flattened.sol\":80164:80191  data.path.decodeFirstPool() */\n      tag_324\n        /* \"contracts/SwapRouter_flattened.sol\":80164:80168  data */\n      dup6\n        /* \"contracts/SwapRouter_flattened.sol\":80164:80173  data.path */\n      0x00\n      add\n      mload\n        /* \"contracts/SwapRouter_flattened.sol\":80164:80189  data.path.decodeFirstPool */\n      tag_295\n        /* \"contracts/SwapRouter_flattened.sol\":80164:80191  data.path.decodeFirstPool() */\n      jump\t// in\n    tag_324:\n        /* \"contracts/SwapRouter_flattened.sol\":80114:80191  (address tokenIn, address tokenOut, uint24 fee) = data.path.decodeFirstPool() */\n      swap2\n      swap5\n      pop\n      swap3\n      pop\n      swap1\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":80222:80240  tokenIn < tokenOut */\n      dup1\n      dup4\n      and\n      swap1\n      dup5\n      and\n      lt\n        /* \"contracts/SwapRouter_flattened.sol\":80204:80219  bool zeroForOne */\n      0x00\n      dup1\n        /* \"contracts/SwapRouter_flattened.sol\":80301:80332  getPool(tokenIn, tokenOut, fee) */\n      tag_325\n        /* \"contracts/SwapRouter_flattened.sol\":80114:80191  (address tokenIn, address tokenOut, uint24 fee) = data.path.decodeFirstPool() */\n      dup7\n      dup7\n      dup7\n        /* \"contracts/SwapRouter_flattened.sol\":80301:80308  getPool */\n      tag_326\n        /* \"contracts/SwapRouter_flattened.sol\":80301:80332  getPool(tokenIn, tokenOut, fee) */\n      jump\t// in\n    tag_325:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":80301:80337  getPool(tokenIn, tokenOut, fee).swap */\n      and\n      0x128acb08\n        /* \"contracts/SwapRouter_flattened.sol\":80356:80365  recipient */\n      dup12\n        /* \"contracts/SwapRouter_flattened.sol\":80384:80394  zeroForOne */\n      dup6\n        /* \"contracts/SwapRouter_flattened.sol\":80413:80432  amountIn.toInt256() */\n      tag_327\n        /* \"contracts/SwapRouter_flattened.sol\":80413:80421  amountIn */\n      dup16\n        /* \"contracts/SwapRouter_flattened.sol\":80413:80430  amountIn.toInt256 */\n      tag_328\n        /* \"contracts/SwapRouter_flattened.sol\":80413:80432  amountIn.toInt256() */\n      jump\t// in\n    tag_327:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":80451:80473  sqrtPriceLimitX96 == 0 */\n      dup15\n      and\n      iszero\n        /* \"contracts/SwapRouter_flattened.sol\":80451:80610  sqrtPriceLimitX96 == 0\r... */\n      tag_329\n      jumpi\n        /* \"contracts/SwapRouter_flattened.sol\":80593:80610  sqrtPriceLimitX96 */\n      dup14\n        /* \"contracts/SwapRouter_flattened.sol\":80451:80610  sqrtPriceLimitX96 == 0\r... */\n      jump(tag_332)\n    tag_329:\n        /* \"contracts/SwapRouter_flattened.sol\":80498:80508  zeroForOne */\n      dup8\n        /* \"contracts/SwapRouter_flattened.sol\":80498:80568  zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1 */\n      tag_331\n      jumpi\n        /* \"contracts/SwapRouter_flattened.sol\":80541:80568  TickMath.MAX_SQRT_RATIO - 1 */\n      0xfffd8963efd1fc6a506488495d951d5263988d25\n        /* \"contracts/SwapRouter_flattened.sol\":80498:80568  zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1 */\n      jump(tag_332)\n    tag_331:\n        /* \"contracts/SwapRouter_flattened.sol\":80511:80538  TickMath.MIN_SQRT_RATIO + 1 */\n      0x01000276a4\n        /* \"contracts/SwapRouter_flattened.sol\":80498:80568  zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1 */\n    tag_332:\n        /* \"contracts/SwapRouter_flattened.sol\":80640:80644  data */\n      dup14\n        /* \"contracts/SwapRouter_flattened.sol\":80629:80645  abi.encode(data) */\n      add(0x20, mload(0x40))\n      tag_333\n      swap2\n      swap1\n      tag_334\n      jump\t// in\n    tag_333:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"contracts/SwapRouter_flattened.sol\":80301:80660  getPool(tokenIn, tokenOut, fee).swap(\r... */\n      mload(0x40)\n      dup7\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_335\n      swap6\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_336\n      jump\t// in\n    tag_335:\n      0x40\n      dup1\n      mload\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_337\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_337:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_339\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_339:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_340\n      swap2\n      swap1\n      tag_341\n      jump\t// in\n    tag_340:\n        /* \"contracts/SwapRouter_flattened.sol\":80253:80660  (int256 amount0, int256 amount1) =\r... */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":80690:80700  zeroForOne */\n      dup3\n        /* \"contracts/SwapRouter_flattened.sol\":80690:80720  zeroForOne ? amount1 : amount0 */\n      tag_342\n      jumpi\n        /* \"contracts/SwapRouter_flattened.sol\":80713:80720  amount0 */\n      dup2\n        /* \"contracts/SwapRouter_flattened.sol\":80690:80720  zeroForOne ? amount1 : amount0 */\n      jump(tag_343)\n    tag_342:\n        /* \"contracts/SwapRouter_flattened.sol\":80703:80710  amount1 */\n      dup1\n        /* \"contracts/SwapRouter_flattened.sol\":80690:80720  zeroForOne ? amount1 : amount0 */\n    tag_343:\n        /* \"contracts/SwapRouter_flattened.sol\":80688:80721  -(zeroForOne ? amount1 : amount0) */\n      0x00\n      sub\n      swap12\n        /* \"contracts/SwapRouter_flattened.sol\":79771:80730  function exactInputInternal(\r... */\n      swap11\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/SwapRouter_flattened.sol\":21802:21929  function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r... */\n    tag_165:\n        /* \"contracts/SwapRouter_flattened.sol\":21860:21869  uint256 z */\n      0x00\n        /* \"contracts/SwapRouter_flattened.sol\":21890:21896  x == 0 */\n      dup3\n      iszero\n      dup1\n        /* \"contracts/SwapRouter_flattened.sol\":21890:21920  x == 0 || (z = x * y) / x == y */\n      tag_345\n      jumpi\n      pop\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":21905:21910  x * y */\n      dup2\n      dup2\n      mul\n        /* \"contracts/SwapRouter_flattened.sol\":21919:21920  y */\n      dup2\n        /* \"contracts/SwapRouter_flattened.sol\":21914:21915  x */\n      dup4\n        /* \"contracts/SwapRouter_flattened.sol\":21905:21910  x * y */\n      dup3\n        /* \"contracts/SwapRouter_flattened.sol\":21914:21915  x */\n      dup2\n        /* \"contracts/SwapRouter_flattened.sol\":21900:21915  (z = x * y) / x */\n      tag_346\n      jumpi\n      invalid\n    tag_346:\n      div\n        /* \"contracts/SwapRouter_flattened.sol\":21900:21920  (z = x * y) / x == y */\n      eq\n        /* \"contracts/SwapRouter_flattened.sol\":21890:21920  x == 0 || (z = x * y) / x == y */\n    tag_345:\n        /* \"contracts/SwapRouter_flattened.sol\":21882:21921  require(x == 0 || (z = x * y) / x == y) */\n      tag_347\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_347:\n        /* \"contracts/SwapRouter_flattened.sol\":21802:21929  function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/SwapRouter_flattened.sol\":7213:7353  function hasMultiplePools(bytes memory path) internal pure returns (bool) {\r... */\n    tag_209:\n        /* \"contracts/SwapRouter_flattened.sol\":7305:7316  path.length */\n      dup1\n      mload\n        /* \"contracts/SwapRouter_flattened.sol\":6993:7017  POP_OFFSET + NEXT_OFFSET */\n      0x42\n      gt\n        /* \"contracts/SwapRouter_flattened.sol\":7305:7345  path.length >= MULTIPLE_POOLS_MIN_LENGTH */\n      iszero\n        /* \"contracts/SwapRouter_flattened.sol\":7213:7353  function hasMultiplePools(bytes memory path) internal pure returns (bool) {\r... */\n    tag_348:\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/SwapRouter_flattened.sol\":8574:8703  function getFirstPool(bytes memory path) internal pure returns (bytes memory) {\r... */\n    tag_214:\n        /* \"contracts/SwapRouter_flattened.sol\":8638:8650  bytes memory */\n      0x60\n        /* \"contracts/SwapRouter_flattened.sol\":8670:8695  path.slice(0, POP_OFFSET) */\n      tag_347\n        /* \"contracts/SwapRouter_flattened.sol\":8670:8674  path */\n      dup3\n        /* \"contracts/SwapRouter_flattened.sol\":8681:8682  0 */\n      0x00\n        /* \"contracts/SwapRouter_flattened.sol\":6832:6855  NEXT_OFFSET + ADDR_SIZE */\n      0x2b\n        /* \"contracts/SwapRouter_flattened.sol\":8670:8680  path.slice */\n      tag_351\n        /* \"contracts/SwapRouter_flattened.sol\":8670:8695  path.slice(0, POP_OFFSET) */\n      jump\t// in\n        /* \"contracts/SwapRouter_flattened.sol\":8897:9048  function skipToken(bytes memory path) internal pure returns (bytes memory) {\r... */\n    tag_217:\n        /* \"contracts/SwapRouter_flattened.sol\":9014:9025  path.length */\n      dup1\n      mload\n        /* \"contracts/SwapRouter_flattened.sol\":8958:8970  bytes memory */\n      0x60\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":8990:9040  path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET) */\n      tag_347\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":9014:9018  path */\n      dup4\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":6719:6739  ADDR_SIZE + FEE_SIZE */\n      0x17\n      swap1\n      not(0x16)\n        /* \"contracts/SwapRouter_flattened.sol\":9014:9039  path.length - NEXT_OFFSET */\n      add\n        /* \"contracts/SwapRouter_flattened.sol\":8990:9000  path.slice */\n      tag_351\n        /* \"contracts/SwapRouter_flattened.sol\":8990:9040  path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET) */\n      jump\t// in\n        /* \"contracts/SwapRouter_flattened.sol\":82740:84105  function exactOutputInternal(\r... */\n    tag_241:\n        /* \"contracts/SwapRouter_flattened.sol\":82924:82940  uint256 amountIn */\n      0x00\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":83021:83044  recipient == address(0) */\n      dup5\n      and\n        /* \"contracts/SwapRouter_flattened.sol\":83017:83071  if (recipient == address(0)) recipient = address(this) */\n      tag_355\n      jumpi\n        /* \"contracts/SwapRouter_flattened.sol\":83066:83070  this */\n      address\n        /* \"contracts/SwapRouter_flattened.sol\":83046:83071  recipient = address(this) */\n      swap4\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":83017:83071  if (recipient == address(0)) recipient = address(this) */\n    tag_355:\n        /* \"contracts/SwapRouter_flattened.sol\":83085:83101  address tokenOut */\n      0x00\n        /* \"contracts/SwapRouter_flattened.sol\":83103:83118  address tokenIn */\n      dup1\n        /* \"contracts/SwapRouter_flattened.sol\":83120:83130  uint24 fee */\n      0x00\n        /* \"contracts/SwapRouter_flattened.sol\":83134:83161  data.path.decodeFirstPool() */\n      tag_356\n        /* \"contracts/SwapRouter_flattened.sol\":83134:83138  data */\n      dup6\n        /* \"contracts/SwapRouter_flattened.sol\":83134:83143  data.path */\n      0x00\n      add\n      mload\n        /* \"contracts/SwapRouter_flattened.sol\":83134:83159  data.path.decodeFirstPool */\n      tag_295\n        /* \"contracts/SwapRouter_flattened.sol\":83134:83161  data.path.decodeFirstPool() */\n      jump\t// in\n    tag_356:\n        /* \"contracts/SwapRouter_flattened.sol\":83084:83161  (address tokenOut, address tokenIn, uint24 fee) = data.path.decodeFirstPool() */\n      swap2\n      swap5\n      pop\n      swap3\n      pop\n      swap1\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":83192:83210  tokenIn < tokenOut */\n      dup1\n      dup5\n      and\n      swap1\n      dup4\n      and\n      lt\n        /* \"contracts/SwapRouter_flattened.sol\":83174:83189  bool zeroForOne */\n      0x00\n      dup1\n        /* \"contracts/SwapRouter_flattened.sol\":83281:83312  getPool(tokenIn, tokenOut, fee) */\n      tag_357\n        /* \"contracts/SwapRouter_flattened.sol\":83084:83161  (address tokenOut, address tokenIn, uint24 fee) = data.path.decodeFirstPool() */\n      dup6\n      dup8\n      dup7\n        /* \"contracts/SwapRouter_flattened.sol\":83281:83288  getPool */\n      tag_326\n        /* \"contracts/SwapRouter_flattened.sol\":83281:83312  getPool(tokenIn, tokenOut, fee) */\n      jump\t// in\n    tag_357:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":83281:83317  getPool(tokenIn, tokenOut, fee).swap */\n      and\n      0x128acb08\n        /* \"contracts/SwapRouter_flattened.sol\":83336:83345  recipient */\n      dup12\n        /* \"contracts/SwapRouter_flattened.sol\":83364:83374  zeroForOne */\n      dup6\n        /* \"contracts/SwapRouter_flattened.sol\":83394:83414  amountOut.toInt256() */\n      tag_358\n        /* \"contracts/SwapRouter_flattened.sol\":83394:83403  amountOut */\n      dup16\n        /* \"contracts/SwapRouter_flattened.sol\":83394:83412  amountOut.toInt256 */\n      tag_328\n        /* \"contracts/SwapRouter_flattened.sol\":83394:83414  amountOut.toInt256() */\n      jump\t// in\n    tag_358:\n        /* \"contracts/SwapRouter_flattened.sol\":83393:83414  -amountOut.toInt256() */\n      0x00\n      sub\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":83433:83455  sqrtPriceLimitX96 == 0 */\n      dup15\n      and\n      iszero\n        /* \"contracts/SwapRouter_flattened.sol\":83433:83592  sqrtPriceLimitX96 == 0\r... */\n      tag_359\n      jumpi\n        /* \"contracts/SwapRouter_flattened.sol\":83575:83592  sqrtPriceLimitX96 */\n      dup14\n        /* \"contracts/SwapRouter_flattened.sol\":83433:83592  sqrtPriceLimitX96 == 0\r... */\n      jump(tag_362)\n    tag_359:\n        /* \"contracts/SwapRouter_flattened.sol\":83480:83490  zeroForOne */\n      dup8\n        /* \"contracts/SwapRouter_flattened.sol\":83480:83550  zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1 */\n      tag_361\n      jumpi\n        /* \"contracts/SwapRouter_flattened.sol\":83523:83550  TickMath.MAX_SQRT_RATIO - 1 */\n      0xfffd8963efd1fc6a506488495d951d5263988d25\n        /* \"contracts/SwapRouter_flattened.sol\":83480:83550  zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1 */\n      jump(tag_362)\n    tag_361:\n        /* \"contracts/SwapRouter_flattened.sol\":83493:83520  TickMath.MIN_SQRT_RATIO + 1 */\n      0x01000276a4\n        /* \"contracts/SwapRouter_flattened.sol\":83480:83550  zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1 */\n    tag_362:\n        /* \"contracts/SwapRouter_flattened.sol\":83622:83626  data */\n      dup14\n        /* \"contracts/SwapRouter_flattened.sol\":83611:83627  abi.encode(data) */\n      add(0x20, mload(0x40))\n      tag_363\n      swap2\n      swap1\n      tag_334\n      jump\t// in\n    tag_363:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"contracts/SwapRouter_flattened.sol\":83281:83642  getPool(tokenIn, tokenOut, fee).swap(\r... */\n      mload(0x40)\n      dup7\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_364\n      swap6\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_336\n      jump\t// in\n    tag_364:\n      0x40\n      dup1\n      mload\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_365\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_365:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_367\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_367:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_368\n      swap2\n      swap1\n      tag_341\n      jump\t// in\n    tag_368:\n        /* \"contracts/SwapRouter_flattened.sol\":83223:83642  (int256 amount0Delta, int256 amount1Delta) =\r... */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":83655:83680  uint256 amountOutReceived */\n      0x00\n        /* \"contracts/SwapRouter_flattened.sol\":83723:83733  zeroForOne */\n      dup4\n        /* \"contracts/SwapRouter_flattened.sol\":83723:83859  zeroForOne\r... */\n      tag_369\n      jumpi\n        /* \"contracts/SwapRouter_flattened.sol\":83821:83833  amount1Delta */\n      dup2\n        /* \"contracts/SwapRouter_flattened.sol\":83845:83857  amount0Delta */\n      dup4\n        /* \"contracts/SwapRouter_flattened.sol\":83844:83857  -amount0Delta */\n      0x00\n      sub\n        /* \"contracts/SwapRouter_flattened.sol\":83723:83859  zeroForOne\r... */\n      jump(tag_370)\n    tag_369:\n        /* \"contracts/SwapRouter_flattened.sol\":83758:83770  amount0Delta */\n      dup3\n        /* \"contracts/SwapRouter_flattened.sol\":83782:83794  amount1Delta */\n      dup3\n        /* \"contracts/SwapRouter_flattened.sol\":83781:83794  -amount1Delta */\n      0x00\n      sub\n        /* \"contracts/SwapRouter_flattened.sol\":83723:83859  zeroForOne\r... */\n    tag_370:\n        /* \"contracts/SwapRouter_flattened.sol\":83691:83859  (amountIn, amountOutReceived) = zeroForOne\r... */\n      swap1\n      swap9\n      pop\n      swap1\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":84034:84056  sqrtPriceLimitX96 == 0 */\n      dup11\n      and\n        /* \"contracts/SwapRouter_flattened.sol\":84030:84097  if (sqrtPriceLimitX96 == 0) require(amountOutReceived == amountOut) */\n      tag_372\n      jumpi\n        /* \"contracts/SwapRouter_flattened.sol\":84087:84096  amountOut */\n      dup12\n        /* \"contracts/SwapRouter_flattened.sol\":84066:84083  amountOutReceived */\n      dup2\n        /* \"contracts/SwapRouter_flattened.sol\":84066:84096  amountOutReceived == amountOut */\n      eq\n        /* \"contracts/SwapRouter_flattened.sol\":84058:84097  require(amountOutReceived == amountOut) */\n      tag_372\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_372:\n        /* \"contracts/SwapRouter_flattened.sol\":82740:84105  function exactOutputInternal(\r... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/SwapRouter_flattened.sol\":28379:28695  function safeTransfer(\r... */\n    tag_256:\n        /* \"contracts/SwapRouter_flattened.sol\":28498:28510  bool success */\n      0x00\n        /* \"contracts/SwapRouter_flattened.sol\":28512:28529  bytes memory data */\n      dup1\n        /* \"contracts/SwapRouter_flattened.sol\":28533:28538  token */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":28533:28543  token.call */\n      and\n        /* \"contracts/SwapRouter_flattened.sol\":28567:28591  IERC20.transfer.selector */\n      shl(0xe0, 0xa9059cbb)\n        /* \"contracts/SwapRouter_flattened.sol\":28593:28595  to */\n      dup6\n        /* \"contracts/SwapRouter_flattened.sol\":28597:28602  value */\n      dup6\n        /* \"contracts/SwapRouter_flattened.sol\":28544:28603  abi.encodeWithSelector(IERC20.transfer.selector, to, value) */\n      add(0x24, mload(0x40))\n      tag_374\n      swap3\n      swap2\n      swap1\n      tag_375\n      jump\t// in\n    tag_374:\n      0x40\n      dup1\n      mload\n      not(0x1f)\n      dup2\n      dup5\n      sub\n      add\n      dup2\n      mstore\n      swap2\n      dup2\n      mstore\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      sub(shl(0xe0, 0x01), 0x01)\n      and\n      not(sub(shl(0xe0, 0x01), 0x01))\n      swap1\n      swap5\n      and\n      swap4\n      swap1\n      swap4\n      or\n      swap1\n      swap3\n      mstore\n        /* \"contracts/SwapRouter_flattened.sol\":28533:28604  token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value)) */\n      swap1\n      mload\n      tag_376\n      swap2\n        /* \"contracts/SwapRouter_flattened.sol\":28544:28603  abi.encodeWithSelector(IERC20.transfer.selector, to, value) */\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":28533:28604  token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value)) */\n      tag_314\n      jump\t// in\n    tag_376:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup7\n      gas\n      call\n      swap2\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_379\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_378)\n    tag_379:\n      0x60\n      swap2\n      pop\n    tag_378:\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":28497:28604  (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value)) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":28623:28630  success */\n      dup2\n        /* \"contracts/SwapRouter_flattened.sol\":28623:28680  success && (data.length == 0 || abi.decode(data, (bool))) */\n      dup1\n      iszero\n      tag_382\n      jumpi\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":28635:28646  data.length */\n      dup1\n      mload\n        /* \"contracts/SwapRouter_flattened.sol\":28635:28651  data.length == 0 */\n      iszero\n      dup1\n        /* \"contracts/SwapRouter_flattened.sol\":28635:28679  data.length == 0 || abi.decode(data, (bool)) */\n      tag_382\n      jumpi\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":28666:28670  data */\n      dup1\n        /* \"contracts/SwapRouter_flattened.sol\":28655:28679  abi.decode(data, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      dup2\n      add\n      swap1\n      tag_382\n      swap2\n      swap1\n      tag_383\n      jump\t// in\n    tag_382:\n        /* \"contracts/SwapRouter_flattened.sol\":28615:28687  require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST') */\n      tag_159\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_26\n      swap1\n      tag_386\n      jump\t// in\n        /* \"contracts/SwapRouter_flattened.sol\":8017:8343  function decodeFirstPool(bytes memory path)\r... */\n    tag_295:\n        /* \"contracts/SwapRouter_flattened.sol\":8125:8139  address tokenA */\n      0x00\n      dup1\n      dup1\n        /* \"contracts/SwapRouter_flattened.sol\":8230:8247  path.toAddress(0) */\n      tag_388\n        /* \"contracts/SwapRouter_flattened.sol\":8230:8234  path */\n      dup5\n        /* \"contracts/SwapRouter_flattened.sol\":8125:8139  address tokenA */\n      dup3\n        /* \"contracts/SwapRouter_flattened.sol\":8230:8244  path.toAddress */\n      tag_389\n        /* \"contracts/SwapRouter_flattened.sol\":8230:8247  path.toAddress(0) */\n      jump\t// in\n    tag_388:\n        /* \"contracts/SwapRouter_flattened.sol\":8221:8247  tokenA = path.toAddress(0) */\n      swap3\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":8264:8288  path.toUint24(ADDR_SIZE) */\n      tag_390\n        /* \"contracts/SwapRouter_flattened.sol\":8264:8268  path */\n      dup5\n        /* \"contracts/SwapRouter_flattened.sol\":6511:6513  20 */\n      0x14\n        /* \"contracts/SwapRouter_flattened.sol\":8264:8277  path.toUint24 */\n      tag_391\n        /* \"contracts/SwapRouter_flattened.sol\":8264:8288  path.toUint24(ADDR_SIZE) */\n      jump\t// in\n    tag_390:\n        /* \"contracts/SwapRouter_flattened.sol\":8258:8288  fee = path.toUint24(ADDR_SIZE) */\n      swap1\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":8308:8335  path.toAddress(NEXT_OFFSET) */\n      tag_392\n        /* \"contracts/SwapRouter_flattened.sol\":8308:8312  path */\n      dup5\n        /* \"contracts/SwapRouter_flattened.sol\":6719:6739  ADDR_SIZE + FEE_SIZE */\n      0x17\n        /* \"contracts/SwapRouter_flattened.sol\":8308:8322  path.toAddress */\n      tag_389\n        /* \"contracts/SwapRouter_flattened.sol\":8308:8335  path.toAddress(NEXT_OFFSET) */\n      jump\t// in\n    tag_392:\n        /* \"contracts/SwapRouter_flattened.sol\":8299:8335  tokenB = path.toAddress(NEXT_OFFSET) */\n      swap2\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":8017:8343  function decodeFirstPool(bytes memory path)\r... */\n      swap2\n      swap4\n      swap1\n      swap3\n      pop\n      jump\t// out\n        /* \"contracts/SwapRouter_flattened.sol\":66188:66454  function verifyCallback(\r... */\n    tag_297:\n        /* \"contracts/SwapRouter_flattened.sol\":66339:66358  IUniswapV3Pool pool */\n      0x00\n        /* \"contracts/SwapRouter_flattened.sol\":66378:66446  verifyCallback(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee)) */\n      tag_394\n        /* \"contracts/SwapRouter_flattened.sol\":66393:66400  factory */\n      dup6\n        /* \"contracts/SwapRouter_flattened.sol\":66402:66445  PoolAddress.getPoolKey(tokenA, tokenB, fee) */\n      tag_395\n        /* \"contracts/SwapRouter_flattened.sol\":66425:66431  tokenA */\n      dup7\n        /* \"contracts/SwapRouter_flattened.sol\":66433:66439  tokenB */\n      dup7\n        /* \"contracts/SwapRouter_flattened.sol\":66441:66444  fee */\n      dup7\n        /* \"contracts/SwapRouter_flattened.sol\":66402:66424  PoolAddress.getPoolKey */\n      tag_396\n        /* \"contracts/SwapRouter_flattened.sol\":66402:66445  PoolAddress.getPoolKey(tokenA, tokenB, fee) */\n      jump\t// in\n    tag_395:\n        /* \"contracts/SwapRouter_flattened.sol\":66378:66392  verifyCallback */\n      tag_397\n        /* \"contracts/SwapRouter_flattened.sol\":66378:66446  verifyCallback(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee)) */\n      jump\t// in\n    tag_394:\n        /* \"contracts/SwapRouter_flattened.sol\":66371:66446  return verifyCallback(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee)) */\n      swap6\n        /* \"contracts/SwapRouter_flattened.sol\":66188:66454  function verifyCallback(\r... */\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/SwapRouter_flattened.sol\":33393:34109  function pay(\r... */\n    tag_302:\n        /* \"contracts/SwapRouter_flattened.sol\":33546:33551  WETH9 */\n      immutable(\"0x4a12ea77a1a063f26028f31dc447cd01a6aae44cbd0d238cbc76d74f2d67dabb\")\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":33537:33551  token == WETH9 */\n      and\n        /* \"contracts/SwapRouter_flattened.sol\":33537:33542  token */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":33537:33551  token == WETH9 */\n      and\n      eq\n        /* \"contracts/SwapRouter_flattened.sol\":33537:33585  token == WETH9 && address(this).balance >= value */\n      dup1\n      iszero\n      tag_399\n      jumpi\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":33580:33585  value */\n      dup1\n        /* \"contracts/SwapRouter_flattened.sol\":33555:33576  address(this).balance */\n      selfbalance\n        /* \"contracts/SwapRouter_flattened.sol\":33555:33585  address(this).balance >= value */\n      lt\n      iszero\n        /* \"contracts/SwapRouter_flattened.sol\":33537:33585  token == WETH9 && address(this).balance >= value */\n    tag_399:\n        /* \"contracts/SwapRouter_flattened.sol\":33533:34102  if (token == WETH9 && address(this).balance >= value) {\r... */\n      iszero\n      tag_400\n      jumpi\n        /* \"contracts/SwapRouter_flattened.sol\":33640:33645  WETH9 */\n      immutable(\"0x4a12ea77a1a063f26028f31dc447cd01a6aae44cbd0d238cbc76d74f2d67dabb\")\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":33633:33654  IWETH9(WETH9).deposit */\n      and\n      0xd0e30db0\n        /* \"contracts/SwapRouter_flattened.sol\":33662:33667  value */\n      dup3\n        /* \"contracts/SwapRouter_flattened.sol\":33633:33670  IWETH9(WETH9).deposit{value: value}() */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup9\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_401\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_401:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_403\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_403:\n      pop\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":33720:33760  IWETH9(WETH9).transfer(recipient, value) */\n      mload(0x40)\n      shl(0xe0, 0xa9059cbb)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":33727:33732  WETH9 */\n      immutable(\"0x4a12ea77a1a063f26028f31dc447cd01a6aae44cbd0d238cbc76d74f2d67dabb\")\n        /* \"contracts/SwapRouter_flattened.sol\":33720:33742  IWETH9(WETH9).transfer */\n      and\n      swap4\n      pop\n      0xa9059cbb\n      swap3\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":33720:33760  IWETH9(WETH9).transfer(recipient, value) */\n      tag_404\n      swap2\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":33743:33752  recipient */\n      dup6\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":33754:33759  value */\n      dup6\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":33720:33760  IWETH9(WETH9).transfer(recipient, value) */\n      0x04\n      add\n      tag_375\n      jump\t// in\n    tag_404:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_405\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_405:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_407\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_407:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_408\n      swap2\n      swap1\n      tag_383\n      jump\t// in\n    tag_408:\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":33533:34102  if (token == WETH9 && address(this).balance >= value) {\r... */\n      jump(tag_255)\n    tag_400:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":33782:33804  payer == address(this) */\n      dup4\n      and\n        /* \"contracts/SwapRouter_flattened.sol\":33799:33803  this */\n      address\n        /* \"contracts/SwapRouter_flattened.sol\":33782:33804  payer == address(this) */\n      eq\n        /* \"contracts/SwapRouter_flattened.sol\":33778:34102  if (payer == address(this)) {\r... */\n      iszero\n      tag_410\n      jumpi\n        /* \"contracts/SwapRouter_flattened.sol\":33913:33965  TransferHelper.safeTransfer(token, recipient, value) */\n      tag_411\n        /* \"contracts/SwapRouter_flattened.sol\":33941:33946  token */\n      dup5\n        /* \"contracts/SwapRouter_flattened.sol\":33948:33957  recipient */\n      dup4\n        /* \"contracts/SwapRouter_flattened.sol\":33959:33964  value */\n      dup4\n        /* \"contracts/SwapRouter_flattened.sol\":33913:33940  TransferHelper.safeTransfer */\n      tag_256\n        /* \"contracts/SwapRouter_flattened.sol\":33913:33965  TransferHelper.safeTransfer(token, recipient, value) */\n      jump\t// in\n    tag_411:\n        /* \"contracts/SwapRouter_flattened.sol\":33778:34102  if (payer == address(this)) {\r... */\n      jump(tag_255)\n    tag_410:\n        /* \"contracts/SwapRouter_flattened.sol\":34027:34090  TransferHelper.safeTransferFrom(token, payer, recipient, value) */\n      tag_255\n        /* \"contracts/SwapRouter_flattened.sol\":34059:34064  token */\n      dup5\n        /* \"contracts/SwapRouter_flattened.sol\":34066:34071  payer */\n      dup5\n        /* \"contracts/SwapRouter_flattened.sol\":34073:34082  recipient */\n      dup5\n        /* \"contracts/SwapRouter_flattened.sol\":34084:34089  value */\n      dup5\n        /* \"contracts/SwapRouter_flattened.sol\":34027:34058  TransferHelper.safeTransferFrom */\n      tag_414\n        /* \"contracts/SwapRouter_flattened.sol\":34027:34090  TransferHelper.safeTransferFrom(token, payer, recipient, value) */\n      jump\t// in\n        /* \"contracts/SwapRouter_flattened.sol\":78001:78256  function getPool(\r... */\n    tag_326:\n        /* \"contracts/SwapRouter_flattened.sol\":78118:78132  IUniswapV3Pool */\n      0x00\n        /* \"contracts/SwapRouter_flattened.sol\":78167:78247  PoolAddress.computeAddress(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee)) */\n      tag_416\n        /* \"contracts/SwapRouter_flattened.sol\":78194:78201  factory */\n      immutable(\"0x1c0bab9e06a591c52ac680ae9eef6479e476f64f56be5d259d46a0497cb2a9b9\")\n        /* \"contracts/SwapRouter_flattened.sol\":78203:78246  PoolAddress.getPoolKey(tokenA, tokenB, fee) */\n      tag_417\n        /* \"contracts/SwapRouter_flattened.sol\":78226:78232  tokenA */\n      dup7\n        /* \"contracts/SwapRouter_flattened.sol\":78234:78240  tokenB */\n      dup7\n        /* \"contracts/SwapRouter_flattened.sol\":78242:78245  fee */\n      dup7\n        /* \"contracts/SwapRouter_flattened.sol\":78203:78225  PoolAddress.getPoolKey */\n      tag_396\n        /* \"contracts/SwapRouter_flattened.sol\":78203:78246  PoolAddress.getPoolKey(tokenA, tokenB, fee) */\n      jump\t// in\n    tag_417:\n        /* \"contracts/SwapRouter_flattened.sol\":78167:78193  PoolAddress.computeAddress */\n      tag_418\n        /* \"contracts/SwapRouter_flattened.sol\":78167:78247  PoolAddress.computeAddress(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee)) */\n      jump\t// in\n    tag_416:\n        /* \"contracts/SwapRouter_flattened.sol\":78145:78248  return IUniswapV3Pool(PoolAddress.computeAddress(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee))) */\n      swap5\n        /* \"contracts/SwapRouter_flattened.sol\":78001:78256  function getPool(\r... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/SwapRouter_flattened.sol\":76828:76952  function toInt256(uint256 y) internal pure returns (int256 z) {\r... */\n    tag_328:\n        /* \"contracts/SwapRouter_flattened.sol\":76880:76888  int256 z */\n      0x00\n      shl(0xff, 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":76909:76910  y */\n      dup3\n        /* \"contracts/SwapRouter_flattened.sol\":76909:76919  y < 2**255 */\n      lt\n        /* \"contracts/SwapRouter_flattened.sol\":76901:76920  require(y < 2**255) */\n      tag_420\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_420:\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":76942:76943  y */\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":76828:76952  function toInt256(uint256 y) internal pure returns (int256 z) {\r... */\n      jump\t// out\n        /* \"contracts/SwapRouter_flattened.sol\":2331:5402  function slice(\r... */\n    tag_351:\n        /* \"contracts/SwapRouter_flattened.sol\":2457:2469  bytes memory */\n      0x60\n        /* \"contracts/SwapRouter_flattened.sol\":2506:2513  _length */\n      dup2\n        /* \"contracts/SwapRouter_flattened.sol\":2490:2497  _length */\n      dup3\n        /* \"contracts/SwapRouter_flattened.sol\":2500:2502  31 */\n      0x1f\n        /* \"contracts/SwapRouter_flattened.sol\":2490:2502  _length + 31 */\n      add\n        /* \"contracts/SwapRouter_flattened.sol\":2490:2513  _length + 31 >= _length */\n      lt\n      iszero\n        /* \"contracts/SwapRouter_flattened.sol\":2482:2532  require(_length + 31 >= _length, 'slice_overflow') */\n      tag_422\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_26\n      swap1\n      tag_424\n      jump\t// in\n    tag_422:\n        /* \"contracts/SwapRouter_flattened.sol\":2571:2577  _start */\n      dup3\n        /* \"contracts/SwapRouter_flattened.sol\":2560:2567  _length */\n      dup3\n        /* \"contracts/SwapRouter_flattened.sol\":2551:2557  _start */\n      dup5\n        /* \"contracts/SwapRouter_flattened.sol\":2551:2567  _start + _length */\n      add\n        /* \"contracts/SwapRouter_flattened.sol\":2551:2577  _start + _length >= _start */\n      lt\n      iszero\n        /* \"contracts/SwapRouter_flattened.sol\":2543:2596  require(_start + _length >= _start, 'slice_overflow') */\n      tag_425\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_26\n      swap1\n      tag_424\n      jump\t// in\n    tag_425:\n        /* \"contracts/SwapRouter_flattened.sol\":2641:2648  _length */\n      dup2\n        /* \"contracts/SwapRouter_flattened.sol\":2632:2638  _start */\n      dup4\n        /* \"contracts/SwapRouter_flattened.sol\":2632:2648  _start + _length */\n      add\n        /* \"contracts/SwapRouter_flattened.sol\":2615:2621  _bytes */\n      dup5\n        /* \"contracts/SwapRouter_flattened.sol\":2615:2628  _bytes.length */\n      mload\n        /* \"contracts/SwapRouter_flattened.sol\":2615:2648  _bytes.length >= _start + _length */\n      lt\n      iszero\n        /* \"contracts/SwapRouter_flattened.sol\":2607:2670  require(_bytes.length >= _start + _length, 'slice_outOfBounds') */\n      tag_427\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_26\n      swap1\n      tag_429\n      jump\t// in\n    tag_427:\n        /* \"contracts/SwapRouter_flattened.sol\":2683:2705  bytes memory tempBytes */\n      0x60\n        /* \"contracts/SwapRouter_flattened.sol\":2749:2764  iszero(_length) */\n      dup3\n      iszero\n        /* \"contracts/SwapRouter_flattened.sol\":2782:4919  case 0 {\r... */\n      dup1\n      iszero\n      tag_431\n      jumpi\n        /* \"contracts/SwapRouter_flattened.sol\":5075:5079  0x40 */\n      0x40\n        /* \"contracts/SwapRouter_flattened.sol\":5069:5080  mload(0x40) */\n      mload\n        /* \"contracts/SwapRouter_flattened.sol\":5056:5080  tempBytes := mload(0x40) */\n      swap2\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":5276:5277  0 */\n      0x00\n        /* \"contracts/SwapRouter_flattened.sol\":5265:5274  tempBytes */\n      dup3\n        /* \"contracts/SwapRouter_flattened.sol\":5258:5278  mstore(tempBytes, 0) */\n      mstore\n        /* \"contracts/SwapRouter_flattened.sol\":5330:5334  0x20 */\n      0x20\n        /* \"contracts/SwapRouter_flattened.sol\":5319:5328  tempBytes */\n      dup3\n        /* \"contracts/SwapRouter_flattened.sol\":5315:5335  add(tempBytes, 0x20) */\n      add\n        /* \"contracts/SwapRouter_flattened.sol\":5309:5313  0x40 */\n      0x40\n        /* \"contracts/SwapRouter_flattened.sol\":5302:5336  mstore(0x40, add(tempBytes, 0x20)) */\n      mstore\n        /* \"contracts/SwapRouter_flattened.sol\":2742:5355  switch iszero(_length)\r... */\n      jump(tag_430)\n        /* \"contracts/SwapRouter_flattened.sol\":2782:4919  case 0 {\r... */\n    tag_431:\n        /* \"contracts/SwapRouter_flattened.sol\":2979:2983  0x40 */\n      0x40\n        /* \"contracts/SwapRouter_flattened.sol\":2973:2984  mload(0x40) */\n      mload\n        /* \"contracts/SwapRouter_flattened.sol\":2960:2984  tempBytes := mload(0x40) */\n      swap2\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":3684:3686  31 */\n      0x1f\n        /* \"contracts/SwapRouter_flattened.sol\":3675:3682  _length */\n      dup5\n        /* \"contracts/SwapRouter_flattened.sol\":3671:3687  and(_length, 31) */\n      and\n        /* \"contracts/SwapRouter_flattened.sol\":4092:4101  lengthmod */\n      dup1\n        /* \"contracts/SwapRouter_flattened.sol\":4085:4102  iszero(lengthmod) */\n      iszero\n        /* \"contracts/SwapRouter_flattened.sol\":4079:4083  0x20 */\n      0x20\n        /* \"contracts/SwapRouter_flattened.sol\":4075:4103  mul(0x20, iszero(lengthmod)) */\n      mul\n        /* \"contracts/SwapRouter_flattened.sol\":4063:4072  lengthmod */\n      dup2\n        /* \"contracts/SwapRouter_flattened.sol\":4052:4061  tempBytes */\n      dup5\n        /* \"contracts/SwapRouter_flattened.sol\":4048:4073  add(tempBytes, lengthmod) */\n      add\n        /* \"contracts/SwapRouter_flattened.sol\":4044:4104  add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod))) */\n      add\n        /* \"contracts/SwapRouter_flattened.sol\":4145:4152  _length */\n      dup6\n        /* \"contracts/SwapRouter_flattened.sol\":4141:4143  mc */\n      dup2\n        /* \"contracts/SwapRouter_flattened.sol\":4137:4153  add(mc, _length) */\n      add\n        /* \"contracts/SwapRouter_flattened.sol\":4418:4424  _start */\n      dup8\n        /* \"contracts/SwapRouter_flattened.sol\":4404:4413  lengthmod */\n      dup4\n        /* \"contracts/SwapRouter_flattened.sol\":4397:4414  iszero(lengthmod) */\n      iszero\n        /* \"contracts/SwapRouter_flattened.sol\":4391:4395  0x20 */\n      0x20\n        /* \"contracts/SwapRouter_flattened.sol\":4387:4415  mul(0x20, iszero(lengthmod)) */\n      mul\n        /* \"contracts/SwapRouter_flattened.sol\":4375:4384  lengthmod */\n      dup5\n        /* \"contracts/SwapRouter_flattened.sol\":4367:4373  _bytes */\n      dup12\n        /* \"contracts/SwapRouter_flattened.sol\":4363:4385  add(_bytes, lengthmod) */\n      add\n        /* \"contracts/SwapRouter_flattened.sol\":4359:4416  add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))) */\n      add\n        /* \"contracts/SwapRouter_flattened.sol\":4355:4425  add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start) */\n      add\n        /* \"contracts/SwapRouter_flattened.sol\":4177:4647  for {\r... */\n    tag_432:\n        /* \"contracts/SwapRouter_flattened.sol\":4456:4459  end */\n      dup2\n        /* \"contracts/SwapRouter_flattened.sol\":4452:4454  mc */\n      dup4\n        /* \"contracts/SwapRouter_flattened.sol\":4449:4460  lt(mc, end) */\n      lt\n        /* \"contracts/SwapRouter_flattened.sol\":4177:4647  for {\r... */\n      iszero\n      tag_434\n      jumpi\n        /* \"contracts/SwapRouter_flattened.sol\":4614:4623  mload(cc) */\n      dup1\n      mload\n        /* \"contracts/SwapRouter_flattened.sol\":4603:4624  mstore(mc, mload(cc)) */\n      dup4\n      mstore\n        /* \"contracts/SwapRouter_flattened.sol\":4502:4506  0x20 */\n      0x20\n        /* \"contracts/SwapRouter_flattened.sol\":4494:4507  add(mc, 0x20) */\n      swap3\n      dup4\n      add\n      swap3\n        /* \"contracts/SwapRouter_flattened.sol\":4539:4552  add(cc, 0x20) */\n      add\n        /* \"contracts/SwapRouter_flattened.sol\":4177:4647  for {\r... */\n      jump(tag_432)\n    tag_434:\n      pop\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":4671:4697  mstore(tempBytes, _length) */\n      dup6\n      dup5\n      mstore\n        /* \"contracts/SwapRouter_flattened.sol\":4895:4897  31 */\n      0x1f\n        /* \"contracts/SwapRouter_flattened.sol\":4878:4889  add(mc, 31) */\n      add\n      not(0x1f)\n        /* \"contracts/SwapRouter_flattened.sol\":4874:4899  and(add(mc, 31), not(31)) */\n      and\n        /* \"contracts/SwapRouter_flattened.sol\":4868:4872  0x40 */\n      0x40\n        /* \"contracts/SwapRouter_flattened.sol\":4861:4900  mstore(0x40, and(add(mc, 31), not(31))) */\n      mstore\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":2742:5355  switch iszero(_length)\r... */\n    tag_430:\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":5385:5394  tempBytes */\n      swap5\n        /* \"contracts/SwapRouter_flattened.sol\":2331:5402  function slice(\r... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/SwapRouter_flattened.sol\":5410:5836  function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\r... */\n    tag_389:\n        /* \"contracts/SwapRouter_flattened.sol\":5489:5496  address */\n      0x00\n        /* \"contracts/SwapRouter_flattened.sol\":5532:5538  _start */\n      dup2\n        /* \"contracts/SwapRouter_flattened.sol\":5517:5523  _start */\n      dup3\n        /* \"contracts/SwapRouter_flattened.sol\":5526:5528  20 */\n      0x14\n        /* \"contracts/SwapRouter_flattened.sol\":5517:5528  _start + 20 */\n      add\n        /* \"contracts/SwapRouter_flattened.sol\":5517:5538  _start + 20 >= _start */\n      lt\n      iszero\n        /* \"contracts/SwapRouter_flattened.sol\":5509:5561  require(_start + 20 >= _start, 'toAddress_overflow') */\n      tag_436\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_26\n      swap1\n      tag_438\n      jump\t// in\n    tag_436:\n        /* \"contracts/SwapRouter_flattened.sol\":5597:5603  _start */\n      dup2\n        /* \"contracts/SwapRouter_flattened.sol\":5606:5608  20 */\n      0x14\n        /* \"contracts/SwapRouter_flattened.sol\":5597:5608  _start + 20 */\n      add\n        /* \"contracts/SwapRouter_flattened.sol\":5580:5586  _bytes */\n      dup4\n        /* \"contracts/SwapRouter_flattened.sol\":5580:5593  _bytes.length */\n      mload\n        /* \"contracts/SwapRouter_flattened.sol\":5580:5608  _bytes.length >= _start + 20 */\n      lt\n      iszero\n        /* \"contracts/SwapRouter_flattened.sol\":5572:5634  require(_bytes.length >= _start + 20, 'toAddress_outOfBounds') */\n      tag_439\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_26\n      swap1\n      tag_441\n      jump\t// in\n    tag_439:\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":5726:5756  add(add(_bytes, 0x20), _start) */\n      add\n        /* \"contracts/SwapRouter_flattened.sol\":5742:5746  0x20 */\n      0x20\n        /* \"contracts/SwapRouter_flattened.sol\":5726:5756  add(add(_bytes, 0x20), _start) */\n      add\n        /* \"contracts/SwapRouter_flattened.sol\":5720:5757  mload(add(add(_bytes, 0x20), _start)) */\n      mload\n      shl(0x60, 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":5716:5787  div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000) */\n      swap1\n      div\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":5410:5836  function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\r... */\n      jump\t// out\n        /* \"contracts/SwapRouter_flattened.sol\":5844:6219  function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\r... */\n    tag_391:\n        /* \"contracts/SwapRouter_flattened.sol\":5922:5928  uint24 */\n      0x00\n        /* \"contracts/SwapRouter_flattened.sol\":5963:5969  _start */\n      dup2\n        /* \"contracts/SwapRouter_flattened.sol\":5949:5955  _start */\n      dup3\n        /* \"contracts/SwapRouter_flattened.sol\":5958:5959  3 */\n      0x03\n        /* \"contracts/SwapRouter_flattened.sol\":5949:5959  _start + 3 */\n      add\n        /* \"contracts/SwapRouter_flattened.sol\":5949:5969  _start + 3 >= _start */\n      lt\n      iszero\n        /* \"contracts/SwapRouter_flattened.sol\":5941:5991  require(_start + 3 >= _start, 'toUint24_overflow') */\n      tag_443\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_26\n      swap1\n      tag_445\n      jump\t// in\n    tag_443:\n        /* \"contracts/SwapRouter_flattened.sol\":6027:6033  _start */\n      dup2\n        /* \"contracts/SwapRouter_flattened.sol\":6036:6037  3 */\n      0x03\n        /* \"contracts/SwapRouter_flattened.sol\":6027:6037  _start + 3 */\n      add\n        /* \"contracts/SwapRouter_flattened.sol\":6010:6016  _bytes */\n      dup4\n        /* \"contracts/SwapRouter_flattened.sol\":6010:6023  _bytes.length */\n      mload\n        /* \"contracts/SwapRouter_flattened.sol\":6010:6037  _bytes.length >= _start + 3 */\n      lt\n      iszero\n        /* \"contracts/SwapRouter_flattened.sol\":6002:6062  require(_bytes.length >= _start + 3, 'toUint24_outOfBounds') */\n      tag_446\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_26\n      swap1\n      tag_448\n      jump\t// in\n    tag_446:\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":6143:6172  add(add(_bytes, 0x3), _start) */\n      add\n        /* \"contracts/SwapRouter_flattened.sol\":6159:6162  0x3 */\n      0x03\n        /* \"contracts/SwapRouter_flattened.sol\":6143:6172  add(add(_bytes, 0x3), _start) */\n      add\n        /* \"contracts/SwapRouter_flattened.sol\":6137:6173  mload(add(add(_bytes, 0x3), _start)) */\n      mload\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":5844:6219  function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\r... */\n      jump\t// out\n        /* \"contracts/SwapRouter_flattened.sol\":853:1134  function getPoolKey(\r... */\n    tag_396:\n        /* \"contracts/SwapRouter_flattened.sol\":974:988  PoolKey memory */\n      tag_449\n      tag_450\n      jump\t// in\n    tag_449:\n        /* \"contracts/SwapRouter_flattened.sol\":1014:1020  tokenB */\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":1005:1020  tokenA > tokenB */\n      and\n        /* \"contracts/SwapRouter_flattened.sol\":1005:1011  tokenA */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":1005:1020  tokenA > tokenB */\n      and\n      gt\n        /* \"contracts/SwapRouter_flattened.sol\":1001:1057  if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA) */\n      iszero\n      tag_452\n      jumpi\n        /* \"contracts/SwapRouter_flattened.sol\":1042:1048  tokenB */\n      swap2\n      swap3\n        /* \"contracts/SwapRouter_flattened.sol\":1050:1056  tokenA */\n      swap2\n        /* \"contracts/SwapRouter_flattened.sol\":1001:1057  if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA) */\n    tag_452:\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":1075:1126  PoolKey({token0: tokenA, token1: tokenB, fee: fee}) */\n      0x40\n      dup1\n      mload\n      0x60\n      dup2\n      add\n      dup3\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n      swap5\n      dup6\n      and\n      dup2\n      mstore\n      swap3\n      swap1\n      swap4\n      and\n      0x20\n      dup4\n      add\n      mstore\n      0xffffff\n      and\n      swap2\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":853:1134  function getPoolKey(\r... */\n      jump\t// out\n        /* \"contracts/SwapRouter_flattened.sol\":66707:66993  function verifyCallback(address factory, PoolAddress.PoolKey memory poolKey)\r... */\n    tag_397:\n        /* \"contracts/SwapRouter_flattened.sol\":66834:66853  IUniswapV3Pool pool */\n      0x00\n        /* \"contracts/SwapRouter_flattened.sol\":66893:66937  PoolAddress.computeAddress(factory, poolKey) */\n      tag_454\n        /* \"contracts/SwapRouter_flattened.sol\":66920:66927  factory */\n      dup4\n        /* \"contracts/SwapRouter_flattened.sol\":66929:66936  poolKey */\n      dup4\n        /* \"contracts/SwapRouter_flattened.sol\":66893:66919  PoolAddress.computeAddress */\n      tag_418\n        /* \"contracts/SwapRouter_flattened.sol\":66893:66937  PoolAddress.computeAddress(factory, poolKey) */\n      jump\t// in\n    tag_454:\n        /* \"contracts/SwapRouter_flattened.sol\":66871:66938  pool = IUniswapV3Pool(PoolAddress.computeAddress(factory, poolKey)) */\n      swap1\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":66957:66967  msg.sender */\n      caller\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":66957:66984  msg.sender == address(pool) */\n      dup3\n      and\n      eq\n        /* \"contracts/SwapRouter_flattened.sol\":66949:66985  require(msg.sender == address(pool)) */\n      tag_347\n      jumpi\n      0x00\n      dup1\n      revert\n        /* \"contracts/SwapRouter_flattened.sol\":27713:28080  function safeTransferFrom(\r... */\n    tag_414:\n        /* \"contracts/SwapRouter_flattened.sol\":27859:27871  bool success */\n      0x00\n        /* \"contracts/SwapRouter_flattened.sol\":27873:27890  bytes memory data */\n      dup1\n        /* \"contracts/SwapRouter_flattened.sol\":27907:27912  token */\n      dup6\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":27907:27917  token.call */\n      and\n        /* \"contracts/SwapRouter_flattened.sol\":27941:27969  IERC20.transferFrom.selector */\n      shl(0xe0, 0x23b872dd)\n        /* \"contracts/SwapRouter_flattened.sol\":27971:27975  from */\n      dup7\n        /* \"contracts/SwapRouter_flattened.sol\":27977:27979  to */\n      dup7\n        /* \"contracts/SwapRouter_flattened.sol\":27981:27986  value */\n      dup7\n        /* \"contracts/SwapRouter_flattened.sol\":27918:27987  abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value) */\n      add(0x24, mload(0x40))\n      tag_457\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_458\n      jump\t// in\n    tag_457:\n      0x40\n      dup1\n      mload\n      not(0x1f)\n      dup2\n      dup5\n      sub\n      add\n      dup2\n      mstore\n      swap2\n      dup2\n      mstore\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      sub(shl(0xe0, 0x01), 0x01)\n      and\n      not(sub(shl(0xe0, 0x01), 0x01))\n      swap1\n      swap5\n      and\n      swap4\n      swap1\n      swap4\n      or\n      swap1\n      swap3\n      mstore\n        /* \"contracts/SwapRouter_flattened.sol\":27907:27988  token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value)) */\n      swap1\n      mload\n      tag_459\n      swap2\n        /* \"contracts/SwapRouter_flattened.sol\":27918:27987  abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value) */\n      swap1\n        /* \"contracts/SwapRouter_flattened.sol\":27907:27988  token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value)) */\n      tag_314\n      jump\t// in\n    tag_459:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup7\n      gas\n      call\n      swap2\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_462\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_461)\n    tag_462:\n      0x60\n      swap2\n      pop\n    tag_461:\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":27858:27988  (bool success, bytes memory data) =\r... */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":28007:28014  success */\n      dup2\n        /* \"contracts/SwapRouter_flattened.sol\":28007:28064  success && (data.length == 0 || abi.decode(data, (bool))) */\n      dup1\n      iszero\n      tag_465\n      jumpi\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":28019:28030  data.length */\n      dup1\n      mload\n        /* \"contracts/SwapRouter_flattened.sol\":28019:28035  data.length == 0 */\n      iszero\n      dup1\n        /* \"contracts/SwapRouter_flattened.sol\":28019:28063  data.length == 0 || abi.decode(data, (bool)) */\n      tag_465\n      jumpi\n      pop\n        /* \"contracts/SwapRouter_flattened.sol\":28050:28054  data */\n      dup1\n        /* \"contracts/SwapRouter_flattened.sol\":28039:28063  abi.decode(data, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      dup2\n      add\n      swap1\n      tag_465\n      swap2\n      swap1\n      tag_383\n      jump\t// in\n    tag_465:\n        /* \"contracts/SwapRouter_flattened.sol\":27999:28072  require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF') */\n      tag_169\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_26\n      swap1\n      tag_468\n      jump\t// in\n        /* \"contracts/SwapRouter_flattened.sol\":1387:1913  function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\r... */\n    tag_418:\n        /* \"contracts/SwapRouter_flattened.sol\":1471:1483  address pool */\n      0x00\n        /* \"contracts/SwapRouter_flattened.sol\":1517:1520  key */\n      dup2\n        /* \"contracts/SwapRouter_flattened.sol\":1517:1527  key.token1 */\n      0x20\n      add\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":1504:1527  key.token0 < key.token1 */\n      and\n        /* \"contracts/SwapRouter_flattened.sol\":1504:1507  key */\n      dup3\n        /* \"contracts/SwapRouter_flattened.sol\":1504:1514  key.token0 */\n      0x00\n      add\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapRouter_flattened.sol\":1504:1527  key.token0 < key.token1 */\n      and\n      lt\n        /* \"contracts/SwapRouter_flattened.sol\":1496:1528  require(key.token0 < key.token1) */\n      tag_470\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_470:\n        /* \"contracts/SwapRouter_flattened.sol\":1703:1710  factory */\n      dup3\n        /* \"contracts/SwapRouter_flattened.sol\":1758:1761  key */\n      dup3\n        /* \"contracts/SwapRouter_flattened.sol\":1758:1768  key.token0 */\n      0x00\n      add\n      mload\n        /* \"contracts/SwapRouter_flattened.sol\":1770:1773  key */\n      dup4\n        /* \"contracts/SwapRouter_flattened.sol\":1770:1780  key.token1 */\n      0x20\n      add\n      mload\n        /* \"contracts/SwapRouter_flattened.sol\":1782:1785  key */\n      dup5\n        /* \"contracts/SwapRouter_flattened.sol\":1782:1789  key.fee */\n      0x40\n      add\n      mload\n        /* \"contracts/SwapRouter_flattened.sol\":1747:1790  abi.encode(key.token0, key.token1, key.fee) */\n      add(0x20, mload(0x40))\n      tag_471\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_472\n      jump\t// in\n    tag_471:\n      0x40\n      dup1\n      mload\n      not(0x1f)\n      dup2\n      dup5\n      sub\n      add\n      dup2\n      mstore\n      swap1\n      dup3\n      swap1\n      mstore\n        /* \"contracts/SwapRouter_flattened.sol\":1737:1791  keccak256(abi.encode(key.token0, key.token1, key.fee)) */\n      dup1\n      mload\n        /* \"contracts/SwapRouter_flattened.sol\":1747:1790  abi.encode(key.token0, key.token1, key.fee) */\n      0x20\n        /* \"contracts/SwapRouter_flattened.sol\":1737:1791  keccak256(abi.encode(key.token0, key.token1, key.fee)) */\n      swap2\n      dup3\n      add\n      keccak256\n        /* \"contracts/SwapRouter_flattened.sol\":1626:1860  abi.encodePacked(\r... */\n      tag_473\n      swap4\n      swap3\n        /* \"contracts/SwapRouter_flattened.sol\":1737:1791  keccak256(abi.encode(key.token0, key.token1, key.fee)) */\n      swap1\n      swap2\n        /* \"contracts/SwapRouter_flattened.sol\":296:362  0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54 */\n      0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54\n      swap2\n        /* \"contracts/SwapRouter_flattened.sol\":1626:1860  abi.encodePacked(\r... */\n      add\n      tag_474\n      jump\t// in\n    tag_473:\n      0x40\n      dup1\n      mload\n      not(0x1f)\n      dup2\n      dup5\n      sub\n      add\n      dup2\n      mstore\n      swap2\n      swap1\n      mstore\n        /* \"contracts/SwapRouter_flattened.sol\":1594:1879  keccak256(\r... */\n      dup1\n      mload\n        /* \"contracts/SwapRouter_flattened.sol\":1626:1860  abi.encodePacked(\r... */\n      0x20\n        /* \"contracts/SwapRouter_flattened.sol\":1594:1879  keccak256(\r... */\n      swap1\n      swap2\n      add\n      keccak256\n      swap4\n        /* \"contracts/SwapRouter_flattened.sol\":1387:1913  function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\r... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n    tag_450:\n      0x40\n      dup1\n      mload\n      0x60\n      dup2\n      add\n      dup3\n      mstore\n      0x00\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      swap2\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":14:152   */\n    tag_476:\n        /* \"#utility.yul\":84:104   */\n      dup1\n      calldataload\n        /* \"#utility.yul\":113:146   */\n      tag_348\n        /* \"#utility.yul\":84:104   */\n      dup2\n        /* \"#utility.yul\":113:146   */\n      tag_479\n      jump\t// in\n        /* \"#utility.yul\":157:642   */\n    tag_480:\n      0x00\n        /* \"#utility.yul\":254:257   */\n      dup3\n        /* \"#utility.yul\":247:251   */\n      0x1f\n        /* \"#utility.yul\":239:245   */\n      dup4\n        /* \"#utility.yul\":235:252   */\n      add\n        /* \"#utility.yul\":231:258   */\n      slt\n        /* \"#utility.yul\":221:223   */\n      tag_482\n      jumpi\n        /* \"#utility.yul\":276:281   */\n      dup1\n        /* \"#utility.yul\":269:274   */\n      dup2\n        /* \"#utility.yul\":262:282   */\n      revert\n        /* \"#utility.yul\":221:223   */\n    tag_482:\n        /* \"#utility.yul\":316:322   */\n      dup2\n        /* \"#utility.yul\":303:323   */\n      calldataload\n        /* \"#utility.yul\":347:396   */\n      tag_483\n        /* \"#utility.yul\":362:395   */\n      tag_484\n        /* \"#utility.yul\":392:394   */\n      dup3\n        /* \"#utility.yul\":362:395   */\n      tag_485\n      jump\t// in\n    tag_484:\n        /* \"#utility.yul\":347:396   */\n      tag_486\n      jump\t// in\n    tag_483:\n        /* \"#utility.yul\":421:423   */\n      dup2\n        /* \"#utility.yul\":412:419   */\n      dup2\n        /* \"#utility.yul\":405:424   */\n      mstore\n        /* \"#utility.yul\":467:470   */\n      dup5\n        /* \"#utility.yul\":460:464   */\n      0x20\n        /* \"#utility.yul\":455:457   */\n      dup4\n        /* \"#utility.yul\":447:453   */\n      dup7\n        /* \"#utility.yul\":443:458   */\n      add\n        /* \"#utility.yul\":439:465   */\n      add\n        /* \"#utility.yul\":436:471   */\n      gt\n        /* \"#utility.yul\":433:435   */\n      iszero\n      tag_487\n      jumpi\n        /* \"#utility.yul\":488:493   */\n      dup3\n        /* \"#utility.yul\":481:486   */\n      dup4\n        /* \"#utility.yul\":474:494   */\n      revert\n        /* \"#utility.yul\":433:435   */\n    tag_487:\n        /* \"#utility.yul\":557:559   */\n      dup2\n        /* \"#utility.yul\":550:554   */\n      0x20\n        /* \"#utility.yul\":542:548   */\n      dup6\n        /* \"#utility.yul\":538:555   */\n      add\n        /* \"#utility.yul\":531:535   */\n      0x20\n        /* \"#utility.yul\":522:529   */\n      dup4\n        /* \"#utility.yul\":518:536   */\n      add\n        /* \"#utility.yul\":505:560   */\n      calldatacopy\n        /* \"#utility.yul\":580:596   */\n      swap1\n      dup2\n      add\n        /* \"#utility.yul\":598:602   */\n      0x20\n        /* \"#utility.yul\":576:603   */\n      add\n        /* \"#utility.yul\":569:611   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":584:591   */\n      swap3\n        /* \"#utility.yul\":211:642   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":647:829   */\n    tag_488:\n      0x00\n        /* \"#utility.yul\":770:773   */\n      0x0100\n        /* \"#utility.yul\":761:767   */\n      dup3\n        /* \"#utility.yul\":756:759   */\n      dup5\n        /* \"#utility.yul\":752:768   */\n      sub\n        /* \"#utility.yul\":748:774   */\n      slt\n        /* \"#utility.yul\":745:747   */\n      iszero\n      tag_123\n      jumpi\n        /* \"#utility.yul\":791:796   */\n      dup1\n        /* \"#utility.yul\":784:789   */\n      dup2\n        /* \"#utility.yul\":777:797   */\n      revert\n        /* \"#utility.yul\":834:1093   */\n    tag_113:\n      0x00\n        /* \"#utility.yul\":946:948   */\n      0x20\n        /* \"#utility.yul\":934:943   */\n      dup3\n        /* \"#utility.yul\":925:932   */\n      dup5\n        /* \"#utility.yul\":921:944   */\n      sub\n        /* \"#utility.yul\":917:949   */\n      slt\n        /* \"#utility.yul\":914:916   */\n      iszero\n      tag_492\n      jumpi\n        /* \"#utility.yul\":967:973   */\n      dup1\n        /* \"#utility.yul\":959:965   */\n      dup2\n        /* \"#utility.yul\":952:974   */\n      revert\n        /* \"#utility.yul\":914:916   */\n    tag_492:\n        /* \"#utility.yul\":1011:1020   */\n      dup2\n        /* \"#utility.yul\":998:1021   */\n      calldataload\n        /* \"#utility.yul\":1030:1063   */\n      tag_493\n        /* \"#utility.yul\":1057:1062   */\n      dup2\n        /* \"#utility.yul\":1030:1063   */\n      tag_479\n      jump\t// in\n    tag_493:\n        /* \"#utility.yul\":1082:1087   */\n      swap4\n        /* \"#utility.yul\":904:1093   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1098:1568   */\n    tag_81:\n      0x00\n      dup1\n      0x00\n        /* \"#utility.yul\":1244:1246   */\n      0x60\n        /* \"#utility.yul\":1232:1241   */\n      dup5\n        /* \"#utility.yul\":1223:1230   */\n      dup7\n        /* \"#utility.yul\":1219:1242   */\n      sub\n        /* \"#utility.yul\":1215:1247   */\n      slt\n        /* \"#utility.yul\":1212:1214   */\n      iszero\n      tag_495\n      jumpi\n        /* \"#utility.yul\":1265:1271   */\n      dup2\n        /* \"#utility.yul\":1257:1263   */\n      dup3\n        /* \"#utility.yul\":1250:1272   */\n      revert\n        /* \"#utility.yul\":1212:1214   */\n    tag_495:\n        /* \"#utility.yul\":1309:1318   */\n      dup4\n        /* \"#utility.yul\":1296:1319   */\n      calldataload\n        /* \"#utility.yul\":1328:1361   */\n      tag_496\n        /* \"#utility.yul\":1355:1360   */\n      dup2\n        /* \"#utility.yul\":1328:1361   */\n      tag_479\n      jump\t// in\n    tag_496:\n        /* \"#utility.yul\":1380:1385   */\n      swap3\n      pop\n        /* \"#utility.yul\":1432:1434   */\n      0x20\n        /* \"#utility.yul\":1417:1435   */\n      dup5\n      add\n        /* \"#utility.yul\":1404:1436   */\n      calldataload\n      swap2\n      pop\n        /* \"#utility.yul\":1488:1490   */\n      0x40\n        /* \"#utility.yul\":1473:1491   */\n      dup5\n      add\n        /* \"#utility.yul\":1460:1492   */\n      calldataload\n        /* \"#utility.yul\":1501:1536   */\n      tag_497\n        /* \"#utility.yul\":1460:1492   */\n      dup2\n        /* \"#utility.yul\":1501:1536   */\n      tag_479\n      jump\t// in\n    tag_497:\n        /* \"#utility.yul\":1555:1562   */\n      dup1\n        /* \"#utility.yul\":1545:1562   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":1202:1568   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":1573:2256   */\n    tag_85:\n      0x00\n      dup1\n      0x00\n      dup1\n      0x00\n        /* \"#utility.yul\":1753:1756   */\n      0xa0\n        /* \"#utility.yul\":1741:1750   */\n      dup7\n        /* \"#utility.yul\":1732:1739   */\n      dup9\n        /* \"#utility.yul\":1728:1751   */\n      sub\n        /* \"#utility.yul\":1724:1757   */\n      slt\n        /* \"#utility.yul\":1721:1723   */\n      iszero\n      tag_499\n      jumpi\n        /* \"#utility.yul\":1775:1781   */\n      dup1\n        /* \"#utility.yul\":1767:1773   */\n      dup2\n        /* \"#utility.yul\":1760:1782   */\n      revert\n        /* \"#utility.yul\":1721:1723   */\n    tag_499:\n        /* \"#utility.yul\":1819:1828   */\n      dup6\n        /* \"#utility.yul\":1806:1829   */\n      calldataload\n        /* \"#utility.yul\":1838:1871   */\n      tag_500\n        /* \"#utility.yul\":1865:1870   */\n      dup2\n        /* \"#utility.yul\":1838:1871   */\n      tag_479\n      jump\t// in\n    tag_500:\n        /* \"#utility.yul\":1890:1895   */\n      swap5\n      pop\n        /* \"#utility.yul\":1942:1944   */\n      0x20\n        /* \"#utility.yul\":1927:1945   */\n      dup7\n      add\n        /* \"#utility.yul\":1914:1946   */\n      calldataload\n      swap4\n      pop\n        /* \"#utility.yul\":1998:2000   */\n      0x40\n        /* \"#utility.yul\":1983:2001   */\n      dup7\n      add\n        /* \"#utility.yul\":1970:2002   */\n      calldataload\n        /* \"#utility.yul\":2011:2046   */\n      tag_501\n        /* \"#utility.yul\":1970:2002   */\n      dup2\n        /* \"#utility.yul\":2011:2046   */\n      tag_479\n      jump\t// in\n    tag_501:\n        /* \"#utility.yul\":2065:2072   */\n      swap3\n      pop\n        /* \"#utility.yul\":2119:2121   */\n      0x60\n        /* \"#utility.yul\":2104:2122   */\n      dup7\n      add\n        /* \"#utility.yul\":2091:2123   */\n      calldataload\n      swap2\n      pop\n        /* \"#utility.yul\":2175:2178   */\n      0x80\n        /* \"#utility.yul\":2160:2179   */\n      dup7\n      add\n        /* \"#utility.yul\":2147:2180   */\n      calldataload\n        /* \"#utility.yul\":2189:2224   */\n      tag_502\n        /* \"#utility.yul\":2147:2180   */\n      dup2\n        /* \"#utility.yul\":2189:2224   */\n      tag_479\n      jump\t// in\n    tag_502:\n        /* \"#utility.yul\":2243:2250   */\n      dup1\n        /* \"#utility.yul\":2233:2250   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":1711:2256   */\n      swap3\n      swap6\n      pop\n      swap3\n      swap6\n      swap1\n      swap4\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2261:2970   */\n    tag_38:\n      0x00\n      dup1\n      0x00\n      dup1\n      0x00\n      dup1\n        /* \"#utility.yul\":2456:2459   */\n      0xc0\n        /* \"#utility.yul\":2444:2453   */\n      dup8\n        /* \"#utility.yul\":2435:2442   */\n      dup10\n        /* \"#utility.yul\":2431:2454   */\n      sub\n        /* \"#utility.yul\":2427:2460   */\n      slt\n        /* \"#utility.yul\":2424:2426   */\n      iszero\n      tag_504\n      jumpi\n        /* \"#utility.yul\":2478:2484   */\n      dup1\n        /* \"#utility.yul\":2470:2476   */\n      dup2\n        /* \"#utility.yul\":2463:2485   */\n      revert\n        /* \"#utility.yul\":2424:2426   */\n    tag_504:\n        /* \"#utility.yul\":2522:2531   */\n      dup7\n        /* \"#utility.yul\":2509:2532   */\n      calldataload\n        /* \"#utility.yul\":2541:2574   */\n      tag_505\n        /* \"#utility.yul\":2568:2573   */\n      dup2\n        /* \"#utility.yul\":2541:2574   */\n      tag_479\n      jump\t// in\n    tag_505:\n        /* \"#utility.yul\":2593:2598   */\n      swap6\n      pop\n        /* \"#utility.yul\":2645:2647   */\n      0x20\n        /* \"#utility.yul\":2630:2648   */\n      dup8\n      add\n        /* \"#utility.yul\":2617:2649   */\n      calldataload\n      swap5\n      pop\n        /* \"#utility.yul\":2696:2698   */\n      0x40\n        /* \"#utility.yul\":2681:2699   */\n      dup8\n      add\n        /* \"#utility.yul\":2668:2700   */\n      calldataload\n      swap4\n      pop\n        /* \"#utility.yul\":2752:2754   */\n      0x60\n        /* \"#utility.yul\":2737:2755   */\n      dup8\n      add\n        /* \"#utility.yul\":2724:2756   */\n      calldataload\n        /* \"#utility.yul\":2800:2804   */\n      0xff\n        /* \"#utility.yul\":2787:2805   */\n      dup2\n      and\n        /* \"#utility.yul\":2775:2806   */\n      dup2\n      eq\n        /* \"#utility.yul\":2765:2767   */\n      tag_506\n      jumpi\n        /* \"#utility.yul\":2825:2831   */\n      dup2\n        /* \"#utility.yul\":2817:2823   */\n      dup3\n        /* \"#utility.yul\":2810:2832   */\n      revert\n        /* \"#utility.yul\":2765:2767   */\n    tag_506:\n        /* \"#utility.yul\":2414:2970   */\n      swap6\n      swap9\n      swap5\n      swap8\n      pop\n      swap3\n      swap6\n        /* \"#utility.yul\":2907:2910   */\n      0x80\n        /* \"#utility.yul\":2892:2911   */\n      dup2\n      add\n        /* \"#utility.yul\":2879:2912   */\n      calldataload\n      swap5\n        /* \"#utility.yul\":2959:2962   */\n      0xa0\n        /* \"#utility.yul\":2944:2963   */\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":2931:2964   */\n      calldataload\n      swap4\n      pop\n        /* \"#utility.yul\":2414:2970   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2975:3652   */\n    tag_58:\n      0x00\n      dup1\n        /* \"#utility.yul\":3133:3135   */\n      0x20\n        /* \"#utility.yul\":3121:3130   */\n      dup4\n        /* \"#utility.yul\":3112:3119   */\n      dup6\n        /* \"#utility.yul\":3108:3131   */\n      sub\n        /* \"#utility.yul\":3104:3136   */\n      slt\n        /* \"#utility.yul\":3101:3103   */\n      iszero\n      tag_508\n      jumpi\n        /* \"#utility.yul\":3154:3160   */\n      dup2\n        /* \"#utility.yul\":3146:3152   */\n      dup3\n        /* \"#utility.yul\":3139:3161   */\n      revert\n        /* \"#utility.yul\":3101:3103   */\n    tag_508:\n        /* \"#utility.yul\":3199:3208   */\n      dup3\n        /* \"#utility.yul\":3186:3209   */\n      calldataload\n        /* \"#utility.yul\":3228:3246   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":3269:3271   */\n      dup1\n        /* \"#utility.yul\":3261:3267   */\n      dup3\n        /* \"#utility.yul\":3258:3272   */\n      gt\n        /* \"#utility.yul\":3255:3257   */\n      iszero\n      tag_509\n      jumpi\n        /* \"#utility.yul\":3290:3296   */\n      dup4\n        /* \"#utility.yul\":3282:3288   */\n      dup5\n        /* \"#utility.yul\":3275:3297   */\n      revert\n        /* \"#utility.yul\":3255:3257   */\n    tag_509:\n        /* \"#utility.yul\":3333:3339   */\n      dup2\n        /* \"#utility.yul\":3322:3331   */\n      dup6\n        /* \"#utility.yul\":3318:3340   */\n      add\n        /* \"#utility.yul\":3308:3340   */\n      swap2\n      pop\n        /* \"#utility.yul\":3378:3385   */\n      dup6\n        /* \"#utility.yul\":3371:3375   */\n      0x1f\n        /* \"#utility.yul\":3367:3369   */\n      dup4\n        /* \"#utility.yul\":3363:3376   */\n      add\n        /* \"#utility.yul\":3359:3386   */\n      slt\n        /* \"#utility.yul\":3349:3351   */\n      tag_510\n      jumpi\n        /* \"#utility.yul\":3405:3411   */\n      dup4\n        /* \"#utility.yul\":3397:3403   */\n      dup5\n        /* \"#utility.yul\":3390:3412   */\n      revert\n        /* \"#utility.yul\":3349:3351   */\n    tag_510:\n        /* \"#utility.yul\":3450:3452   */\n      dup2\n        /* \"#utility.yul\":3437:3453   */\n      calldataload\n        /* \"#utility.yul\":3476:3478   */\n      dup2\n        /* \"#utility.yul\":3468:3474   */\n      dup2\n        /* \"#utility.yul\":3465:3479   */\n      gt\n        /* \"#utility.yul\":3462:3464   */\n      iszero\n      tag_511\n      jumpi\n        /* \"#utility.yul\":3497:3503   */\n      dup5\n        /* \"#utility.yul\":3489:3495   */\n      dup6\n        /* \"#utility.yul\":3482:3504   */\n      revert\n        /* \"#utility.yul\":3462:3464   */\n    tag_511:\n        /* \"#utility.yul\":3556:3563   */\n      dup7\n        /* \"#utility.yul\":3551:3553   */\n      0x20\n        /* \"#utility.yul\":3545:3547   */\n      dup1\n        /* \"#utility.yul\":3537:3543   */\n      dup4\n        /* \"#utility.yul\":3533:3548   */\n      mul\n        /* \"#utility.yul\":3529:3531   */\n      dup6\n        /* \"#utility.yul\":3525:3549   */\n      add\n        /* \"#utility.yul\":3521:3554   */\n      add\n        /* \"#utility.yul\":3518:3564   */\n      gt\n        /* \"#utility.yul\":3515:3517   */\n      iszero\n      tag_512\n      jumpi\n        /* \"#utility.yul\":3582:3588   */\n      dup5\n        /* \"#utility.yul\":3574:3580   */\n      dup6\n        /* \"#utility.yul\":3567:3589   */\n      revert\n        /* \"#utility.yul\":3515:3517   */\n    tag_512:\n        /* \"#utility.yul\":3618:3620   */\n      0x20\n        /* \"#utility.yul\":3610:3621   */\n      swap3\n      swap1\n      swap3\n      add\n      swap7\n        /* \"#utility.yul\":3640:3646   */\n      swap2\n      swap6\n      pop\n        /* \"#utility.yul\":3091:3652   */\n      swap1\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3657:3954   */\n    tag_383:\n      0x00\n        /* \"#utility.yul\":3777:3779   */\n      0x20\n        /* \"#utility.yul\":3765:3774   */\n      dup3\n        /* \"#utility.yul\":3756:3763   */\n      dup5\n        /* \"#utility.yul\":3752:3775   */\n      sub\n        /* \"#utility.yul\":3748:3780   */\n      slt\n        /* \"#utility.yul\":3745:3747   */\n      iszero\n      tag_514\n      jumpi\n        /* \"#utility.yul\":3798:3804   */\n      dup1\n        /* \"#utility.yul\":3790:3796   */\n      dup2\n        /* \"#utility.yul\":3783:3805   */\n      revert\n        /* \"#utility.yul\":3745:3747   */\n    tag_514:\n        /* \"#utility.yul\":3835:3844   */\n      dup2\n        /* \"#utility.yul\":3829:3845   */\n      mload\n        /* \"#utility.yul\":3888:3893   */\n      dup1\n        /* \"#utility.yul\":3881:3894   */\n      iszero\n        /* \"#utility.yul\":3874:3895   */\n      iszero\n        /* \"#utility.yul\":3867:3872   */\n      dup2\n        /* \"#utility.yul\":3864:3896   */\n      eq\n        /* \"#utility.yul\":3854:3856   */\n      tag_493\n      jumpi\n        /* \"#utility.yul\":3915:3921   */\n      dup2\n        /* \"#utility.yul\":3907:3913   */\n      dup3\n        /* \"#utility.yul\":3900:3922   */\n      revert\n        /* \"#utility.yul\":3959:4212   */\n    tag_341:\n      0x00\n      dup1\n        /* \"#utility.yul\":4097:4099   */\n      0x40\n        /* \"#utility.yul\":4085:4094   */\n      dup4\n        /* \"#utility.yul\":4076:4083   */\n      dup6\n        /* \"#utility.yul\":4072:4095   */\n      sub\n        /* \"#utility.yul\":4068:4100   */\n      slt\n        /* \"#utility.yul\":4065:4067   */\n      iszero\n      tag_517\n      jumpi\n        /* \"#utility.yul\":4118:4124   */\n      dup2\n        /* \"#utility.yul\":4110:4116   */\n      dup3\n        /* \"#utility.yul\":4103:4125   */\n      revert\n        /* \"#utility.yul\":4065:4067   */\n    tag_517:\n      pop\n      pop\n        /* \"#utility.yul\":4146:4162   */\n      dup1\n      mload\n        /* \"#utility.yul\":4202:4204   */\n      0x20\n        /* \"#utility.yul\":4187:4205   */\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":4181:4206   */\n      mload\n        /* \"#utility.yul\":4146:4162   */\n      swap1\n      swap3\n        /* \"#utility.yul\":4181:4206   */\n      swap1\n      swap2\n      pop\n        /* \"#utility.yul\":4055:4212   */\n      jump\t// out\n        /* \"#utility.yul\":4217:4992   */\n    tag_98:\n      0x00\n      dup1\n      0x00\n      dup1\n        /* \"#utility.yul\":4380:4382   */\n      0x60\n        /* \"#utility.yul\":4368:4377   */\n      dup6\n        /* \"#utility.yul\":4359:4366   */\n      dup8\n        /* \"#utility.yul\":4355:4378   */\n      sub\n        /* \"#utility.yul\":4351:4383   */\n      slt\n        /* \"#utility.yul\":4348:4350   */\n      iszero\n      tag_519\n      jumpi\n        /* \"#utility.yul\":4401:4407   */\n      dup2\n        /* \"#utility.yul\":4393:4399   */\n      dup3\n        /* \"#utility.yul\":4386:4408   */\n      revert\n        /* \"#utility.yul\":4348:4350   */\n    tag_519:\n        /* \"#utility.yul\":4442:4451   */\n      dup5\n        /* \"#utility.yul\":4429:4452   */\n      calldataload\n        /* \"#utility.yul\":4419:4452   */\n      swap4\n      pop\n        /* \"#utility.yul\":4499:4501   */\n      0x20\n        /* \"#utility.yul\":4488:4497   */\n      dup6\n        /* \"#utility.yul\":4484:4502   */\n      add\n        /* \"#utility.yul\":4471:4503   */\n      calldataload\n        /* \"#utility.yul\":4461:4503   */\n      swap3\n      pop\n        /* \"#utility.yul\":4554:4556   */\n      0x40\n        /* \"#utility.yul\":4543:4552   */\n      dup6\n        /* \"#utility.yul\":4539:4557   */\n      add\n        /* \"#utility.yul\":4526:4558   */\n      calldataload\n        /* \"#utility.yul\":4577:4595   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":4618:4620   */\n      dup1\n        /* \"#utility.yul\":4610:4616   */\n      dup3\n        /* \"#utility.yul\":4607:4621   */\n      gt\n        /* \"#utility.yul\":4604:4606   */\n      iszero\n      tag_520\n      jumpi\n        /* \"#utility.yul\":4639:4645   */\n      dup4\n        /* \"#utility.yul\":4631:4637   */\n      dup5\n        /* \"#utility.yul\":4624:4646   */\n      revert\n        /* \"#utility.yul\":4604:4606   */\n    tag_520:\n        /* \"#utility.yul\":4682:4688   */\n      dup2\n        /* \"#utility.yul\":4671:4680   */\n      dup8\n        /* \"#utility.yul\":4667:4689   */\n      add\n        /* \"#utility.yul\":4657:4689   */\n      swap2\n      pop\n        /* \"#utility.yul\":4727:4734   */\n      dup8\n        /* \"#utility.yul\":4720:4724   */\n      0x1f\n        /* \"#utility.yul\":4716:4718   */\n      dup4\n        /* \"#utility.yul\":4712:4725   */\n      add\n        /* \"#utility.yul\":4708:4735   */\n      slt\n        /* \"#utility.yul\":4698:4700   */\n      tag_521\n      jumpi\n        /* \"#utility.yul\":4754:4760   */\n      dup4\n        /* \"#utility.yul\":4746:4752   */\n      dup5\n        /* \"#utility.yul\":4739:4761   */\n      revert\n        /* \"#utility.yul\":4698:4700   */\n    tag_521:\n        /* \"#utility.yul\":4799:4801   */\n      dup2\n        /* \"#utility.yul\":4786:4802   */\n      calldataload\n        /* \"#utility.yul\":4825:4827   */\n      dup2\n        /* \"#utility.yul\":4817:4823   */\n      dup2\n        /* \"#utility.yul\":4814:4828   */\n      gt\n        /* \"#utility.yul\":4811:4813   */\n      iszero\n      tag_522\n      jumpi\n        /* \"#utility.yul\":4846:4852   */\n      dup5\n        /* \"#utility.yul\":4838:4844   */\n      dup6\n        /* \"#utility.yul\":4831:4853   */\n      revert\n        /* \"#utility.yul\":4811:4813   */\n    tag_522:\n        /* \"#utility.yul\":4896:4903   */\n      dup9\n        /* \"#utility.yul\":4891:4893   */\n      0x20\n        /* \"#utility.yul\":4882:4888   */\n      dup3\n        /* \"#utility.yul\":4878:4880   */\n      dup6\n        /* \"#utility.yul\":4874:4889   */\n      add\n        /* \"#utility.yul\":4870:4894   */\n      add\n        /* \"#utility.yul\":4867:4904   */\n      gt\n        /* \"#utility.yul\":4864:4866   */\n      iszero\n      tag_523\n      jumpi\n        /* \"#utility.yul\":4922:4928   */\n      dup5\n        /* \"#utility.yul\":4914:4920   */\n      dup6\n        /* \"#utility.yul\":4907:4929   */\n      revert\n        /* \"#utility.yul\":4864:4866   */\n    tag_523:\n        /* \"#utility.yul\":4338:4992   */\n      swap6\n      swap9\n      swap5\n      swap8\n      pop\n      pop\n        /* \"#utility.yul\":4958:4960   */\n      0x20\n        /* \"#utility.yul\":4950:4961   */\n      add\n      swap5\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":4338:4992   */\n      jump\t// out\n        /* \"#utility.yul\":4997:5673   */\n    tag_197:\n      0x00\n        /* \"#utility.yul\":5130:5132   */\n      0x20\n        /* \"#utility.yul\":5118:5127   */\n      dup3\n        /* \"#utility.yul\":5109:5116   */\n      dup5\n        /* \"#utility.yul\":5105:5128   */\n      sub\n        /* \"#utility.yul\":5101:5133   */\n      slt\n        /* \"#utility.yul\":5098:5100   */\n      iszero\n      tag_525\n      jumpi\n        /* \"#utility.yul\":5151:5157   */\n      dup1\n        /* \"#utility.yul\":5143:5149   */\n      dup2\n        /* \"#utility.yul\":5136:5158   */\n      revert\n        /* \"#utility.yul\":5098:5100   */\n    tag_525:\n        /* \"#utility.yul\":5189:5198   */\n      dup2\n        /* \"#utility.yul\":5183:5199   */\n      mload\n        /* \"#utility.yul\":5222:5240   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":5214:5220   */\n      dup2\n        /* \"#utility.yul\":5211:5241   */\n      gt\n        /* \"#utility.yul\":5208:5210   */\n      iszero\n      tag_526\n      jumpi\n        /* \"#utility.yul\":5259:5265   */\n      dup2\n        /* \"#utility.yul\":5251:5257   */\n      dup3\n        /* \"#utility.yul\":5244:5266   */\n      revert\n        /* \"#utility.yul\":5208:5210   */\n    tag_526:\n        /* \"#utility.yul\":5287:5309   */\n      dup3\n      add\n        /* \"#utility.yul\":5340:5344   */\n      0x1f\n        /* \"#utility.yul\":5332:5345   */\n      dup2\n      add\n        /* \"#utility.yul\":5328:5355   */\n      dup5\n      sgt\n        /* \"#utility.yul\":5318:5320   */\n      tag_527\n      jumpi\n        /* \"#utility.yul\":5374:5380   */\n      dup2\n        /* \"#utility.yul\":5366:5372   */\n      dup3\n        /* \"#utility.yul\":5359:5381   */\n      revert\n        /* \"#utility.yul\":5318:5320   */\n    tag_527:\n        /* \"#utility.yul\":5408:5410   */\n      dup1\n        /* \"#utility.yul\":5402:5411   */\n      mload\n        /* \"#utility.yul\":5433:5482   */\n      tag_528\n        /* \"#utility.yul\":5448:5481   */\n      tag_484\n        /* \"#utility.yul\":5478:5480   */\n      dup3\n        /* \"#utility.yul\":5448:5481   */\n      tag_485\n      jump\t// in\n        /* \"#utility.yul\":5433:5482   */\n    tag_528:\n        /* \"#utility.yul\":5505:5507   */\n      dup2\n        /* \"#utility.yul\":5498:5503   */\n      dup2\n        /* \"#utility.yul\":5491:5508   */\n      mstore\n        /* \"#utility.yul\":5545:5552   */\n      dup6\n        /* \"#utility.yul\":5540:5542   */\n      0x20\n        /* \"#utility.yul\":5535:5537   */\n      dup4\n        /* \"#utility.yul\":5531:5533   */\n      dup6\n        /* \"#utility.yul\":5527:5538   */\n      add\n        /* \"#utility.yul\":5523:5543   */\n      add\n        /* \"#utility.yul\":5520:5553   */\n      gt\n        /* \"#utility.yul\":5517:5519   */\n      iszero\n      tag_530\n      jumpi\n        /* \"#utility.yul\":5571:5577   */\n      dup4\n        /* \"#utility.yul\":5563:5569   */\n      dup5\n        /* \"#utility.yul\":5556:5578   */\n      revert\n        /* \"#utility.yul\":5517:5519   */\n    tag_530:\n        /* \"#utility.yul\":5589:5643   */\n      tag_394\n        /* \"#utility.yul\":5640:5642   */\n      dup3\n        /* \"#utility.yul\":5635:5637   */\n      0x20\n        /* \"#utility.yul\":5628:5633   */\n      dup4\n        /* \"#utility.yul\":5624:5638   */\n      add\n        /* \"#utility.yul\":5619:5621   */\n      0x20\n        /* \"#utility.yul\":5615:5617   */\n      dup7\n        /* \"#utility.yul\":5611:5622   */\n      add\n        /* \"#utility.yul\":5589:5643   */\n      tag_532\n      jump\t// in\n        /* \"#utility.yul\":5678:6720   */\n    tag_64:\n      0x00\n        /* \"#utility.yul\":5824:5826   */\n      0x20\n        /* \"#utility.yul\":5812:5821   */\n      dup3\n        /* \"#utility.yul\":5803:5810   */\n      dup5\n        /* \"#utility.yul\":5799:5822   */\n      sub\n        /* \"#utility.yul\":5795:5827   */\n      slt\n        /* \"#utility.yul\":5792:5794   */\n      iszero\n      tag_534\n      jumpi\n        /* \"#utility.yul\":5845:5851   */\n      dup1\n        /* \"#utility.yul\":5837:5843   */\n      dup2\n        /* \"#utility.yul\":5830:5852   */\n      revert\n        /* \"#utility.yul\":5792:5794   */\n    tag_534:\n        /* \"#utility.yul\":5890:5899   */\n      dup2\n        /* \"#utility.yul\":5877:5900   */\n      calldataload\n        /* \"#utility.yul\":5919:5937   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":5960:5962   */\n      dup1\n        /* \"#utility.yul\":5952:5958   */\n      dup3\n        /* \"#utility.yul\":5949:5963   */\n      gt\n        /* \"#utility.yul\":5946:5948   */\n      iszero\n      tag_535\n      jumpi\n        /* \"#utility.yul\":5981:5987   */\n      dup3\n        /* \"#utility.yul\":5973:5979   */\n      dup4\n        /* \"#utility.yul\":5966:5988   */\n      revert\n        /* \"#utility.yul\":5946:5948   */\n    tag_535:\n        /* \"#utility.yul\":6009:6031   */\n      swap1\n      dup4\n      add\n      swap1\n        /* \"#utility.yul\":6065:6069   */\n      0xa0\n        /* \"#utility.yul\":6047:6063   */\n      dup3\n      dup7\n      sub\n        /* \"#utility.yul\":6043:6070   */\n      slt\n        /* \"#utility.yul\":6040:6042   */\n      iszero\n      tag_536\n      jumpi\n        /* \"#utility.yul\":6088:6094   */\n      dup3\n        /* \"#utility.yul\":6080:6086   */\n      dup4\n        /* \"#utility.yul\":6073:6095   */\n      revert\n        /* \"#utility.yul\":6040:6042   */\n    tag_536:\n        /* \"#utility.yul\":6126:6128   */\n      0x40\n        /* \"#utility.yul\":6120:6129   */\n      mload\n        /* \"#utility.yul\":6168:6172   */\n      0xa0\n        /* \"#utility.yul\":6160:6166   */\n      dup2\n        /* \"#utility.yul\":6156:6173   */\n      add\n        /* \"#utility.yul\":6223:6229   */\n      dup2\n        /* \"#utility.yul\":6211:6221   */\n      dup2\n        /* \"#utility.yul\":6208:6230   */\n      lt\n        /* \"#utility.yul\":6203:6205   */\n      dup4\n        /* \"#utility.yul\":6191:6201   */\n      dup3\n        /* \"#utility.yul\":6188:6206   */\n      gt\n        /* \"#utility.yul\":6185:6231   */\n      or\n        /* \"#utility.yul\":6182:6184   */\n      iszero\n      tag_537\n      jumpi\n        /* \"#utility.yul\":6234:6243   */\n      invalid\n        /* \"#utility.yul\":6182:6184   */\n    tag_537:\n        /* \"#utility.yul\":6261:6263   */\n      0x40\n        /* \"#utility.yul\":6254:6276   */\n      mstore\n        /* \"#utility.yul\":6301:6317   */\n      dup3\n      calldataload\n        /* \"#utility.yul\":6329:6345   */\n      dup3\n      dup2\n      gt\n        /* \"#utility.yul\":6326:6328   */\n      iszero\n      tag_538\n      jumpi\n        /* \"#utility.yul\":6363:6369   */\n      dup5\n        /* \"#utility.yul\":6355:6361   */\n      dup6\n        /* \"#utility.yul\":6348:6370   */\n      revert\n        /* \"#utility.yul\":6326:6328   */\n    tag_538:\n        /* \"#utility.yul\":6396:6442   */\n      tag_539\n        /* \"#utility.yul\":6434:6441   */\n      dup8\n        /* \"#utility.yul\":6423:6431   */\n      dup3\n        /* \"#utility.yul\":6419:6421   */\n      dup7\n        /* \"#utility.yul\":6415:6432   */\n      add\n        /* \"#utility.yul\":6396:6442   */\n      tag_480\n      jump\t// in\n    tag_539:\n        /* \"#utility.yul\":6388:6394   */\n      dup3\n        /* \"#utility.yul\":6381:6443   */\n      mstore\n      pop\n        /* \"#utility.yul\":6476:6509   */\n      tag_540\n        /* \"#utility.yul\":6505:6507   */\n      0x20\n        /* \"#utility.yul\":6501:6503   */\n      dup5\n        /* \"#utility.yul\":6497:6508   */\n      add\n        /* \"#utility.yul\":6476:6509   */\n      tag_476\n      jump\t// in\n    tag_540:\n        /* \"#utility.yul\":6471:6473   */\n      0x20\n        /* \"#utility.yul\":6463:6469   */\n      dup3\n        /* \"#utility.yul\":6459:6474   */\n      add\n        /* \"#utility.yul\":6452:6510   */\n      mstore\n        /* \"#utility.yul\":6564:6566   */\n      0x40\n        /* \"#utility.yul\":6560:6562   */\n      dup4\n        /* \"#utility.yul\":6556:6567   */\n      add\n        /* \"#utility.yul\":6543:6568   */\n      calldataload\n        /* \"#utility.yul\":6538:6540   */\n      0x40\n        /* \"#utility.yul\":6530:6536   */\n      dup3\n        /* \"#utility.yul\":6526:6541   */\n      add\n        /* \"#utility.yul\":6519:6569   */\n      mstore\n        /* \"#utility.yul\":6623:6625   */\n      0x60\n        /* \"#utility.yul\":6619:6621   */\n      dup4\n        /* \"#utility.yul\":6615:6626   */\n      add\n        /* \"#utility.yul\":6602:6627   */\n      calldataload\n        /* \"#utility.yul\":6597:6599   */\n      0x60\n        /* \"#utility.yul\":6589:6595   */\n      dup3\n        /* \"#utility.yul\":6585:6600   */\n      add\n        /* \"#utility.yul\":6578:6628   */\n      mstore\n        /* \"#utility.yul\":6683:6686   */\n      0x80\n        /* \"#utility.yul\":6679:6681   */\n      dup4\n        /* \"#utility.yul\":6675:6687   */\n      add\n        /* \"#utility.yul\":6662:6688   */\n      calldataload\n        /* \"#utility.yul\":6656:6659   */\n      0x80\n        /* \"#utility.yul\":6648:6654   */\n      dup3\n        /* \"#utility.yul\":6644:6660   */\n      add\n        /* \"#utility.yul\":6637:6689   */\n      mstore\n        /* \"#utility.yul\":6708:6714   */\n      dup1\n        /* \"#utility.yul\":6698:6714   */\n      swap4\n      pop\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":5782:6720   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6725:7007   */\n    tag_32:\n      0x00\n        /* \"#utility.yul\":6879:6882   */\n      0x0100\n        /* \"#utility.yul\":6867:6876   */\n      dup3\n        /* \"#utility.yul\":6858:6865   */\n      dup5\n        /* \"#utility.yul\":6854:6877   */\n      sub\n        /* \"#utility.yul\":6850:6883   */\n      slt\n        /* \"#utility.yul\":6847:6849   */\n      iszero\n      tag_542\n      jumpi\n        /* \"#utility.yul\":6901:6907   */\n      dup1\n        /* \"#utility.yul\":6893:6899   */\n      dup2\n        /* \"#utility.yul\":6886:6908   */\n      revert\n        /* \"#utility.yul\":6847:6849   */\n    tag_542:\n        /* \"#utility.yul\":6929:7001   */\n      tag_493\n        /* \"#utility.yul\":6993:7000   */\n      dup4\n        /* \"#utility.yul\":6982:6991   */\n      dup4\n        /* \"#utility.yul\":6929:7001   */\n      tag_488\n      jump\t// in\n        /* \"#utility.yul\":7012:7439   */\n    tag_89:\n      0x00\n        /* \"#utility.yul\":7161:7163   */\n      0x20\n        /* \"#utility.yul\":7149:7158   */\n      dup3\n        /* \"#utility.yul\":7140:7147   */\n      dup5\n        /* \"#utility.yul\":7136:7159   */\n      sub\n        /* \"#utility.yul\":7132:7164   */\n      slt\n        /* \"#utility.yul\":7129:7131   */\n      iszero\n      tag_545\n      jumpi\n        /* \"#utility.yul\":7182:7188   */\n      dup1\n        /* \"#utility.yul\":7174:7180   */\n      dup2\n        /* \"#utility.yul\":7167:7189   */\n      revert\n        /* \"#utility.yul\":7129:7131   */\n    tag_545:\n        /* \"#utility.yul\":7227:7236   */\n      dup2\n        /* \"#utility.yul\":7214:7237   */\n      calldataload\n        /* \"#utility.yul\":7260:7278   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":7252:7258   */\n      dup2\n        /* \"#utility.yul\":7249:7279   */\n      gt\n        /* \"#utility.yul\":7246:7248   */\n      iszero\n      tag_546\n      jumpi\n        /* \"#utility.yul\":7297:7303   */\n      dup2\n        /* \"#utility.yul\":7289:7295   */\n      dup3\n        /* \"#utility.yul\":7282:7304   */\n      revert\n        /* \"#utility.yul\":7246:7248   */\n    tag_546:\n        /* \"#utility.yul\":7325:7347   */\n      dup3\n      add\n        /* \"#utility.yul\":7381:7384   */\n      0xa0\n        /* \"#utility.yul\":7363:7379   */\n      dup2\n      dup6\n      sub\n        /* \"#utility.yul\":7359:7385   */\n      slt\n        /* \"#utility.yul\":7356:7358   */\n      iszero\n      tag_493\n      jumpi\n        /* \"#utility.yul\":7403:7409   */\n      dup2\n        /* \"#utility.yul\":7395:7401   */\n      dup3\n        /* \"#utility.yul\":7388:7410   */\n      revert\n        /* \"#utility.yul\":7732:8660   */\n    tag_293:\n      0x00\n        /* \"#utility.yul\":7878:7880   */\n      0x20\n        /* \"#utility.yul\":7866:7875   */\n      dup3\n        /* \"#utility.yul\":7857:7864   */\n      dup5\n        /* \"#utility.yul\":7853:7876   */\n      sub\n        /* \"#utility.yul\":7849:7881   */\n      slt\n        /* \"#utility.yul\":7846:7848   */\n      iszero\n      tag_552\n      jumpi\n        /* \"#utility.yul\":7899:7905   */\n      dup1\n        /* \"#utility.yul\":7891:7897   */\n      dup2\n        /* \"#utility.yul\":7884:7906   */\n      revert\n        /* \"#utility.yul\":7846:7848   */\n    tag_552:\n        /* \"#utility.yul\":7944:7953   */\n      dup2\n        /* \"#utility.yul\":7931:7954   */\n      calldataload\n        /* \"#utility.yul\":7973:7991   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":8014:8016   */\n      dup1\n        /* \"#utility.yul\":8006:8012   */\n      dup3\n        /* \"#utility.yul\":8003:8017   */\n      gt\n        /* \"#utility.yul\":8000:8002   */\n      iszero\n      tag_553\n      jumpi\n        /* \"#utility.yul\":8035:8041   */\n      dup3\n        /* \"#utility.yul\":8027:8033   */\n      dup4\n        /* \"#utility.yul\":8020:8042   */\n      revert\n        /* \"#utility.yul\":8000:8002   */\n    tag_553:\n        /* \"#utility.yul\":8063:8085   */\n      swap1\n      dup4\n      add\n      swap1\n        /* \"#utility.yul\":8119:8123   */\n      0x40\n        /* \"#utility.yul\":8101:8117   */\n      dup3\n      dup7\n      sub\n        /* \"#utility.yul\":8097:8124   */\n      slt\n        /* \"#utility.yul\":8094:8096   */\n      iszero\n      tag_554\n      jumpi\n        /* \"#utility.yul\":8142:8148   */\n      dup3\n        /* \"#utility.yul\":8134:8140   */\n      dup4\n        /* \"#utility.yul\":8127:8149   */\n      revert\n        /* \"#utility.yul\":8094:8096   */\n    tag_554:\n        /* \"#utility.yul\":8180:8184   */\n      0x40\n        /* \"#utility.yul\":8174:8185   */\n      mload\n        /* \"#utility.yul\":8224:8228   */\n      0x40\n        /* \"#utility.yul\":8216:8222   */\n      dup2\n        /* \"#utility.yul\":8212:8229   */\n      add\n        /* \"#utility.yul\":8279:8285   */\n      dup2\n        /* \"#utility.yul\":8267:8277   */\n      dup2\n        /* \"#utility.yul\":8264:8286   */\n      lt\n        /* \"#utility.yul\":8259:8261   */\n      dup4\n        /* \"#utility.yul\":8247:8257   */\n      dup3\n        /* \"#utility.yul\":8244:8262   */\n      gt\n        /* \"#utility.yul\":8241:8287   */\n      or\n        /* \"#utility.yul\":8238:8240   */\n      iszero\n      tag_555\n      jumpi\n        /* \"#utility.yul\":8290:8299   */\n      invalid\n        /* \"#utility.yul\":8238:8240   */\n    tag_555:\n        /* \"#utility.yul\":8317:8321   */\n      0x40\n        /* \"#utility.yul\":8310:8334   */\n      mstore\n        /* \"#utility.yul\":8359:8375   */\n      dup3\n      calldataload\n        /* \"#utility.yul\":8387:8403   */\n      dup3\n      dup2\n      gt\n        /* \"#utility.yul\":8384:8386   */\n      iszero\n      tag_556\n      jumpi\n        /* \"#utility.yul\":8421:8427   */\n      dup5\n        /* \"#utility.yul\":8413:8419   */\n      dup6\n        /* \"#utility.yul\":8406:8428   */\n      revert\n        /* \"#utility.yul\":8384:8386   */\n    tag_556:\n        /* \"#utility.yul\":8454:8500   */\n      tag_557\n        /* \"#utility.yul\":8492:8499   */\n      dup8\n        /* \"#utility.yul\":8481:8489   */\n      dup3\n        /* \"#utility.yul\":8477:8479   */\n      dup7\n        /* \"#utility.yul\":8473:8490   */\n      add\n        /* \"#utility.yul\":8454:8500   */\n      tag_480\n      jump\t// in\n    tag_557:\n        /* \"#utility.yul\":8446:8452   */\n      dup3\n        /* \"#utility.yul\":8439:8501   */\n      mstore\n      pop\n        /* \"#utility.yul\":8544:8546   */\n      0x20\n        /* \"#utility.yul\":8540:8542   */\n      dup4\n        /* \"#utility.yul\":8536:8547   */\n      add\n        /* \"#utility.yul\":8523:8548   */\n      calldataload\n        /* \"#utility.yul\":8510:8548   */\n      swap3\n      pop\n        /* \"#utility.yul\":8557:8590   */\n      tag_558\n        /* \"#utility.yul\":8584:8589   */\n      dup4\n        /* \"#utility.yul\":8557:8590   */\n      tag_479\n      jump\t// in\n    tag_558:\n        /* \"#utility.yul\":8618:8620   */\n      0x20\n        /* \"#utility.yul\":8606:8621   */\n      dup2\n      add\n        /* \"#utility.yul\":8599:8629   */\n      swap3\n      swap1\n      swap3\n      mstore\n      pop\n        /* \"#utility.yul\":8610:8616   */\n      swap4\n        /* \"#utility.yul\":7836:8660   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8929:9223   */\n    tag_118:\n      0x00\n        /* \"#utility.yul\":9040:9042   */\n      0x20\n        /* \"#utility.yul\":9028:9037   */\n      dup3\n        /* \"#utility.yul\":9019:9026   */\n      dup5\n        /* \"#utility.yul\":9015:9038   */\n      sub\n        /* \"#utility.yul\":9011:9043   */\n      slt\n        /* \"#utility.yul\":9008:9010   */\n      iszero\n      tag_563\n      jumpi\n        /* \"#utility.yul\":9061:9067   */\n      dup1\n        /* \"#utility.yul\":9053:9059   */\n      dup2\n        /* \"#utility.yul\":9046:9068   */\n      revert\n        /* \"#utility.yul\":9008:9010   */\n    tag_563:\n        /* \"#utility.yul\":9105:9114   */\n      dup2\n        /* \"#utility.yul\":9092:9115   */\n      calldataload\n        /* \"#utility.yul\":9155:9163   */\n      0xffffff\n        /* \"#utility.yul\":9148:9153   */\n      dup2\n        /* \"#utility.yul\":9144:9164   */\n      and\n        /* \"#utility.yul\":9137:9142   */\n      dup2\n        /* \"#utility.yul\":9134:9165   */\n      eq\n        /* \"#utility.yul\":9124:9126   */\n      tag_493\n      jumpi\n        /* \"#utility.yul\":9184:9190   */\n      dup2\n        /* \"#utility.yul\":9176:9182   */\n      dup3\n        /* \"#utility.yul\":9169:9191   */\n      revert\n        /* \"#utility.yul\":9228:9422   */\n    tag_139:\n      0x00\n        /* \"#utility.yul\":9351:9353   */\n      0x20\n        /* \"#utility.yul\":9339:9348   */\n      dup3\n        /* \"#utility.yul\":9330:9337   */\n      dup5\n        /* \"#utility.yul\":9326:9349   */\n      sub\n        /* \"#utility.yul\":9322:9354   */\n      slt\n        /* \"#utility.yul\":9319:9321   */\n      iszero\n      tag_566\n      jumpi\n        /* \"#utility.yul\":9372:9378   */\n      dup1\n        /* \"#utility.yul\":9364:9370   */\n      dup2\n        /* \"#utility.yul\":9357:9379   */\n      revert\n        /* \"#utility.yul\":9319:9321   */\n    tag_566:\n      pop\n        /* \"#utility.yul\":9400:9416   */\n      mload\n      swap2\n        /* \"#utility.yul\":9309:9422   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9427:9754   */\n    tag_42:\n      0x00\n      dup1\n        /* \"#utility.yul\":9556:9558   */\n      0x40\n        /* \"#utility.yul\":9544:9553   */\n      dup4\n        /* \"#utility.yul\":9535:9542   */\n      dup6\n        /* \"#utility.yul\":9531:9554   */\n      sub\n        /* \"#utility.yul\":9527:9559   */\n      slt\n        /* \"#utility.yul\":9524:9526   */\n      iszero\n      tag_568\n      jumpi\n        /* \"#utility.yul\":9577:9583   */\n      dup2\n        /* \"#utility.yul\":9569:9575   */\n      dup3\n        /* \"#utility.yul\":9562:9584   */\n      revert\n        /* \"#utility.yul\":9524:9526   */\n    tag_568:\n        /* \"#utility.yul\":9618:9627   */\n      dup3\n        /* \"#utility.yul\":9605:9628   */\n      calldataload\n        /* \"#utility.yul\":9595:9628   */\n      swap2\n      pop\n        /* \"#utility.yul\":9678:9680   */\n      0x20\n        /* \"#utility.yul\":9667:9676   */\n      dup4\n        /* \"#utility.yul\":9663:9681   */\n      add\n        /* \"#utility.yul\":9650:9682   */\n      calldataload\n        /* \"#utility.yul\":9691:9724   */\n      tag_569\n        /* \"#utility.yul\":9718:9723   */\n      dup2\n        /* \"#utility.yul\":9691:9724   */\n      tag_479\n      jump\t// in\n    tag_569:\n        /* \"#utility.yul\":9743:9748   */\n      dup1\n        /* \"#utility.yul\":9733:9748   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":9514:9754   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9759:10298   */\n    tag_51:\n      0x00\n      dup1\n      0x00\n      dup1\n        /* \"#utility.yul\":9922:9925   */\n      0x80\n        /* \"#utility.yul\":9910:9919   */\n      dup6\n        /* \"#utility.yul\":9901:9908   */\n      dup8\n        /* \"#utility.yul\":9897:9920   */\n      sub\n        /* \"#utility.yul\":9893:9926   */\n      slt\n        /* \"#utility.yul\":9890:9892   */\n      iszero\n      tag_571\n      jumpi\n        /* \"#utility.yul\":9944:9950   */\n      dup2\n        /* \"#utility.yul\":9936:9942   */\n      dup3\n        /* \"#utility.yul\":9929:9951   */\n      revert\n        /* \"#utility.yul\":9890:9892   */\n    tag_571:\n        /* \"#utility.yul\":9985:9994   */\n      dup5\n        /* \"#utility.yul\":9972:9995   */\n      calldataload\n        /* \"#utility.yul\":9962:9995   */\n      swap4\n      pop\n        /* \"#utility.yul\":10045:10047   */\n      0x20\n        /* \"#utility.yul\":10034:10043   */\n      dup6\n        /* \"#utility.yul\":10030:10048   */\n      add\n        /* \"#utility.yul\":10017:10049   */\n      calldataload\n        /* \"#utility.yul\":10058:10091   */\n      tag_572\n        /* \"#utility.yul\":10085:10090   */\n      dup2\n        /* \"#utility.yul\":10058:10091   */\n      tag_479\n      jump\t// in\n    tag_572:\n        /* \"#utility.yul\":10110:10115   */\n      swap3\n      pop\n        /* \"#utility.yul\":10162:10164   */\n      0x40\n        /* \"#utility.yul\":10147:10165   */\n      dup6\n      add\n        /* \"#utility.yul\":10134:10166   */\n      calldataload\n      swap2\n      pop\n        /* \"#utility.yul\":10218:10220   */\n      0x60\n        /* \"#utility.yul\":10203:10221   */\n      dup6\n      add\n        /* \"#utility.yul\":10190:10222   */\n      calldataload\n        /* \"#utility.yul\":10231:10266   */\n      tag_573\n        /* \"#utility.yul\":10190:10222   */\n      dup2\n        /* \"#utility.yul\":10231:10266   */\n      tag_479\n      jump\t// in\n    tag_573:\n        /* \"#utility.yul\":9880:10298   */\n      swap4\n      swap7\n      swap3\n      swap6\n      pop\n      swap1\n      swap4\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10303:10562   */\n    tag_574:\n      0x00\n        /* \"#utility.yul\":10384:10389   */\n      dup2\n        /* \"#utility.yul\":10378:10390   */\n      mload\n        /* \"#utility.yul\":10411:10417   */\n      dup1\n        /* \"#utility.yul\":10406:10409   */\n      dup5\n        /* \"#utility.yul\":10399:10418   */\n      mstore\n        /* \"#utility.yul\":10427:10490   */\n      tag_576\n        /* \"#utility.yul\":10483:10489   */\n      dup2\n        /* \"#utility.yul\":10476:10480   */\n      0x20\n        /* \"#utility.yul\":10471:10474   */\n      dup7\n        /* \"#utility.yul\":10467:10481   */\n      add\n        /* \"#utility.yul\":10460:10464   */\n      0x20\n        /* \"#utility.yul\":10453:10458   */\n      dup7\n        /* \"#utility.yul\":10449:10465   */\n      add\n        /* \"#utility.yul\":10427:10490   */\n      tag_532\n      jump\t// in\n    tag_576:\n        /* \"#utility.yul\":10544:10546   */\n      0x1f\n        /* \"#utility.yul\":10523:10538   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":10519:10548   */\n      and\n        /* \"#utility.yul\":10510:10549   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":10551:10555   */\n      0x20\n        /* \"#utility.yul\":10506:10556   */\n      add\n      swap3\n        /* \"#utility.yul\":10354:10562   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10567:10998   */\n    tag_121:\n        /* \"#utility.yul\":10820:10822   */\n      0x60\n        /* \"#utility.yul\":10816:10831   */\n      swap4\n      dup5\n      shl\n      not(0xffffffffffffffffffffffff)\n        /* \"#utility.yul\":10812:10836   */\n      swap1\n      dup2\n      and\n        /* \"#utility.yul\":10800:10837   */\n      dup3\n      mstore\n        /* \"#utility.yul\":10893:10896   */\n      0xe8\n        /* \"#utility.yul\":10871:10887   */\n      swap4\n      swap1\n      swap4\n      shl\n      not(sub(shl(0xe8, 0x01), 0x01))\n        /* \"#utility.yul\":10867:10908   */\n      and\n        /* \"#utility.yul\":10862:10864   */\n      0x14\n        /* \"#utility.yul\":10853:10865   */\n      dup3\n      add\n        /* \"#utility.yul\":10846:10909   */\n      mstore\n        /* \"#utility.yul\":10943:10958   */\n      swap3\n      shl\n        /* \"#utility.yul\":10939:10963   */\n      and\n        /* \"#utility.yul\":10934:10936   */\n      0x17\n        /* \"#utility.yul\":10925:10937   */\n      dup3\n      add\n        /* \"#utility.yul\":10918:10964   */\n      mstore\n        /* \"#utility.yul\":10989:10991   */\n      0x2b\n        /* \"#utility.yul\":10980:10992   */\n      add\n      swap1\n        /* \"#utility.yul\":10740:10998   */\n      jump\t// out\n        /* \"#utility.yul\":11003:11276   */\n    tag_190:\n      0x00\n        /* \"#utility.yul\":11186:11192   */\n      dup3\n        /* \"#utility.yul\":11178:11184   */\n      dup5\n        /* \"#utility.yul\":11173:11176   */\n      dup4\n        /* \"#utility.yul\":11160:11193   */\n      calldatacopy\n        /* \"#utility.yul\":11212:11228   */\n      swap2\n      add\n        /* \"#utility.yul\":11237:11252   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":11212:11228   */\n      swap2\n        /* \"#utility.yul\":11150:11276   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11281:11555   */\n    tag_314:\n      0x00\n        /* \"#utility.yul\":11448:11454   */\n      dup3\n        /* \"#utility.yul\":11442:11455   */\n      mload\n        /* \"#utility.yul\":11464:11517   */\n      tag_580\n        /* \"#utility.yul\":11510:11516   */\n      dup2\n        /* \"#utility.yul\":11505:11508   */\n      dup5\n        /* \"#utility.yul\":11498:11502   */\n      0x20\n        /* \"#utility.yul\":11490:11496   */\n      dup8\n        /* \"#utility.yul\":11486:11503   */\n      add\n        /* \"#utility.yul\":11464:11517   */\n      tag_532\n      jump\t// in\n    tag_580:\n        /* \"#utility.yul\":11533:11549   */\n      swap2\n      swap1\n      swap2\n      add\n      swap3\n        /* \"#utility.yul\":11418:11555   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11560:12063   */\n    tag_474:\n      not(sub(shl(0xf8, 0x01), 0x01))\n        /* \"#utility.yul\":11846:11872   */\n      dup2\n      mstore\n        /* \"#utility.yul\":11909:11911   */\n      0x60\n        /* \"#utility.yul\":11905:11920   */\n      swap4\n      swap1\n      swap4\n      shl\n      not(0xffffffffffffffffffffffff)\n        /* \"#utility.yul\":11901:11954   */\n      and\n        /* \"#utility.yul\":11897:11898   */\n      0x01\n        /* \"#utility.yul\":11888:11899   */\n      dup5\n      add\n        /* \"#utility.yul\":11881:11955   */\n      mstore\n        /* \"#utility.yul\":11980:11982   */\n      0x15\n        /* \"#utility.yul\":11971:11983   */\n      dup4\n      add\n        /* \"#utility.yul\":11964:11992   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":12017:12019   */\n      0x35\n        /* \"#utility.yul\":12008:12020   */\n      dup3\n      add\n        /* \"#utility.yul\":12001:12029   */\n      mstore\n        /* \"#utility.yul\":12054:12056   */\n      0x55\n        /* \"#utility.yul\":12045:12057   */\n      add\n      swap1\n        /* \"#utility.yul\":11836:12063   */\n      jump\t// out\n        /* \"#utility.yul\":12068:12271   */\n    tag_48:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":12232:12264   */\n      swap2\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":12214:12265   */\n      dup2\n      mstore\n        /* \"#utility.yul\":12202:12204   */\n      0x20\n        /* \"#utility.yul\":12187:12205   */\n      add\n      swap1\n        /* \"#utility.yul\":12169:12271   */\n      jump\t// out\n        /* \"#utility.yul\":12492:12804   */\n    tag_172:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":12730:12745   */\n      swap3\n      dup4\n      and\n        /* \"#utility.yul\":12712:12746   */\n      dup2\n      mstore\n        /* \"#utility.yul\":12782:12797   */\n      swap2\n      and\n        /* \"#utility.yul\":12777:12779   */\n      0x20\n        /* \"#utility.yul\":12762:12780   */\n      dup3\n      add\n        /* \"#utility.yul\":12755:12798   */\n      mstore\n        /* \"#utility.yul\":12662:12664   */\n      0x40\n        /* \"#utility.yul\":12647:12665   */\n      add\n      swap1\n        /* \"#utility.yul\":12629:12804   */\n      jump\t// out\n        /* \"#utility.yul\":12809:13569   */\n    tag_128:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":13206:13221   */\n      swap9\n      dup10\n      and\n        /* \"#utility.yul\":13188:13222   */\n      dup2\n      mstore\n        /* \"#utility.yul\":13258:13273   */\n      swap7\n      swap1\n      swap8\n      and\n        /* \"#utility.yul\":13253:13255   */\n      0x20\n        /* \"#utility.yul\":13238:13256   */\n      dup8\n      add\n        /* \"#utility.yul\":13231:13274   */\n      mstore\n        /* \"#utility.yul\":13305:13307   */\n      0x40\n        /* \"#utility.yul\":13290:13308   */\n      dup7\n      add\n        /* \"#utility.yul\":13283:13317   */\n      swap5\n      swap1\n      swap5\n      mstore\n        /* \"#utility.yul\":13348:13350   */\n      0x60\n        /* \"#utility.yul\":13333:13351   */\n      dup6\n      add\n        /* \"#utility.yul\":13326:13360   */\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"#utility.yul\":13404:13418   */\n      iszero\n        /* \"#utility.yul\":13397:13419   */\n      iszero\n        /* \"#utility.yul\":13391:13394   */\n      0x80\n        /* \"#utility.yul\":13376:13395   */\n      dup5\n      add\n        /* \"#utility.yul\":13369:13420   */\n      mstore\n        /* \"#utility.yul\":13469:13473   */\n      0xff\n        /* \"#utility.yul\":13457:13474   */\n      and\n        /* \"#utility.yul\":13168:13171   */\n      0xa0\n        /* \"#utility.yul\":13436:13455   */\n      dup4\n      add\n        /* \"#utility.yul\":13429:13475   */\n      mstore\n        /* \"#utility.yul\":13506:13509   */\n      0xc0\n        /* \"#utility.yul\":13491:13510   */\n      dup3\n      add\n        /* \"#utility.yul\":13484:13519   */\n      mstore\n        /* \"#utility.yul\":13550:13553   */\n      0xe0\n        /* \"#utility.yul\":13535:13554   */\n      dup2\n      add\n        /* \"#utility.yul\":13528:13563   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":13137:13140   */\n      0x0100\n        /* \"#utility.yul\":13122:13141   */\n      add\n      swap1\n        /* \"#utility.yul\":13104:13569   */\n      jump\t// out\n        /* \"#utility.yul\":13574:14252   */\n    tag_285:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":13949:13964   */\n      swap8\n      dup9\n      and\n        /* \"#utility.yul\":13931:13965   */\n      dup2\n      mstore\n        /* \"#utility.yul\":14001:14016   */\n      swap6\n      swap1\n      swap7\n      and\n        /* \"#utility.yul\":13996:13998   */\n      0x20\n        /* \"#utility.yul\":13981:13999   */\n      dup7\n      add\n        /* \"#utility.yul\":13974:14017   */\n      mstore\n        /* \"#utility.yul\":14048:14050   */\n      0x40\n        /* \"#utility.yul\":14033:14051   */\n      dup6\n      add\n        /* \"#utility.yul\":14026:14060   */\n      swap4\n      swap1\n      swap4\n      mstore\n        /* \"#utility.yul\":14091:14093   */\n      0x60\n        /* \"#utility.yul\":14076:14094   */\n      dup5\n      add\n        /* \"#utility.yul\":14069:14103   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":14152:14156   */\n      0xff\n        /* \"#utility.yul\":14140:14157   */\n      and\n        /* \"#utility.yul\":14134:14137   */\n      0x80\n        /* \"#utility.yul\":14119:14138   */\n      dup4\n      add\n        /* \"#utility.yul\":14112:14158   */\n      mstore\n        /* \"#utility.yul\":13911:13914   */\n      0xa0\n        /* \"#utility.yul\":14174:14193   */\n      dup3\n      add\n        /* \"#utility.yul\":14167:14202   */\n      mstore\n        /* \"#utility.yul\":14233:14236   */\n      0xc0\n        /* \"#utility.yul\":14218:14237   */\n      dup2\n      add\n        /* \"#utility.yul\":14211:14246   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":13880:13883   */\n      0xe0\n        /* \"#utility.yul\":13865:13884   */\n      add\n      swap1\n        /* \"#utility.yul\":13847:14252   */\n      jump\t// out\n        /* \"#utility.yul\":14257:14645   */\n    tag_472:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":14513:14528   */\n      swap4\n      dup5\n      and\n        /* \"#utility.yul\":14495:14529   */\n      dup2\n      mstore\n        /* \"#utility.yul\":14565:14580   */\n      swap2\n      swap1\n      swap3\n      and\n        /* \"#utility.yul\":14560:14562   */\n      0x20\n        /* \"#utility.yul\":14545:14563   */\n      dup3\n      add\n        /* \"#utility.yul\":14538:14581   */\n      mstore\n        /* \"#utility.yul\":14629:14637   */\n      0xffffff\n        /* \"#utility.yul\":14617:14638   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":14612:14614   */\n      0x40\n        /* \"#utility.yul\":14597:14615   */\n      dup3\n      add\n        /* \"#utility.yul\":14590:14639   */\n      mstore\n        /* \"#utility.yul\":14445:14447   */\n      0x60\n        /* \"#utility.yul\":14430:14448   */\n      add\n      swap1\n        /* \"#utility.yul\":14412:14645   */\n      jump\t// out\n        /* \"#utility.yul\":14650:15025   */\n    tag_458:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":14908:14923   */\n      swap4\n      dup5\n      and\n        /* \"#utility.yul\":14890:14924   */\n      dup2\n      mstore\n        /* \"#utility.yul\":14960:14975   */\n      swap2\n      swap1\n      swap3\n      and\n        /* \"#utility.yul\":14955:14957   */\n      0x20\n        /* \"#utility.yul\":14940:14958   */\n      dup3\n      add\n        /* \"#utility.yul\":14933:14976   */\n      mstore\n        /* \"#utility.yul\":15007:15009   */\n      0x40\n        /* \"#utility.yul\":14992:15010   */\n      dup2\n      add\n        /* \"#utility.yul\":14985:15019   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":14840:14842   */\n      0x60\n        /* \"#utility.yul\":14825:14843   */\n      add\n      swap1\n        /* \"#utility.yul\":14807:15025   */\n      jump\t// out\n        /* \"#utility.yul\":15030:15600   */\n    tag_336:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":15319:15334   */\n      dup7\n      dup2\n      and\n        /* \"#utility.yul\":15301:15335   */\n      dup3\n      mstore\n        /* \"#utility.yul\":15378:15392   */\n      dup6\n      iszero\n        /* \"#utility.yul\":15371:15393   */\n      iszero\n        /* \"#utility.yul\":15366:15368   */\n      0x20\n        /* \"#utility.yul\":15351:15369   */\n      dup4\n      add\n        /* \"#utility.yul\":15344:15394   */\n      mstore\n        /* \"#utility.yul\":15425:15427   */\n      0x40\n        /* \"#utility.yul\":15410:15428   */\n      dup3\n      add\n        /* \"#utility.yul\":15403:15437   */\n      dup6\n      swap1\n      mstore\n        /* \"#utility.yul\":15473:15488   */\n      dup4\n      and\n        /* \"#utility.yul\":15468:15470   */\n      0x60\n        /* \"#utility.yul\":15453:15471   */\n      dup3\n      add\n        /* \"#utility.yul\":15446:15489   */\n      mstore\n        /* \"#utility.yul\":15281:15284   */\n      0xa0\n        /* \"#utility.yul\":15520:15523   */\n      0x80\n        /* \"#utility.yul\":15505:15524   */\n      dup3\n      add\n        /* \"#utility.yul\":15498:15530   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":15030:15600   */\n      0x00\n      swap1\n        /* \"#utility.yul\":15547:15594   */\n      tag_590\n      swap1\n        /* \"#utility.yul\":15574:15593   */\n      dup4\n      add\n        /* \"#utility.yul\":15566:15572   */\n      dup5\n        /* \"#utility.yul\":15547:15594   */\n      tag_574\n      jump\t// in\n    tag_590:\n        /* \"#utility.yul\":15539:15594   */\n      swap8\n        /* \"#utility.yul\":15253:15600   */\n      swap7\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15605:15879   */\n    tag_375:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":15797:15829   */\n      swap3\n      swap1\n      swap3\n      and\n        /* \"#utility.yul\":15779:15830   */\n      dup3\n      mstore\n        /* \"#utility.yul\":15861:15863   */\n      0x20\n        /* \"#utility.yul\":15846:15864   */\n      dup3\n      add\n        /* \"#utility.yul\":15839:15873   */\n      mstore\n        /* \"#utility.yul\":15767:15769   */\n      0x40\n        /* \"#utility.yul\":15752:15770   */\n      add\n      swap1\n        /* \"#utility.yul\":15734:15879   */\n      jump\t// out\n        /* \"#utility.yul\":15884:16690   */\n    tag_61:\n      0x00\n        /* \"#utility.yul\":16073:16075   */\n      0x20\n        /* \"#utility.yul\":16113:16115   */\n      dup1\n        /* \"#utility.yul\":16102:16111   */\n      dup4\n        /* \"#utility.yul\":16098:16116   */\n      add\n        /* \"#utility.yul\":16143:16145   */\n      dup2\n        /* \"#utility.yul\":16132:16141   */\n      dup5\n        /* \"#utility.yul\":16125:16146   */\n      mstore\n        /* \"#utility.yul\":16166:16172   */\n      dup1\n        /* \"#utility.yul\":16201:16207   */\n      dup6\n        /* \"#utility.yul\":16195:16208   */\n      mload\n        /* \"#utility.yul\":16232:16238   */\n      dup1\n        /* \"#utility.yul\":16224:16230   */\n      dup4\n        /* \"#utility.yul\":16217:16239   */\n      mstore\n        /* \"#utility.yul\":16270:16272   */\n      0x40\n        /* \"#utility.yul\":16259:16268   */\n      dup7\n        /* \"#utility.yul\":16255:16273   */\n      add\n        /* \"#utility.yul\":16248:16273   */\n      swap2\n      pop\n        /* \"#utility.yul\":16333:16335   */\n      0x40\n        /* \"#utility.yul\":16327:16329   */\n      dup5\n        /* \"#utility.yul\":16319:16325   */\n      dup3\n        /* \"#utility.yul\":16315:16330   */\n      mul\n        /* \"#utility.yul\":16304:16313   */\n      dup8\n        /* \"#utility.yul\":16300:16331   */\n      add\n        /* \"#utility.yul\":16296:16336   */\n      add\n        /* \"#utility.yul\":16282:16336   */\n      swap3\n      pop\n        /* \"#utility.yul\":16371:16373   */\n      dup4\n        /* \"#utility.yul\":16363:16369   */\n      dup8\n        /* \"#utility.yul\":16359:16374   */\n      add\n        /* \"#utility.yul\":16392:16396   */\n      dup6\n        /* \"#utility.yul\":16405:16661   */\n    tag_593:\n        /* \"#utility.yul\":16419:16425   */\n      dup3\n        /* \"#utility.yul\":16416:16417   */\n      dup2\n        /* \"#utility.yul\":16413:16426   */\n      lt\n        /* \"#utility.yul\":16405:16661   */\n      iszero\n      tag_595\n      jumpi\n        /* \"#utility.yul\":16512:16514   */\n      0x3f\n        /* \"#utility.yul\":16508:16515   */\n      not\n        /* \"#utility.yul\":16496:16505   */\n      dup9\n        /* \"#utility.yul\":16488:16494   */\n      dup7\n        /* \"#utility.yul\":16484:16506   */\n      sub\n        /* \"#utility.yul\":16480:16516   */\n      add\n        /* \"#utility.yul\":16475:16478   */\n      dup5\n        /* \"#utility.yul\":16468:16517   */\n      mstore\n        /* \"#utility.yul\":16540:16581   */\n      tag_596\n        /* \"#utility.yul\":16574:16580   */\n      dup6\n        /* \"#utility.yul\":16565:16571   */\n      dup4\n        /* \"#utility.yul\":16559:16572   */\n      mload\n        /* \"#utility.yul\":16540:16581   */\n      tag_574\n      jump\t// in\n    tag_596:\n        /* \"#utility.yul\":16530:16581   */\n      swap5\n      pop\n        /* \"#utility.yul\":16639:16651   */\n      swap3\n      dup6\n      add\n      swap3\n        /* \"#utility.yul\":16604:16619   */\n      swap1\n      dup6\n      add\n      swap1\n        /* \"#utility.yul\":16441:16442   */\n      0x01\n        /* \"#utility.yul\":16434:16443   */\n      add\n        /* \"#utility.yul\":16405:16661   */\n      jump(tag_593)\n    tag_595:\n      pop\n        /* \"#utility.yul\":16678:16684   */\n      swap3\n      swap8\n        /* \"#utility.yul\":16053:16690   */\n      swap7\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16695:16916   */\n    tag_199:\n      0x00\n        /* \"#utility.yul\":16844:16846   */\n      0x20\n        /* \"#utility.yul\":16833:16842   */\n      dup3\n        /* \"#utility.yul\":16826:16847   */\n      mstore\n        /* \"#utility.yul\":16864:16910   */\n      tag_493\n        /* \"#utility.yul\":16906:16908   */\n      0x20\n        /* \"#utility.yul\":16895:16904   */\n      dup4\n        /* \"#utility.yul\":16891:16909   */\n      add\n        /* \"#utility.yul\":16883:16889   */\n      dup5\n        /* \"#utility.yul\":16864:16910   */\n      tag_574\n      jump\t// in\n        /* \"#utility.yul\":16921:17263   */\n    tag_142:\n        /* \"#utility.yul\":17123:17125   */\n      0x20\n        /* \"#utility.yul\":17105:17126   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":17162:17164   */\n      0x12\n        /* \"#utility.yul\":17142:17160   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":17135:17165   */\n      mstore\n      shl(0x70, 0x496e73756666696369656e74205745544839)\n        /* \"#utility.yul\":17196:17198   */\n      0x40\n        /* \"#utility.yul\":17181:17199   */\n      dup3\n      add\n        /* \"#utility.yul\":17174:17222   */\n      mstore\n        /* \"#utility.yul\":17254:17256   */\n      0x60\n        /* \"#utility.yul\":17239:17257   */\n      add\n      swap1\n        /* \"#utility.yul\":17095:17263   */\n      jump\t// out\n        /* \"#utility.yul\":17268:17610   */\n    tag_253:\n        /* \"#utility.yul\":17470:17472   */\n      0x20\n        /* \"#utility.yul\":17452:17473   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":17509:17511   */\n      0x12\n        /* \"#utility.yul\":17489:17507   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":17482:17512   */\n      mstore\n      shl(0x71, 0x24b739bab33334b1b4b2b73a103a37b5b2b7)\n        /* \"#utility.yul\":17543:17545   */\n      0x40\n        /* \"#utility.yul\":17528:17546   */\n      dup3\n      add\n        /* \"#utility.yul\":17521:17569   */\n      mstore\n        /* \"#utility.yul\":17601:17603   */\n      0x60\n        /* \"#utility.yul\":17586:17604   */\n      add\n      swap1\n        /* \"#utility.yul\":17442:17610   */\n      jump\t// out\n        /* \"#utility.yul\":17615:17956   */\n    tag_445:\n        /* \"#utility.yul\":17817:17819   */\n      0x20\n        /* \"#utility.yul\":17799:17820   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":17856:17858   */\n      0x11\n        /* \"#utility.yul\":17836:17854   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":17829:17859   */\n      mstore\n      shl(0x78, 0x746f55696e7432345f6f766572666c6f77)\n        /* \"#utility.yul\":17890:17892   */\n      0x40\n        /* \"#utility.yul\":17875:17893   */\n      dup3\n      add\n        /* \"#utility.yul\":17868:17915   */\n      mstore\n        /* \"#utility.yul\":17947:17949   */\n      0x60\n        /* \"#utility.yul\":17932:17950   */\n      add\n      swap1\n        /* \"#utility.yul\":17789:17956   */\n      jump\t// out\n        /* \"#utility.yul\":17961:18287   */\n    tag_320:\n        /* \"#utility.yul\":18163:18165   */\n      0x20\n        /* \"#utility.yul\":18145:18166   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":18202:18203   */\n      0x03\n        /* \"#utility.yul\":18182:18200   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":18175:18204   */\n      mstore\n      shl(0xe8, 0x535445)\n        /* \"#utility.yul\":18235:18237   */\n      0x40\n        /* \"#utility.yul\":18220:18238   */\n      dup3\n      add\n        /* \"#utility.yul\":18213:18246   */\n      mstore\n        /* \"#utility.yul\":18278:18280   */\n      0x60\n        /* \"#utility.yul\":18263:18281   */\n      add\n      swap1\n        /* \"#utility.yul\":18135:18287   */\n      jump\t// out\n        /* \"#utility.yul\":18292:18630   */\n    tag_424:\n        /* \"#utility.yul\":18494:18496   */\n      0x20\n        /* \"#utility.yul\":18476:18497   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":18533:18535   */\n      0x0e\n        /* \"#utility.yul\":18513:18531   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":18506:18536   */\n      mstore\n      shl(0x90, 0x736c6963655f6f766572666c6f77)\n        /* \"#utility.yul\":18567:18569   */\n      0x40\n        /* \"#utility.yul\":18552:18570   */\n      dup3\n      add\n        /* \"#utility.yul\":18545:18589   */\n      mstore\n        /* \"#utility.yul\":18621:18623   */\n      0x60\n        /* \"#utility.yul\":18606:18624   */\n      add\n      swap1\n        /* \"#utility.yul\":18466:18630   */\n      jump\t// out\n        /* \"#utility.yul\":18635:18960   */\n    tag_386:\n        /* \"#utility.yul\":18837:18839   */\n      0x20\n        /* \"#utility.yul\":18819:18840   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":18876:18877   */\n      0x02\n        /* \"#utility.yul\":18856:18874   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":18849:18878   */\n      mstore\n      shl(0xf2, 0x14d5)\n        /* \"#utility.yul\":18909:18911   */\n      0x40\n        /* \"#utility.yul\":18894:18912   */\n      dup3\n      add\n        /* \"#utility.yul\":18887:18919   */\n      mstore\n        /* \"#utility.yul\":18951:18953   */\n      0x60\n        /* \"#utility.yul\":18936:18954   */\n      add\n      swap1\n        /* \"#utility.yul\":18809:18960   */\n      jump\t// out\n        /* \"#utility.yul\":18965:19309   */\n    tag_448:\n        /* \"#utility.yul\":19167:19169   */\n      0x20\n        /* \"#utility.yul\":19149:19170   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":19206:19208   */\n      0x14\n        /* \"#utility.yul\":19186:19204   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":19179:19209   */\n      mstore\n      shl(0x60, 0x746f55696e7432345f6f75744f66426f756e6473)\n        /* \"#utility.yul\":19240:19242   */\n      0x40\n        /* \"#utility.yul\":19225:19243   */\n      dup3\n      add\n        /* \"#utility.yul\":19218:19268   */\n      mstore\n        /* \"#utility.yul\":19300:19302   */\n      0x60\n        /* \"#utility.yul\":19285:19303   */\n      add\n      swap1\n        /* \"#utility.yul\":19139:19309   */\n      jump\t// out\n        /* \"#utility.yul\":19314:19646   */\n    tag_27:\n        /* \"#utility.yul\":19516:19518   */\n      0x20\n        /* \"#utility.yul\":19498:19519   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":19555:19556   */\n      0x09\n        /* \"#utility.yul\":19535:19553   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":19528:19557   */\n      mstore\n      shl(0xb8, 0x4e6f74205745544839)\n        /* \"#utility.yul\":19588:19590   */\n      0x40\n        /* \"#utility.yul\":19573:19591   */\n      dup3\n      add\n        /* \"#utility.yul\":19566:19605   */\n      mstore\n        /* \"#utility.yul\":19637:19639   */\n      0x60\n        /* \"#utility.yul\":19622:19640   */\n      add\n      swap1\n        /* \"#utility.yul\":19488:19646   */\n      jump\t// out\n        /* \"#utility.yul\":19651:19996   */\n    tag_441:\n        /* \"#utility.yul\":19853:19855   */\n      0x20\n        /* \"#utility.yul\":19835:19856   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":19892:19894   */\n      0x15\n        /* \"#utility.yul\":19872:19890   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":19865:19895   */\n      mstore\n      shl(0x58, 0x746f416464726573735f6f75744f66426f756e6473)\n        /* \"#utility.yul\":19926:19928   */\n      0x40\n        /* \"#utility.yul\":19911:19929   */\n      dup3\n      add\n        /* \"#utility.yul\":19904:19955   */\n      mstore\n        /* \"#utility.yul\":19987:19989   */\n      0x60\n        /* \"#utility.yul\":19972:19990   */\n      add\n      swap1\n        /* \"#utility.yul\":19825:19996   */\n      jump\t// out\n        /* \"#utility.yul\":20001:20327   */\n    tag_468:\n        /* \"#utility.yul\":20203:20205   */\n      0x20\n        /* \"#utility.yul\":20185:20206   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":20242:20243   */\n      0x03\n        /* \"#utility.yul\":20222:20240   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":20215:20244   */\n      mstore\n      shl(0xe9, 0x29aa23)\n        /* \"#utility.yul\":20275:20277   */\n      0x40\n        /* \"#utility.yul\":20260:20278   */\n      dup3\n      add\n        /* \"#utility.yul\":20253:20286   */\n      mstore\n        /* \"#utility.yul\":20318:20320   */\n      0x60\n        /* \"#utility.yul\":20303:20321   */\n      add\n      swap1\n        /* \"#utility.yul\":20175:20327   */\n      jump\t// out\n        /* \"#utility.yul\":20332:20674   */\n    tag_244:\n        /* \"#utility.yul\":20534:20536   */\n      0x20\n        /* \"#utility.yul\":20516:20537   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":20573:20575   */\n      0x12\n        /* \"#utility.yul\":20553:20571   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":20546:20576   */\n      mstore\n      shl(0x72, 0x151bdbc81b5d58da081c995c5d595cdd1959)\n        /* \"#utility.yul\":20607:20609   */\n      0x40\n        /* \"#utility.yul\":20592:20610   */\n      dup3\n      add\n        /* \"#utility.yul\":20585:20633   */\n      mstore\n        /* \"#utility.yul\":20665:20667   */\n      0x60\n        /* \"#utility.yul\":20650:20668   */\n      add\n      swap1\n        /* \"#utility.yul\":20506:20674   */\n      jump\t// out\n        /* \"#utility.yul\":20679:21022   */\n    tag_109:\n        /* \"#utility.yul\":20881:20883   */\n      0x20\n        /* \"#utility.yul\":20863:20884   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":20920:20922   */\n      0x13\n        /* \"#utility.yul\":20900:20918   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":20893:20923   */\n      mstore\n      shl(0x6a, 0x151c985b9cd858dd1a5bdb881d1bdbc81bdb19)\n        /* \"#utility.yul\":20954:20956   */\n      0x40\n        /* \"#utility.yul\":20939:20957   */\n      dup3\n      add\n        /* \"#utility.yul\":20932:20981   */\n      mstore\n        /* \"#utility.yul\":21013:21015   */\n      0x60\n        /* \"#utility.yul\":20998:21016   */\n      add\n      swap1\n        /* \"#utility.yul\":20853:21022   */\n      jump\t// out\n        /* \"#utility.yul\":21027:21368   */\n    tag_429:\n        /* \"#utility.yul\":21229:21231   */\n      0x20\n        /* \"#utility.yul\":21211:21232   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":21268:21270   */\n      0x11\n        /* \"#utility.yul\":21248:21266   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":21241:21271   */\n      mstore\n      shl(0x78, 0x736c6963655f6f75744f66426f756e6473)\n        /* \"#utility.yul\":21302:21304   */\n      0x40\n        /* \"#utility.yul\":21287:21305   */\n      dup3\n      add\n        /* \"#utility.yul\":21280:21327   */\n      mstore\n        /* \"#utility.yul\":21359:21361   */\n      0x60\n        /* \"#utility.yul\":21344:21362   */\n      add\n      swap1\n        /* \"#utility.yul\":21201:21368   */\n      jump\t// out\n        /* \"#utility.yul\":21373:21716   */\n    tag_125:\n        /* \"#utility.yul\":21575:21577   */\n      0x20\n        /* \"#utility.yul\":21557:21578   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":21614:21616   */\n      0x13\n        /* \"#utility.yul\":21594:21612   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":21587:21617   */\n      mstore\n      shl(0x6a, 0x151bdbc81b1a5d1d1b19481c9958d95a5d9959)\n        /* \"#utility.yul\":21648:21650   */\n      0x40\n        /* \"#utility.yul\":21633:21651   */\n      dup3\n      add\n        /* \"#utility.yul\":21626:21675   */\n      mstore\n        /* \"#utility.yul\":21707:21709   */\n      0x60\n        /* \"#utility.yul\":21692:21710   */\n      add\n      swap1\n        /* \"#utility.yul\":21547:21716   */\n      jump\t// out\n        /* \"#utility.yul\":21721:22063   */\n    tag_438:\n        /* \"#utility.yul\":21923:21925   */\n      0x20\n        /* \"#utility.yul\":21905:21926   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":21962:21964   */\n      0x12\n        /* \"#utility.yul\":21942:21960   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":21935:21965   */\n      mstore\n      shl(0x70, 0x746f416464726573735f6f766572666c6f77)\n        /* \"#utility.yul\":21996:21998   */\n      0x40\n        /* \"#utility.yul\":21981:21999   */\n      dup3\n      add\n        /* \"#utility.yul\":21974:22022   */\n      mstore\n        /* \"#utility.yul\":22054:22056   */\n      0x60\n        /* \"#utility.yul\":22039:22057   */\n      add\n      swap1\n        /* \"#utility.yul\":21895:22063   */\n      jump\t// out\n        /* \"#utility.yul\":22068:22542   */\n    tag_334:\n      0x00\n        /* \"#utility.yul\":22265:22267   */\n      0x20\n        /* \"#utility.yul\":22254:22263   */\n      dup3\n        /* \"#utility.yul\":22247:22268   */\n      mstore\n        /* \"#utility.yul\":22303:22309   */\n      dup3\n        /* \"#utility.yul\":22297:22310   */\n      mload\n        /* \"#utility.yul\":22346:22350   */\n      0x40\n        /* \"#utility.yul\":22341:22343   */\n      0x20\n        /* \"#utility.yul\":22330:22339   */\n      dup5\n        /* \"#utility.yul\":22326:22344   */\n      add\n        /* \"#utility.yul\":22319:22351   */\n      mstore\n        /* \"#utility.yul\":22374:22426   */\n      tag_615\n        /* \"#utility.yul\":22422:22424   */\n      0x60\n        /* \"#utility.yul\":22411:22420   */\n      dup5\n        /* \"#utility.yul\":22407:22425   */\n      add\n        /* \"#utility.yul\":22393:22405   */\n      dup3\n        /* \"#utility.yul\":22374:22426   */\n      tag_574\n      jump\t// in\n    tag_615:\n        /* \"#utility.yul\":22486:22488   */\n      0x20\n        /* \"#utility.yul\":22474:22489   */\n      swap5\n      swap1\n      swap5\n      add\n        /* \"#utility.yul\":22468:22490   */\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":22464:22512   */\n      and\n        /* \"#utility.yul\":22457:22461   */\n      0x40\n        /* \"#utility.yul\":22442:22462   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":22435:22513   */\n      swap3\n      swap1\n      swap3\n      mstore\n      pop\n        /* \"#utility.yul\":22360:22426   */\n      swap1\n      swap2\n        /* \"#utility.yul\":22237:22542   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":22547:22724   */\n    tag_35:\n        /* \"#utility.yul\":22693:22718   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":22681:22683   */\n      0x20\n        /* \"#utility.yul\":22666:22684   */\n      add\n      swap1\n        /* \"#utility.yul\":22648:22724   */\n      jump\t// out\n        /* \"#utility.yul\":22729:23262   */\n    tag_188:\n      0x00\n      dup1\n        /* \"#utility.yul\":22872:22883   */\n      dup4\n        /* \"#utility.yul\":22859:22884   */\n      calldataload\n        /* \"#utility.yul\":22966:22968   */\n      0x1e\n        /* \"#utility.yul\":22962:22969   */\n      not\n        /* \"#utility.yul\":22951:22959   */\n      dup5\n        /* \"#utility.yul\":22935:22949   */\n      calldatasize\n        /* \"#utility.yul\":22931:22960   */\n      sub\n        /* \"#utility.yul\":22927:22970   */\n      add\n        /* \"#utility.yul\":22907:22925   */\n      dup2\n        /* \"#utility.yul\":22903:22971   */\n      slt\n        /* \"#utility.yul\":22893:22895   */\n      tag_618\n      jumpi\n        /* \"#utility.yul\":22988:22992   */\n      dup3\n        /* \"#utility.yul\":22982:22986   */\n      dup4\n        /* \"#utility.yul\":22975:22993   */\n      revert\n        /* \"#utility.yul\":22893:22895   */\n    tag_618:\n        /* \"#utility.yul\":23018:23051   */\n      dup4\n      add\n        /* \"#utility.yul\":23070:23090   */\n      dup1\n      calldataload\n      swap2\n      pop\n        /* \"#utility.yul\":23113:23131   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":23102:23132   */\n      dup3\n      gt\n        /* \"#utility.yul\":23099:23101   */\n      iszero\n      tag_619\n      jumpi\n        /* \"#utility.yul\":23148:23152   */\n      dup3\n        /* \"#utility.yul\":23142:23146   */\n      dup4\n        /* \"#utility.yul\":23135:23153   */\n      revert\n        /* \"#utility.yul\":23099:23101   */\n    tag_619:\n        /* \"#utility.yul\":23184:23188   */\n      0x20\n        /* \"#utility.yul\":23172:23189   */\n      add\n      swap2\n      pop\n        /* \"#utility.yul\":23215:23229   */\n      calldatasize\n        /* \"#utility.yul\":23211:23238   */\n      dup2\n      swap1\n      sub\n        /* \"#utility.yul\":23201:23239   */\n      dup3\n      sgt\n        /* \"#utility.yul\":23198:23200   */\n      iszero\n      tag_620\n      jumpi\n        /* \"#utility.yul\":23252:23253   */\n      0x00\n        /* \"#utility.yul\":23249:23250   */\n      dup1\n        /* \"#utility.yul\":23242:23254   */\n      revert\n        /* \"#utility.yul\":23198:23200   */\n    tag_620:\n        /* \"#utility.yul\":22823:23262   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":23267:23509   */\n    tag_486:\n        /* \"#utility.yul\":23337:23339   */\n      0x40\n        /* \"#utility.yul\":23331:23340   */\n      mload\n        /* \"#utility.yul\":23367:23384   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":23414:23432   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":23399:23433   */\n      dup2\n      gt\n        /* \"#utility.yul\":23435:23457   */\n      dup3\n      dup3\n      lt\n        /* \"#utility.yul\":23396:23458   */\n      or\n        /* \"#utility.yul\":23393:23395   */\n      iszero\n      tag_622\n      jumpi\n        /* \"#utility.yul\":23461:23470   */\n      invalid\n        /* \"#utility.yul\":23393:23395   */\n    tag_622:\n        /* \"#utility.yul\":23488:23490   */\n      0x40\n        /* \"#utility.yul\":23481:23503   */\n      mstore\n        /* \"#utility.yul\":23311:23509   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":23514:23695   */\n    tag_485:\n      0x00\n        /* \"#utility.yul\":23597:23615   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":23589:23595   */\n      dup3\n        /* \"#utility.yul\":23586:23616   */\n      gt\n        /* \"#utility.yul\":23583:23585   */\n      iszero\n      tag_624\n      jumpi\n        /* \"#utility.yul\":23619:23628   */\n      invalid\n        /* \"#utility.yul\":23583:23585   */\n    tag_624:\n      pop\n        /* \"#utility.yul\":23678:23680   */\n      0x1f\n        /* \"#utility.yul\":23655:23672   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":23651:23682   */\n      and\n        /* \"#utility.yul\":23684:23688   */\n      0x20\n        /* \"#utility.yul\":23647:23689   */\n      add\n      swap1\n        /* \"#utility.yul\":23573:23695   */\n      jump\t// out\n        /* \"#utility.yul\":23700:23958   */\n    tag_532:\n        /* \"#utility.yul\":23772:23773   */\n      0x00\n        /* \"#utility.yul\":23782:23895   */\n    tag_626:\n        /* \"#utility.yul\":23796:23802   */\n      dup4\n        /* \"#utility.yul\":23793:23794   */\n      dup2\n        /* \"#utility.yul\":23790:23803   */\n      lt\n        /* \"#utility.yul\":23782:23895   */\n      iszero\n      tag_628\n      jumpi\n        /* \"#utility.yul\":23872:23883   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":23866:23884   */\n      mload\n        /* \"#utility.yul\":23853:23864   */\n      dup4\n      dup3\n      add\n        /* \"#utility.yul\":23846:23885   */\n      mstore\n        /* \"#utility.yul\":23818:23820   */\n      0x20\n        /* \"#utility.yul\":23811:23821   */\n      add\n        /* \"#utility.yul\":23782:23895   */\n      jump(tag_626)\n    tag_628:\n        /* \"#utility.yul\":23913:23919   */\n      dup4\n        /* \"#utility.yul\":23910:23911   */\n      dup2\n        /* \"#utility.yul\":23907:23920   */\n      gt\n        /* \"#utility.yul\":23904:23906   */\n      iszero\n      tag_255\n      jumpi\n      pop\n      pop\n        /* \"#utility.yul\":23948:23949   */\n      0x00\n        /* \"#utility.yul\":23930:23946   */\n      swap2\n      add\n        /* \"#utility.yul\":23923:23950   */\n      mstore\n        /* \"#utility.yul\":23753:23958   */\n      jump\t// out\n        /* \"#utility.yul\":23963:24096   */\n    tag_479:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":24040:24071   */\n      dup2\n      and\n        /* \"#utility.yul\":24030:24072   */\n      dup2\n      eq\n        /* \"#utility.yul\":24020:24022   */\n      tag_631\n      jumpi\n        /* \"#utility.yul\":24086:24087   */\n      0x00\n        /* \"#utility.yul\":24083:24084   */\n      dup1\n        /* \"#utility.yul\":24076:24088   */\n      revert\n        /* \"#utility.yul\":24020:24022   */\n    tag_631:\n        /* \"#utility.yul\":24010:24096   */\n      pop\n      jump\t// out\n\n    auxdata: 0xa26469706673582212201201df03e515b8d7dc9e629fd1f761e35e5f288d52dbd46cb282386a89e8f93864736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:507:1",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:1",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "76:117:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "86:22:1",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "101:6:1"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "95:5:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "95:13:1"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "86:5:1"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "171:16:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "180:1:1",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "183:1:1",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "173:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "173:12:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "173:12:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "130:5:1"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "141:5:1"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "156:3:1",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "161:1:1",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "152:3:1"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "152:11:1"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "165:1:1",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "148:3:1"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "148:19:1"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "137:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "137:31:1"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "127:2:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "127:42:1"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "120:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "120:50:1"
															},
															"nodeType": "YulIf",
															"src": "117:2:1"
														}
													]
												},
												"name": "abi_decode_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "55:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "66:5:1",
														"type": ""
													}
												],
												"src": "14:179:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "296:209:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "342:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "351:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "359:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "344:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "344:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "344:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "317:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "326:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "313:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "313:23:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "338:2:1",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "309:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "309:32:1"
															},
															"nodeType": "YulIf",
															"src": "306:2:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "377:52:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "419:9:1"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "387:31:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "387:42:1"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "377:6:1"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "438:61:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "484:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "495:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "480:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "480:18:1"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "448:31:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "448:51:1"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "438:6:1"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "254:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "265:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "277:6:1",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "285:6:1",
														"type": ""
													}
												],
												"src": "198:307:1"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_t_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := abi_decode_t_address_fromMemory(headStart)\n        value1 := abi_decode_t_address_fromMemory(add(headStart, 32))\n    }\n}",
									"id": 1,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60c06040526000196000553480156200001757600080fd5b506040516200270f3803806200270f8339810160408190526200003a9162000076565b6001600160601b0319606092831b8116608052911b1660a052620000ad565b80516001600160a01b03811681146200007157600080fd5b919050565b6000806040838503121562000089578182fd5b620000948362000059565b9150620000a46020840162000059565b90509250929050565b60805160601c60a05160601c6126066200010960003980610112528061046c528061053052806105a852806105fe52806106c252806114ac52806114f25280611578525080610ac55280610ee4528061163e52506126066000f3fe6080604052600436106101025760003560e01c8063c04b8d5911610095578063df2ab5bb11610064578063df2ab5bb1461026c578063e0e189a01461027f578063f28c049814610292578063f3995c67146102a5578063fa461e33146102b85761015a565b8063c04b8d591461021e578063c2e3140a14610231578063c45a015514610244578063db3e2198146102595761015a565b80634aa4a4fc116100d15780634aa4a4fc146101b65780639b2c0a37146101d8578063a4a78f0c146101eb578063ac9650d8146101fe5761015a565b806312210e8a1461015f578063414bf389146101675780634659a4941461019057806349404b7c146101a35761015a565b3661015a57336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101585760405162461bcd60e51b815260040161014f90612368565b60405180910390fd5b005b600080fd5b6101586102d8565b61017a610175366004611e1e565b6102ea565b60405161018791906124f1565b60405180910390f35b61015861019e366004611b7c565b6103dd565b6101586101b1366004611f3d565b610452565b3480156101c257600080fd5b506101cb6105a6565b6040516101879190612080565b6101586101e6366004611f6c565b6105ca565b6101586101f9366004611b7c565b610770565b61021161020c366004611bdc565b610806565b60405161018791906121e3565b61017a61022c366004611d73565b610946565b61015861023f366004611b7c565b610a2f565b34801561025057600080fd5b506101cb610ac3565b61017a610267366004611e1e565b610ae7565b61015861027a366004611add565b610be3565b61015861028d366004611b1e565b610c9b565b61017a6102a0366004611e3a565b610d9c565b6101586102b3366004611b7c565b610e67565b3480156102c457600080fd5b506101586102d3366004611c8e565b610e9f565b47156102e8576102e83347610fb2565b565b60008160800135806102fa61103f565b11156103185760405162461bcd60e51b815260040161014f90612403565b6103b160a08401356103306080860160608701611aba565b610341610100870160e08801611aba565b604080518082019091528061035960208a018a611aba565b61036960608b0160408c01611f02565b61037960408c0160208d01611aba565b60405160200161038b93929190611fe1565b6040516020818303038152906040528152602001336001600160a01b0316815250611043565b91508260c001358210156103d75760405162461bcd60e51b815260040161014f9061245b565b50919050565b6040516323f2ebc360e21b81526001600160a01b03871690638fcbaf0c9061041890339030908a908a906001908b908b908b906004016120ae565b600060405180830381600087803b15801561043257600080fd5b505af1158015610446573d6000803e3d6000fd5b50505050505050505050565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906104a1903090600401612080565b60206040518083038186803b1580156104b957600080fd5b505afa1580156104cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f19190611f25565b9050828110156105135760405162461bcd60e51b815260040161014f90612256565b80156105a157604051632e1a7d4d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d906105659084906004016124f1565b600060405180830381600087803b15801561057f57600080fd5b505af1158015610593573d6000803e3d6000fd5b505050506105a18282610fb2565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000821180156105db575060648211155b6105e457600080fd5b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610633903090600401612080565b60206040518083038186803b15801561064b57600080fd5b505afa15801561065f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106839190611f25565b9050848110156106a55760405162461bcd60e51b815260040161014f90612256565b801561076957604051632e1a7d4d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d906106f79084906004016124f1565b600060405180830381600087803b15801561071157600080fd5b505af1158015610725573d6000803e3d6000fd5b505050506000612710610741858461119590919063ffffffff16565b8161074857fe5b049050801561075b5761075b8382610fb2565b61076785828403610fb2565b505b5050505050565b604051636eb1769f60e11b8152600019906001600160a01b0388169063dd62ed3e906107a29033903090600401612094565b60206040518083038186803b1580156107ba57600080fd5b505afa1580156107ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f29190611f25565b1015610767576107678686868686866103dd565b60608167ffffffffffffffff8111801561081f57600080fd5b5060405190808252806020026020018201604052801561085357816020015b606081526020019060019003908161083e5790505b50905060005b8281101561093f576000803086868581811061087157fe5b905060200281019061088391906124fa565b60405161089192919061201c565b600060405180830381855af49150503d80600081146108cc576040519150601f19603f3d011682016040523d82523d6000602084013e6108d1565b606091505b50915091508161091d576044815110156108ea57600080fd5b600481019050808060200190518101906109049190611d09565b60405162461bcd60e51b815260040161014f9190612243565b8084848151811061092a57fe5b60209081029190910101525050600101610859565b5092915050565b600081604001518061095661103f565b11156109745760405162461bcd60e51b815260040161014f90612403565b335b600061098585600001516111bf565b90506109d185606001518261099e5786602001516109a0565b305b600060405180604001604052806109ba8b600001516111cb565b8152602001876001600160a01b0316815250611043565b606086015280156109f15784513092506109ea906111da565b85526109fe565b8460600151935050610a04565b50610976565b8360800151831015610a285760405162461bcd60e51b815260040161014f9061245b565b5050919050565b604051636eb1769f60e11b815285906001600160a01b0388169063dd62ed3e90610a5f9033903090600401612094565b60206040518083038186803b158015610a7757600080fd5b505afa158015610a8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aaf9190611f25565b101561076757610767868686868686610e67565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000816080013580610af761103f565b1115610b155760405162461bcd60e51b815260040161014f90612403565b610bb160a0840135610b2d6080860160608701611aba565b610b3e610100870160e08801611aba565b6040518060400160405280886020016020810190610b5c9190611aba565b610b6c60608b0160408c01611f02565b610b7960208c018c611aba565b604051602001610b8b93929190611fe1565b6040516020818303038152906040528152602001336001600160a01b03168152506111f1565b91508260c00135821115610bd75760405162461bcd60e51b815260040161014f906123d7565b50600019600055919050565b6040516370a0823160e01b81526000906001600160a01b038516906370a0823190610c12903090600401612080565b60206040518083038186803b158015610c2a57600080fd5b505afa158015610c3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c629190611f25565b905082811015610c845760405162461bcd60e51b815260040161014f90612282565b8015610c9557610c9584838361136c565b50505050565b600082118015610cac575060648211155b610cb557600080fd5b6040516370a0823160e01b81526000906001600160a01b038716906370a0823190610ce4903090600401612080565b60206040518083038186803b158015610cfc57600080fd5b505afa158015610d10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d349190611f25565b905084811015610d565760405162461bcd60e51b815260040161014f90612282565b8015610767576000612710610d6b8386611195565b81610d7257fe5b0490508015610d8657610d8687848361136c565b610d93878683850361136c565b50505050505050565b6000816040013580610dac61103f565b1115610dca5760405162461bcd60e51b815260040161014f90612403565b610e3d6060840135610de26040860160208701611aba565b6040805180820190915260009080610dfa89806124fa565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250336020909101526111f1565b5060005491508260800135821115610bd75760405162461bcd60e51b815260040161014f906123d7565b60405163d505accf60e01b81526001600160a01b0387169063d505accf9061041890339030908a908a908a908a908a906004016120f7565b6000841380610eae5750600083135b610eb757600080fd5b6000610ec582840184611e72565b90506000806000610ed9846000015161145a565b925092509250610f0b7f000000000000000000000000000000000000000000000000000000000000000084848461148b565b5060008060008a13610f3257846001600160a01b0316846001600160a01b03161089610f49565b836001600160a01b0316856001600160a01b0316108a5b915091508115610f6857610f6385876020015133846114aa565b610446565b8551610f73906111bf565b15610f98578551610f83906111da565b8652610f9281336000896111f1565b50610446565b8060008190555083945061044685876020015133846114aa565b604080516000808252602082019092526001600160a01b038416908390604051610fdc919061202c565b60006040518083038185875af1925050503d8060008114611019576040519150601f19603f3d011682016040523d82523d6000602084013e61101e565b606091505b50509050806105a15760405162461bcd60e51b815260040161014f906122d9565b4290565b60006001600160a01b038416611057573093505b6000806000611069856000015161145a565b919450925090506001600160a01b038083169084161060008061108d868686611637565b6001600160a01b031663128acb088b856110a68f611675565b6001600160a01b038e16156110bb578d6110e1565b876110da5773fffd8963efd1fc6a506488495d951d5263988d256110e1565b6401000276a45b8d6040516020016110f291906124b4565b6040516020818303038152906040526040518663ffffffff1660e01b8152600401611121959493929190612184565b6040805180830381600087803b15801561113a57600080fd5b505af115801561114e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111729190611c6b565b91509150826111815781611183565b805b6000039b9a5050505050505050505050565b60008215806111b0575050818102818382816111ad57fe5b04145b6111b957600080fd5b92915050565b8051604211155b919050565b60606111b9826000602b61168b565b80516060906111b99083906017906016190161168b565b60006001600160a01b038416611205573093505b6000806000611217856000015161145a565b919450925090506001600160a01b038084169083161060008061123b858786611637565b6001600160a01b031663128acb088b856112548f611675565b6000036001600160a01b038e161561126c578d611292565b8761128b5773fffd8963efd1fc6a506488495d951d5263988d25611292565b6401000276a45b8d6040516020016112a391906124b4565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016112d2959493929190612184565b6040805180830381600087803b1580156112eb57600080fd5b505af11580156112ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113239190611c6b565b9150915060008361133857818360000361133e565b82826000035b90985090506001600160a01b038a1661135d578b811461135d57600080fd5b50505050505050949350505050565b600080846001600160a01b031663a9059cbb60e01b85856040516024016113949291906121ca565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516113d2919061202c565b6000604051808303816000865af19150503d806000811461140f576040519150601f19603f3d011682016040523d82523d6000602084013e611414565b606091505b509150915081801561143e57508051158061143e57508080602001905181019061143e9190611c4b565b6107695760405162461bcd60e51b815260040161014f9061231e565b600080806114688482611767565b92506114758460146117c0565b9050611482846017611767565b91509193909250565b60006114a18561149c868686611812565b611868565b95945050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b03161480156114eb5750804710155b1561160a577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561154b57600080fd5b505af115801561155f573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb92506115b29150859085906004016121ca565b602060405180830381600087803b1580156115cc57600080fd5b505af11580156115e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116049190611c4b565b50610c95565b6001600160a01b03831630141561162b5761162684838361136c565b610c95565b610c958484848461188b565b600061166d7f0000000000000000000000000000000000000000000000000000000000000000611668868686611812565b61197b565b949350505050565b6000600160ff1b821061168757600080fd5b5090565b60608182601f0110156116b05760405162461bcd60e51b815260040161014f906122f6565b8282840110156116d25760405162461bcd60e51b815260040161014f906122f6565b818301845110156116f55760405162461bcd60e51b815260040161014f90612430565b606082158015611714576040519150600082526020820160405261175e565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561174d578051835260209283019201611735565b5050858452601f01601f1916604052505b50949350505050565b60008182601401101561178c5760405162461bcd60e51b815260040161014f90612488565b81601401835110156117b05760405162461bcd60e51b815260040161014f9061238b565b500160200151600160601b900490565b6000818260030110156117e55760405162461bcd60e51b815260040161014f906122ae565b81600301835110156118095760405162461bcd60e51b815260040161014f9061233a565b50016003015190565b61181a611a2c565b826001600160a01b0316846001600160a01b03161115611838579192915b50604080516060810182526001600160a01b03948516815292909316602083015262ffffff169181019190915290565b6000611874838361197b565b9050336001600160a01b038216146111b957600080fd5b600080856001600160a01b03166323b872dd60e01b8686866040516024016118b593929190612160565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516118f3919061202c565b6000604051808303816000865af19150503d8060008114611930576040519150601f19603f3d011682016040523d82523d6000602084013e611935565b606091505b509150915081801561195f57508051158061195f57508080602001905181019061195f9190611c4b565b6107675760405162461bcd60e51b815260040161014f906123ba565b600081602001516001600160a01b031682600001516001600160a01b0316106119a357600080fd5b828260000151836020015184604001516040516020016119c593929190612138565b60408051601f19818403018152908290528051602091820120611a0d939290917fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b549101612048565b60408051601f1981840301815291905280516020909101209392505050565b604080516060810182526000808252602082018190529181019190915290565b80356111c6816125b8565b600082601f830112611a67578081fd5b8135611a7a611a758261256a565b612546565b818152846020838601011115611a8e578283fd5b816020850160208301379081016020019190915292915050565b600061010082840312156103d7578081fd5b600060208284031215611acb578081fd5b8135611ad6816125b8565b9392505050565b600080600060608486031215611af1578182fd5b8335611afc816125b8565b9250602084013591506040840135611b13816125b8565b809150509250925092565b600080600080600060a08688031215611b35578081fd5b8535611b40816125b8565b9450602086013593506040860135611b57816125b8565b9250606086013591506080860135611b6e816125b8565b809150509295509295909350565b60008060008060008060c08789031215611b94578081fd5b8635611b9f816125b8565b95506020870135945060408701359350606087013560ff81168114611bc2578182fd5b9598949750929560808101359460a0909101359350915050565b60008060208385031215611bee578182fd5b823567ffffffffffffffff80821115611c05578384fd5b818501915085601f830112611c18578384fd5b813581811115611c26578485fd5b8660208083028501011115611c39578485fd5b60209290920196919550909350505050565b600060208284031215611c5c578081fd5b81518015158114611ad6578182fd5b60008060408385031215611c7d578182fd5b505080516020909101519092909150565b60008060008060608587031215611ca3578182fd5b8435935060208501359250604085013567ffffffffffffffff80821115611cc8578384fd5b818701915087601f830112611cdb578384fd5b813581811115611ce9578485fd5b886020828501011115611cfa578485fd5b95989497505060200194505050565b600060208284031215611d1a578081fd5b815167ffffffffffffffff811115611d30578182fd5b8201601f81018413611d40578182fd5b8051611d4e611a758261256a565b818152856020838501011115611d62578384fd5b6114a182602083016020860161258c565b600060208284031215611d84578081fd5b813567ffffffffffffffff80821115611d9b578283fd5b9083019060a08286031215611dae578283fd5b60405160a081018181108382111715611dc357fe5b604052823582811115611dd4578485fd5b611de087828601611a57565b825250611def60208401611a4c565b602082015260408301356040820152606083013560608201526080830135608082015280935050505092915050565b60006101008284031215611e30578081fd5b611ad68383611aa8565b600060208284031215611e4b578081fd5b813567ffffffffffffffff811115611e61578182fd5b820160a08185031215611ad6578182fd5b600060208284031215611e83578081fd5b813567ffffffffffffffff80821115611e9a578283fd5b9083019060408286031215611ead578283fd5b604051604081018181108382111715611ec257fe5b604052823582811115611ed3578485fd5b611edf87828601611a57565b82525060208301359250611ef2836125b8565b6020810192909252509392505050565b600060208284031215611f13578081fd5b813562ffffff81168114611ad6578182fd5b600060208284031215611f36578081fd5b5051919050565b60008060408385031215611f4f578182fd5b823591506020830135611f61816125b8565b809150509250929050565b60008060008060808587031215611f81578182fd5b843593506020850135611f93816125b8565b9250604085013591506060850135611faa816125b8565b939692955090935050565b60008151808452611fcd81602086016020860161258c565b601f01601f19169290920160200192915050565b606093841b6bffffffffffffffffffffffff19908116825260e89390931b6001600160e81b0319166014820152921b166017820152602b0190565b6000828483379101908152919050565b6000825161203e81846020870161258c565b9190910192915050565b6001600160f81b0319815260609390931b6bffffffffffffffffffffffff191660018401526015830191909152603582015260550190565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039889168152969097166020870152604086019490945260608501929092521515608084015260ff1660a083015260c082015260e08101919091526101000190565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6001600160a01b03938416815291909216602082015262ffffff909116604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0386811682528515156020830152604082018590528316606082015260a0608082018190526000906121bf90830184611fb5565b979650505050505050565b6001600160a01b03929092168252602082015260400190565b6000602080830181845280855180835260408601915060408482028701019250838701855b8281101561223657603f19888603018452612224858351611fb5565b94509285019290850190600101612208565b5092979650505050505050565b600060208252611ad66020830184611fb5565b602080825260129082015271496e73756666696369656e7420574554483960701b604082015260600190565b60208082526012908201527124b739bab33334b1b4b2b73a103a37b5b2b760711b604082015260600190565b602080825260119082015270746f55696e7432345f6f766572666c6f7760781b604082015260600190565b60208082526003908201526253544560e81b604082015260600190565b6020808252600e908201526d736c6963655f6f766572666c6f7760901b604082015260600190565b60208082526002908201526114d560f21b604082015260600190565b602080825260149082015273746f55696e7432345f6f75744f66426f756e647360601b604082015260600190565b6020808252600990820152684e6f7420574554483960b81b604082015260600190565b602080825260159082015274746f416464726573735f6f75744f66426f756e647360581b604082015260600190565b60208082526003908201526229aa2360e91b604082015260600190565b602080825260129082015271151bdbc81b5d58da081c995c5d595cdd195960721b604082015260600190565b602080825260139082015272151c985b9cd858dd1a5bdb881d1bdbc81bdb19606a1b604082015260600190565b602080825260119082015270736c6963655f6f75744f66426f756e647360781b604082015260600190565b602080825260139082015272151bdbc81b1a5d1d1b19481c9958d95a5d9959606a1b604082015260600190565b602080825260129082015271746f416464726573735f6f766572666c6f7760701b604082015260600190565b6000602082528251604060208401526124d06060840182611fb5565b602094909401516001600160a01b0316604093909301929092525090919050565b90815260200190565b6000808335601e19843603018112612510578283fd5b83018035915067ffffffffffffffff82111561252a578283fd5b60200191503681900382131561253f57600080fd5b9250929050565b60405181810167ffffffffffffffff8111828210171561256257fe5b604052919050565b600067ffffffffffffffff82111561257e57fe5b50601f01601f191660200190565b60005b838110156125a757818101518382015260200161258f565b83811115610c955750506000910152565b6001600160a01b03811681146125cd57600080fd5b5056fea26469706673582212201201df03e515b8d7dc9e629fd1f761e35e5f288d52dbd46cb282386a89e8f93864736f6c63430007060033",
							"opcodes": "PUSH1 0xC0 PUSH1 0x40 MSTORE PUSH1 0x0 NOT PUSH1 0x0 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x270F CODESIZE SUB DUP1 PUSH3 0x270F DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x3A SWAP2 PUSH3 0x76 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT PUSH1 0x60 SWAP3 DUP4 SHL DUP2 AND PUSH1 0x80 MSTORE SWAP2 SHL AND PUSH1 0xA0 MSTORE PUSH3 0xAD JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x89 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH3 0x94 DUP4 PUSH3 0x59 JUMP JUMPDEST SWAP2 POP PUSH3 0xA4 PUSH1 0x20 DUP5 ADD PUSH3 0x59 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0x60 SHR PUSH2 0x2606 PUSH3 0x109 PUSH1 0x0 CODECOPY DUP1 PUSH2 0x112 MSTORE DUP1 PUSH2 0x46C MSTORE DUP1 PUSH2 0x530 MSTORE DUP1 PUSH2 0x5A8 MSTORE DUP1 PUSH2 0x5FE MSTORE DUP1 PUSH2 0x6C2 MSTORE DUP1 PUSH2 0x14AC MSTORE DUP1 PUSH2 0x14F2 MSTORE DUP1 PUSH2 0x1578 MSTORE POP DUP1 PUSH2 0xAC5 MSTORE DUP1 PUSH2 0xEE4 MSTORE DUP1 PUSH2 0x163E MSTORE POP PUSH2 0x2606 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x102 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xC04B8D59 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xDF2AB5BB GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xDF2AB5BB EQ PUSH2 0x26C JUMPI DUP1 PUSH4 0xE0E189A0 EQ PUSH2 0x27F JUMPI DUP1 PUSH4 0xF28C0498 EQ PUSH2 0x292 JUMPI DUP1 PUSH4 0xF3995C67 EQ PUSH2 0x2A5 JUMPI DUP1 PUSH4 0xFA461E33 EQ PUSH2 0x2B8 JUMPI PUSH2 0x15A JUMP JUMPDEST DUP1 PUSH4 0xC04B8D59 EQ PUSH2 0x21E JUMPI DUP1 PUSH4 0xC2E3140A EQ PUSH2 0x231 JUMPI DUP1 PUSH4 0xC45A0155 EQ PUSH2 0x244 JUMPI DUP1 PUSH4 0xDB3E2198 EQ PUSH2 0x259 JUMPI PUSH2 0x15A JUMP JUMPDEST DUP1 PUSH4 0x4AA4A4FC GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x4AA4A4FC EQ PUSH2 0x1B6 JUMPI DUP1 PUSH4 0x9B2C0A37 EQ PUSH2 0x1D8 JUMPI DUP1 PUSH4 0xA4A78F0C EQ PUSH2 0x1EB JUMPI DUP1 PUSH4 0xAC9650D8 EQ PUSH2 0x1FE JUMPI PUSH2 0x15A JUMP JUMPDEST DUP1 PUSH4 0x12210E8A EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0x414BF389 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0x4659A494 EQ PUSH2 0x190 JUMPI DUP1 PUSH4 0x49404B7C EQ PUSH2 0x1A3 JUMPI PUSH2 0x15A JUMP JUMPDEST CALLDATASIZE PUSH2 0x15A JUMPI CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x158 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x2368 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x158 PUSH2 0x2D8 JUMP JUMPDEST PUSH2 0x17A PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E1E JUMP JUMPDEST PUSH2 0x2EA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x187 SWAP2 SWAP1 PUSH2 0x24F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x158 PUSH2 0x19E CALLDATASIZE PUSH1 0x4 PUSH2 0x1B7C JUMP JUMPDEST PUSH2 0x3DD JUMP JUMPDEST PUSH2 0x158 PUSH2 0x1B1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F3D JUMP JUMPDEST PUSH2 0x452 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1CB PUSH2 0x5A6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x187 SWAP2 SWAP1 PUSH2 0x2080 JUMP JUMPDEST PUSH2 0x158 PUSH2 0x1E6 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F6C JUMP JUMPDEST PUSH2 0x5CA JUMP JUMPDEST PUSH2 0x158 PUSH2 0x1F9 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B7C JUMP JUMPDEST PUSH2 0x770 JUMP JUMPDEST PUSH2 0x211 PUSH2 0x20C CALLDATASIZE PUSH1 0x4 PUSH2 0x1BDC JUMP JUMPDEST PUSH2 0x806 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x187 SWAP2 SWAP1 PUSH2 0x21E3 JUMP JUMPDEST PUSH2 0x17A PUSH2 0x22C CALLDATASIZE PUSH1 0x4 PUSH2 0x1D73 JUMP JUMPDEST PUSH2 0x946 JUMP JUMPDEST PUSH2 0x158 PUSH2 0x23F CALLDATASIZE PUSH1 0x4 PUSH2 0x1B7C JUMP JUMPDEST PUSH2 0xA2F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x250 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1CB PUSH2 0xAC3 JUMP JUMPDEST PUSH2 0x17A PUSH2 0x267 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E1E JUMP JUMPDEST PUSH2 0xAE7 JUMP JUMPDEST PUSH2 0x158 PUSH2 0x27A CALLDATASIZE PUSH1 0x4 PUSH2 0x1ADD JUMP JUMPDEST PUSH2 0xBE3 JUMP JUMPDEST PUSH2 0x158 PUSH2 0x28D CALLDATASIZE PUSH1 0x4 PUSH2 0x1B1E JUMP JUMPDEST PUSH2 0xC9B JUMP JUMPDEST PUSH2 0x17A PUSH2 0x2A0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E3A JUMP JUMPDEST PUSH2 0xD9C JUMP JUMPDEST PUSH2 0x158 PUSH2 0x2B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B7C JUMP JUMPDEST PUSH2 0xE67 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x158 PUSH2 0x2D3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C8E JUMP JUMPDEST PUSH2 0xE9F JUMP JUMPDEST SELFBALANCE ISZERO PUSH2 0x2E8 JUMPI PUSH2 0x2E8 CALLER SELFBALANCE PUSH2 0xFB2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x80 ADD CALLDATALOAD DUP1 PUSH2 0x2FA PUSH2 0x103F JUMP JUMPDEST GT ISZERO PUSH2 0x318 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x2403 JUMP JUMPDEST PUSH2 0x3B1 PUSH1 0xA0 DUP5 ADD CALLDATALOAD PUSH2 0x330 PUSH1 0x80 DUP7 ADD PUSH1 0x60 DUP8 ADD PUSH2 0x1ABA JUMP JUMPDEST PUSH2 0x341 PUSH2 0x100 DUP8 ADD PUSH1 0xE0 DUP9 ADD PUSH2 0x1ABA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE DUP1 PUSH2 0x359 PUSH1 0x20 DUP11 ADD DUP11 PUSH2 0x1ABA JUMP JUMPDEST PUSH2 0x369 PUSH1 0x60 DUP12 ADD PUSH1 0x40 DUP13 ADD PUSH2 0x1F02 JUMP JUMPDEST PUSH2 0x379 PUSH1 0x40 DUP13 ADD PUSH1 0x20 DUP14 ADD PUSH2 0x1ABA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x38B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1FE1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP PUSH2 0x1043 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0xC0 ADD CALLDATALOAD DUP3 LT ISZERO PUSH2 0x3D7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x245B JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23F2EBC3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0x8FCBAF0C SWAP1 PUSH2 0x418 SWAP1 CALLER SWAP1 ADDRESS SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP12 SWAP1 DUP12 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x20AE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x432 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x446 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x4A1 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x2080 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4CD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4F1 SWAP2 SWAP1 PUSH2 0x1F25 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0x513 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x2256 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x5A1 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x565 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x24F1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x57F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x593 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x5A1 DUP3 DUP3 PUSH2 0xFB2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP3 GT DUP1 ISZERO PUSH2 0x5DB JUMPI POP PUSH1 0x64 DUP3 GT ISZERO JUMPDEST PUSH2 0x5E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x633 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x2080 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x64B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x65F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x683 SWAP2 SWAP1 PUSH2 0x1F25 JUMP JUMPDEST SWAP1 POP DUP5 DUP2 LT ISZERO PUSH2 0x6A5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x2256 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x769 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x6F7 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x24F1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x711 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x725 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 PUSH2 0x2710 PUSH2 0x741 DUP6 DUP5 PUSH2 0x1195 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP2 PUSH2 0x748 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP1 ISZERO PUSH2 0x75B JUMPI PUSH2 0x75B DUP4 DUP3 PUSH2 0xFB2 JUMP JUMPDEST PUSH2 0x767 DUP6 DUP3 DUP5 SUB PUSH2 0xFB2 JUMP JUMPDEST POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 NOT SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH2 0x7A2 SWAP1 CALLER SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x2094 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7CE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7F2 SWAP2 SWAP1 PUSH2 0x1F25 JUMP JUMPDEST LT ISZERO PUSH2 0x767 JUMPI PUSH2 0x767 DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0x3DD JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x81F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x853 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x83E JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x93F JUMPI PUSH1 0x0 DUP1 ADDRESS DUP7 DUP7 DUP6 DUP2 DUP2 LT PUSH2 0x871 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x883 SWAP2 SWAP1 PUSH2 0x24FA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x891 SWAP3 SWAP2 SWAP1 PUSH2 0x201C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x8CC JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x8D1 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x91D JUMPI PUSH1 0x44 DUP2 MLOAD LT ISZERO PUSH2 0x8EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 DUP2 ADD SWAP1 POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x904 SWAP2 SWAP1 PUSH2 0x1D09 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP2 SWAP1 PUSH2 0x2243 JUMP JUMPDEST DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x92A JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0x859 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x40 ADD MLOAD DUP1 PUSH2 0x956 PUSH2 0x103F JUMP JUMPDEST GT ISZERO PUSH2 0x974 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x2403 JUMP JUMPDEST CALLER JUMPDEST PUSH1 0x0 PUSH2 0x985 DUP6 PUSH1 0x0 ADD MLOAD PUSH2 0x11BF JUMP JUMPDEST SWAP1 POP PUSH2 0x9D1 DUP6 PUSH1 0x60 ADD MLOAD DUP3 PUSH2 0x99E JUMPI DUP7 PUSH1 0x20 ADD MLOAD PUSH2 0x9A0 JUMP JUMPDEST ADDRESS JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x9BA DUP12 PUSH1 0x0 ADD MLOAD PUSH2 0x11CB JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP PUSH2 0x1043 JUMP JUMPDEST PUSH1 0x60 DUP7 ADD MSTORE DUP1 ISZERO PUSH2 0x9F1 JUMPI DUP5 MLOAD ADDRESS SWAP3 POP PUSH2 0x9EA SWAP1 PUSH2 0x11DA JUMP JUMPDEST DUP6 MSTORE PUSH2 0x9FE JUMP JUMPDEST DUP5 PUSH1 0x60 ADD MLOAD SWAP4 POP POP PUSH2 0xA04 JUMP JUMPDEST POP PUSH2 0x976 JUMP JUMPDEST DUP4 PUSH1 0x80 ADD MLOAD DUP4 LT ISZERO PUSH2 0xA28 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x245B JUMP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE DUP6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH2 0xA5F SWAP1 CALLER SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x2094 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA8B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xAAF SWAP2 SWAP1 PUSH2 0x1F25 JUMP JUMPDEST LT ISZERO PUSH2 0x767 JUMPI PUSH2 0x767 DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0xE67 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x80 ADD CALLDATALOAD DUP1 PUSH2 0xAF7 PUSH2 0x103F JUMP JUMPDEST GT ISZERO PUSH2 0xB15 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x2403 JUMP JUMPDEST PUSH2 0xBB1 PUSH1 0xA0 DUP5 ADD CALLDATALOAD PUSH2 0xB2D PUSH1 0x80 DUP7 ADD PUSH1 0x60 DUP8 ADD PUSH2 0x1ABA JUMP JUMPDEST PUSH2 0xB3E PUSH2 0x100 DUP8 ADD PUSH1 0xE0 DUP9 ADD PUSH2 0x1ABA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x20 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xB5C SWAP2 SWAP1 PUSH2 0x1ABA JUMP JUMPDEST PUSH2 0xB6C PUSH1 0x60 DUP12 ADD PUSH1 0x40 DUP13 ADD PUSH2 0x1F02 JUMP JUMPDEST PUSH2 0xB79 PUSH1 0x20 DUP13 ADD DUP13 PUSH2 0x1ABA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xB8B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1FE1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP PUSH2 0x11F1 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0xC0 ADD CALLDATALOAD DUP3 GT ISZERO PUSH2 0xBD7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x23D7 JUMP JUMPDEST POP PUSH1 0x0 NOT PUSH1 0x0 SSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0xC12 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x2080 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC2A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC3E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC62 SWAP2 SWAP1 PUSH2 0x1F25 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0xC84 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x2282 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xC95 JUMPI PUSH2 0xC95 DUP5 DUP4 DUP4 PUSH2 0x136C JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 GT DUP1 ISZERO PUSH2 0xCAC JUMPI POP PUSH1 0x64 DUP3 GT ISZERO JUMPDEST PUSH2 0xCB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0xCE4 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x2080 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD10 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD34 SWAP2 SWAP1 PUSH2 0x1F25 JUMP JUMPDEST SWAP1 POP DUP5 DUP2 LT ISZERO PUSH2 0xD56 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x2282 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x767 JUMPI PUSH1 0x0 PUSH2 0x2710 PUSH2 0xD6B DUP4 DUP7 PUSH2 0x1195 JUMP JUMPDEST DUP2 PUSH2 0xD72 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP1 ISZERO PUSH2 0xD86 JUMPI PUSH2 0xD86 DUP8 DUP5 DUP4 PUSH2 0x136C JUMP JUMPDEST PUSH2 0xD93 DUP8 DUP7 DUP4 DUP6 SUB PUSH2 0x136C JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x40 ADD CALLDATALOAD DUP1 PUSH2 0xDAC PUSH2 0x103F JUMP JUMPDEST GT ISZERO PUSH2 0xDCA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x2403 JUMP JUMPDEST PUSH2 0xE3D PUSH1 0x60 DUP5 ADD CALLDATALOAD PUSH2 0xDE2 PUSH1 0x40 DUP7 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1ABA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 SWAP1 DUP1 PUSH2 0xDFA DUP10 DUP1 PUSH2 0x24FA JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP POP SWAP1 DUP3 MSTORE POP CALLER PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE PUSH2 0x11F1 JUMP JUMPDEST POP PUSH1 0x0 SLOAD SWAP2 POP DUP3 PUSH1 0x80 ADD CALLDATALOAD DUP3 GT ISZERO PUSH2 0xBD7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x23D7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xD505ACCF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0xD505ACCF SWAP1 PUSH2 0x418 SWAP1 CALLER SWAP1 ADDRESS SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x20F7 JUMP JUMPDEST PUSH1 0x0 DUP5 SGT DUP1 PUSH2 0xEAE JUMPI POP PUSH1 0x0 DUP4 SGT JUMPDEST PUSH2 0xEB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xEC5 DUP3 DUP5 ADD DUP5 PUSH2 0x1E72 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xED9 DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0x145A JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0xF0B PUSH32 0x0 DUP5 DUP5 DUP5 PUSH2 0x148B JUMP JUMPDEST POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP11 SGT PUSH2 0xF32 JUMPI DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT DUP10 PUSH2 0xF49 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT DUP11 JUMPDEST SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0xF68 JUMPI PUSH2 0xF63 DUP6 DUP8 PUSH1 0x20 ADD MLOAD CALLER DUP5 PUSH2 0x14AA JUMP JUMPDEST PUSH2 0x446 JUMP JUMPDEST DUP6 MLOAD PUSH2 0xF73 SWAP1 PUSH2 0x11BF JUMP JUMPDEST ISZERO PUSH2 0xF98 JUMPI DUP6 MLOAD PUSH2 0xF83 SWAP1 PUSH2 0x11DA JUMP JUMPDEST DUP7 MSTORE PUSH2 0xF92 DUP2 CALLER PUSH1 0x0 DUP10 PUSH2 0x11F1 JUMP JUMPDEST POP PUSH2 0x446 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 SWAP1 SSTORE POP DUP4 SWAP5 POP PUSH2 0x446 DUP6 DUP8 PUSH1 0x20 ADD MLOAD CALLER DUP5 PUSH2 0x14AA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP4 SWAP1 PUSH1 0x40 MLOAD PUSH2 0xFDC SWAP2 SWAP1 PUSH2 0x202C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1019 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x101E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x5A1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x22D9 JUMP JUMPDEST TIMESTAMP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1057 JUMPI ADDRESS SWAP4 POP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1069 DUP6 PUSH1 0x0 ADD MLOAD PUSH2 0x145A JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND SWAP1 DUP5 AND LT PUSH1 0x0 DUP1 PUSH2 0x108D DUP7 DUP7 DUP7 PUSH2 0x1637 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x128ACB08 DUP12 DUP6 PUSH2 0x10A6 DUP16 PUSH2 0x1675 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 AND ISZERO PUSH2 0x10BB JUMPI DUP14 PUSH2 0x10E1 JUMP JUMPDEST DUP8 PUSH2 0x10DA JUMPI PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D25 PUSH2 0x10E1 JUMP JUMPDEST PUSH5 0x1000276A4 JUMPDEST DUP14 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x10F2 SWAP2 SWAP1 PUSH2 0x24B4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1121 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2184 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x113A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x114E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1172 SWAP2 SWAP1 PUSH2 0x1C6B JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP3 PUSH2 0x1181 JUMPI DUP2 PUSH2 0x1183 JUMP JUMPDEST DUP1 JUMPDEST PUSH1 0x0 SUB SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0x11B0 JUMPI POP POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0x11AD JUMPI INVALID JUMPDEST DIV EQ JUMPDEST PUSH2 0x11B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x42 GT ISZERO JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x11B9 DUP3 PUSH1 0x0 PUSH1 0x2B PUSH2 0x168B JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 PUSH2 0x11B9 SWAP1 DUP4 SWAP1 PUSH1 0x17 SWAP1 PUSH1 0x16 NOT ADD PUSH2 0x168B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1205 JUMPI ADDRESS SWAP4 POP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1217 DUP6 PUSH1 0x0 ADD MLOAD PUSH2 0x145A JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND SWAP1 DUP4 AND LT PUSH1 0x0 DUP1 PUSH2 0x123B DUP6 DUP8 DUP7 PUSH2 0x1637 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x128ACB08 DUP12 DUP6 PUSH2 0x1254 DUP16 PUSH2 0x1675 JUMP JUMPDEST PUSH1 0x0 SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 AND ISZERO PUSH2 0x126C JUMPI DUP14 PUSH2 0x1292 JUMP JUMPDEST DUP8 PUSH2 0x128B JUMPI PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D25 PUSH2 0x1292 JUMP JUMPDEST PUSH5 0x1000276A4 JUMPDEST DUP14 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x12A3 SWAP2 SWAP1 PUSH2 0x24B4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12D2 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2184 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x12EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x12FF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1323 SWAP2 SWAP1 PUSH2 0x1C6B JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP4 PUSH2 0x1338 JUMPI DUP2 DUP4 PUSH1 0x0 SUB PUSH2 0x133E JUMP JUMPDEST DUP3 DUP3 PUSH1 0x0 SUB JUMPDEST SWAP1 SWAP9 POP SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH2 0x135D JUMPI DUP12 DUP2 EQ PUSH2 0x135D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1394 SWAP3 SWAP2 SWAP1 PUSH2 0x21CA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x13D2 SWAP2 SWAP1 PUSH2 0x202C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x140F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1414 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x143E JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0x143E JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x143E SWAP2 SWAP1 PUSH2 0x1C4B JUMP JUMPDEST PUSH2 0x769 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x231E JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x1468 DUP5 DUP3 PUSH2 0x1767 JUMP JUMPDEST SWAP3 POP PUSH2 0x1475 DUP5 PUSH1 0x14 PUSH2 0x17C0 JUMP JUMPDEST SWAP1 POP PUSH2 0x1482 DUP5 PUSH1 0x17 PUSH2 0x1767 JUMP JUMPDEST SWAP2 POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14A1 DUP6 PUSH2 0x149C DUP7 DUP7 DUP7 PUSH2 0x1812 JUMP JUMPDEST PUSH2 0x1868 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x14EB JUMPI POP DUP1 SELFBALANCE LT ISZERO JUMPDEST ISZERO PUSH2 0x160A JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x154B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x155F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP4 POP PUSH4 0xA9059CBB SWAP3 POP PUSH2 0x15B2 SWAP2 POP DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x21CA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x15CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x15E0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1604 SWAP2 SWAP1 PUSH2 0x1C4B JUMP JUMPDEST POP PUSH2 0xC95 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ADDRESS EQ ISZERO PUSH2 0x162B JUMPI PUSH2 0x1626 DUP5 DUP4 DUP4 PUSH2 0x136C JUMP JUMPDEST PUSH2 0xC95 JUMP JUMPDEST PUSH2 0xC95 DUP5 DUP5 DUP5 DUP5 PUSH2 0x188B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x166D PUSH32 0x0 PUSH2 0x1668 DUP7 DUP7 DUP7 PUSH2 0x1812 JUMP JUMPDEST PUSH2 0x197B JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0xFF SHL DUP3 LT PUSH2 0x1687 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 DUP3 PUSH1 0x1F ADD LT ISZERO PUSH2 0x16B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x22F6 JUMP JUMPDEST DUP3 DUP3 DUP5 ADD LT ISZERO PUSH2 0x16D2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x22F6 JUMP JUMPDEST DUP2 DUP4 ADD DUP5 MLOAD LT ISZERO PUSH2 0x16F5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x2430 JUMP JUMPDEST PUSH1 0x60 DUP3 ISZERO DUP1 ISZERO PUSH2 0x1714 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x0 DUP3 MSTORE PUSH1 0x20 DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x175E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F DUP5 AND DUP1 ISZERO PUSH1 0x20 MUL DUP2 DUP5 ADD ADD DUP6 DUP2 ADD DUP8 DUP4 ISZERO PUSH1 0x20 MUL DUP5 DUP12 ADD ADD ADD JUMPDEST DUP2 DUP4 LT ISZERO PUSH2 0x174D JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x1735 JUMP JUMPDEST POP POP DUP6 DUP5 MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x40 MSTORE POP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP3 PUSH1 0x14 ADD LT ISZERO PUSH2 0x178C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x2488 JUMP JUMPDEST DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH2 0x17B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x238B JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP3 PUSH1 0x3 ADD LT ISZERO PUSH2 0x17E5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x22AE JUMP JUMPDEST DUP2 PUSH1 0x3 ADD DUP4 MLOAD LT ISZERO PUSH2 0x1809 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x233A JUMP JUMPDEST POP ADD PUSH1 0x3 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH2 0x181A PUSH2 0x1A2C JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x1838 JUMPI SWAP2 SWAP3 SWAP2 JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 SWAP1 SWAP4 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH3 0xFFFFFF AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1874 DUP4 DUP4 PUSH2 0x197B JUMP JUMPDEST SWAP1 POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ PUSH2 0x11B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x18B5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2160 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x18F3 SWAP2 SWAP1 PUSH2 0x202C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1930 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1935 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x195F JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0x195F JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x195F SWAP2 SWAP1 PUSH2 0x1C4B JUMP JUMPDEST PUSH2 0x767 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x23BA JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT PUSH2 0x19A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP3 PUSH1 0x0 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x19C5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2138 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH2 0x1A0D SWAP4 SWAP3 SWAP1 SWAP2 PUSH32 0xE34F199B19B2B4F47F68442619D555527D244F78A3297EA89325F843F87B8B54 SWAP2 ADD PUSH2 0x2048 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x11C6 DUP2 PUSH2 0x25B8 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1A67 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1A7A PUSH2 0x1A75 DUP3 PUSH2 0x256A JUMP JUMPDEST PUSH2 0x2546 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x1A8E JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY SWAP1 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3D7 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1ACB JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1AD6 DUP2 PUSH2 0x25B8 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1AF1 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x1AFC DUP2 PUSH2 0x25B8 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x1B13 DUP2 PUSH2 0x25B8 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1B35 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x1B40 DUP2 PUSH2 0x25B8 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x1B57 DUP2 PUSH2 0x25B8 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH2 0x1B6E DUP2 PUSH2 0x25B8 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1B94 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x1B9F DUP2 PUSH2 0x25B8 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x1BC2 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 PUSH1 0x80 DUP2 ADD CALLDATALOAD SWAP5 PUSH1 0xA0 SWAP1 SWAP2 ADD CALLDATALOAD SWAP4 POP SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1BEE JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1C05 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1C18 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1C26 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x1C39 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C5C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1AD6 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C7D JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1CA3 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1CC8 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1CDB JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1CE9 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1CFA JUMPI DUP5 DUP6 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP POP PUSH1 0x20 ADD SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D1A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1D30 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0x1D40 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x1D4E PUSH2 0x1A75 DUP3 PUSH2 0x256A JUMP JUMPDEST DUP2 DUP2 MSTORE DUP6 PUSH1 0x20 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0x1D62 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x14A1 DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x258C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D84 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1D9B JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0xA0 DUP3 DUP7 SUB SLT ISZERO PUSH2 0x1DAE JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xA0 DUP2 ADD DUP2 DUP2 LT DUP4 DUP3 GT OR ISZERO PUSH2 0x1DC3 JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE DUP3 CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x1DD4 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x1DE0 DUP8 DUP3 DUP7 ADD PUSH2 0x1A57 JUMP JUMPDEST DUP3 MSTORE POP PUSH2 0x1DEF PUSH1 0x20 DUP5 ADD PUSH2 0x1A4C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE DUP1 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E30 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1AD6 DUP4 DUP4 PUSH2 0x1AA8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E4B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1E61 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 ADD PUSH1 0xA0 DUP2 DUP6 SUB SLT ISZERO PUSH2 0x1AD6 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E83 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1E9A JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0x40 DUP3 DUP7 SUB SLT ISZERO PUSH2 0x1EAD JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD DUP2 DUP2 LT DUP4 DUP3 GT OR ISZERO PUSH2 0x1EC2 JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE DUP3 CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x1ED3 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x1EDF DUP8 DUP3 DUP7 ADD PUSH2 0x1A57 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP3 POP PUSH2 0x1EF2 DUP4 PUSH2 0x25B8 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F13 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1AD6 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F36 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1F4F JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1F61 DUP2 PUSH2 0x25B8 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1F81 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x1F93 DUP2 PUSH2 0x25B8 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x1FAA DUP2 PUSH2 0x25B8 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1FCD DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x258C JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 SWAP4 DUP5 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0xE8 SWAP4 SWAP1 SWAP4 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE8 SHL SUB NOT AND PUSH1 0x14 DUP3 ADD MSTORE SWAP3 SHL AND PUSH1 0x17 DUP3 ADD MSTORE PUSH1 0x2B ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x203E DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x258C JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP4 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 DUP5 ADD MSTORE PUSH1 0x15 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x35 DUP3 ADD MSTORE PUSH1 0x55 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP9 DUP10 AND DUP2 MSTORE SWAP7 SWAP1 SWAP8 AND PUSH1 0x20 DUP8 ADD MSTORE PUSH1 0x40 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x60 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE ISZERO ISZERO PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xFF AND PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x100 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP8 DUP9 AND DUP2 MSTORE SWAP6 SWAP1 SWAP7 AND PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xFF AND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xE0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH3 0xFFFFFF SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 ISZERO ISZERO PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD DUP6 SWAP1 MSTORE DUP4 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x21BF SWAP1 DUP4 ADD DUP5 PUSH2 0x1FB5 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP5 DUP3 MUL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2236 JUMPI PUSH1 0x3F NOT DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x2224 DUP6 DUP4 MLOAD PUSH2 0x1FB5 JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2208 JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x1AD6 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1FB5 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH18 0x496E73756666696369656E74205745544839 PUSH1 0x70 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH18 0x24B739BAB33334B1B4B2B73A103A37B5B2B7 PUSH1 0x71 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x746F55696E7432345F6F766572666C6F77 PUSH1 0x78 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3 SWAP1 DUP3 ADD MSTORE PUSH3 0x535445 PUSH1 0xE8 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH14 0x736C6963655F6F766572666C6F77 PUSH1 0x90 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2 SWAP1 DUP3 ADD MSTORE PUSH2 0x14D5 PUSH1 0xF2 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH20 0x746F55696E7432345F6F75744F66426F756E6473 PUSH1 0x60 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x9 SWAP1 DUP3 ADD MSTORE PUSH9 0x4E6F74205745544839 PUSH1 0xB8 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH21 0x746F416464726573735F6F75744F66426F756E6473 PUSH1 0x58 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3 SWAP1 DUP3 ADD MSTORE PUSH3 0x29AA23 PUSH1 0xE9 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH18 0x151BDBC81B5D58DA081C995C5D595CDD1959 PUSH1 0x72 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH19 0x151C985B9CD858DD1A5BDB881D1BDBC81BDB19 PUSH1 0x6A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x736C6963655F6F75744F66426F756E6473 PUSH1 0x78 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH19 0x151BDBC81B1A5D1D1B19481C9958D95A5D9959 PUSH1 0x6A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH18 0x746F416464726573735F6F766572666C6F77 PUSH1 0x70 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 MLOAD PUSH1 0x40 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x24D0 PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x1FB5 JUMP JUMPDEST PUSH1 0x20 SWAP5 SWAP1 SWAP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x2510 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x252A JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x253F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x2562 JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x257E JUMPI INVALID JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x25A7 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x258F JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xC95 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x25CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLT ADD 0xDF SUB 0xE5 ISZERO 0xB8 0xD7 0xDC SWAP15 PUSH3 0x9FD1F7 PUSH2 0xE35E 0x5F 0x28 DUP14 MSTORE 0xDB 0xD4 PUSH13 0xB282386A89E8F93864736F6C63 NUMBER STOP SMOD MOD STOP CALLER ",
							"sourceMap": "77153:8562:0:-:0;;;-1:-1:-1;;77732:57:0;;77798:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;31755:18:0;;;;;;;;31784:14;;;;;77153:8562;;14:179:1;95:13;;-1:-1:-1;;;;;137:31:1;;127:42;;117:2;;183:1;180;173:12;117:2;76:117;;;:::o;198:307::-;;;338:2;326:9;317:7;313:23;309:32;306:2;;;359:6;351;344:22;306:2;387:42;419:9;387:42;:::i;:::-;377:52;;448:51;495:2;484:9;480:18;448:51;:::i;:::-;438:61;;296:209;;;;;:::o;:::-;77153:8562:0;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:24098:1",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:1",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "65:87:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "75:29:1",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "97:6:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "84:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "84:20:1"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "75:5:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "140:5:1"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "113:26:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "113:33:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "113:33:1"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "44:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "55:5:1",
														"type": ""
													}
												],
												"src": "14:138:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "211:431:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "260:24:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "269:5:1"
																				},
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "276:5:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "262:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "262:20:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "262:20:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "239:6:1"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "247:4:1",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "235:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "235:17:1"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "254:3:1"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "231:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "231:27:1"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "224:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "224:35:1"
															},
															"nodeType": "YulIf",
															"src": "221:2:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "293:30:1",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "316:6:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "303:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "303:20:1"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "297:2:1",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "332:64:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "392:2:1"
																			}
																		],
																		"functionName": {
																			"name": "array_allocation_size_t_bytes",
																			"nodeType": "YulIdentifier",
																			"src": "362:29:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "362:33:1"
																	}
																],
																"functionName": {
																	"name": "allocateMemory",
																	"nodeType": "YulIdentifier",
																	"src": "347:14:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "347:49:1"
															},
															"variables": [
																{
																	"name": "array_1",
																	"nodeType": "YulTypedName",
																	"src": "336:7:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "array_1",
																		"nodeType": "YulIdentifier",
																		"src": "412:7:1"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "421:2:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "405:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "405:19:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "405:19:1"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "472:24:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "481:5:1"
																				},
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "488:5:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "474:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "474:20:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "474:20:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "447:6:1"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "455:2:1"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "443:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "443:15:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "460:4:1",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "439:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "439:26:1"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "467:3:1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "436:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "436:35:1"
															},
															"nodeType": "YulIf",
															"src": "433:2:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "array_1",
																				"nodeType": "YulIdentifier",
																				"src": "522:7:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "531:4:1",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "518:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "518:18:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "542:6:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "550:4:1",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "538:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "538:17:1"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "557:2:1"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nodeType": "YulIdentifier",
																	"src": "505:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "505:55:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "505:55:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "array_1",
																						"nodeType": "YulIdentifier",
																						"src": "584:7:1"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "593:2:1"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "580:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "580:16:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "598:4:1",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "576:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "576:27:1"
																	},
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "605:5:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "569:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "569:42:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "569:42:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "620:16:1",
															"value": {
																"name": "array_1",
																"nodeType": "YulIdentifier",
																"src": "629:7:1"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "620:5:1"
																}
															]
														}
													]
												},
												"name": "abi_decode_t_bytes",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "185:6:1",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "193:3:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "201:5:1",
														"type": ""
													}
												],
												"src": "157:485:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "735:94:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "775:24:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value",
																					"nodeType": "YulIdentifier",
																					"src": "784:5:1"
																				},
																				{
																					"name": "value",
																					"nodeType": "YulIdentifier",
																					"src": "791:5:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "777:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "777:20:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "777:20:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "756:3:1"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "761:6:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "752:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "752:16:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "770:3:1",
																		"type": "",
																		"value": "256"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "748:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "748:26:1"
															},
															"nodeType": "YulIf",
															"src": "745:2:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "808:15:1",
															"value": {
																"name": "offset",
																"nodeType": "YulIdentifier",
																"src": "817:6:1"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "808:5:1"
																}
															]
														}
													]
												},
												"name": "abi_decode_t_struct$_ExactInputSingleParams_calldata",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "709:6:1",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "717:3:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "725:5:1",
														"type": ""
													}
												],
												"src": "647:182:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "904:189:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "950:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "959:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "967:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "952:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "952:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "952:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "925:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "934:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "921:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "921:23:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "946:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "917:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "917:32:1"
															},
															"nodeType": "YulIf",
															"src": "914:2:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "985:36:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1011:9:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "998:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "998:23:1"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "989:5:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1057:5:1"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "1030:26:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1030:33:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1030:33:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1072:15:1",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1082:5:1"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1072:6:1"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "870:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "881:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "893:6:1",
														"type": ""
													}
												],
												"src": "834:259:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1202:366:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1248:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "1257:6:1"
																				},
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "1265:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1250:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1250:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1250:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1223:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1232:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1219:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1219:23:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1244:2:1",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1215:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1215:32:1"
															},
															"nodeType": "YulIf",
															"src": "1212:2:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1283:36:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1309:9:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1296:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1296:23:1"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "1287:5:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1355:5:1"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "1328:26:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1328:33:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1328:33:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1370:15:1",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1380:5:1"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1370:6:1"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1394:42:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1421:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1432:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1417:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1417:18:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1404:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1404:32:1"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1394:6:1"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1445:47:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1477:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1488:2:1",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1473:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1473:18:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1460:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1460:32:1"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nodeType": "YulTypedName",
																	"src": "1449:7:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value_1",
																		"nodeType": "YulIdentifier",
																		"src": "1528:7:1"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "1501:26:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1501:35:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1501:35:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1545:17:1",
															"value": {
																"name": "value_1",
																"nodeType": "YulIdentifier",
																"src": "1555:7:1"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "1545:6:1"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1152:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1163:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1175:6:1",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1183:6:1",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1191:6:1",
														"type": ""
													}
												],
												"src": "1098:470:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1711:545:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1758:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "1767:6:1"
																				},
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "1775:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1760:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1760:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1760:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1732:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1741:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1728:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1728:23:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1753:3:1",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1724:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1724:33:1"
															},
															"nodeType": "YulIf",
															"src": "1721:2:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1793:36:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1819:9:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1806:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1806:23:1"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "1797:5:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1865:5:1"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "1838:26:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1838:33:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1838:33:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1880:15:1",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1890:5:1"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1880:6:1"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1904:42:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1931:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1942:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1927:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1927:18:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1914:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1914:32:1"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1904:6:1"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1955:47:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1987:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1998:2:1",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1983:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1983:18:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1970:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1970:32:1"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nodeType": "YulTypedName",
																	"src": "1959:7:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value_1",
																		"nodeType": "YulIdentifier",
																		"src": "2038:7:1"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "2011:26:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2011:35:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2011:35:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2055:17:1",
															"value": {
																"name": "value_1",
																"nodeType": "YulIdentifier",
																"src": "2065:7:1"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "2055:6:1"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2081:42:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2108:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2119:2:1",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2104:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2104:18:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2091:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2091:32:1"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "2081:6:1"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2132:48:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2164:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2175:3:1",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2160:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2160:19:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2147:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2147:33:1"
															},
															"variables": [
																{
																	"name": "value_2",
																	"nodeType": "YulTypedName",
																	"src": "2136:7:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value_2",
																		"nodeType": "YulIdentifier",
																		"src": "2216:7:1"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "2189:26:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2189:35:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2189:35:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2233:17:1",
															"value": {
																"name": "value_2",
																"nodeType": "YulIdentifier",
																"src": "2243:7:1"
															},
															"variableNames": [
																{
																	"name": "value4",
																	"nodeType": "YulIdentifier",
																	"src": "2233:6:1"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256t_addresst_uint256t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1645:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1656:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1668:6:1",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1676:6:1",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1684:6:1",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "1692:6:1",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "1700:6:1",
														"type": ""
													}
												],
												"src": "1573:683:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2414:556:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2461:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value5",
																					"nodeType": "YulIdentifier",
																					"src": "2470:6:1"
																				},
																				{
																					"name": "value5",
																					"nodeType": "YulIdentifier",
																					"src": "2478:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2463:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2463:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2463:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2435:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2444:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2431:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2431:23:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2456:3:1",
																		"type": "",
																		"value": "192"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2427:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2427:33:1"
															},
															"nodeType": "YulIf",
															"src": "2424:2:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2496:36:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2522:9:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2509:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2509:23:1"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "2500:5:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2568:5:1"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "2541:26:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2541:33:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2541:33:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2583:15:1",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "2593:5:1"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2583:6:1"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2607:42:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2634:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2645:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2630:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2630:18:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2617:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2617:32:1"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2607:6:1"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2658:42:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2685:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2696:2:1",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2681:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2681:18:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2668:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2668:32:1"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "2658:6:1"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2709:47:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2741:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2752:2:1",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2737:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2737:18:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2724:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2724:32:1"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nodeType": "YulTypedName",
																	"src": "2713:7:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2808:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value5",
																					"nodeType": "YulIdentifier",
																					"src": "2817:6:1"
																				},
																				{
																					"name": "value5",
																					"nodeType": "YulIdentifier",
																					"src": "2825:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2810:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2810:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2810:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value_1",
																				"nodeType": "YulIdentifier",
																				"src": "2778:7:1"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value_1",
																						"nodeType": "YulIdentifier",
																						"src": "2791:7:1"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2800:4:1",
																						"type": "",
																						"value": "0xff"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "2787:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2787:18:1"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "2775:2:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2775:31:1"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2768:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2768:39:1"
															},
															"nodeType": "YulIf",
															"src": "2765:2:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2843:17:1",
															"value": {
																"name": "value_1",
																"nodeType": "YulIdentifier",
																"src": "2853:7:1"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "2843:6:1"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2869:43:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2896:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2907:3:1",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2892:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2892:19:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2879:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2879:33:1"
															},
															"variableNames": [
																{
																	"name": "value4",
																	"nodeType": "YulIdentifier",
																	"src": "2869:6:1"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2921:43:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2948:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2959:3:1",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2944:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2944:19:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2931:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2931:33:1"
															},
															"variableNames": [
																{
																	"name": "value5",
																	"nodeType": "YulIdentifier",
																	"src": "2921:6:1"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2340:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2351:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2363:6:1",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2371:6:1",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "2379:6:1",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "2387:6:1",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "2395:6:1",
														"type": ""
													},
													{
														"name": "value5",
														"nodeType": "YulTypedName",
														"src": "2403:6:1",
														"type": ""
													}
												],
												"src": "2261:709:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3091:561:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3137:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3146:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3154:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3139:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3139:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3139:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3112:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3121:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3108:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3108:23:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3133:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3104:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "3104:32:1"
															},
															"nodeType": "YulIf",
															"src": "3101:2:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3172:37:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3199:9:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3186:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "3186:23:1"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "3176:6:1",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3218:28:1",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3228:18:1",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "3222:2:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3273:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3282:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3290:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3275:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3275:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3275:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3261:6:1"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "3269:2:1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3258:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "3258:14:1"
															},
															"nodeType": "YulIf",
															"src": "3255:2:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3308:32:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3322:9:1"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3333:6:1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3318:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "3318:22:1"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "3312:2:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3388:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3397:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3405:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3390:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3390:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3390:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "3367:2:1"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3371:4:1",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3363:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3363:13:1"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3378:7:1"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "3359:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3359:27:1"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3352:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "3352:35:1"
															},
															"nodeType": "YulIf",
															"src": "3349:2:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3423:30:1",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "3450:2:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3437:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "3437:16:1"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "3427:6:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3480:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3489:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3497:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3482:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3482:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3482:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3468:6:1"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "3476:2:1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3465:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "3465:14:1"
															},
															"nodeType": "YulIf",
															"src": "3462:2:1"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3565:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3574:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3582:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3567:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3567:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3567:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "3529:2:1"
																					},
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "3537:6:1"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3545:2:1",
																								"type": "",
																								"value": "32"
																							}
																						],
																						"functionName": {
																							"name": "mul",
																							"nodeType": "YulIdentifier",
																							"src": "3533:3:1"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3533:15:1"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3525:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3525:24:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3551:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3521:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3521:33:1"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "3556:7:1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3518:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "3518:46:1"
															},
															"nodeType": "YulIf",
															"src": "3515:2:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3600:21:1",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "3614:2:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3618:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3610:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "3610:11:1"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3600:6:1"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3630:16:1",
															"value": {
																"name": "length",
																"nodeType": "YulIdentifier",
																"src": "3640:6:1"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "3630:6:1"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3049:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3060:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3072:6:1",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3080:6:1",
														"type": ""
													}
												],
												"src": "2975:677:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3735:219:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3781:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3790:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3798:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3783:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3783:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3783:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3756:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3765:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3752:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3752:23:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3777:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3748:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "3748:32:1"
															},
															"nodeType": "YulIf",
															"src": "3745:2:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3816:29:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3835:9:1"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3829:5:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "3829:16:1"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "3820:5:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3898:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3907:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3915:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3900:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3900:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3900:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3867:5:1"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "3888:5:1"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "3881:6:1"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3881:13:1"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "3874:6:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3874:21:1"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "3864:2:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3864:32:1"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3857:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "3857:40:1"
															},
															"nodeType": "YulIf",
															"src": "3854:2:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3933:15:1",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "3943:5:1"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3933:6:1"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3701:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3712:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3724:6:1",
														"type": ""
													}
												],
												"src": "3657:297:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4055:157:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4101:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "4110:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "4118:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4103:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4103:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4103:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4076:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4085:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4072:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4072:23:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4097:2:1",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4068:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "4068:32:1"
															},
															"nodeType": "YulIf",
															"src": "4065:2:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4136:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4152:9:1"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4146:5:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "4146:16:1"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "4136:6:1"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4171:35:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4191:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4202:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4187:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4187:18:1"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4181:5:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "4181:25:1"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "4171:6:1"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_int256t_int256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4013:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4024:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4036:6:1",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4044:6:1",
														"type": ""
													}
												],
												"src": "3959:253:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4338:654:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4384:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "4393:6:1"
																				},
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "4401:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4386:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4386:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4386:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4359:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4368:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4355:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4355:23:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4380:2:1",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4351:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "4351:32:1"
															},
															"nodeType": "YulIf",
															"src": "4348:2:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4419:33:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4442:9:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4429:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "4429:23:1"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "4419:6:1"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4461:42:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4488:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4499:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4484:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4484:18:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4471:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "4471:32:1"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "4461:6:1"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4512:46:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4543:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4554:2:1",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4539:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4539:18:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4526:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "4526:32:1"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "4516:6:1",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4567:28:1",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "4577:18:1",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "4571:2:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4622:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "4631:6:1"
																				},
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "4639:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4624:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4624:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4624:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "4610:6:1"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "4618:2:1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4607:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "4607:14:1"
															},
															"nodeType": "YulIf",
															"src": "4604:2:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4657:32:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4671:9:1"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "4682:6:1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4667:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "4667:22:1"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "4661:2:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4737:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "4746:6:1"
																				},
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "4754:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4739:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4739:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4739:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "4716:2:1"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4720:4:1",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4712:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4712:13:1"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4727:7:1"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "4708:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4708:27:1"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4701:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "4701:35:1"
															},
															"nodeType": "YulIf",
															"src": "4698:2:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4772:30:1",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "4799:2:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4786:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "4786:16:1"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "4776:6:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4829:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "4838:6:1"
																				},
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "4846:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4831:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4831:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4831:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "4817:6:1"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "4825:2:1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4814:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "4814:14:1"
															},
															"nodeType": "YulIf",
															"src": "4811:2:1"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4905:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "4914:6:1"
																				},
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "4922:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4907:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4907:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4907:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "4878:2:1"
																					},
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "4882:6:1"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4874:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4874:15:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4891:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4870:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4870:24:1"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "4896:7:1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4867:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "4867:37:1"
															},
															"nodeType": "YulIf",
															"src": "4864:2:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4940:21:1",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "4954:2:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4958:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4950:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "4950:11:1"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "4940:6:1"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4970:16:1",
															"value": {
																"name": "length",
																"nodeType": "YulIdentifier",
																"src": "4980:6:1"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "4970:6:1"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_int256t_int256t_bytes_calldata_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4280:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4291:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4303:6:1",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4311:6:1",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "4319:6:1",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "4327:6:1",
														"type": ""
													}
												],
												"src": "4217:775:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5088:585:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5134:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "5143:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "5151:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5136:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5136:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5136:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5109:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5118:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5105:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5105:23:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5130:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5101:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "5101:32:1"
															},
															"nodeType": "YulIf",
															"src": "5098:2:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5169:30:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5189:9:1"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5183:5:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "5183:16:1"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "5173:6:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5242:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "5251:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "5259:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5244:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5244:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5244:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "5214:6:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5222:18:1",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5211:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "5211:30:1"
															},
															"nodeType": "YulIf",
															"src": "5208:2:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5277:32:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5291:9:1"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "5302:6:1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5287:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "5287:22:1"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "5281:2:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5357:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "5366:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "5374:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5359:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5359:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5359:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "5336:2:1"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5340:4:1",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5332:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5332:13:1"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5347:7:1"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "5328:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5328:27:1"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "5321:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "5321:35:1"
															},
															"nodeType": "YulIf",
															"src": "5318:2:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5392:19:1",
															"value": {
																"arguments": [
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "5408:2:1"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5402:5:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "5402:9:1"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "5396:2:1",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5420:62:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "5478:2:1"
																			}
																		],
																		"functionName": {
																			"name": "array_allocation_size_t_bytes",
																			"nodeType": "YulIdentifier",
																			"src": "5448:29:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5448:33:1"
																	}
																],
																"functionName": {
																	"name": "allocateMemory",
																	"nodeType": "YulIdentifier",
																	"src": "5433:14:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "5433:49:1"
															},
															"variables": [
																{
																	"name": "array",
																	"nodeType": "YulTypedName",
																	"src": "5424:5:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "5498:5:1"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "5505:2:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5491:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "5491:17:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5491:17:1"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5554:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "5563:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "5571:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5556:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5556:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5556:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "5531:2:1"
																					},
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "5535:2:1"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5527:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5527:11:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5540:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5523:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5523:20:1"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "5545:7:1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5520:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "5520:33:1"
															},
															"nodeType": "YulIf",
															"src": "5517:2:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "5615:2:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5619:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5611:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5611:11:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "array",
																				"nodeType": "YulIdentifier",
																				"src": "5628:5:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5635:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5624:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5624:14:1"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "5640:2:1"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "5589:21:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "5589:54:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5589:54:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5652:15:1",
															"value": {
																"name": "array",
																"nodeType": "YulIdentifier",
																"src": "5662:5:1"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "5652:6:1"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_string_memory_ptr_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5054:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5065:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5077:6:1",
														"type": ""
													}
												],
												"src": "4997:676:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5782:938:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5828:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "5837:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "5845:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5830:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5830:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5830:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5803:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5812:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5799:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5799:23:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5824:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5795:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "5795:32:1"
															},
															"nodeType": "YulIf",
															"src": "5792:2:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5863:37:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5890:9:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "5877:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "5877:23:1"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "5867:6:1",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5909:28:1",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "5919:18:1",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "5913:2:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5964:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "5973:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "5981:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5966:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5966:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5966:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "5952:6:1"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "5960:2:1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5949:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "5949:14:1"
															},
															"nodeType": "YulIf",
															"src": "5946:2:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5999:32:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6013:9:1"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "6024:6:1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6009:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "6009:22:1"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "6003:2:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6071:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "6080:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "6088:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6073:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6073:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6073:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6051:7:1"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "6060:2:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6047:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6047:16:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6065:4:1",
																		"type": "",
																		"value": "0xa0"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "6043:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "6043:27:1"
															},
															"nodeType": "YulIf",
															"src": "6040:2:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6106:23:1",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6126:2:1",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "6120:5:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "6120:9:1"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "6110:6:1",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6138:35:1",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "6160:6:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6168:4:1",
																		"type": "",
																		"value": "0xa0"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6156:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "6156:17:1"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "6142:10:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6232:13:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "invalid",
																				"nodeType": "YulIdentifier",
																				"src": "6234:7:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6234:9:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6234:9:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "6191:10:1"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "6203:2:1"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "6188:2:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6188:18:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "6211:10:1"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "6223:6:1"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "6208:2:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6208:22:1"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6185:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "6185:46:1"
															},
															"nodeType": "YulIf",
															"src": "6182:2:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6261:2:1",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "6265:10:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6254:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "6254:22:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6254:22:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6285:32:1",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "6314:2:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "6301:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "6301:16:1"
															},
															"variables": [
																{
																	"name": "offset_1",
																	"nodeType": "YulTypedName",
																	"src": "6289:8:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6346:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "6355:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "6363:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6348:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6348:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6348:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset_1",
																		"nodeType": "YulIdentifier",
																		"src": "6332:8:1"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "6342:2:1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "6329:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "6329:16:1"
															},
															"nodeType": "YulIf",
															"src": "6326:2:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "6388:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "6419:2:1"
																					},
																					{
																						"name": "offset_1",
																						"nodeType": "YulIdentifier",
																						"src": "6423:8:1"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6415:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6415:17:1"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6434:7:1"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes",
																			"nodeType": "YulIdentifier",
																			"src": "6396:18:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6396:46:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6381:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "6381:62:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6381:62:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "6463:6:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6471:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6459:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6459:15:1"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "6501:2:1"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6505:2:1",
																						"type": "",
																						"value": "32"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6497:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6497:11:1"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "6476:20:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6476:33:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6452:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "6452:58:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6452:58:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "6530:6:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6538:2:1",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6526:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6526:15:1"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "6560:2:1"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6564:2:1",
																						"type": "",
																						"value": "64"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6556:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6556:11:1"
																			}
																		],
																		"functionName": {
																			"name": "calldataload",
																			"nodeType": "YulIdentifier",
																			"src": "6543:12:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6543:25:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6519:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "6519:50:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6519:50:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "6589:6:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6597:2:1",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6585:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6585:15:1"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "6619:2:1"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6623:2:1",
																						"type": "",
																						"value": "96"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6615:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6615:11:1"
																			}
																		],
																		"functionName": {
																			"name": "calldataload",
																			"nodeType": "YulIdentifier",
																			"src": "6602:12:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6602:25:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6578:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "6578:50:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6578:50:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "6648:6:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6656:3:1",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6644:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6644:16:1"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "6679:2:1"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6683:3:1",
																						"type": "",
																						"value": "128"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6675:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6675:12:1"
																			}
																		],
																		"functionName": {
																			"name": "calldataload",
																			"nodeType": "YulIdentifier",
																			"src": "6662:12:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6662:26:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6637:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "6637:52:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6637:52:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6698:16:1",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "6708:6:1"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "6698:6:1"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_struct$_ExactInputParams_$1674_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5748:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5759:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5771:6:1",
														"type": ""
													}
												],
												"src": "5678:1042:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6837:170:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6884:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "6893:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "6901:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6886:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6886:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6886:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6858:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6867:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6854:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6854:23:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6879:3:1",
																		"type": "",
																		"value": "256"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "6850:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "6850:33:1"
															},
															"nodeType": "YulIf",
															"src": "6847:2:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6919:82:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6982:9:1"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "6993:7:1"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_struct$_ExactInputSingleParams_calldata",
																	"nodeType": "YulIdentifier",
																	"src": "6929:52:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "6929:72:1"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "6919:6:1"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_struct$_ExactInputSingleParams_$1655_calldata_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6803:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "6814:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6826:6:1",
														"type": ""
													}
												],
												"src": "6725:282:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7119:320:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7165:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "7174:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "7182:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "7167:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7167:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7167:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "7140:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7149:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "7136:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7136:23:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7161:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "7132:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "7132:32:1"
															},
															"nodeType": "YulIf",
															"src": "7129:2:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7200:37:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7227:9:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "7214:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "7214:23:1"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "7204:6:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7280:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "7289:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "7297:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "7282:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7282:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7282:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "7252:6:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7260:18:1",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "7249:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "7249:30:1"
															},
															"nodeType": "YulIf",
															"src": "7246:2:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7315:32:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7329:9:1"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "7340:6:1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7325:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "7325:22:1"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "7319:2:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7386:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "7395:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "7403:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "7388:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7388:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7388:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "7367:7:1"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "7376:2:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "7363:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7363:16:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7381:3:1",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "7359:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "7359:26:1"
															},
															"nodeType": "YulIf",
															"src": "7356:2:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7421:12:1",
															"value": {
																"name": "_1",
																"nodeType": "YulIdentifier",
																"src": "7431:2:1"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "7421:6:1"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_struct$_ExactOutputParams_$1718_calldata_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7085:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "7096:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7108:6:1",
														"type": ""
													}
												],
												"src": "7012:427:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7557:170:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7604:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "7613:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "7621:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "7606:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7606:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7606:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "7578:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7587:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "7574:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7574:23:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7599:3:1",
																		"type": "",
																		"value": "256"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "7570:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "7570:33:1"
															},
															"nodeType": "YulIf",
															"src": "7567:2:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7639:82:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7702:9:1"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "7713:7:1"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_struct$_ExactInputSingleParams_calldata",
																	"nodeType": "YulIdentifier",
																	"src": "7649:52:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "7649:72:1"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "7639:6:1"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_struct$_ExactOutputSingleParams_$1699_calldata_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7523:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "7534:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7546:6:1",
														"type": ""
													}
												],
												"src": "7444:283:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7836:824:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7882:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "7891:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "7899:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "7884:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7884:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7884:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "7857:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7866:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "7853:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7853:23:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7878:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "7849:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "7849:32:1"
															},
															"nodeType": "YulIf",
															"src": "7846:2:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7917:37:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7944:9:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "7931:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "7931:23:1"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "7921:6:1",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7963:28:1",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "7973:18:1",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "7967:2:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8018:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "8027:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "8035:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "8020:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8020:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8020:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "8006:6:1"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "8014:2:1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "8003:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "8003:14:1"
															},
															"nodeType": "YulIf",
															"src": "8000:2:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8053:32:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8067:9:1"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "8078:6:1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8063:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "8063:22:1"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "8057:2:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8125:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "8134:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "8142:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "8127:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8127:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8127:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "8105:7:1"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "8114:2:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "8101:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8101:16:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8119:4:1",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "8097:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "8097:27:1"
															},
															"nodeType": "YulIf",
															"src": "8094:2:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8160:25:1",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8180:4:1",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "8174:5:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "8174:11:1"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "8164:6:1",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8194:35:1",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "8216:6:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8224:4:1",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8212:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "8212:17:1"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "8198:10:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8288:13:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "invalid",
																				"nodeType": "YulIdentifier",
																				"src": "8290:7:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8290:9:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8290:9:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "8247:10:1"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "8259:2:1"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "8244:2:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8244:18:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "8267:10:1"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "8279:6:1"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "8264:2:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8264:22:1"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "8241:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "8241:46:1"
															},
															"nodeType": "YulIf",
															"src": "8238:2:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8317:4:1",
																		"type": "",
																		"value": "0x40"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "8323:10:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8310:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "8310:24:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8310:24:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8343:32:1",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "8372:2:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "8359:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "8359:16:1"
															},
															"variables": [
																{
																	"name": "offset_1",
																	"nodeType": "YulTypedName",
																	"src": "8347:8:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8404:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "8413:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "8421:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "8406:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8406:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8406:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset_1",
																		"nodeType": "YulIdentifier",
																		"src": "8390:8:1"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "8400:2:1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "8387:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "8387:16:1"
															},
															"nodeType": "YulIf",
															"src": "8384:2:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "8446:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "8477:2:1"
																					},
																					{
																						"name": "offset_1",
																						"nodeType": "YulIdentifier",
																						"src": "8481:8:1"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8473:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8473:17:1"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "8492:7:1"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes",
																			"nodeType": "YulIdentifier",
																			"src": "8454:18:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8454:46:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8439:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "8439:62:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8439:62:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8510:38:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "8540:2:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8544:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8536:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8536:11:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "8523:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "8523:25:1"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "8514:5:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "8584:5:1"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "8557:26:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "8557:33:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8557:33:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "8610:6:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8618:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8606:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8606:15:1"
																	},
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "8623:5:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8599:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "8599:30:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8599:30:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8638:16:1",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "8648:6:1"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "8638:6:1"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_struct$_SwapCallbackData_$2894_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7802:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "7813:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7825:6:1",
														"type": ""
													}
												],
												"src": "7732:928:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8735:189:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8781:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "8790:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "8798:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "8783:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8783:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8783:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "8756:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8765:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "8752:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8752:23:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8777:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "8748:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "8748:32:1"
															},
															"nodeType": "YulIf",
															"src": "8745:2:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8816:36:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8842:9:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "8829:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "8829:23:1"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "8820:5:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "8888:5:1"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "8861:26:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "8861:33:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8861:33:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8903:15:1",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "8913:5:1"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "8903:6:1"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8701:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "8712:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "8724:6:1",
														"type": ""
													}
												],
												"src": "8665:259:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8998:225:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9044:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "9053:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "9061:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9046:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9046:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9046:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "9019:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9028:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "9015:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9015:23:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9040:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "9011:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "9011:32:1"
															},
															"nodeType": "YulIf",
															"src": "9008:2:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9079:36:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9105:9:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "9092:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "9092:23:1"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "9083:5:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9167:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "9176:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "9184:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9169:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9169:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9169:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "9137:5:1"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "9148:5:1"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "9155:8:1",
																						"type": "",
																						"value": "0xffffff"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "9144:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9144:20:1"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "9134:2:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9134:31:1"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "9127:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "9127:39:1"
															},
															"nodeType": "YulIf",
															"src": "9124:2:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9202:15:1",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "9212:5:1"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "9202:6:1"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint24",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8964:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "8975:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "8987:6:1",
														"type": ""
													}
												],
												"src": "8929:294:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9309:113:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9355:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "9364:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "9372:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9357:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9357:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9357:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "9330:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9339:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "9326:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9326:23:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9351:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "9322:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "9322:32:1"
															},
															"nodeType": "YulIf",
															"src": "9319:2:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9390:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9406:9:1"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "9400:5:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "9400:16:1"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "9390:6:1"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9275:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "9286:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9298:6:1",
														"type": ""
													}
												],
												"src": "9228:194:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9514:240:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9560:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "9569:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "9577:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9562:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9562:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9562:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "9535:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9544:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "9531:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9531:23:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9556:2:1",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "9527:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "9527:32:1"
															},
															"nodeType": "YulIf",
															"src": "9524:2:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9595:33:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9618:9:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "9605:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "9605:23:1"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "9595:6:1"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9637:45:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9667:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9678:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9663:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9663:18:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "9650:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "9650:32:1"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "9641:5:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "9718:5:1"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "9691:26:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "9691:33:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9691:33:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9733:15:1",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "9743:5:1"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "9733:6:1"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9472:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "9483:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9495:6:1",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "9503:6:1",
														"type": ""
													}
												],
												"src": "9427:327:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9880:418:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9927:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "9936:6:1"
																				},
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "9944:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9929:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9929:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9929:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "9901:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9910:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "9897:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9897:23:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9922:3:1",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "9893:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "9893:33:1"
															},
															"nodeType": "YulIf",
															"src": "9890:2:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9962:33:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9985:9:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "9972:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "9972:23:1"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "9962:6:1"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10004:45:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10034:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10045:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10030:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10030:18:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "10017:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "10017:32:1"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "10008:5:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "10085:5:1"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "10058:26:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "10058:33:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10058:33:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10100:15:1",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "10110:5:1"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "10100:6:1"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "10124:42:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10151:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10162:2:1",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10147:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10147:18:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "10134:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "10134:32:1"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "10124:6:1"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10175:47:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10207:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10218:2:1",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10203:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10203:18:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "10190:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "10190:32:1"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nodeType": "YulTypedName",
																	"src": "10179:7:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value_1",
																		"nodeType": "YulIdentifier",
																		"src": "10258:7:1"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "10231:26:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "10231:35:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10231:35:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10275:17:1",
															"value": {
																"name": "value_1",
																"nodeType": "YulIdentifier",
																"src": "10285:7:1"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "10275:6:1"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_addresst_uint256t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9822:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "9833:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9845:6:1",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "9853:6:1",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "9861:6:1",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "9869:6:1",
														"type": ""
													}
												],
												"src": "9759:539:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10354:208:1",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10364:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "10384:5:1"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "10378:5:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "10378:12:1"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "10368:6:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10406:3:1"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "10411:6:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10399:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "10399:19:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10399:19:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "10453:5:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10460:4:1",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10449:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10449:16:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "10471:3:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10476:4:1",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10467:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10467:14:1"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "10483:6:1"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "10427:21:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "10427:63:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10427:63:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10499:57:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "10514:3:1"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "10527:6:1"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "10535:2:1",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "10523:3:1"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "10523:15:1"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "10544:2:1",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "10540:3:1"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "10540:7:1"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "10519:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10519:29:1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10510:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10510:39:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10551:4:1",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10506:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "10506:50:1"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "10499:3:1"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_bytes",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "10331:5:1",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "10338:3:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "10346:3:1",
														"type": ""
													}
												],
												"src": "10303:259:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10740:258:1",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10750:41:1",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10764:26:1",
																		"type": "",
																		"value": "0xffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nodeType": "YulIdentifier",
																	"src": "10760:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "10760:31:1"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "10754:2:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10807:3:1"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "10820:2:1",
																						"type": "",
																						"value": "96"
																					},
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "10824:6:1"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nodeType": "YulIdentifier",
																					"src": "10816:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10816:15:1"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "10833:2:1"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "10812:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10812:24:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10800:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "10800:37:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10800:37:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "10857:3:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10862:2:1",
																				"type": "",
																				"value": "20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10853:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10853:12:1"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "10875:3:1",
																						"type": "",
																						"value": "232"
																					},
																					{
																						"name": "value1",
																						"nodeType": "YulIdentifier",
																						"src": "10880:6:1"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nodeType": "YulIdentifier",
																					"src": "10871:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10871:16:1"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "10893:3:1",
																						"type": "",
																						"value": "232"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "10898:8:1",
																						"type": "",
																						"value": "16777215"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nodeType": "YulIdentifier",
																					"src": "10889:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10889:18:1"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "10867:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10867:41:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10846:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "10846:63:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10846:63:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "10929:3:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10934:2:1",
																				"type": "",
																				"value": "23"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10925:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10925:12:1"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "10947:2:1",
																						"type": "",
																						"value": "96"
																					},
																					{
																						"name": "value2",
																						"nodeType": "YulIdentifier",
																						"src": "10951:6:1"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nodeType": "YulIdentifier",
																					"src": "10943:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10943:15:1"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "10960:2:1"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "10939:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10939:24:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10918:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "10918:46:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10918:46:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10973:19:1",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10984:3:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10989:2:1",
																		"type": "",
																		"value": "43"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10980:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "10980:12:1"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "10973:3:1"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_address_t_uint24_t_address__to_t_address_t_uint24_t_address__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "10700:3:1",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "10705:6:1",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "10713:6:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10721:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "10732:3:1",
														"type": ""
													}
												],
												"src": "10567:431:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11150:126:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11173:3:1"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "11178:6:1"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "11186:6:1"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nodeType": "YulIdentifier",
																	"src": "11160:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "11160:33:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11160:33:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "11202:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11216:3:1"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "11221:6:1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11212:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "11212:16:1"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "11206:2:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "11244:2:1"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "11248:3:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11237:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "11237:15:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11237:15:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11261:9:1",
															"value": {
																"name": "_1",
																"nodeType": "YulIdentifier",
																"src": "11268:2:1"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "11261:3:1"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "11118:3:1",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "11123:6:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11131:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "11142:3:1",
														"type": ""
													}
												],
												"src": "11003:273:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11418:137:1",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "11428:27:1",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "11448:6:1"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "11442:5:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "11442:13:1"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "11432:6:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "11490:6:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11498:4:1",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11486:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11486:17:1"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11505:3:1"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "11510:6:1"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "11464:21:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "11464:53:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11464:53:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11526:23:1",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11537:3:1"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "11542:6:1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11533:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "11533:16:1"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "11526:3:1"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "11394:3:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11399:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "11410:3:1",
														"type": ""
													}
												],
												"src": "11281:274:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11836:227:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11853:3:1"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11862:3:1",
																				"type": "",
																				"value": "248"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11867:3:1",
																				"type": "",
																				"value": "255"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "11858:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11858:13:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11846:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "11846:26:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11846:26:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "11892:3:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11897:1:1",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11888:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11888:11:1"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "11909:2:1",
																						"type": "",
																						"value": "96"
																					},
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "11913:6:1"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nodeType": "YulIdentifier",
																					"src": "11905:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11905:15:1"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "11926:26:1",
																						"type": "",
																						"value": "0xffffffffffffffffffffffff"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "11922:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11922:31:1"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "11901:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11901:53:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11881:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "11881:74:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11881:74:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "11975:3:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11980:2:1",
																				"type": "",
																				"value": "21"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11971:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11971:12:1"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "11985:6:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11964:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "11964:28:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11964:28:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "12012:3:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12017:2:1",
																				"type": "",
																				"value": "53"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12008:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12008:12:1"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "12022:6:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12001:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "12001:28:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12001:28:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12038:19:1",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "12049:3:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12054:2:1",
																		"type": "",
																		"value": "85"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12045:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "12045:12:1"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "12038:3:1"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9_t_address_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_address_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "11796:3:1",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "11801:6:1",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "11809:6:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11817:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "11828:3:1",
														"type": ""
													}
												],
												"src": "11560:503:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12169:102:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12179:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12191:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12202:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12187:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "12187:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12179:4:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12221:9:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "12236:6:1"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "12252:3:1",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "12257:1:1",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "12248:3:1"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "12248:11:1"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "12261:1:1",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "12244:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "12244:19:1"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "12232:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12232:32:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12214:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "12214:51:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12214:51:1"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12138:9:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "12149:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12160:4:1",
														"type": ""
													}
												],
												"src": "12068:203:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12385:102:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12395:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12407:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12418:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12403:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "12403:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12395:4:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12437:9:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "12452:6:1"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "12468:3:1",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "12473:1:1",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "12464:3:1"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "12464:11:1"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "12477:1:1",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "12460:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "12460:19:1"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "12448:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12448:32:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12430:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "12430:51:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12430:51:1"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_payable__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12354:9:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "12365:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12376:4:1",
														"type": ""
													}
												],
												"src": "12276:211:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12629:175:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12639:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12651:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12662:2:1",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12647:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "12647:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12639:4:1"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "12674:29:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12692:3:1",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12697:1:1",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "12688:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12688:11:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12701:1:1",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "12684:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "12684:19:1"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "12678:2:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12719:9:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "12734:6:1"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "12742:2:1"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "12730:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12730:15:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12712:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "12712:34:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12712:34:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12766:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12777:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12762:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12762:18:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "12786:6:1"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "12794:2:1"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "12782:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12782:15:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12755:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "12755:43:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12755:43:1"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_payable_t_address__to_t_address_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12590:9:1",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "12601:6:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "12609:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12620:4:1",
														"type": ""
													}
												],
												"src": "12492:312:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13104:465:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13114:27:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13126:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13137:3:1",
																		"type": "",
																		"value": "256"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13122:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "13122:19:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13114:4:1"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "13150:29:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13168:3:1",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13173:1:1",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "13164:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13164:11:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13177:1:1",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "13160:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "13160:19:1"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "13154:2:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13195:9:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "13210:6:1"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "13218:2:1"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "13206:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13206:15:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13188:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "13188:34:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13188:34:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13242:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13253:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13238:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13238:18:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "13262:6:1"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "13270:2:1"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "13258:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13258:15:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13231:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "13231:43:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13231:43:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13294:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13305:2:1",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13290:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13290:18:1"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "13310:6:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13283:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "13283:34:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13283:34:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13337:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13348:2:1",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13333:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13333:18:1"
																	},
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "13353:6:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13326:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "13326:34:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13326:34:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13380:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13391:3:1",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13376:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13376:19:1"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value4",
																						"nodeType": "YulIdentifier",
																						"src": "13411:6:1"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "13404:6:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "13404:14:1"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "13397:6:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13397:22:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13369:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "13369:51:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13369:51:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13440:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13451:3:1",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13436:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13436:19:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value5",
																				"nodeType": "YulIdentifier",
																				"src": "13461:6:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13469:4:1",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "13457:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13457:17:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13429:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "13429:46:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13429:46:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13495:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13506:3:1",
																				"type": "",
																				"value": "192"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13491:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13491:19:1"
																	},
																	{
																		"name": "value6",
																		"nodeType": "YulIdentifier",
																		"src": "13512:6:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13484:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "13484:35:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13484:35:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13539:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13550:3:1",
																				"type": "",
																				"value": "224"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13535:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13535:19:1"
																	},
																	{
																		"name": "value7",
																		"nodeType": "YulIdentifier",
																		"src": "13556:6:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13528:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "13528:35:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13528:35:1"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_payable_t_address_t_uint256_t_uint256_t_bool_t_uint8_t_bytes32_t_bytes32__to_t_address_t_address_t_uint256_t_uint256_t_bool_t_uint8_t_bytes32_t_bytes32__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13017:9:1",
														"type": ""
													},
													{
														"name": "value7",
														"nodeType": "YulTypedName",
														"src": "13028:6:1",
														"type": ""
													},
													{
														"name": "value6",
														"nodeType": "YulTypedName",
														"src": "13036:6:1",
														"type": ""
													},
													{
														"name": "value5",
														"nodeType": "YulTypedName",
														"src": "13044:6:1",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "13052:6:1",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "13060:6:1",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "13068:6:1",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "13076:6:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "13084:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13095:4:1",
														"type": ""
													}
												],
												"src": "12809:760:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13847:405:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13857:27:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13869:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13880:3:1",
																		"type": "",
																		"value": "224"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13865:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "13865:19:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13857:4:1"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "13893:29:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13911:3:1",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13916:1:1",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "13907:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13907:11:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13920:1:1",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "13903:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "13903:19:1"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "13897:2:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13938:9:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "13953:6:1"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "13961:2:1"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "13949:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13949:15:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13931:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "13931:34:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13931:34:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13985:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13996:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13981:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13981:18:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "14005:6:1"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "14013:2:1"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "14001:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14001:15:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13974:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "13974:43:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13974:43:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14037:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14048:2:1",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14033:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14033:18:1"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "14053:6:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14026:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "14026:34:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14026:34:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14080:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14091:2:1",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14076:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14076:18:1"
																	},
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "14096:6:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14069:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "14069:34:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14069:34:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14123:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14134:3:1",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14119:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14119:19:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value4",
																				"nodeType": "YulIdentifier",
																				"src": "14144:6:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14152:4:1",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "14140:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14140:17:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14112:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "14112:46:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14112:46:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14178:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14189:3:1",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14174:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14174:19:1"
																	},
																	{
																		"name": "value5",
																		"nodeType": "YulIdentifier",
																		"src": "14195:6:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14167:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "14167:35:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14167:35:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14222:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14233:3:1",
																				"type": "",
																				"value": "192"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14218:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14218:19:1"
																	},
																	{
																		"name": "value6",
																		"nodeType": "YulIdentifier",
																		"src": "14239:6:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14211:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "14211:35:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14211:35:1"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_payable_t_address_t_uint256_t_uint256_t_uint8_t_bytes32_t_bytes32__to_t_address_t_address_t_uint256_t_uint256_t_uint8_t_bytes32_t_bytes32__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13768:9:1",
														"type": ""
													},
													{
														"name": "value6",
														"nodeType": "YulTypedName",
														"src": "13779:6:1",
														"type": ""
													},
													{
														"name": "value5",
														"nodeType": "YulTypedName",
														"src": "13787:6:1",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "13795:6:1",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "13803:6:1",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "13811:6:1",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "13819:6:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "13827:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13838:4:1",
														"type": ""
													}
												],
												"src": "13574:678:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14412:233:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "14422:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14434:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14445:2:1",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14430:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "14430:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14422:4:1"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "14457:29:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14475:3:1",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14480:1:1",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "14471:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14471:11:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14484:1:1",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "14467:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "14467:19:1"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "14461:2:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14502:9:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "14517:6:1"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "14525:2:1"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "14513:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14513:15:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14495:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "14495:34:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14495:34:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14549:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14560:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14545:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14545:18:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "14569:6:1"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "14577:2:1"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "14565:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14565:15:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14538:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "14538:43:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14538:43:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14601:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14612:2:1",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14597:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14597:18:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value2",
																				"nodeType": "YulIdentifier",
																				"src": "14621:6:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14629:8:1",
																				"type": "",
																				"value": "0xffffff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "14617:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14617:21:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14590:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "14590:49:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14590:49:1"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint24__to_t_address_t_address_t_uint24__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "14365:9:1",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "14376:6:1",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "14384:6:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "14392:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "14403:4:1",
														"type": ""
													}
												],
												"src": "14257:388:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14807:218:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "14817:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14829:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14840:2:1",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14825:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "14825:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14817:4:1"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "14852:29:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14870:3:1",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14875:1:1",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "14866:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14866:11:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14879:1:1",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "14862:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "14862:19:1"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "14856:2:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14897:9:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "14912:6:1"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "14920:2:1"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "14908:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14908:15:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14890:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "14890:34:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14890:34:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14944:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14955:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14940:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14940:18:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "14964:6:1"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "14972:2:1"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "14960:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14960:15:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14933:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "14933:43:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14933:43:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14996:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15007:2:1",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14992:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14992:18:1"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "15012:6:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14985:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "14985:34:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14985:34:1"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "14760:9:1",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "14771:6:1",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "14779:6:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "14787:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "14798:4:1",
														"type": ""
													}
												],
												"src": "14650:375:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15253:347:1",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "15263:29:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15281:3:1",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15286:1:1",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "15277:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15277:11:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15290:1:1",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "15273:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "15273:19:1"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "15267:2:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15308:9:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "15323:6:1"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "15331:2:1"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "15319:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15319:15:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15301:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "15301:34:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15301:34:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15355:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15366:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15351:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15351:18:1"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value1",
																						"nodeType": "YulIdentifier",
																						"src": "15385:6:1"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "15378:6:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "15378:14:1"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "15371:6:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15371:22:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15344:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "15344:50:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15344:50:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15414:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15425:2:1",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15410:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15410:18:1"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "15430:6:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15403:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "15403:34:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15403:34:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15457:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15468:2:1",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15453:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15453:18:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value3",
																				"nodeType": "YulIdentifier",
																				"src": "15477:6:1"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "15485:2:1"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "15473:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15473:15:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15446:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "15446:43:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15446:43:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15509:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15520:3:1",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15505:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15505:19:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15526:3:1",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15498:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "15498:32:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15498:32:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "15539:55:1",
															"value": {
																"arguments": [
																	{
																		"name": "value4",
																		"nodeType": "YulIdentifier",
																		"src": "15566:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15578:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15589:3:1",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15574:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15574:19:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes",
																	"nodeType": "YulIdentifier",
																	"src": "15547:18:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "15547:47:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "15539:4:1"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_bool_t_int256_t_uint160_t_bytes_memory_ptr__to_t_address_t_bool_t_int256_t_uint160_t_bytes_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "15190:9:1",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "15201:6:1",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "15209:6:1",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "15217:6:1",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "15225:6:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "15233:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "15244:4:1",
														"type": ""
													}
												],
												"src": "15030:570:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15734:145:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "15744:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15756:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15767:2:1",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "15752:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "15752:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "15744:4:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15786:9:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "15801:6:1"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "15817:3:1",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "15822:1:1",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "15813:3:1"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "15813:11:1"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "15826:1:1",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "15809:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "15809:19:1"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "15797:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15797:32:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15779:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "15779:51:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15779:51:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15850:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15861:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15846:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15846:18:1"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "15866:6:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15839:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "15839:34:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15839:34:1"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "15695:9:1",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "15706:6:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "15714:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "15725:4:1",
														"type": ""
													}
												],
												"src": "15605:274:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16053:637:1",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "16063:12:1",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "16073:2:1",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "16067:2:1",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "16084:32:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "16102:9:1"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "16113:2:1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "16098:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "16098:18:1"
															},
															"variables": [
																{
																	"name": "tail_1",
																	"nodeType": "YulTypedName",
																	"src": "16088:6:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "16132:9:1"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "16143:2:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16125:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "16125:21:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16125:21:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "16155:17:1",
															"value": {
																"name": "tail_1",
																"nodeType": "YulIdentifier",
																"src": "16166:6:1"
															},
															"variables": [
																{
																	"name": "pos",
																	"nodeType": "YulTypedName",
																	"src": "16159:3:1",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "16181:27:1",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "16201:6:1"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "16195:5:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "16195:13:1"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "16185:6:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "tail_1",
																		"nodeType": "YulIdentifier",
																		"src": "16224:6:1"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "16232:6:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16217:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "16217:22:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16217:22:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "16248:25:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "16259:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16270:2:1",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "16255:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "16255:18:1"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "16248:3:1"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "16282:54:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16304:9:1"
																			},
																			{
																				"arguments": [
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "16319:6:1"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "16327:2:1"
																					}
																				],
																				"functionName": {
																					"name": "mul",
																					"nodeType": "YulIdentifier",
																					"src": "16315:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "16315:15:1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16300:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16300:31:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16333:2:1",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "16296:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "16296:40:1"
															},
															"variables": [
																{
																	"name": "tail_2",
																	"nodeType": "YulTypedName",
																	"src": "16286:6:1",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "16345:29:1",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "16363:6:1"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "16371:2:1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "16359:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "16359:15:1"
															},
															"variables": [
																{
																	"name": "srcPtr",
																	"nodeType": "YulTypedName",
																	"src": "16349:6:1",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "16383:13:1",
															"value": {
																"name": "tail",
																"nodeType": "YulIdentifier",
																"src": "16392:4:1"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "16387:1:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "16454:207:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "pos",
																					"nodeType": "YulIdentifier",
																					"src": "16475:3:1"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "tail_2",
																									"nodeType": "YulIdentifier",
																									"src": "16488:6:1"
																								},
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "16496:9:1"
																								}
																							],
																							"functionName": {
																								"name": "sub",
																								"nodeType": "YulIdentifier",
																								"src": "16484:3:1"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "16484:22:1"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "16512:2:1",
																									"type": "",
																									"value": "63"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nodeType": "YulIdentifier",
																								"src": "16508:3:1"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "16508:7:1"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "16480:3:1"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "16480:36:1"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "16468:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "16468:49:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "16468:49:1"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "16530:51:1",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "srcPtr",
																							"nodeType": "YulIdentifier",
																							"src": "16565:6:1"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "16559:5:1"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "16559:13:1"
																				},
																				{
																					"name": "tail_2",
																					"nodeType": "YulIdentifier",
																					"src": "16574:6:1"
																				}
																			],
																			"functionName": {
																				"name": "abi_encode_t_bytes",
																				"nodeType": "YulIdentifier",
																				"src": "16540:18:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "16540:41:1"
																		},
																		"variableNames": [
																			{
																				"name": "tail_2",
																				"nodeType": "YulIdentifier",
																				"src": "16530:6:1"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "16594:25:1",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcPtr",
																					"nodeType": "YulIdentifier",
																					"src": "16608:6:1"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "16616:2:1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "16604:3:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "16604:15:1"
																		},
																		"variableNames": [
																			{
																				"name": "srcPtr",
																				"nodeType": "YulIdentifier",
																				"src": "16594:6:1"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "16632:19:1",
																		"value": {
																			"arguments": [
																				{
																					"name": "pos",
																					"nodeType": "YulIdentifier",
																					"src": "16643:3:1"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "16648:2:1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "16639:3:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "16639:12:1"
																		},
																		"variableNames": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "16632:3:1"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "16416:1:1"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "16419:6:1"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "16413:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "16413:13:1"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "16427:18:1",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "16429:14:1",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "16438:1:1"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "16441:1:1",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "16434:3:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "16434:9:1"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "16429:1:1"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "16409:3:1",
																"statements": []
															},
															"src": "16405:256:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "16670:14:1",
															"value": {
																"name": "tail_2",
																"nodeType": "YulIdentifier",
																"src": "16678:6:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "16670:4:1"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "16022:9:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "16033:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "16044:4:1",
														"type": ""
													}
												],
												"src": "15884:806:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16816:100:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "16833:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16844:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16826:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "16826:21:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16826:21:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "16856:54:1",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "16883:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16895:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16906:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16891:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16891:18:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes",
																	"nodeType": "YulIdentifier",
																	"src": "16864:18:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "16864:46:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "16856:4:1"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "16785:9:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "16796:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "16807:4:1",
														"type": ""
													}
												],
												"src": "16695:221:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17095:168:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "17112:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17123:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17105:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "17105:21:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17105:21:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "17146:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17157:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17142:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17142:18:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17162:2:1",
																		"type": "",
																		"value": "18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17135:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "17135:30:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17135:30:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "17185:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17196:2:1",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17181:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17181:18:1"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "17201:20:1",
																		"type": "",
																		"value": "Insufficient WETH9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17174:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "17174:48:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17174:48:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "17231:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "17243:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17254:2:1",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "17239:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "17239:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "17231:4:1"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_01e23337f78f001c03af3011e04e4dea54f4997ff97d41da263c1606bf0f9f73__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "17072:9:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "17086:4:1",
														"type": ""
													}
												],
												"src": "16921:342:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17442:168:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "17459:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17470:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17452:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "17452:21:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17452:21:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "17493:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17504:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17489:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17489:18:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17509:2:1",
																		"type": "",
																		"value": "18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17482:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "17482:30:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17482:30:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "17532:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17543:2:1",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17528:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17528:18:1"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "17548:20:1",
																		"type": "",
																		"value": "Insufficient token"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17521:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "17521:48:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17521:48:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "17578:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "17590:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17601:2:1",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "17586:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "17586:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "17578:4:1"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_2cf3b53843c7738cfb0b95230b455802cee89f2ea29be4a30eee707228c97571__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "17419:9:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "17433:4:1",
														"type": ""
													}
												],
												"src": "17268:342:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17789:167:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "17806:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17817:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17799:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "17799:21:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17799:21:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "17840:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17851:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17836:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17836:18:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17856:2:1",
																		"type": "",
																		"value": "17"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17829:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "17829:30:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17829:30:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "17879:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17890:2:1",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17875:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17875:18:1"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "17895:19:1",
																		"type": "",
																		"value": "toUint24_overflow"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17868:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "17868:47:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17868:47:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "17924:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "17936:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17947:2:1",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "17932:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "17932:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "17924:4:1"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_428a8ba368fc474210479d5009a3c2ddaf9d762393b1b3cd3cf1b440d48791c5__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "17766:9:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "17780:4:1",
														"type": ""
													}
												],
												"src": "17615:341:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18135:152:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "18152:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18163:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "18145:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "18145:21:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18145:21:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "18186:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "18197:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "18182:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18182:18:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18202:1:1",
																		"type": "",
																		"value": "3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "18175:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "18175:29:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18175:29:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "18224:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "18235:2:1",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "18220:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18220:18:1"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "18240:5:1",
																		"type": "",
																		"value": "STE"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "18213:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "18213:33:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18213:33:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "18255:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "18267:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18278:2:1",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "18263:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "18263:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "18255:4:1"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_48541fce89df928ec30caa1aed6c0cd94b8e2ef76b3c68b10b9a184ceadb93d4__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "18112:9:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "18126:4:1",
														"type": ""
													}
												],
												"src": "17961:326:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18466:164:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "18483:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18494:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "18476:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "18476:21:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18476:21:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "18517:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "18528:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "18513:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18513:18:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18533:2:1",
																		"type": "",
																		"value": "14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "18506:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "18506:30:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18506:30:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "18556:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "18567:2:1",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "18552:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18552:18:1"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "18572:16:1",
																		"type": "",
																		"value": "slice_overflow"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "18545:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "18545:44:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18545:44:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "18598:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "18610:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18621:2:1",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "18606:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "18606:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "18598:4:1"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "18443:9:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "18457:4:1",
														"type": ""
													}
												],
												"src": "18292:338:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18809:151:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "18826:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18837:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "18819:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "18819:21:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18819:21:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "18860:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "18871:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "18856:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18856:18:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18876:1:1",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "18849:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "18849:29:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18849:29:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "18898:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "18909:2:1",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "18894:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18894:18:1"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "18914:4:1",
																		"type": "",
																		"value": "ST"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "18887:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "18887:32:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18887:32:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "18928:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "18940:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18951:2:1",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "18936:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "18936:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "18928:4:1"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_8e992d6a09e3feb7936717fa482f3a7086f18407e19b697f3153d17fd25870ca__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "18786:9:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "18800:4:1",
														"type": ""
													}
												],
												"src": "18635:325:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "19139:170:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "19156:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19167:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "19149:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "19149:21:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19149:21:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "19190:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "19201:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "19186:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "19186:18:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19206:2:1",
																		"type": "",
																		"value": "20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "19179:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "19179:30:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19179:30:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "19229:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "19240:2:1",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "19225:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "19225:18:1"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "19245:22:1",
																		"type": "",
																		"value": "toUint24_outOfBounds"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "19218:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "19218:50:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19218:50:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "19277:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "19289:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19300:2:1",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "19285:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "19285:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "19277:4:1"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_92c5fac6e5cb4f75ffccd9c8f373ae2e2c333a8b9c2fdc616c52c36fa31575dc__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "19116:9:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "19130:4:1",
														"type": ""
													}
												],
												"src": "18965:344:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "19488:158:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "19505:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19516:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "19498:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "19498:21:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19498:21:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "19539:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "19550:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "19535:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "19535:18:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19555:1:1",
																		"type": "",
																		"value": "9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "19528:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "19528:29:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19528:29:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "19577:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "19588:2:1",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "19573:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "19573:18:1"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "19593:11:1",
																		"type": "",
																		"value": "Not WETH9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "19566:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "19566:39:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19566:39:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "19614:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "19626:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19637:2:1",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "19622:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "19622:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "19614:4:1"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9a5f12903ee10b20c1ea1ca8d6f6723d553112d744fe8db2bc5453efb990e6b1__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "19465:9:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "19479:4:1",
														"type": ""
													}
												],
												"src": "19314:332:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "19825:171:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "19842:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19853:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "19835:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "19835:21:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19835:21:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "19876:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "19887:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "19872:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "19872:18:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19892:2:1",
																		"type": "",
																		"value": "21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "19865:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "19865:30:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19865:30:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "19915:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "19926:2:1",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "19911:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "19911:18:1"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "19931:23:1",
																		"type": "",
																		"value": "toAddress_outOfBounds"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "19904:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "19904:51:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19904:51:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "19964:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "19976:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19987:2:1",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "19972:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "19972:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "19964:4:1"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9f688071e1df0f70b63e3651005878331be1fe9591d6cfb3187cb52a13439e5d__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "19802:9:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "19816:4:1",
														"type": ""
													}
												],
												"src": "19651:345:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "20175:152:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "20192:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "20203:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "20185:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "20185:21:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20185:21:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "20226:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "20237:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "20222:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "20222:18:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "20242:1:1",
																		"type": "",
																		"value": "3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "20215:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "20215:29:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20215:29:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "20264:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "20275:2:1",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "20260:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "20260:18:1"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "20280:5:1",
																		"type": "",
																		"value": "STF"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "20253:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "20253:33:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20253:33:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "20295:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "20307:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "20318:2:1",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "20303:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "20303:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "20295:4:1"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_a1c4b1d67db284650e7cfb49cb11ce76848206ad466478425bd3418f8bbb9a86__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "20152:9:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "20166:4:1",
														"type": ""
													}
												],
												"src": "20001:326:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "20506:168:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "20523:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "20534:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "20516:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "20516:21:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20516:21:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "20557:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "20568:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "20553:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "20553:18:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "20573:2:1",
																		"type": "",
																		"value": "18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "20546:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "20546:30:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20546:30:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "20596:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "20607:2:1",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "20592:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "20592:18:1"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "20612:20:1",
																		"type": "",
																		"value": "Too much requested"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "20585:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "20585:48:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20585:48:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "20642:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "20654:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "20665:2:1",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "20650:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "20650:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "20642:4:1"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_a5c1362ddf12293b907d8907d79f16e40792a7ddc4f09ee6d70cfec4ad443305__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "20483:9:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "20497:4:1",
														"type": ""
													}
												],
												"src": "20332:342:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "20853:169:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "20870:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "20881:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "20863:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "20863:21:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20863:21:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "20904:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "20915:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "20900:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "20900:18:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "20920:2:1",
																		"type": "",
																		"value": "19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "20893:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "20893:30:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20893:30:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "20943:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "20954:2:1",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "20939:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "20939:18:1"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "20959:21:1",
																		"type": "",
																		"value": "Transaction too old"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "20932:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "20932:49:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20932:49:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "20990:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "21002:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21013:2:1",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "20998:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "20998:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "20990:4:1"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c2621685b6a86291a4533558eb72fba04db12a0363db47624d86d9bbb608d293__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "20830:9:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "20844:4:1",
														"type": ""
													}
												],
												"src": "20679:343:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "21201:167:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "21218:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21229:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21211:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "21211:21:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21211:21:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "21252:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "21263:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "21248:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "21248:18:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21268:2:1",
																		"type": "",
																		"value": "17"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21241:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "21241:30:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21241:30:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "21291:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "21302:2:1",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "21287:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "21287:18:1"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "21307:19:1",
																		"type": "",
																		"value": "slice_outOfBounds"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21280:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "21280:47:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21280:47:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "21336:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "21348:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21359:2:1",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "21344:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "21344:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "21336:4:1"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "21178:9:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "21192:4:1",
														"type": ""
													}
												],
												"src": "21027:341:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "21547:169:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "21564:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21575:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21557:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "21557:21:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21557:21:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "21598:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "21609:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "21594:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "21594:18:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21614:2:1",
																		"type": "",
																		"value": "19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21587:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "21587:30:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21587:30:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "21637:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "21648:2:1",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "21633:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "21633:18:1"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "21653:21:1",
																		"type": "",
																		"value": "Too little received"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21626:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "21626:49:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21626:49:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "21684:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "21696:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21707:2:1",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "21692:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "21692:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "21684:4:1"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f037a9cbca9be03859489f289f0cf5f85c0414bbfdd9785bc7ab31bd734e249c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "21524:9:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "21538:4:1",
														"type": ""
													}
												],
												"src": "21373:343:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "21895:168:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "21912:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21923:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21905:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "21905:21:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21905:21:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "21946:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "21957:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "21942:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "21942:18:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21962:2:1",
																		"type": "",
																		"value": "18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21935:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "21935:30:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21935:30:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "21985:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "21996:2:1",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "21981:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "21981:18:1"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "22001:20:1",
																		"type": "",
																		"value": "toAddress_overflow"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21974:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "21974:48:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21974:48:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "22031:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "22043:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "22054:2:1",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "22039:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "22039:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "22031:4:1"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f71efb0937d5d9d75bbebe9d7207dad811fd47ced903ea9404d5e8d77eb17a95__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "21872:9:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "21886:4:1",
														"type": ""
													}
												],
												"src": "21721:342:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "22237:305:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "22254:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "22265:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "22247:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "22247:21:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "22247:21:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "22277:33:1",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "22303:6:1"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "22297:5:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "22297:13:1"
															},
															"variables": [
																{
																	"name": "memberValue0",
																	"nodeType": "YulTypedName",
																	"src": "22281:12:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "22330:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "22341:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "22326:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "22326:18:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "22346:4:1",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "22319:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "22319:32:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "22319:32:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "22360:66:1",
															"value": {
																"arguments": [
																	{
																		"name": "memberValue0",
																		"nodeType": "YulIdentifier",
																		"src": "22393:12:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "22411:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "22422:2:1",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "22407:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "22407:18:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes",
																	"nodeType": "YulIdentifier",
																	"src": "22374:18:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "22374:52:1"
															},
															"variables": [
																{
																	"name": "tail_1",
																	"nodeType": "YulTypedName",
																	"src": "22364:6:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "22446:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "22457:4:1",
																				"type": "",
																				"value": "0x40"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "22442:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "22442:20:1"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value0",
																								"nodeType": "YulIdentifier",
																								"src": "22478:6:1"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "22486:2:1",
																								"type": "",
																								"value": "32"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "22474:3:1"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "22474:15:1"
																					}
																				],
																				"functionName": {
																					"name": "mload",
																					"nodeType": "YulIdentifier",
																					"src": "22468:5:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "22468:22:1"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "22500:3:1",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "22505:1:1",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "22496:3:1"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "22496:11:1"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "22509:1:1",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "22492:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "22492:19:1"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "22464:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "22464:48:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "22435:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "22435:78:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "22435:78:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "22522:14:1",
															"value": {
																"name": "tail_1",
																"nodeType": "YulIdentifier",
																"src": "22530:6:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "22522:4:1"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_struct$_SwapCallbackData_$2894_memory_ptr__to_t_struct$_SwapCallbackData_$2894_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "22206:9:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "22217:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "22228:4:1",
														"type": ""
													}
												],
												"src": "22068:474:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "22648:76:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "22658:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "22670:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "22681:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "22666:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "22666:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "22658:4:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "22700:9:1"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "22711:6:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "22693:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "22693:25:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "22693:25:1"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "22617:9:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "22628:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "22639:4:1",
														"type": ""
													}
												],
												"src": "22547:177:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "22823:439:1",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "22833:51:1",
															"value": {
																"arguments": [
																	{
																		"name": "ptr_to_tail",
																		"nodeType": "YulIdentifier",
																		"src": "22872:11:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "22859:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "22859:25:1"
															},
															"variables": [
																{
																	"name": "rel_offset_of_tail",
																	"nodeType": "YulTypedName",
																	"src": "22837:18:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "22973:22:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "addr",
																					"nodeType": "YulIdentifier",
																					"src": "22982:4:1"
																				},
																				{
																					"name": "addr",
																					"nodeType": "YulIdentifier",
																					"src": "22988:4:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "22975:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "22975:18:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "22975:18:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "rel_offset_of_tail",
																				"nodeType": "YulIdentifier",
																				"src": "22907:18:1"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [],
																								"functionName": {
																									"name": "calldatasize",
																									"nodeType": "YulIdentifier",
																									"src": "22935:12:1"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "22935:14:1"
																							},
																							{
																								"name": "base_ref",
																								"nodeType": "YulIdentifier",
																								"src": "22951:8:1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "22931:3:1"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "22931:29:1"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "22966:2:1",
																								"type": "",
																								"value": "30"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "22962:3:1"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "22962:7:1"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "22927:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "22927:43:1"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "22903:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "22903:68:1"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "22896:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "22896:76:1"
															},
															"nodeType": "YulIf",
															"src": "22893:2:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "23004:47:1",
															"value": {
																"arguments": [
																	{
																		"name": "base_ref",
																		"nodeType": "YulIdentifier",
																		"src": "23022:8:1"
																	},
																	{
																		"name": "rel_offset_of_tail",
																		"nodeType": "YulIdentifier",
																		"src": "23032:18:1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "23018:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "23018:33:1"
															},
															"variables": [
																{
																	"name": "addr_1",
																	"nodeType": "YulTypedName",
																	"src": "23008:6:1",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "23060:30:1",
															"value": {
																"arguments": [
																	{
																		"name": "addr_1",
																		"nodeType": "YulIdentifier",
																		"src": "23083:6:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "23070:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "23070:20:1"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "23060:6:1"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "23133:22:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "addr",
																					"nodeType": "YulIdentifier",
																					"src": "23142:4:1"
																				},
																				{
																					"name": "addr",
																					"nodeType": "YulIdentifier",
																					"src": "23148:4:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "23135:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "23135:18:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "23135:18:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "23105:6:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "23113:18:1",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "23102:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "23102:30:1"
															},
															"nodeType": "YulIf",
															"src": "23099:2:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "23164:25:1",
															"value": {
																"arguments": [
																	{
																		"name": "addr_1",
																		"nodeType": "YulIdentifier",
																		"src": "23176:6:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "23184:4:1",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "23172:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "23172:17:1"
															},
															"variableNames": [
																{
																	"name": "addr",
																	"nodeType": "YulIdentifier",
																	"src": "23164:4:1"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "23240:16:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "23249:1:1",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "23252:1:1",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "23242:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "23242:12:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "23242:12:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "addr",
																		"nodeType": "YulIdentifier",
																		"src": "23205:4:1"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [],
																				"functionName": {
																					"name": "calldatasize",
																					"nodeType": "YulIdentifier",
																					"src": "23215:12:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "23215:14:1"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "23231:6:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "23211:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "23211:27:1"
																	}
																],
																"functionName": {
																	"name": "sgt",
																	"nodeType": "YulIdentifier",
																	"src": "23201:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "23201:38:1"
															},
															"nodeType": "YulIf",
															"src": "23198:2:1"
														}
													]
												},
												"name": "access_calldata_tail_t_bytes_calldata_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base_ref",
														"nodeType": "YulTypedName",
														"src": "22780:8:1",
														"type": ""
													},
													{
														"name": "ptr_to_tail",
														"nodeType": "YulTypedName",
														"src": "22790:11:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "addr",
														"nodeType": "YulTypedName",
														"src": "22806:4:1",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "22812:6:1",
														"type": ""
													}
												],
												"src": "22729:533:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "23311:198:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "23321:19:1",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "23337:2:1",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "23331:5:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "23331:9:1"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "23321:6:1"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "23349:35:1",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "23371:6:1"
																	},
																	{
																		"name": "size",
																		"nodeType": "YulIdentifier",
																		"src": "23379:4:1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "23367:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "23367:17:1"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "23353:10:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "23459:13:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "invalid",
																				"nodeType": "YulIdentifier",
																				"src": "23461:7:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "23461:9:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "23461:9:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "23402:10:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "23414:18:1",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "23399:2:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "23399:34:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "23438:10:1"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "23450:6:1"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "23435:2:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "23435:22:1"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "23396:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "23396:62:1"
															},
															"nodeType": "YulIf",
															"src": "23393:2:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "23488:2:1",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "23492:10:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "23481:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "23481:22:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "23481:22:1"
														}
													]
												},
												"name": "allocateMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "23291:4:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "23300:6:1",
														"type": ""
													}
												],
												"src": "23267:242:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "23573:122:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "23617:13:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "invalid",
																				"nodeType": "YulIdentifier",
																				"src": "23619:7:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "23619:9:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "23619:9:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "23589:6:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "23597:18:1",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "23586:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "23586:30:1"
															},
															"nodeType": "YulIf",
															"src": "23583:2:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "23639:50:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "23659:6:1"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "23667:4:1",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "23655:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "23655:17:1"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "23678:2:1",
																						"type": "",
																						"value": "31"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "23674:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "23674:7:1"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "23651:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "23651:31:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "23684:4:1",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "23647:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "23647:42:1"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "23639:4:1"
																}
															]
														}
													]
												},
												"name": "array_allocation_size_t_bytes",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "23553:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "23564:4:1",
														"type": ""
													}
												],
												"src": "23514:181:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "23753:205:1",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "23763:10:1",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "23772:1:1",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "23767:1:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "23832:63:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "23857:3:1"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "23862:1:1"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "23853:3:1"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "23853:11:1"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "23876:3:1"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "23881:1:1"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "23872:3:1"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "23872:11:1"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "23866:5:1"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "23866:18:1"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "23846:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "23846:39:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "23846:39:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "23793:1:1"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "23796:6:1"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "23790:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "23790:13:1"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "23804:19:1",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "23806:15:1",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "23815:1:1"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "23818:2:1",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "23811:3:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "23811:10:1"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "23806:1:1"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "23786:3:1",
																"statements": []
															},
															"src": "23782:113:1"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "23921:31:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "23934:3:1"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "23939:6:1"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "23930:3:1"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "23930:16:1"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "23948:1:1",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "23923:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "23923:27:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "23923:27:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "23910:1:1"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "23913:6:1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "23907:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "23907:13:1"
															},
															"nodeType": "YulIf",
															"src": "23904:2:1"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "23731:3:1",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "23736:3:1",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "23741:6:1",
														"type": ""
													}
												],
												"src": "23700:258:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "24010:86:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "24074:16:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "24083:1:1",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "24086:1:1",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "24076:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "24076:12:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "24076:12:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "24033:5:1"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "24044:5:1"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "24059:3:1",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "24064:1:1",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "24055:3:1"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "24055:11:1"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "24068:1:1",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "24051:3:1"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "24051:19:1"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "24040:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "24040:31:1"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "24030:2:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "24030:42:1"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "24023:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "24023:50:1"
															},
															"nodeType": "YulIf",
															"src": "24020:2:1"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "23999:5:1",
														"type": ""
													}
												],
												"src": "23963:133:1"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_t_address(offset) -> value\n    {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n    function abi_decode_t_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(array, array) }\n        let _1 := calldataload(offset)\n        let array_1 := allocateMemory(array_allocation_size_t_bytes(_1))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(array, array) }\n        calldatacopy(add(array_1, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(array_1, _1), 0x20), array)\n        array := array_1\n    }\n    function abi_decode_t_struct$_ExactInputSingleParams_calldata(offset, end) -> value\n    {\n        if slt(sub(end, offset), 256) { revert(value, value) }\n        value := offset\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_addresst_uint256t_address(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value1, value1) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n        let value_1 := calldataload(add(headStart, 64))\n        validator_revert_t_address(value_1)\n        value2 := value_1\n    }\n    function abi_decode_tuple_t_addresst_uint256t_addresst_uint256t_address(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(value4, value4) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n        let value_1 := calldataload(add(headStart, 64))\n        validator_revert_t_address(value_1)\n        value2 := value_1\n        value3 := calldataload(add(headStart, 96))\n        let value_2 := calldataload(add(headStart, 128))\n        validator_revert_t_address(value_2)\n        value4 := value_2\n    }\n    function abi_decode_tuple_t_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(value5, value5) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let value_1 := calldataload(add(headStart, 96))\n        if iszero(eq(value_1, and(value_1, 0xff))) { revert(value5, value5) }\n        value3 := value_1\n        value4 := calldataload(add(headStart, 128))\n        value5 := calldataload(add(headStart, 160))\n    }\n    function abi_decode_tuple_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value0, value0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(value0, value0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(value0, value0) }\n        if gt(add(add(_2, mul(length, 32)), 32), dataEnd) { revert(value0, value0) }\n        value0 := add(_2, 32)\n        value1 := length\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_int256t_int256_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := mload(headStart)\n        value1 := mload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_int256t_int256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value2, value2) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value2, value2) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(value2, value2) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(value2, value2) }\n        if gt(add(add(_2, length), 32), dataEnd) { revert(value2, value2) }\n        value2 := add(_2, 32)\n        value3 := length\n    }\n    function abi_decode_tuple_t_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let offset := mload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(value0, value0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(value0, value0) }\n        let _2 := mload(_1)\n        let array := allocateMemory(array_allocation_size_t_bytes(_2))\n        mstore(array, _2)\n        if gt(add(add(_1, _2), 32), dataEnd) { revert(value0, value0) }\n        copy_memory_to_memory(add(_1, 32), add(array, 32), _2)\n        value0 := array\n    }\n    function abi_decode_tuple_t_struct$_ExactInputParams_$1674_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value0, value0) }\n        let _2 := add(headStart, offset)\n        if slt(sub(dataEnd, _2), 0xa0) { revert(value0, value0) }\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, 0xa0)\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { invalid() }\n        mstore(64, newFreePtr)\n        let offset_1 := calldataload(_2)\n        if gt(offset_1, _1) { revert(value0, value0) }\n        mstore(memPtr, abi_decode_t_bytes(add(_2, offset_1), dataEnd))\n        mstore(add(memPtr, 32), abi_decode_t_address(add(_2, 32)))\n        mstore(add(memPtr, 64), calldataload(add(_2, 64)))\n        mstore(add(memPtr, 96), calldataload(add(_2, 96)))\n        mstore(add(memPtr, 128), calldataload(add(_2, 128)))\n        value0 := memPtr\n    }\n    function abi_decode_tuple_t_struct$_ExactInputSingleParams_$1655_calldata_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 256) { revert(value0, value0) }\n        value0 := abi_decode_t_struct$_ExactInputSingleParams_calldata(headStart, dataEnd)\n    }\n    function abi_decode_tuple_t_struct$_ExactOutputParams_$1718_calldata_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(value0, value0) }\n        let _1 := add(headStart, offset)\n        if slt(sub(dataEnd, _1), 160) { revert(value0, value0) }\n        value0 := _1\n    }\n    function abi_decode_tuple_t_struct$_ExactOutputSingleParams_$1699_calldata_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 256) { revert(value0, value0) }\n        value0 := abi_decode_t_struct$_ExactInputSingleParams_calldata(headStart, dataEnd)\n    }\n    function abi_decode_tuple_t_struct$_SwapCallbackData_$2894_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value0, value0) }\n        let _2 := add(headStart, offset)\n        if slt(sub(dataEnd, _2), 0x40) { revert(value0, value0) }\n        let memPtr := mload(0x40)\n        let newFreePtr := add(memPtr, 0x40)\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { invalid() }\n        mstore(0x40, newFreePtr)\n        let offset_1 := calldataload(_2)\n        if gt(offset_1, _1) { revert(value0, value0) }\n        mstore(memPtr, abi_decode_t_bytes(add(_2, offset_1), dataEnd))\n        let value := calldataload(add(_2, 32))\n        validator_revert_t_address(value)\n        mstore(add(memPtr, 32), value)\n        value0 := memPtr\n    }\n    function abi_decode_tuple_t_uint160(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint24(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffff))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := mload(headStart)\n    }\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_t_address(value)\n        value1 := value\n    }\n    function abi_decode_tuple_t_uint256t_addresst_uint256t_address(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(value2, value2) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_t_address(value)\n        value1 := value\n        value2 := calldataload(add(headStart, 64))\n        let value_1 := calldataload(add(headStart, 96))\n        validator_revert_t_address(value_1)\n        value3 := value_1\n    }\n    function abi_encode_t_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_packed_t_address_t_uint24_t_address__to_t_address_t_uint24_t_address__nonPadded_inplace_fromStack_reversed(pos, value2, value1, value0) -> end\n    {\n        let _1 := not(0xffffffffffffffffffffffff)\n        mstore(pos, and(shl(96, value0), _1))\n        mstore(add(pos, 20), and(shl(232, value1), shl(232, 16777215)))\n        mstore(add(pos, 23), and(shl(96, value2), _1))\n        end := add(pos, 43)\n    }\n    function abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        calldatacopy(pos, value0, value1)\n        let _1 := add(pos, value1)\n        mstore(_1, end)\n        end := _1\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9_t_address_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_address_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value2, value1, value0) -> end\n    {\n        mstore(pos, shl(248, 255))\n        mstore(add(pos, 1), and(shl(96, value0), not(0xffffffffffffffffffffffff)))\n        mstore(add(pos, 21), value1)\n        mstore(add(pos, 53), value2)\n        end := add(pos, 85)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_payable__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_payable_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_encode_tuple_t_address_payable_t_address_t_uint256_t_uint256_t_bool_t_uint8_t_bytes32_t_bytes32__to_t_address_t_address_t_uint256_t_uint256_t_bool_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value7, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 256)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), iszero(iszero(value4)))\n        mstore(add(headStart, 160), and(value5, 0xff))\n        mstore(add(headStart, 192), value6)\n        mstore(add(headStart, 224), value7)\n    }\n    function abi_encode_tuple_t_address_payable_t_address_t_uint256_t_uint256_t_uint8_t_bytes32_t_bytes32__to_t_address_t_address_t_uint256_t_uint256_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 224)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, 0xff))\n        mstore(add(headStart, 160), value5)\n        mstore(add(headStart, 192), value6)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint24__to_t_address_t_address_t_uint24__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, 0xffffff))\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_bool_t_int256_t_uint160_t_bytes_memory_ptr__to_t_address_t_bool_t_int256_t_uint160_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), iszero(iszero(value1)))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), and(value3, _1))\n        mstore(add(headStart, 128), 160)\n        tail := abi_encode_t_bytes(value4, add(headStart, 160))\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let tail_2 := add(add(headStart, mul(length, _1)), 64)\n        let srcPtr := add(value0, _1)\n        let i := tail\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, add(sub(tail_2, headStart), not(63)))\n            tail_2 := abi_encode_t_bytes(mload(srcPtr), tail_2)\n            srcPtr := add(srcPtr, _1)\n            pos := add(pos, _1)\n        }\n        tail := tail_2\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_t_bytes(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_stringliteral_01e23337f78f001c03af3011e04e4dea54f4997ff97d41da263c1606bf0f9f73__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"Insufficient WETH9\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_2cf3b53843c7738cfb0b95230b455802cee89f2ea29be4a30eee707228c97571__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"Insufficient token\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_428a8ba368fc474210479d5009a3c2ddaf9d762393b1b3cd3cf1b440d48791c5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"toUint24_overflow\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_48541fce89df928ec30caa1aed6c0cd94b8e2ef76b3c68b10b9a184ceadb93d4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 3)\n        mstore(add(headStart, 64), \"STE\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"slice_overflow\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_8e992d6a09e3feb7936717fa482f3a7086f18407e19b697f3153d17fd25870ca__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 2)\n        mstore(add(headStart, 64), \"ST\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_92c5fac6e5cb4f75ffccd9c8f373ae2e2c333a8b9c2fdc616c52c36fa31575dc__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"toUint24_outOfBounds\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_9a5f12903ee10b20c1ea1ca8d6f6723d553112d744fe8db2bc5453efb990e6b1__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 9)\n        mstore(add(headStart, 64), \"Not WETH9\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_9f688071e1df0f70b63e3651005878331be1fe9591d6cfb3187cb52a13439e5d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"toAddress_outOfBounds\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a1c4b1d67db284650e7cfb49cb11ce76848206ad466478425bd3418f8bbb9a86__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 3)\n        mstore(add(headStart, 64), \"STF\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a5c1362ddf12293b907d8907d79f16e40792a7ddc4f09ee6d70cfec4ad443305__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"Too much requested\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_c2621685b6a86291a4533558eb72fba04db12a0363db47624d86d9bbb608d293__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"Transaction too old\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"slice_outOfBounds\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_f037a9cbca9be03859489f289f0cf5f85c0414bbfdd9785bc7ab31bd734e249c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"Too little received\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_f71efb0937d5d9d75bbebe9d7207dad811fd47ced903ea9404d5e8d77eb17a95__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"toAddress_overflow\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_struct$_SwapCallbackData_$2894_memory_ptr__to_t_struct$_SwapCallbackData_$2894_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let memberValue0 := mload(value0)\n        mstore(add(headStart, 32), 0x40)\n        let tail_1 := abi_encode_t_bytes(memberValue0, add(headStart, 96))\n        mstore(add(headStart, 0x40), and(mload(add(value0, 32)), sub(shl(160, 1), 1)))\n        tail := tail_1\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function access_calldata_tail_t_bytes_calldata_ptr(base_ref, ptr_to_tail) -> addr, length\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(30)))) { revert(addr, addr) }\n        let addr_1 := add(base_ref, rel_offset_of_tail)\n        length := calldataload(addr_1)\n        if gt(length, 0xffffffffffffffff) { revert(addr, addr) }\n        addr := add(addr_1, 0x20)\n        if sgt(addr, sub(calldatasize(), length)) { revert(0, 0) }\n    }\n    function allocateMemory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, size)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { invalid() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_t_bytes(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { invalid() }\n        size := add(and(add(length, 0x1f), not(31)), 0x20)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function validator_revert_t_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n}",
									"id": 1,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {
								"1222": [
									{
										"length": 32,
										"start": 2757
									},
									{
										"length": 32,
										"start": 3812
									},
									{
										"length": 32,
										"start": 5694
									}
								],
								"1226": [
									{
										"length": 32,
										"start": 274
									},
									{
										"length": 32,
										"start": 1132
									},
									{
										"length": 32,
										"start": 1328
									},
									{
										"length": 32,
										"start": 1448
									},
									{
										"length": 32,
										"start": 1534
									},
									{
										"length": 32,
										"start": 1730
									},
									{
										"length": 32,
										"start": 5292
									},
									{
										"length": 32,
										"start": 5362
									},
									{
										"length": 32,
										"start": 5496
									}
								]
							},
							"linkReferences": {},
							"object": "6080604052600436106101025760003560e01c8063c04b8d5911610095578063df2ab5bb11610064578063df2ab5bb1461026c578063e0e189a01461027f578063f28c049814610292578063f3995c67146102a5578063fa461e33146102b85761015a565b8063c04b8d591461021e578063c2e3140a14610231578063c45a015514610244578063db3e2198146102595761015a565b80634aa4a4fc116100d15780634aa4a4fc146101b65780639b2c0a37146101d8578063a4a78f0c146101eb578063ac9650d8146101fe5761015a565b806312210e8a1461015f578063414bf389146101675780634659a4941461019057806349404b7c146101a35761015a565b3661015a57336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101585760405162461bcd60e51b815260040161014f90612368565b60405180910390fd5b005b600080fd5b6101586102d8565b61017a610175366004611e1e565b6102ea565b60405161018791906124f1565b60405180910390f35b61015861019e366004611b7c565b6103dd565b6101586101b1366004611f3d565b610452565b3480156101c257600080fd5b506101cb6105a6565b6040516101879190612080565b6101586101e6366004611f6c565b6105ca565b6101586101f9366004611b7c565b610770565b61021161020c366004611bdc565b610806565b60405161018791906121e3565b61017a61022c366004611d73565b610946565b61015861023f366004611b7c565b610a2f565b34801561025057600080fd5b506101cb610ac3565b61017a610267366004611e1e565b610ae7565b61015861027a366004611add565b610be3565b61015861028d366004611b1e565b610c9b565b61017a6102a0366004611e3a565b610d9c565b6101586102b3366004611b7c565b610e67565b3480156102c457600080fd5b506101586102d3366004611c8e565b610e9f565b47156102e8576102e83347610fb2565b565b60008160800135806102fa61103f565b11156103185760405162461bcd60e51b815260040161014f90612403565b6103b160a08401356103306080860160608701611aba565b610341610100870160e08801611aba565b604080518082019091528061035960208a018a611aba565b61036960608b0160408c01611f02565b61037960408c0160208d01611aba565b60405160200161038b93929190611fe1565b6040516020818303038152906040528152602001336001600160a01b0316815250611043565b91508260c001358210156103d75760405162461bcd60e51b815260040161014f9061245b565b50919050565b6040516323f2ebc360e21b81526001600160a01b03871690638fcbaf0c9061041890339030908a908a906001908b908b908b906004016120ae565b600060405180830381600087803b15801561043257600080fd5b505af1158015610446573d6000803e3d6000fd5b50505050505050505050565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906104a1903090600401612080565b60206040518083038186803b1580156104b957600080fd5b505afa1580156104cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f19190611f25565b9050828110156105135760405162461bcd60e51b815260040161014f90612256565b80156105a157604051632e1a7d4d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d906105659084906004016124f1565b600060405180830381600087803b15801561057f57600080fd5b505af1158015610593573d6000803e3d6000fd5b505050506105a18282610fb2565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000821180156105db575060648211155b6105e457600080fd5b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610633903090600401612080565b60206040518083038186803b15801561064b57600080fd5b505afa15801561065f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106839190611f25565b9050848110156106a55760405162461bcd60e51b815260040161014f90612256565b801561076957604051632e1a7d4d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d906106f79084906004016124f1565b600060405180830381600087803b15801561071157600080fd5b505af1158015610725573d6000803e3d6000fd5b505050506000612710610741858461119590919063ffffffff16565b8161074857fe5b049050801561075b5761075b8382610fb2565b61076785828403610fb2565b505b5050505050565b604051636eb1769f60e11b8152600019906001600160a01b0388169063dd62ed3e906107a29033903090600401612094565b60206040518083038186803b1580156107ba57600080fd5b505afa1580156107ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f29190611f25565b1015610767576107678686868686866103dd565b60608167ffffffffffffffff8111801561081f57600080fd5b5060405190808252806020026020018201604052801561085357816020015b606081526020019060019003908161083e5790505b50905060005b8281101561093f576000803086868581811061087157fe5b905060200281019061088391906124fa565b60405161089192919061201c565b600060405180830381855af49150503d80600081146108cc576040519150601f19603f3d011682016040523d82523d6000602084013e6108d1565b606091505b50915091508161091d576044815110156108ea57600080fd5b600481019050808060200190518101906109049190611d09565b60405162461bcd60e51b815260040161014f9190612243565b8084848151811061092a57fe5b60209081029190910101525050600101610859565b5092915050565b600081604001518061095661103f565b11156109745760405162461bcd60e51b815260040161014f90612403565b335b600061098585600001516111bf565b90506109d185606001518261099e5786602001516109a0565b305b600060405180604001604052806109ba8b600001516111cb565b8152602001876001600160a01b0316815250611043565b606086015280156109f15784513092506109ea906111da565b85526109fe565b8460600151935050610a04565b50610976565b8360800151831015610a285760405162461bcd60e51b815260040161014f9061245b565b5050919050565b604051636eb1769f60e11b815285906001600160a01b0388169063dd62ed3e90610a5f9033903090600401612094565b60206040518083038186803b158015610a7757600080fd5b505afa158015610a8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aaf9190611f25565b101561076757610767868686868686610e67565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000816080013580610af761103f565b1115610b155760405162461bcd60e51b815260040161014f90612403565b610bb160a0840135610b2d6080860160608701611aba565b610b3e610100870160e08801611aba565b6040518060400160405280886020016020810190610b5c9190611aba565b610b6c60608b0160408c01611f02565b610b7960208c018c611aba565b604051602001610b8b93929190611fe1565b6040516020818303038152906040528152602001336001600160a01b03168152506111f1565b91508260c00135821115610bd75760405162461bcd60e51b815260040161014f906123d7565b50600019600055919050565b6040516370a0823160e01b81526000906001600160a01b038516906370a0823190610c12903090600401612080565b60206040518083038186803b158015610c2a57600080fd5b505afa158015610c3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c629190611f25565b905082811015610c845760405162461bcd60e51b815260040161014f90612282565b8015610c9557610c9584838361136c565b50505050565b600082118015610cac575060648211155b610cb557600080fd5b6040516370a0823160e01b81526000906001600160a01b038716906370a0823190610ce4903090600401612080565b60206040518083038186803b158015610cfc57600080fd5b505afa158015610d10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d349190611f25565b905084811015610d565760405162461bcd60e51b815260040161014f90612282565b8015610767576000612710610d6b8386611195565b81610d7257fe5b0490508015610d8657610d8687848361136c565b610d93878683850361136c565b50505050505050565b6000816040013580610dac61103f565b1115610dca5760405162461bcd60e51b815260040161014f90612403565b610e3d6060840135610de26040860160208701611aba565b6040805180820190915260009080610dfa89806124fa565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250336020909101526111f1565b5060005491508260800135821115610bd75760405162461bcd60e51b815260040161014f906123d7565b60405163d505accf60e01b81526001600160a01b0387169063d505accf9061041890339030908a908a908a908a908a906004016120f7565b6000841380610eae5750600083135b610eb757600080fd5b6000610ec582840184611e72565b90506000806000610ed9846000015161145a565b925092509250610f0b7f000000000000000000000000000000000000000000000000000000000000000084848461148b565b5060008060008a13610f3257846001600160a01b0316846001600160a01b03161089610f49565b836001600160a01b0316856001600160a01b0316108a5b915091508115610f6857610f6385876020015133846114aa565b610446565b8551610f73906111bf565b15610f98578551610f83906111da565b8652610f9281336000896111f1565b50610446565b8060008190555083945061044685876020015133846114aa565b604080516000808252602082019092526001600160a01b038416908390604051610fdc919061202c565b60006040518083038185875af1925050503d8060008114611019576040519150601f19603f3d011682016040523d82523d6000602084013e61101e565b606091505b50509050806105a15760405162461bcd60e51b815260040161014f906122d9565b4290565b60006001600160a01b038416611057573093505b6000806000611069856000015161145a565b919450925090506001600160a01b038083169084161060008061108d868686611637565b6001600160a01b031663128acb088b856110a68f611675565b6001600160a01b038e16156110bb578d6110e1565b876110da5773fffd8963efd1fc6a506488495d951d5263988d256110e1565b6401000276a45b8d6040516020016110f291906124b4565b6040516020818303038152906040526040518663ffffffff1660e01b8152600401611121959493929190612184565b6040805180830381600087803b15801561113a57600080fd5b505af115801561114e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111729190611c6b565b91509150826111815781611183565b805b6000039b9a5050505050505050505050565b60008215806111b0575050818102818382816111ad57fe5b04145b6111b957600080fd5b92915050565b8051604211155b919050565b60606111b9826000602b61168b565b80516060906111b99083906017906016190161168b565b60006001600160a01b038416611205573093505b6000806000611217856000015161145a565b919450925090506001600160a01b038084169083161060008061123b858786611637565b6001600160a01b031663128acb088b856112548f611675565b6000036001600160a01b038e161561126c578d611292565b8761128b5773fffd8963efd1fc6a506488495d951d5263988d25611292565b6401000276a45b8d6040516020016112a391906124b4565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016112d2959493929190612184565b6040805180830381600087803b1580156112eb57600080fd5b505af11580156112ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113239190611c6b565b9150915060008361133857818360000361133e565b82826000035b90985090506001600160a01b038a1661135d578b811461135d57600080fd5b50505050505050949350505050565b600080846001600160a01b031663a9059cbb60e01b85856040516024016113949291906121ca565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516113d2919061202c565b6000604051808303816000865af19150503d806000811461140f576040519150601f19603f3d011682016040523d82523d6000602084013e611414565b606091505b509150915081801561143e57508051158061143e57508080602001905181019061143e9190611c4b565b6107695760405162461bcd60e51b815260040161014f9061231e565b600080806114688482611767565b92506114758460146117c0565b9050611482846017611767565b91509193909250565b60006114a18561149c868686611812565b611868565b95945050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b03161480156114eb5750804710155b1561160a577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561154b57600080fd5b505af115801561155f573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb92506115b29150859085906004016121ca565b602060405180830381600087803b1580156115cc57600080fd5b505af11580156115e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116049190611c4b565b50610c95565b6001600160a01b03831630141561162b5761162684838361136c565b610c95565b610c958484848461188b565b600061166d7f0000000000000000000000000000000000000000000000000000000000000000611668868686611812565b61197b565b949350505050565b6000600160ff1b821061168757600080fd5b5090565b60608182601f0110156116b05760405162461bcd60e51b815260040161014f906122f6565b8282840110156116d25760405162461bcd60e51b815260040161014f906122f6565b818301845110156116f55760405162461bcd60e51b815260040161014f90612430565b606082158015611714576040519150600082526020820160405261175e565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561174d578051835260209283019201611735565b5050858452601f01601f1916604052505b50949350505050565b60008182601401101561178c5760405162461bcd60e51b815260040161014f90612488565b81601401835110156117b05760405162461bcd60e51b815260040161014f9061238b565b500160200151600160601b900490565b6000818260030110156117e55760405162461bcd60e51b815260040161014f906122ae565b81600301835110156118095760405162461bcd60e51b815260040161014f9061233a565b50016003015190565b61181a611a2c565b826001600160a01b0316846001600160a01b03161115611838579192915b50604080516060810182526001600160a01b03948516815292909316602083015262ffffff169181019190915290565b6000611874838361197b565b9050336001600160a01b038216146111b957600080fd5b600080856001600160a01b03166323b872dd60e01b8686866040516024016118b593929190612160565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516118f3919061202c565b6000604051808303816000865af19150503d8060008114611930576040519150601f19603f3d011682016040523d82523d6000602084013e611935565b606091505b509150915081801561195f57508051158061195f57508080602001905181019061195f9190611c4b565b6107675760405162461bcd60e51b815260040161014f906123ba565b600081602001516001600160a01b031682600001516001600160a01b0316106119a357600080fd5b828260000151836020015184604001516040516020016119c593929190612138565b60408051601f19818403018152908290528051602091820120611a0d939290917fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b549101612048565b60408051601f1981840301815291905280516020909101209392505050565b604080516060810182526000808252602082018190529181019190915290565b80356111c6816125b8565b600082601f830112611a67578081fd5b8135611a7a611a758261256a565b612546565b818152846020838601011115611a8e578283fd5b816020850160208301379081016020019190915292915050565b600061010082840312156103d7578081fd5b600060208284031215611acb578081fd5b8135611ad6816125b8565b9392505050565b600080600060608486031215611af1578182fd5b8335611afc816125b8565b9250602084013591506040840135611b13816125b8565b809150509250925092565b600080600080600060a08688031215611b35578081fd5b8535611b40816125b8565b9450602086013593506040860135611b57816125b8565b9250606086013591506080860135611b6e816125b8565b809150509295509295909350565b60008060008060008060c08789031215611b94578081fd5b8635611b9f816125b8565b95506020870135945060408701359350606087013560ff81168114611bc2578182fd5b9598949750929560808101359460a0909101359350915050565b60008060208385031215611bee578182fd5b823567ffffffffffffffff80821115611c05578384fd5b818501915085601f830112611c18578384fd5b813581811115611c26578485fd5b8660208083028501011115611c39578485fd5b60209290920196919550909350505050565b600060208284031215611c5c578081fd5b81518015158114611ad6578182fd5b60008060408385031215611c7d578182fd5b505080516020909101519092909150565b60008060008060608587031215611ca3578182fd5b8435935060208501359250604085013567ffffffffffffffff80821115611cc8578384fd5b818701915087601f830112611cdb578384fd5b813581811115611ce9578485fd5b886020828501011115611cfa578485fd5b95989497505060200194505050565b600060208284031215611d1a578081fd5b815167ffffffffffffffff811115611d30578182fd5b8201601f81018413611d40578182fd5b8051611d4e611a758261256a565b818152856020838501011115611d62578384fd5b6114a182602083016020860161258c565b600060208284031215611d84578081fd5b813567ffffffffffffffff80821115611d9b578283fd5b9083019060a08286031215611dae578283fd5b60405160a081018181108382111715611dc357fe5b604052823582811115611dd4578485fd5b611de087828601611a57565b825250611def60208401611a4c565b602082015260408301356040820152606083013560608201526080830135608082015280935050505092915050565b60006101008284031215611e30578081fd5b611ad68383611aa8565b600060208284031215611e4b578081fd5b813567ffffffffffffffff811115611e61578182fd5b820160a08185031215611ad6578182fd5b600060208284031215611e83578081fd5b813567ffffffffffffffff80821115611e9a578283fd5b9083019060408286031215611ead578283fd5b604051604081018181108382111715611ec257fe5b604052823582811115611ed3578485fd5b611edf87828601611a57565b82525060208301359250611ef2836125b8565b6020810192909252509392505050565b600060208284031215611f13578081fd5b813562ffffff81168114611ad6578182fd5b600060208284031215611f36578081fd5b5051919050565b60008060408385031215611f4f578182fd5b823591506020830135611f61816125b8565b809150509250929050565b60008060008060808587031215611f81578182fd5b843593506020850135611f93816125b8565b9250604085013591506060850135611faa816125b8565b939692955090935050565b60008151808452611fcd81602086016020860161258c565b601f01601f19169290920160200192915050565b606093841b6bffffffffffffffffffffffff19908116825260e89390931b6001600160e81b0319166014820152921b166017820152602b0190565b6000828483379101908152919050565b6000825161203e81846020870161258c565b9190910192915050565b6001600160f81b0319815260609390931b6bffffffffffffffffffffffff191660018401526015830191909152603582015260550190565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039889168152969097166020870152604086019490945260608501929092521515608084015260ff1660a083015260c082015260e08101919091526101000190565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6001600160a01b03938416815291909216602082015262ffffff909116604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0386811682528515156020830152604082018590528316606082015260a0608082018190526000906121bf90830184611fb5565b979650505050505050565b6001600160a01b03929092168252602082015260400190565b6000602080830181845280855180835260408601915060408482028701019250838701855b8281101561223657603f19888603018452612224858351611fb5565b94509285019290850190600101612208565b5092979650505050505050565b600060208252611ad66020830184611fb5565b602080825260129082015271496e73756666696369656e7420574554483960701b604082015260600190565b60208082526012908201527124b739bab33334b1b4b2b73a103a37b5b2b760711b604082015260600190565b602080825260119082015270746f55696e7432345f6f766572666c6f7760781b604082015260600190565b60208082526003908201526253544560e81b604082015260600190565b6020808252600e908201526d736c6963655f6f766572666c6f7760901b604082015260600190565b60208082526002908201526114d560f21b604082015260600190565b602080825260149082015273746f55696e7432345f6f75744f66426f756e647360601b604082015260600190565b6020808252600990820152684e6f7420574554483960b81b604082015260600190565b602080825260159082015274746f416464726573735f6f75744f66426f756e647360581b604082015260600190565b60208082526003908201526229aa2360e91b604082015260600190565b602080825260129082015271151bdbc81b5d58da081c995c5d595cdd195960721b604082015260600190565b602080825260139082015272151c985b9cd858dd1a5bdb881d1bdbc81bdb19606a1b604082015260600190565b602080825260119082015270736c6963655f6f75744f66426f756e647360781b604082015260600190565b602080825260139082015272151bdbc81b1a5d1d1b19481c9958d95a5d9959606a1b604082015260600190565b602080825260129082015271746f416464726573735f6f766572666c6f7760701b604082015260600190565b6000602082528251604060208401526124d06060840182611fb5565b602094909401516001600160a01b0316604093909301929092525090919050565b90815260200190565b6000808335601e19843603018112612510578283fd5b83018035915067ffffffffffffffff82111561252a578283fd5b60200191503681900382131561253f57600080fd5b9250929050565b60405181810167ffffffffffffffff8111828210171561256257fe5b604052919050565b600067ffffffffffffffff82111561257e57fe5b50601f01601f191660200190565b60005b838110156125a757818101518382015260200161258f565b83811115610c955750506000910152565b6001600160a01b03811681146125cd57600080fd5b5056fea26469706673582212201201df03e515b8d7dc9e629fd1f761e35e5f288d52dbd46cb282386a89e8f93864736f6c63430007060033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x102 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xC04B8D59 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xDF2AB5BB GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xDF2AB5BB EQ PUSH2 0x26C JUMPI DUP1 PUSH4 0xE0E189A0 EQ PUSH2 0x27F JUMPI DUP1 PUSH4 0xF28C0498 EQ PUSH2 0x292 JUMPI DUP1 PUSH4 0xF3995C67 EQ PUSH2 0x2A5 JUMPI DUP1 PUSH4 0xFA461E33 EQ PUSH2 0x2B8 JUMPI PUSH2 0x15A JUMP JUMPDEST DUP1 PUSH4 0xC04B8D59 EQ PUSH2 0x21E JUMPI DUP1 PUSH4 0xC2E3140A EQ PUSH2 0x231 JUMPI DUP1 PUSH4 0xC45A0155 EQ PUSH2 0x244 JUMPI DUP1 PUSH4 0xDB3E2198 EQ PUSH2 0x259 JUMPI PUSH2 0x15A JUMP JUMPDEST DUP1 PUSH4 0x4AA4A4FC GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x4AA4A4FC EQ PUSH2 0x1B6 JUMPI DUP1 PUSH4 0x9B2C0A37 EQ PUSH2 0x1D8 JUMPI DUP1 PUSH4 0xA4A78F0C EQ PUSH2 0x1EB JUMPI DUP1 PUSH4 0xAC9650D8 EQ PUSH2 0x1FE JUMPI PUSH2 0x15A JUMP JUMPDEST DUP1 PUSH4 0x12210E8A EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0x414BF389 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0x4659A494 EQ PUSH2 0x190 JUMPI DUP1 PUSH4 0x49404B7C EQ PUSH2 0x1A3 JUMPI PUSH2 0x15A JUMP JUMPDEST CALLDATASIZE PUSH2 0x15A JUMPI CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x158 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x2368 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x158 PUSH2 0x2D8 JUMP JUMPDEST PUSH2 0x17A PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E1E JUMP JUMPDEST PUSH2 0x2EA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x187 SWAP2 SWAP1 PUSH2 0x24F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x158 PUSH2 0x19E CALLDATASIZE PUSH1 0x4 PUSH2 0x1B7C JUMP JUMPDEST PUSH2 0x3DD JUMP JUMPDEST PUSH2 0x158 PUSH2 0x1B1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F3D JUMP JUMPDEST PUSH2 0x452 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1CB PUSH2 0x5A6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x187 SWAP2 SWAP1 PUSH2 0x2080 JUMP JUMPDEST PUSH2 0x158 PUSH2 0x1E6 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F6C JUMP JUMPDEST PUSH2 0x5CA JUMP JUMPDEST PUSH2 0x158 PUSH2 0x1F9 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B7C JUMP JUMPDEST PUSH2 0x770 JUMP JUMPDEST PUSH2 0x211 PUSH2 0x20C CALLDATASIZE PUSH1 0x4 PUSH2 0x1BDC JUMP JUMPDEST PUSH2 0x806 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x187 SWAP2 SWAP1 PUSH2 0x21E3 JUMP JUMPDEST PUSH2 0x17A PUSH2 0x22C CALLDATASIZE PUSH1 0x4 PUSH2 0x1D73 JUMP JUMPDEST PUSH2 0x946 JUMP JUMPDEST PUSH2 0x158 PUSH2 0x23F CALLDATASIZE PUSH1 0x4 PUSH2 0x1B7C JUMP JUMPDEST PUSH2 0xA2F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x250 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1CB PUSH2 0xAC3 JUMP JUMPDEST PUSH2 0x17A PUSH2 0x267 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E1E JUMP JUMPDEST PUSH2 0xAE7 JUMP JUMPDEST PUSH2 0x158 PUSH2 0x27A CALLDATASIZE PUSH1 0x4 PUSH2 0x1ADD JUMP JUMPDEST PUSH2 0xBE3 JUMP JUMPDEST PUSH2 0x158 PUSH2 0x28D CALLDATASIZE PUSH1 0x4 PUSH2 0x1B1E JUMP JUMPDEST PUSH2 0xC9B JUMP JUMPDEST PUSH2 0x17A PUSH2 0x2A0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E3A JUMP JUMPDEST PUSH2 0xD9C JUMP JUMPDEST PUSH2 0x158 PUSH2 0x2B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B7C JUMP JUMPDEST PUSH2 0xE67 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x158 PUSH2 0x2D3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C8E JUMP JUMPDEST PUSH2 0xE9F JUMP JUMPDEST SELFBALANCE ISZERO PUSH2 0x2E8 JUMPI PUSH2 0x2E8 CALLER SELFBALANCE PUSH2 0xFB2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x80 ADD CALLDATALOAD DUP1 PUSH2 0x2FA PUSH2 0x103F JUMP JUMPDEST GT ISZERO PUSH2 0x318 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x2403 JUMP JUMPDEST PUSH2 0x3B1 PUSH1 0xA0 DUP5 ADD CALLDATALOAD PUSH2 0x330 PUSH1 0x80 DUP7 ADD PUSH1 0x60 DUP8 ADD PUSH2 0x1ABA JUMP JUMPDEST PUSH2 0x341 PUSH2 0x100 DUP8 ADD PUSH1 0xE0 DUP9 ADD PUSH2 0x1ABA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE DUP1 PUSH2 0x359 PUSH1 0x20 DUP11 ADD DUP11 PUSH2 0x1ABA JUMP JUMPDEST PUSH2 0x369 PUSH1 0x60 DUP12 ADD PUSH1 0x40 DUP13 ADD PUSH2 0x1F02 JUMP JUMPDEST PUSH2 0x379 PUSH1 0x40 DUP13 ADD PUSH1 0x20 DUP14 ADD PUSH2 0x1ABA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x38B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1FE1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP PUSH2 0x1043 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0xC0 ADD CALLDATALOAD DUP3 LT ISZERO PUSH2 0x3D7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x245B JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23F2EBC3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0x8FCBAF0C SWAP1 PUSH2 0x418 SWAP1 CALLER SWAP1 ADDRESS SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP12 SWAP1 DUP12 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x20AE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x432 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x446 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x4A1 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x2080 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4CD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4F1 SWAP2 SWAP1 PUSH2 0x1F25 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0x513 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x2256 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x5A1 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x565 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x24F1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x57F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x593 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x5A1 DUP3 DUP3 PUSH2 0xFB2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP3 GT DUP1 ISZERO PUSH2 0x5DB JUMPI POP PUSH1 0x64 DUP3 GT ISZERO JUMPDEST PUSH2 0x5E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x633 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x2080 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x64B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x65F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x683 SWAP2 SWAP1 PUSH2 0x1F25 JUMP JUMPDEST SWAP1 POP DUP5 DUP2 LT ISZERO PUSH2 0x6A5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x2256 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x769 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x6F7 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x24F1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x711 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x725 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 PUSH2 0x2710 PUSH2 0x741 DUP6 DUP5 PUSH2 0x1195 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP2 PUSH2 0x748 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP1 ISZERO PUSH2 0x75B JUMPI PUSH2 0x75B DUP4 DUP3 PUSH2 0xFB2 JUMP JUMPDEST PUSH2 0x767 DUP6 DUP3 DUP5 SUB PUSH2 0xFB2 JUMP JUMPDEST POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 NOT SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH2 0x7A2 SWAP1 CALLER SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x2094 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7CE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7F2 SWAP2 SWAP1 PUSH2 0x1F25 JUMP JUMPDEST LT ISZERO PUSH2 0x767 JUMPI PUSH2 0x767 DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0x3DD JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x81F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x853 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x83E JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x93F JUMPI PUSH1 0x0 DUP1 ADDRESS DUP7 DUP7 DUP6 DUP2 DUP2 LT PUSH2 0x871 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x883 SWAP2 SWAP1 PUSH2 0x24FA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x891 SWAP3 SWAP2 SWAP1 PUSH2 0x201C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x8CC JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x8D1 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x91D JUMPI PUSH1 0x44 DUP2 MLOAD LT ISZERO PUSH2 0x8EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 DUP2 ADD SWAP1 POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x904 SWAP2 SWAP1 PUSH2 0x1D09 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP2 SWAP1 PUSH2 0x2243 JUMP JUMPDEST DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x92A JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0x859 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x40 ADD MLOAD DUP1 PUSH2 0x956 PUSH2 0x103F JUMP JUMPDEST GT ISZERO PUSH2 0x974 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x2403 JUMP JUMPDEST CALLER JUMPDEST PUSH1 0x0 PUSH2 0x985 DUP6 PUSH1 0x0 ADD MLOAD PUSH2 0x11BF JUMP JUMPDEST SWAP1 POP PUSH2 0x9D1 DUP6 PUSH1 0x60 ADD MLOAD DUP3 PUSH2 0x99E JUMPI DUP7 PUSH1 0x20 ADD MLOAD PUSH2 0x9A0 JUMP JUMPDEST ADDRESS JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x9BA DUP12 PUSH1 0x0 ADD MLOAD PUSH2 0x11CB JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP PUSH2 0x1043 JUMP JUMPDEST PUSH1 0x60 DUP7 ADD MSTORE DUP1 ISZERO PUSH2 0x9F1 JUMPI DUP5 MLOAD ADDRESS SWAP3 POP PUSH2 0x9EA SWAP1 PUSH2 0x11DA JUMP JUMPDEST DUP6 MSTORE PUSH2 0x9FE JUMP JUMPDEST DUP5 PUSH1 0x60 ADD MLOAD SWAP4 POP POP PUSH2 0xA04 JUMP JUMPDEST POP PUSH2 0x976 JUMP JUMPDEST DUP4 PUSH1 0x80 ADD MLOAD DUP4 LT ISZERO PUSH2 0xA28 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x245B JUMP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE DUP6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH2 0xA5F SWAP1 CALLER SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x2094 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA8B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xAAF SWAP2 SWAP1 PUSH2 0x1F25 JUMP JUMPDEST LT ISZERO PUSH2 0x767 JUMPI PUSH2 0x767 DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0xE67 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x80 ADD CALLDATALOAD DUP1 PUSH2 0xAF7 PUSH2 0x103F JUMP JUMPDEST GT ISZERO PUSH2 0xB15 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x2403 JUMP JUMPDEST PUSH2 0xBB1 PUSH1 0xA0 DUP5 ADD CALLDATALOAD PUSH2 0xB2D PUSH1 0x80 DUP7 ADD PUSH1 0x60 DUP8 ADD PUSH2 0x1ABA JUMP JUMPDEST PUSH2 0xB3E PUSH2 0x100 DUP8 ADD PUSH1 0xE0 DUP9 ADD PUSH2 0x1ABA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x20 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xB5C SWAP2 SWAP1 PUSH2 0x1ABA JUMP JUMPDEST PUSH2 0xB6C PUSH1 0x60 DUP12 ADD PUSH1 0x40 DUP13 ADD PUSH2 0x1F02 JUMP JUMPDEST PUSH2 0xB79 PUSH1 0x20 DUP13 ADD DUP13 PUSH2 0x1ABA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xB8B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1FE1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP PUSH2 0x11F1 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0xC0 ADD CALLDATALOAD DUP3 GT ISZERO PUSH2 0xBD7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x23D7 JUMP JUMPDEST POP PUSH1 0x0 NOT PUSH1 0x0 SSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0xC12 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x2080 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC2A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC3E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC62 SWAP2 SWAP1 PUSH2 0x1F25 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0xC84 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x2282 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xC95 JUMPI PUSH2 0xC95 DUP5 DUP4 DUP4 PUSH2 0x136C JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 GT DUP1 ISZERO PUSH2 0xCAC JUMPI POP PUSH1 0x64 DUP3 GT ISZERO JUMPDEST PUSH2 0xCB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0xCE4 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x2080 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD10 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD34 SWAP2 SWAP1 PUSH2 0x1F25 JUMP JUMPDEST SWAP1 POP DUP5 DUP2 LT ISZERO PUSH2 0xD56 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x2282 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x767 JUMPI PUSH1 0x0 PUSH2 0x2710 PUSH2 0xD6B DUP4 DUP7 PUSH2 0x1195 JUMP JUMPDEST DUP2 PUSH2 0xD72 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP1 ISZERO PUSH2 0xD86 JUMPI PUSH2 0xD86 DUP8 DUP5 DUP4 PUSH2 0x136C JUMP JUMPDEST PUSH2 0xD93 DUP8 DUP7 DUP4 DUP6 SUB PUSH2 0x136C JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x40 ADD CALLDATALOAD DUP1 PUSH2 0xDAC PUSH2 0x103F JUMP JUMPDEST GT ISZERO PUSH2 0xDCA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x2403 JUMP JUMPDEST PUSH2 0xE3D PUSH1 0x60 DUP5 ADD CALLDATALOAD PUSH2 0xDE2 PUSH1 0x40 DUP7 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1ABA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 SWAP1 DUP1 PUSH2 0xDFA DUP10 DUP1 PUSH2 0x24FA JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP POP SWAP1 DUP3 MSTORE POP CALLER PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE PUSH2 0x11F1 JUMP JUMPDEST POP PUSH1 0x0 SLOAD SWAP2 POP DUP3 PUSH1 0x80 ADD CALLDATALOAD DUP3 GT ISZERO PUSH2 0xBD7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x23D7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xD505ACCF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0xD505ACCF SWAP1 PUSH2 0x418 SWAP1 CALLER SWAP1 ADDRESS SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x20F7 JUMP JUMPDEST PUSH1 0x0 DUP5 SGT DUP1 PUSH2 0xEAE JUMPI POP PUSH1 0x0 DUP4 SGT JUMPDEST PUSH2 0xEB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xEC5 DUP3 DUP5 ADD DUP5 PUSH2 0x1E72 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xED9 DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0x145A JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0xF0B PUSH32 0x0 DUP5 DUP5 DUP5 PUSH2 0x148B JUMP JUMPDEST POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP11 SGT PUSH2 0xF32 JUMPI DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT DUP10 PUSH2 0xF49 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT DUP11 JUMPDEST SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0xF68 JUMPI PUSH2 0xF63 DUP6 DUP8 PUSH1 0x20 ADD MLOAD CALLER DUP5 PUSH2 0x14AA JUMP JUMPDEST PUSH2 0x446 JUMP JUMPDEST DUP6 MLOAD PUSH2 0xF73 SWAP1 PUSH2 0x11BF JUMP JUMPDEST ISZERO PUSH2 0xF98 JUMPI DUP6 MLOAD PUSH2 0xF83 SWAP1 PUSH2 0x11DA JUMP JUMPDEST DUP7 MSTORE PUSH2 0xF92 DUP2 CALLER PUSH1 0x0 DUP10 PUSH2 0x11F1 JUMP JUMPDEST POP PUSH2 0x446 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 SWAP1 SSTORE POP DUP4 SWAP5 POP PUSH2 0x446 DUP6 DUP8 PUSH1 0x20 ADD MLOAD CALLER DUP5 PUSH2 0x14AA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP4 SWAP1 PUSH1 0x40 MLOAD PUSH2 0xFDC SWAP2 SWAP1 PUSH2 0x202C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1019 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x101E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x5A1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x22D9 JUMP JUMPDEST TIMESTAMP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1057 JUMPI ADDRESS SWAP4 POP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1069 DUP6 PUSH1 0x0 ADD MLOAD PUSH2 0x145A JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND SWAP1 DUP5 AND LT PUSH1 0x0 DUP1 PUSH2 0x108D DUP7 DUP7 DUP7 PUSH2 0x1637 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x128ACB08 DUP12 DUP6 PUSH2 0x10A6 DUP16 PUSH2 0x1675 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 AND ISZERO PUSH2 0x10BB JUMPI DUP14 PUSH2 0x10E1 JUMP JUMPDEST DUP8 PUSH2 0x10DA JUMPI PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D25 PUSH2 0x10E1 JUMP JUMPDEST PUSH5 0x1000276A4 JUMPDEST DUP14 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x10F2 SWAP2 SWAP1 PUSH2 0x24B4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1121 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2184 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x113A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x114E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1172 SWAP2 SWAP1 PUSH2 0x1C6B JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP3 PUSH2 0x1181 JUMPI DUP2 PUSH2 0x1183 JUMP JUMPDEST DUP1 JUMPDEST PUSH1 0x0 SUB SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0x11B0 JUMPI POP POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0x11AD JUMPI INVALID JUMPDEST DIV EQ JUMPDEST PUSH2 0x11B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x42 GT ISZERO JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x11B9 DUP3 PUSH1 0x0 PUSH1 0x2B PUSH2 0x168B JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 PUSH2 0x11B9 SWAP1 DUP4 SWAP1 PUSH1 0x17 SWAP1 PUSH1 0x16 NOT ADD PUSH2 0x168B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1205 JUMPI ADDRESS SWAP4 POP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1217 DUP6 PUSH1 0x0 ADD MLOAD PUSH2 0x145A JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND SWAP1 DUP4 AND LT PUSH1 0x0 DUP1 PUSH2 0x123B DUP6 DUP8 DUP7 PUSH2 0x1637 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x128ACB08 DUP12 DUP6 PUSH2 0x1254 DUP16 PUSH2 0x1675 JUMP JUMPDEST PUSH1 0x0 SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 AND ISZERO PUSH2 0x126C JUMPI DUP14 PUSH2 0x1292 JUMP JUMPDEST DUP8 PUSH2 0x128B JUMPI PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D25 PUSH2 0x1292 JUMP JUMPDEST PUSH5 0x1000276A4 JUMPDEST DUP14 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x12A3 SWAP2 SWAP1 PUSH2 0x24B4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12D2 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2184 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x12EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x12FF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1323 SWAP2 SWAP1 PUSH2 0x1C6B JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP4 PUSH2 0x1338 JUMPI DUP2 DUP4 PUSH1 0x0 SUB PUSH2 0x133E JUMP JUMPDEST DUP3 DUP3 PUSH1 0x0 SUB JUMPDEST SWAP1 SWAP9 POP SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH2 0x135D JUMPI DUP12 DUP2 EQ PUSH2 0x135D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1394 SWAP3 SWAP2 SWAP1 PUSH2 0x21CA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x13D2 SWAP2 SWAP1 PUSH2 0x202C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x140F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1414 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x143E JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0x143E JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x143E SWAP2 SWAP1 PUSH2 0x1C4B JUMP JUMPDEST PUSH2 0x769 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x231E JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x1468 DUP5 DUP3 PUSH2 0x1767 JUMP JUMPDEST SWAP3 POP PUSH2 0x1475 DUP5 PUSH1 0x14 PUSH2 0x17C0 JUMP JUMPDEST SWAP1 POP PUSH2 0x1482 DUP5 PUSH1 0x17 PUSH2 0x1767 JUMP JUMPDEST SWAP2 POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14A1 DUP6 PUSH2 0x149C DUP7 DUP7 DUP7 PUSH2 0x1812 JUMP JUMPDEST PUSH2 0x1868 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x14EB JUMPI POP DUP1 SELFBALANCE LT ISZERO JUMPDEST ISZERO PUSH2 0x160A JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x154B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x155F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP4 POP PUSH4 0xA9059CBB SWAP3 POP PUSH2 0x15B2 SWAP2 POP DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x21CA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x15CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x15E0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1604 SWAP2 SWAP1 PUSH2 0x1C4B JUMP JUMPDEST POP PUSH2 0xC95 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ADDRESS EQ ISZERO PUSH2 0x162B JUMPI PUSH2 0x1626 DUP5 DUP4 DUP4 PUSH2 0x136C JUMP JUMPDEST PUSH2 0xC95 JUMP JUMPDEST PUSH2 0xC95 DUP5 DUP5 DUP5 DUP5 PUSH2 0x188B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x166D PUSH32 0x0 PUSH2 0x1668 DUP7 DUP7 DUP7 PUSH2 0x1812 JUMP JUMPDEST PUSH2 0x197B JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0xFF SHL DUP3 LT PUSH2 0x1687 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 DUP3 PUSH1 0x1F ADD LT ISZERO PUSH2 0x16B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x22F6 JUMP JUMPDEST DUP3 DUP3 DUP5 ADD LT ISZERO PUSH2 0x16D2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x22F6 JUMP JUMPDEST DUP2 DUP4 ADD DUP5 MLOAD LT ISZERO PUSH2 0x16F5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x2430 JUMP JUMPDEST PUSH1 0x60 DUP3 ISZERO DUP1 ISZERO PUSH2 0x1714 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x0 DUP3 MSTORE PUSH1 0x20 DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x175E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F DUP5 AND DUP1 ISZERO PUSH1 0x20 MUL DUP2 DUP5 ADD ADD DUP6 DUP2 ADD DUP8 DUP4 ISZERO PUSH1 0x20 MUL DUP5 DUP12 ADD ADD ADD JUMPDEST DUP2 DUP4 LT ISZERO PUSH2 0x174D JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x1735 JUMP JUMPDEST POP POP DUP6 DUP5 MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x40 MSTORE POP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP3 PUSH1 0x14 ADD LT ISZERO PUSH2 0x178C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x2488 JUMP JUMPDEST DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH2 0x17B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x238B JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP3 PUSH1 0x3 ADD LT ISZERO PUSH2 0x17E5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x22AE JUMP JUMPDEST DUP2 PUSH1 0x3 ADD DUP4 MLOAD LT ISZERO PUSH2 0x1809 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x233A JUMP JUMPDEST POP ADD PUSH1 0x3 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH2 0x181A PUSH2 0x1A2C JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x1838 JUMPI SWAP2 SWAP3 SWAP2 JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 SWAP1 SWAP4 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH3 0xFFFFFF AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1874 DUP4 DUP4 PUSH2 0x197B JUMP JUMPDEST SWAP1 POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ PUSH2 0x11B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x18B5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2160 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x18F3 SWAP2 SWAP1 PUSH2 0x202C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1930 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1935 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x195F JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0x195F JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x195F SWAP2 SWAP1 PUSH2 0x1C4B JUMP JUMPDEST PUSH2 0x767 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F SWAP1 PUSH2 0x23BA JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT PUSH2 0x19A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP3 PUSH1 0x0 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x19C5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2138 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH2 0x1A0D SWAP4 SWAP3 SWAP1 SWAP2 PUSH32 0xE34F199B19B2B4F47F68442619D555527D244F78A3297EA89325F843F87B8B54 SWAP2 ADD PUSH2 0x2048 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x11C6 DUP2 PUSH2 0x25B8 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1A67 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1A7A PUSH2 0x1A75 DUP3 PUSH2 0x256A JUMP JUMPDEST PUSH2 0x2546 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x1A8E JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY SWAP1 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3D7 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1ACB JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1AD6 DUP2 PUSH2 0x25B8 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1AF1 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x1AFC DUP2 PUSH2 0x25B8 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x1B13 DUP2 PUSH2 0x25B8 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1B35 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x1B40 DUP2 PUSH2 0x25B8 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x1B57 DUP2 PUSH2 0x25B8 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH2 0x1B6E DUP2 PUSH2 0x25B8 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1B94 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x1B9F DUP2 PUSH2 0x25B8 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x1BC2 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 PUSH1 0x80 DUP2 ADD CALLDATALOAD SWAP5 PUSH1 0xA0 SWAP1 SWAP2 ADD CALLDATALOAD SWAP4 POP SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1BEE JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1C05 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1C18 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1C26 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x1C39 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C5C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1AD6 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C7D JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1CA3 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1CC8 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1CDB JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1CE9 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1CFA JUMPI DUP5 DUP6 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP POP PUSH1 0x20 ADD SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D1A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1D30 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0x1D40 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x1D4E PUSH2 0x1A75 DUP3 PUSH2 0x256A JUMP JUMPDEST DUP2 DUP2 MSTORE DUP6 PUSH1 0x20 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0x1D62 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x14A1 DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x258C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D84 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1D9B JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0xA0 DUP3 DUP7 SUB SLT ISZERO PUSH2 0x1DAE JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xA0 DUP2 ADD DUP2 DUP2 LT DUP4 DUP3 GT OR ISZERO PUSH2 0x1DC3 JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE DUP3 CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x1DD4 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x1DE0 DUP8 DUP3 DUP7 ADD PUSH2 0x1A57 JUMP JUMPDEST DUP3 MSTORE POP PUSH2 0x1DEF PUSH1 0x20 DUP5 ADD PUSH2 0x1A4C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE DUP1 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E30 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1AD6 DUP4 DUP4 PUSH2 0x1AA8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E4B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1E61 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 ADD PUSH1 0xA0 DUP2 DUP6 SUB SLT ISZERO PUSH2 0x1AD6 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E83 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1E9A JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0x40 DUP3 DUP7 SUB SLT ISZERO PUSH2 0x1EAD JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD DUP2 DUP2 LT DUP4 DUP3 GT OR ISZERO PUSH2 0x1EC2 JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE DUP3 CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x1ED3 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x1EDF DUP8 DUP3 DUP7 ADD PUSH2 0x1A57 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP3 POP PUSH2 0x1EF2 DUP4 PUSH2 0x25B8 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F13 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1AD6 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F36 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1F4F JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1F61 DUP2 PUSH2 0x25B8 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1F81 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x1F93 DUP2 PUSH2 0x25B8 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x1FAA DUP2 PUSH2 0x25B8 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1FCD DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x258C JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 SWAP4 DUP5 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0xE8 SWAP4 SWAP1 SWAP4 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE8 SHL SUB NOT AND PUSH1 0x14 DUP3 ADD MSTORE SWAP3 SHL AND PUSH1 0x17 DUP3 ADD MSTORE PUSH1 0x2B ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x203E DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x258C JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP4 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 DUP5 ADD MSTORE PUSH1 0x15 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x35 DUP3 ADD MSTORE PUSH1 0x55 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP9 DUP10 AND DUP2 MSTORE SWAP7 SWAP1 SWAP8 AND PUSH1 0x20 DUP8 ADD MSTORE PUSH1 0x40 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x60 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE ISZERO ISZERO PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xFF AND PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x100 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP8 DUP9 AND DUP2 MSTORE SWAP6 SWAP1 SWAP7 AND PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xFF AND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xE0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH3 0xFFFFFF SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 ISZERO ISZERO PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD DUP6 SWAP1 MSTORE DUP4 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x21BF SWAP1 DUP4 ADD DUP5 PUSH2 0x1FB5 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP5 DUP3 MUL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2236 JUMPI PUSH1 0x3F NOT DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x2224 DUP6 DUP4 MLOAD PUSH2 0x1FB5 JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2208 JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x1AD6 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1FB5 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH18 0x496E73756666696369656E74205745544839 PUSH1 0x70 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH18 0x24B739BAB33334B1B4B2B73A103A37B5B2B7 PUSH1 0x71 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x746F55696E7432345F6F766572666C6F77 PUSH1 0x78 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3 SWAP1 DUP3 ADD MSTORE PUSH3 0x535445 PUSH1 0xE8 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH14 0x736C6963655F6F766572666C6F77 PUSH1 0x90 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2 SWAP1 DUP3 ADD MSTORE PUSH2 0x14D5 PUSH1 0xF2 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH20 0x746F55696E7432345F6F75744F66426F756E6473 PUSH1 0x60 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x9 SWAP1 DUP3 ADD MSTORE PUSH9 0x4E6F74205745544839 PUSH1 0xB8 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH21 0x746F416464726573735F6F75744F66426F756E6473 PUSH1 0x58 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3 SWAP1 DUP3 ADD MSTORE PUSH3 0x29AA23 PUSH1 0xE9 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH18 0x151BDBC81B5D58DA081C995C5D595CDD1959 PUSH1 0x72 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH19 0x151C985B9CD858DD1A5BDB881D1BDBC81BDB19 PUSH1 0x6A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x736C6963655F6F75744F66426F756E6473 PUSH1 0x78 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH19 0x151BDBC81B1A5D1D1B19481C9958D95A5D9959 PUSH1 0x6A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH18 0x746F416464726573735F6F766572666C6F77 PUSH1 0x70 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 MLOAD PUSH1 0x40 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x24D0 PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x1FB5 JUMP JUMPDEST PUSH1 0x20 SWAP5 SWAP1 SWAP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x2510 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x252A JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x253F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x2562 JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x257E JUMPI INVALID JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x25A7 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x258F JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xC95 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x25CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLT ADD 0xDF SUB 0xE5 ISZERO 0xB8 0xD7 0xDC SWAP15 PUSH3 0x9FD1F7 PUSH2 0xE35E 0x5F 0x28 DUP14 MSTORE 0xDB 0xD4 PUSH13 0xB282386A89E8F93864736F6C63 NUMBER STOP SMOD MOD STOP CALLER ",
							"sourceMap": "77153:8562:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;32038:10;-1:-1:-1;;;;;32052:5:0;32038:19;;32030:41;;;;-1:-1:-1;;;32030:41:0;;;;;;;:::i;:::-;;;;;;;;;77153:8562;;;;;33034:162;;;:::i;80771:561::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;26487:298;;;;;;:::i;:::-;;:::i;32127:405::-;;;;;;:::i;:::-;;:::i;31650:39::-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;34400:715::-;;;;;;:::i;:::-;;:::i;26826:358::-;;;;;;:::i;:::-;;:::i;17428:669::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;81373:1309::-;;;;;;:::i;:::-;;:::i;26123:323::-;;;;;;:::i;:::-;;:::i;31556:41::-;;;;;;;;;;;;;:::i;84146:750::-;;;;;;:::i;:::-;;:::i;32580:406::-;;;;;;:::i;:::-;;:::i;35170:695::-;;;;;;:::i;:::-;;:::i;84937:775::-;;;;;;:::i;:::-;;:::i;25800:282::-;;;;;;:::i;:::-;;:::i;78393:1321::-;;;;;;;;;;-1:-1:-1;78393:1321:0;;;;;:::i;:::-;;:::i;33034:162::-;33096:21;:25;33092:96;;33123:65;33154:10;33166:21;33123:30;:65::i;:::-;33034:162::o;80771:561::-;80948:17;80913:6;:15;;;30752:8;30731:17;:15;:17::i;:::-;:29;;30723:61;;;;-1:-1:-1;;;30723:61:0;;;;;;;:::i;:::-;80995:250:::1;81028:15;::::0;::::1;;81058:16;::::0;;;::::1;::::0;::::1;;:::i;:::-;81089:24;::::0;;;::::1;::::0;::::1;;:::i;:::-;81128:106;::::0;;;;::::1;::::0;;;;81169:14:::1;;::::0;::::1;:6:::0;:14:::1;:::i;:::-;81185:10;::::0;;;::::1;::::0;::::1;;:::i;:::-;81197:15;::::0;;;::::1;::::0;::::1;;:::i;:::-;81152:61;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;81128:106;;;;81222:10;-1:-1:-1::0;;;;;81128:106:0::1;;;::::0;80995:18:::1;:250::i;:::-;80983:262;;81277:6;:23;;;81264:9;:36;;81256:68;;;;-1:-1:-1::0;;;81256:68:0::1;;;;;;;:::i;:::-;80771:561:::0;;;;:::o;26487:298::-;26687:90;;-1:-1:-1;;;26687:90:0;;-1:-1:-1;;;;;26687:33:0;;;;;:90;;26721:10;;26741:4;;26748:5;;26755:6;;26763:4;;26769:1;;26772;;26775;;26687:90;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26487:298;;;;;;:::o;32127:405::-;32248:38;;-1:-1:-1;;;32248:38:0;;32225:20;;-1:-1:-1;;;;;32255:5:0;32248:23;;;;:38;;32280:4;;32248:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;32225:61;;32321:13;32305:12;:29;;32297:60;;;;-1:-1:-1;;;32297:60:0;;;;;;;:::i;:::-;32374:16;;32370:155;;32407:36;;-1:-1:-1;;;32407:36:0;;-1:-1:-1;;;;;32414:5:0;32407:22;;;;:36;;32430:12;;32407:36;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;32458:55;32489:9;32500:12;32458:30;:55::i;:::-;32127:405;;;:::o;31650:39::-;;;:::o;34400:715::-;34605:1;34595:7;:11;:29;;;;;34621:3;34610:7;:14;;34595:29;34587:38;;;;;;34661;;-1:-1:-1;;;34661:38:0;;34638:20;;-1:-1:-1;;;;;34668:5:0;34661:23;;;;:38;;34693:4;;34661:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;34638:61;;34734:13;34718:12;:29;;34710:60;;;;-1:-1:-1;;;34710:60:0;;;;;;;:::i;:::-;34787:16;;34783:325;;34820:36;;-1:-1:-1;;;34820:36:0;;-1:-1:-1;;;;;34827:5:0;34820:22;;;;:36;;34843:12;;34820:36;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;34871:17;34919:6;34891:25;34908:7;34891:12;:16;;:25;;;;:::i;:::-;:34;;;;;;;-1:-1:-1;34944:13:0;;34940:74;;34959:55;34990:12;35004:9;34959:30;:55::i;:::-;35029:67;35060:9;35086;35071:12;:24;35029:30;:67::i;:::-;34783:325;;34400:715;;;;;:::o;26826:358::-;27043:50;;-1:-1:-1;;;27043:50:0;;-1:-1:-1;;27096:17:0;-1:-1:-1;;;;;27043:23:0;;;;;:50;;27067:10;;27087:4;;27043:50;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:70;27039:137;;;27128:48;27146:5;27153;27160:6;27168:1;27171;27174;27128:17;:48::i;17428:669::-;17503:22;17560:4;17548:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17538:34;;17588:9;17583:507;17603:15;;;17583:507;;;17641:12;;17686:4;17705;;17710:1;17705:7;;;;;;;;;;;;;;;;;;:::i;:::-;17678:35;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17640:73;;;;17735:7;17730:313;;17864:2;17848:6;:13;:18;17844:32;;;17868:8;;;17844:32;17949:4;17941:6;17937:17;17927:27;;18009:6;17998:28;;;;;;;;;;;;:::i;:::-;17991:36;;-1:-1:-1;;;17991:36:0;;;;;;;;:::i;17730:313::-;18072:6;18059:7;18067:1;18059:10;;;;;;;;;;;;;;;;;:19;-1:-1:-1;;17620:3:0;;17583:507;;;;17428:669;;;;:::o;81373:1309::-;81536:17;81501:6;:15;;;30752:8;30731:17;:15;:17::i;:::-;:29;;30723:61;;;;-1:-1:-1;;;30723:61:0;;;;;;;:::i;:::-;81587:10:::1;81647:947;81675:21;81699:30;:6;:11;;;:28;:30::i;:::-;81675:54;;81844:402;81881:6;:15;;;81915:16;:51;;81950:6;:16;;;81915:51;;;81942:4;81915:51;82036:1;82056:175;;;;;;;;82102:26;:6;:11;;;:24;:26::i;:::-;82056:175;;;;82206:5;-1:-1:-1::0;;;;;82056:175:0::1;;;::::0;81844:18:::1;:402::i;:::-;81826:15;::::0;::::1;:420:::0;82319:264;::::1;;;82452:11:::0;;82376:4:::1;::::0;-1:-1:-1;82452:23:0::1;::::0;:21:::1;:23::i;:::-;82438:37:::0;;82319:264:::1;;;82528:6;:15;;;82516:27;;82562:5;;;82319:264;81647:947;;;;82627:6;:23;;;82614:9;:36;;82606:68;;;;-1:-1:-1::0;;;82606:68:0::1;;;;;;;:::i;:::-;30795:1;81373:1309:::0;;;;:::o;26123:323::-;26335:50;;-1:-1:-1;;;26335:50:0;;26388:5;;-1:-1:-1;;;;;26335:23:0;;;;;:50;;26359:10;;26379:4;;26335:50;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:58;26331:107;;;26395:43;26406:5;26413;26420:8;26430:1;26433;26436;26395:10;:43::i;31556:41::-;;;:::o;84146:750::-;84325:16;84290:6;:15;;;30752:8;30731:17;:15;:17::i;:::-;:29;;30723:61;;;;-1:-1:-1;;;30723:61:0;;;;;;;:::i;:::-;84427:252:::1;84461:16;::::0;::::1;;84492;::::0;;;::::1;::::0;::::1;;:::i;:::-;84523:24;::::0;;;::::1;::::0;::::1;;:::i;:::-;84562:106;;;;;;;;84603:6;:15;;;;;;;;;;:::i;:::-;84620:10;::::0;;;::::1;::::0;::::1;;:::i;:::-;84632:14;;::::0;::::1;:6:::0;:14:::1;:::i;:::-;84586:61;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;84562:106;;;;84656:10;-1:-1:-1::0;;;;;84562:106:0::1;;;::::0;84427:19:::1;:252::i;:::-;84416:263;;84712:6;:22;;;84700:8;:34;;84692:65;;;;-1:-1:-1::0;;;84692:65:0::1;;;;;;;:::i;:::-;-1:-1:-1::0;;;84847:14:0::1;:41:::0;84146:750;;-1:-1:-1;84146:750:0:o;32580:406::-;32749:38;;-1:-1:-1;;;32749:38:0;;32726:20;;-1:-1:-1;;;;;32749:23:0;;;;;:38;;32781:4;;32749:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;32726:61;;32822:13;32806:12;:29;;32798:60;;;;-1:-1:-1;;;32798:60:0;;;;;;;:::i;:::-;32875:16;;32871:108;;32908:59;32936:5;32943:9;32954:12;32908:27;:59::i;:::-;32580:406;;;;:::o;35170:695::-;35398:1;35388:7;:11;:29;;;;;35414:3;35403:7;:14;;35388:29;35380:38;;;;;;35454;;-1:-1:-1;;;35454:38:0;;35431:20;;-1:-1:-1;;;;;35454:23:0;;;;;:38;;35486:4;;35454:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;35431:61;;35527:13;35511:12;:29;;35503:60;;;;-1:-1:-1;;;35503:60:0;;;;;;;:::i;:::-;35580:16;;35576:282;;35613:17;35661:6;35633:25;:12;35650:7;35633:16;:25::i;:::-;:34;;;;;;;-1:-1:-1;35686:13:0;;35682:78;;35701:59;35729:5;35736:12;35750:9;35701:27;:59::i;:::-;35775:71;35803:5;35810:9;35836;35821:12;:24;35775:27;:71::i;:::-;35576:282;35170:695;;;;;;:::o;84937:775::-;85104:16;85069:6;:15;;;30752:8;30731:17;:15;:17::i;:::-;:29;;30723:61;;;;-1:-1:-1;;;30723:61:0;;;;;;;:::i;:::-;85359:179:::1;85393:16;::::0;::::1;;85424;::::0;;;::::1;::::0;::::1;;:::i;:::-;85471:56;::::0;;;;::::1;::::0;;;85455:1:::1;::::0;85471:56;85495:11:::1;:6:::0;;:11:::1;:::i;:::-;85471:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;::::0;;;;-1:-1:-1;;;85471:56:0;;;-1:-1:-1;85515:10:0::1;85471:56;::::0;;::::1;::::0;85359:19:::1;:179::i;:::-;;85562:14;;85551:25;;85607:6;:22;;;85595:8;:34;;85587:65;;;;-1:-1:-1::0;;;85587:65:0::1;;;;;;;:::i;25800:282::-:0;25995:79;;-1:-1:-1;;;25995:79:0;;-1:-1:-1;;;;;25995:26:0;;;;;:79;;26022:10;;26042:4;;26049:5;;26056:8;;26066:1;;26069;;26072;;25995:79;;;:::i;78393:1321::-;78574:1;78559:12;:16;:36;;;;78594:1;78579:12;:16;78559:36;78551:45;;;;;;78670:28;78701:37;;;;78712:5;78701:37;:::i;:::-;78670:68;;78750:15;78767:16;78785:10;78799:27;:4;:9;;;:25;:27::i;:::-;78749:77;;;;;;78837:66;78871:7;78880;78889:8;78899:3;78837:33;:66::i;:::-;;78917:17;78936:19;78987:1;78972:12;:16;:142;;79083:7;-1:-1:-1;;;;;79072:18:0;:8;-1:-1:-1;;;;;79072:18:0;;79100:12;78972:142;;;79019:8;-1:-1:-1;;;;;79009:18:0;:7;-1:-1:-1;;;;;79009:18:0;;79037:12;78972:142;78916:198;;;;79129:12;79125:582;;;79158:49;79162:7;79171:4;:10;;;79183;79195:11;79158:3;:49::i;:::-;79125:582;;;79297:9;;:28;;:26;:28::i;:::-;79293:403;;;79358:9;;:21;;:19;:21::i;:::-;79346:33;;79398:53;79418:11;79431:10;79346:9;:4;79398:19;:53::i;:::-;;79293:403;;;79509:11;79492:14;:28;;;;79549:8;79539:18;;79631:49;79635:7;79644:4;:10;;;79656;79668:11;79631:3;:49::i;29565:168::-;29678:12;;;29638;29678;;;;;;;;;-1:-1:-1;;;;;29656:7:0;;;29671:5;;29656:35;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;29637:54;;;29710:7;29702:23;;;;-1:-1:-1;;;29702:23:0;;;;;;;:::i;30411:108::-;30496:15;30411:108;:::o;79771:959::-;79953:17;-1:-1:-1;;;;;80051:23:0;;80047:54;;80096:4;80076:25;;80047:54;80115:15;80132:16;80150:10;80164:27;:4;:9;;;:25;:27::i;:::-;80114:77;;-1:-1:-1;80114:77:0;-1:-1:-1;80114:77:0;-1:-1:-1;;;;;;80222:18:0;;;;;;;80204:15;;80301:31;80114:77;;;80301:7;:31::i;:::-;-1:-1:-1;;;;;80301:36:0;;80356:9;80384:10;80413:19;:8;:17;:19::i;:::-;-1:-1:-1;;;;;80451:22:0;;;:159;;80593:17;80451:159;;;80498:10;:70;;80541:27;80498:70;;;80511:27;80498:70;80640:4;80629:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;80301:359;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;80253:407;;;;80690:10;:30;;80713:7;80690:30;;;80703:7;80690:30;80688:33;;;79771:959;-1:-1:-1;;;;;;;;;;;79771:959:0:o;21802:127::-;21860:9;21890:6;;;:30;;-1:-1:-1;;21905:5:0;;;21919:1;21914;21905:5;21914:1;21900:15;;;;;:20;21890:30;21882:39;;;;;;21802:127;;;;:::o;7213:140::-;7305:11;;6993:24;-1:-1:-1;7305:40:0;7213:140;;;;:::o;8574:129::-;8638:12;8670:25;:4;8681:1;6832:23;8670:10;:25::i;8897:151::-;9014:11;;8958:12;;8990:50;;9014:4;;6719:20;;-1:-1:-1;;9014:25:0;8990:10;:50::i;82740:1365::-;82924:16;-1:-1:-1;;;;;83021:23:0;;83017:54;;83066:4;83046:25;;83017:54;83085:16;83103:15;83120:10;83134:27;:4;:9;;;:25;:27::i;:::-;83084:77;;-1:-1:-1;83084:77:0;-1:-1:-1;83084:77:0;-1:-1:-1;;;;;;83192:18:0;;;;;;;83174:15;;83281:31;83084:77;;;83281:7;:31::i;:::-;-1:-1:-1;;;;;83281:36:0;;83336:9;83364:10;83394:20;:9;:18;:20::i;:::-;83393:21;;-1:-1:-1;;;;;83433:22:0;;;:159;;83575:17;83433:159;;;83480:10;:70;;83523:27;83480:70;;;83493:27;83480:70;83622:4;83611:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;83281:361;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;83223:419;;;;83655:25;83723:10;:136;;83821:12;83845;83844:13;;83723:136;;;83758:12;83782;83781:13;;83723:136;83691:168;;-1:-1:-1;83691:168:0;-1:-1:-1;;;;;;84034:22:0;;84030:67;;84087:9;84066:17;:30;84058:39;;;;;;82740:1365;;;;;;;;;;;;;:::o;28379:316::-;28498:12;28512:17;28533:5;-1:-1:-1;;;;;28533:10:0;28567:24;;;28593:2;28597:5;28544:59;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;28544:59:0;;;;;;;;;;;;;;-1:-1:-1;;;;;28544:59:0;-1:-1:-1;;;;;;28544:59:0;;;;;;;;;;28533:71;;;;28544:59;28533:71;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;28497:107;;;;28623:7;:57;;;;-1:-1:-1;28635:11:0;;:16;;:44;;;28666:4;28655:24;;;;;;;;;;;;:::i;:::-;28615:72;;;;-1:-1:-1;;;28615:72:0;;;;;;;:::i;8017:326::-;8125:14;;;8230:17;:4;8125:14;8230;:17::i;:::-;8221:26;-1:-1:-1;8264:24:0;:4;6511:2;8264:13;:24::i;:::-;8258:30;-1:-1:-1;8308:27:0;:4;6719:20;8308:14;:27::i;:::-;8299:36;;8017:326;;;;;:::o;66188:266::-;66339:19;66378:68;66393:7;66402:43;66425:6;66433;66441:3;66402:22;:43::i;:::-;66378:14;:68::i;:::-;66371:75;66188:266;-1:-1:-1;;;;;66188:266:0:o;33393:716::-;33546:5;-1:-1:-1;;;;;33537:14:0;:5;-1:-1:-1;;;;;33537:14:0;;:48;;;;;33580:5;33555:21;:30;;33537:48;33533:569;;;33640:5;-1:-1:-1;;;;;33633:21:0;;33662:5;33633:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;33720:40:0;;-1:-1:-1;;;33720:40:0;;-1:-1:-1;;;;;33727:5:0;33720:22;;-1:-1:-1;33720:22:0;;-1:-1:-1;33720:40:0;;-1:-1:-1;33743:9:0;;33754:5;;33720:40;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;33533:569;;;-1:-1:-1;;;;;33782:22:0;;33799:4;33782:22;33778:324;;;33913:52;33941:5;33948:9;33959:5;33913:27;:52::i;:::-;33778:324;;;34027:63;34059:5;34066;34073:9;34084:5;34027:31;:63::i;78001:255::-;78118:14;78167:80;78194:7;78203:43;78226:6;78234;78242:3;78203:22;:43::i;:::-;78167:26;:80::i;:::-;78145:103;78001:255;-1:-1:-1;;;;78001:255:0:o;76828:124::-;76880:8;-1:-1:-1;;;76909:1:0;:10;76901:19;;;;;;-1:-1:-1;76942:1:0;76828:124::o;2331:3071::-;2457:12;2506:7;2490;2500:2;2490:12;:23;;2482:50;;;;-1:-1:-1;;;2482:50:0;;;;;;;:::i;:::-;2571:6;2560:7;2551:6;:16;:26;;2543:53;;;;-1:-1:-1;;;2543:53:0;;;;;;;:::i;:::-;2641:7;2632:6;:16;2615:6;:13;:33;;2607:63;;;;-1:-1:-1;;;2607:63:0;;;;;;;:::i;:::-;2683:22;2749:15;;2782:2137;;;;5075:4;5069:11;5056:24;;5276:1;5265:9;5258:20;5330:4;5319:9;5315:20;5309:4;5302:34;2742:2613;;2782:2137;2979:4;2973:11;2960:24;;3684:2;3675:7;3671:16;4092:9;4085:17;4079:4;4075:28;4063:9;4052;4048:25;4044:60;4145:7;4141:2;4137:16;4418:6;4404:9;4397:17;4391:4;4387:28;4375:9;4367:6;4363:22;4359:57;4355:70;4177:470;4456:3;4452:2;4449:11;4177:470;;;4614:9;;4603:21;;4502:4;4494:13;;;;4539;4177:470;;;-1:-1:-1;;4671:26:0;;;4895:2;4878:11;-1:-1:-1;;4874:25:0;4868:4;4861:39;-1:-1:-1;2742:2613:0;-1:-1:-1;5385:9:0;2331:3071;-1:-1:-1;;;;2331:3071:0:o;5410:426::-;5489:7;5532:6;5517;5526:2;5517:11;:21;;5509:52;;;;-1:-1:-1;;;5509:52:0;;;;;;;:::i;:::-;5597:6;5606:2;5597:11;5580:6;:13;:28;;5572:62;;;;-1:-1:-1;;;5572:62:0;;;;;;;:::i;:::-;-1:-1:-1;5726:30:0;5742:4;5726:30;5720:37;-1:-1:-1;;;5716:71:0;;;5410:426::o;5844:375::-;5922:6;5963;5949;5958:1;5949:10;:20;;5941:50;;;;-1:-1:-1;;;5941:50:0;;;;;;;:::i;:::-;6027:6;6036:1;6027:10;6010:6;:13;:27;;6002:60;;;;-1:-1:-1;;;6002:60:0;;;;;;;:::i;:::-;-1:-1:-1;6143:29:0;6159:3;6143:29;6137:36;;5844:375::o;853:281::-;974:14;;:::i;:::-;1014:6;-1:-1:-1;;;;;1005:15:0;:6;-1:-1:-1;;;;;1005:15:0;;1001:56;;;1042:6;;1050;1001:56;-1:-1:-1;1075:51:0;;;;;;;;-1:-1:-1;;;;;1075:51:0;;;;;;;;;;;;;;;;;;;;;;;853:281::o;66707:286::-;66834:19;66893:44;66920:7;66929;66893:26;:44::i;:::-;66871:67;-1:-1:-1;66957:10:0;-1:-1:-1;;;;;66957:27:0;;;66949:36;;;;;27713:367;27859:12;27873:17;27907:5;-1:-1:-1;;;;;27907:10:0;27941:28;;;27971:4;27977:2;27981:5;27918:69;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;27918:69:0;;;;;;;;;;;;;;-1:-1:-1;;;;;27918:69:0;-1:-1:-1;;;;;;27918:69:0;;;;;;;;;;27907:81;;;;27918:69;27907:81;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27858:130;;;;28007:7;:57;;;;-1:-1:-1;28019:11:0;;:16;;:44;;;28050:4;28039:24;;;;;;;;;;;;:::i;:::-;27999:73;;;;-1:-1:-1;;;27999:73:0;;;;;;;:::i;1387:526::-;1471:12;1517:3;:10;;;-1:-1:-1;;;;;1504:23:0;:3;:10;;;-1:-1:-1;;;;;1504:23:0;;1496:32;;;;;;1703:7;1758:3;:10;;;1770:3;:10;;;1782:3;:7;;;1747:43;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;1747:43:0;;;;;;;;;;1737:54;;1747:43;1737:54;;;;1626:234;;;1737:54;;296:66;;1626:234;;:::i;:::-;;;;-1:-1:-1;;1626:234:0;;;;;;;;;1594:285;;1626:234;1594:285;;;;;1387:526;-1:-1:-1;;;1387:526:0:o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:138:1:-;84:20;;113:33;84:20;113:33;:::i;157:485::-;;254:3;247:4;239:6;235:17;231:27;221:2;;276:5;269;262:20;221:2;316:6;303:20;347:49;362:33;392:2;362:33;:::i;:::-;347:49;:::i;:::-;421:2;412:7;405:19;467:3;460:4;455:2;447:6;443:15;439:26;436:35;433:2;;;488:5;481;474:20;433:2;557;550:4;542:6;538:17;531:4;522:7;518:18;505:55;580:16;;;598:4;576:27;569:42;;;;584:7;211:431;-1:-1:-1;;211:431:1:o;647:182::-;;770:3;761:6;756:3;752:16;748:26;745:2;;;791:5;784;777:20;834:259;;946:2;934:9;925:7;921:23;917:32;914:2;;;967:6;959;952:22;914:2;1011:9;998:23;1030:33;1057:5;1030:33;:::i;:::-;1082:5;904:189;-1:-1:-1;;;904:189:1:o;1098:470::-;;;;1244:2;1232:9;1223:7;1219:23;1215:32;1212:2;;;1265:6;1257;1250:22;1212:2;1309:9;1296:23;1328:33;1355:5;1328:33;:::i;:::-;1380:5;-1:-1:-1;1432:2:1;1417:18;;1404:32;;-1:-1:-1;1488:2:1;1473:18;;1460:32;1501:35;1460:32;1501:35;:::i;:::-;1555:7;1545:17;;;1202:366;;;;;:::o;1573:683::-;;;;;;1753:3;1741:9;1732:7;1728:23;1724:33;1721:2;;;1775:6;1767;1760:22;1721:2;1819:9;1806:23;1838:33;1865:5;1838:33;:::i;:::-;1890:5;-1:-1:-1;1942:2:1;1927:18;;1914:32;;-1:-1:-1;1998:2:1;1983:18;;1970:32;2011:35;1970:32;2011:35;:::i;:::-;2065:7;-1:-1:-1;2119:2:1;2104:18;;2091:32;;-1:-1:-1;2175:3:1;2160:19;;2147:33;2189:35;2147:33;2189:35;:::i;:::-;2243:7;2233:17;;;1711:545;;;;;;;;:::o;2261:709::-;;;;;;;2456:3;2444:9;2435:7;2431:23;2427:33;2424:2;;;2478:6;2470;2463:22;2424:2;2522:9;2509:23;2541:33;2568:5;2541:33;:::i;:::-;2593:5;-1:-1:-1;2645:2:1;2630:18;;2617:32;;-1:-1:-1;2696:2:1;2681:18;;2668:32;;-1:-1:-1;2752:2:1;2737:18;;2724:32;2800:4;2787:18;;2775:31;;2765:2;;2825:6;2817;2810:22;2765:2;2414:556;;;;-1:-1:-1;2414:556:1;;2907:3;2892:19;;2879:33;;2959:3;2944:19;;;2931:33;;-1:-1:-1;2414:556:1;-1:-1:-1;;2414:556:1:o;2975:677::-;;;3133:2;3121:9;3112:7;3108:23;3104:32;3101:2;;;3154:6;3146;3139:22;3101:2;3199:9;3186:23;3228:18;3269:2;3261:6;3258:14;3255:2;;;3290:6;3282;3275:22;3255:2;3333:6;3322:9;3318:22;3308:32;;3378:7;3371:4;3367:2;3363:13;3359:27;3349:2;;3405:6;3397;3390:22;3349:2;3450;3437:16;3476:2;3468:6;3465:14;3462:2;;;3497:6;3489;3482:22;3462:2;3556:7;3551:2;3545;3537:6;3533:15;3529:2;3525:24;3521:33;3518:46;3515:2;;;3582:6;3574;3567:22;3515:2;3618;3610:11;;;;;3640:6;;-1:-1:-1;3091:561:1;;-1:-1:-1;;;;3091:561:1:o;3657:297::-;;3777:2;3765:9;3756:7;3752:23;3748:32;3745:2;;;3798:6;3790;3783:22;3745:2;3835:9;3829:16;3888:5;3881:13;3874:21;3867:5;3864:32;3854:2;;3915:6;3907;3900:22;3959:253;;;4097:2;4085:9;4076:7;4072:23;4068:32;4065:2;;;4118:6;4110;4103:22;4065:2;-1:-1:-1;;4146:16:1;;4202:2;4187:18;;;4181:25;4146:16;;4181:25;;-1:-1:-1;4055:157:1:o;4217:775::-;;;;;4380:2;4368:9;4359:7;4355:23;4351:32;4348:2;;;4401:6;4393;4386:22;4348:2;4442:9;4429:23;4419:33;;4499:2;4488:9;4484:18;4471:32;4461:42;;4554:2;4543:9;4539:18;4526:32;4577:18;4618:2;4610:6;4607:14;4604:2;;;4639:6;4631;4624:22;4604:2;4682:6;4671:9;4667:22;4657:32;;4727:7;4720:4;4716:2;4712:13;4708:27;4698:2;;4754:6;4746;4739:22;4698:2;4799;4786:16;4825:2;4817:6;4814:14;4811:2;;;4846:6;4838;4831:22;4811:2;4896:7;4891:2;4882:6;4878:2;4874:15;4870:24;4867:37;4864:2;;;4922:6;4914;4907:22;4864:2;4338:654;;;;-1:-1:-1;;4958:2:1;4950:11;;-1:-1:-1;;;4338:654:1:o;4997:676::-;;5130:2;5118:9;5109:7;5105:23;5101:32;5098:2;;;5151:6;5143;5136:22;5098:2;5189:9;5183:16;5222:18;5214:6;5211:30;5208:2;;;5259:6;5251;5244:22;5208:2;5287:22;;5340:4;5332:13;;5328:27;-1:-1:-1;5318:2:1;;5374:6;5366;5359:22;5318:2;5408;5402:9;5433:49;5448:33;5478:2;5448:33;:::i;5433:49::-;5505:2;5498:5;5491:17;5545:7;5540:2;5535;5531;5527:11;5523:20;5520:33;5517:2;;;5571:6;5563;5556:22;5517:2;5589:54;5640:2;5635;5628:5;5624:14;5619:2;5615;5611:11;5589:54;:::i;5678:1042::-;;5824:2;5812:9;5803:7;5799:23;5795:32;5792:2;;;5845:6;5837;5830:22;5792:2;5890:9;5877:23;5919:18;5960:2;5952:6;5949:14;5946:2;;;5981:6;5973;5966:22;5946:2;6009:22;;;;6065:4;6047:16;;;6043:27;6040:2;;;6088:6;6080;6073:22;6040:2;6126;6120:9;6168:4;6160:6;6156:17;6223:6;6211:10;6208:22;6203:2;6191:10;6188:18;6185:46;6182:2;;;6234:9;6182:2;6261;6254:22;6301:16;;6329;;;6326:2;;;6363:6;6355;6348:22;6326:2;6396:46;6434:7;6423:8;6419:2;6415:17;6396:46;:::i;:::-;6388:6;6381:62;;6476:33;6505:2;6501;6497:11;6476:33;:::i;:::-;6471:2;6463:6;6459:15;6452:58;6564:2;6560;6556:11;6543:25;6538:2;6530:6;6526:15;6519:50;6623:2;6619;6615:11;6602:25;6597:2;6589:6;6585:15;6578:50;6683:3;6679:2;6675:12;6662:26;6656:3;6648:6;6644:16;6637:52;6708:6;6698:16;;;;;5782:938;;;;:::o;6725:282::-;;6879:3;6867:9;6858:7;6854:23;6850:33;6847:2;;;6901:6;6893;6886:22;6847:2;6929:72;6993:7;6982:9;6929:72;:::i;7012:427::-;;7161:2;7149:9;7140:7;7136:23;7132:32;7129:2;;;7182:6;7174;7167:22;7129:2;7227:9;7214:23;7260:18;7252:6;7249:30;7246:2;;;7297:6;7289;7282:22;7246:2;7325:22;;7381:3;7363:16;;;7359:26;7356:2;;;7403:6;7395;7388:22;7732:928;;7878:2;7866:9;7857:7;7853:23;7849:32;7846:2;;;7899:6;7891;7884:22;7846:2;7944:9;7931:23;7973:18;8014:2;8006:6;8003:14;8000:2;;;8035:6;8027;8020:22;8000:2;8063:22;;;;8119:4;8101:16;;;8097:27;8094:2;;;8142:6;8134;8127:22;8094:2;8180:4;8174:11;8224:4;8216:6;8212:17;8279:6;8267:10;8264:22;8259:2;8247:10;8244:18;8241:46;8238:2;;;8290:9;8238:2;8317:4;8310:24;8359:16;;8387;;;8384:2;;;8421:6;8413;8406:22;8384:2;8454:46;8492:7;8481:8;8477:2;8473:17;8454:46;:::i;:::-;8446:6;8439:62;;8544:2;8540;8536:11;8523:25;8510:38;;8557:33;8584:5;8557:33;:::i;:::-;8618:2;8606:15;;8599:30;;;;-1:-1:-1;8610:6:1;7836:824;-1:-1:-1;;;7836:824:1:o;8929:294::-;;9040:2;9028:9;9019:7;9015:23;9011:32;9008:2;;;9061:6;9053;9046:22;9008:2;9105:9;9092:23;9155:8;9148:5;9144:20;9137:5;9134:31;9124:2;;9184:6;9176;9169:22;9228:194;;9351:2;9339:9;9330:7;9326:23;9322:32;9319:2;;;9372:6;9364;9357:22;9319:2;-1:-1:-1;9400:16:1;;9309:113;-1:-1:-1;9309:113:1:o;9427:327::-;;;9556:2;9544:9;9535:7;9531:23;9527:32;9524:2;;;9577:6;9569;9562:22;9524:2;9618:9;9605:23;9595:33;;9678:2;9667:9;9663:18;9650:32;9691:33;9718:5;9691:33;:::i;:::-;9743:5;9733:15;;;9514:240;;;;;:::o;9759:539::-;;;;;9922:3;9910:9;9901:7;9897:23;9893:33;9890:2;;;9944:6;9936;9929:22;9890:2;9985:9;9972:23;9962:33;;10045:2;10034:9;10030:18;10017:32;10058:33;10085:5;10058:33;:::i;:::-;10110:5;-1:-1:-1;10162:2:1;10147:18;;10134:32;;-1:-1:-1;10218:2:1;10203:18;;10190:32;10231:35;10190:32;10231:35;:::i;:::-;9880:418;;;;-1:-1:-1;9880:418:1;;-1:-1:-1;;9880:418:1:o;10303:259::-;;10384:5;10378:12;10411:6;10406:3;10399:19;10427:63;10483:6;10476:4;10471:3;10467:14;10460:4;10453:5;10449:16;10427:63;:::i;:::-;10544:2;10523:15;-1:-1:-1;;10519:29:1;10510:39;;;;10551:4;10506:50;;10354:208;-1:-1:-1;;10354:208:1:o;10567:431::-;10820:2;10816:15;;;-1:-1:-1;;10812:24:1;;;10800:37;;10893:3;10871:16;;;;-1:-1:-1;;;;;;10867:41:1;10862:2;10853:12;;10846:63;10943:15;;10939:24;10934:2;10925:12;;10918:46;10989:2;10980:12;;10740:258::o;11003:273::-;;11186:6;11178;11173:3;11160:33;11212:16;;11237:15;;;11212:16;11150:126;-1:-1:-1;11150:126:1:o;11281:274::-;;11448:6;11442:13;11464:53;11510:6;11505:3;11498:4;11490:6;11486:17;11464:53;:::i;:::-;11533:16;;;;;11418:137;-1:-1:-1;;11418:137:1:o;11560:503::-;-1:-1:-1;;;;;;11846:26:1;;11909:2;11905:15;;;;-1:-1:-1;;11901:53:1;11897:1;11888:11;;11881:74;11980:2;11971:12;;11964:28;;;;12017:2;12008:12;;12001:28;12054:2;12045:12;;11836:227::o;12068:203::-;-1:-1:-1;;;;;12232:32:1;;;;12214:51;;12202:2;12187:18;;12169:102::o;12492:312::-;-1:-1:-1;;;;;12730:15:1;;;12712:34;;12782:15;;12777:2;12762:18;;12755:43;12662:2;12647:18;;12629:175::o;12809:760::-;-1:-1:-1;;;;;13206:15:1;;;13188:34;;13258:15;;;;13253:2;13238:18;;13231:43;13305:2;13290:18;;13283:34;;;;13348:2;13333:18;;13326:34;;;;13404:14;13397:22;13391:3;13376:19;;13369:51;13469:4;13457:17;13168:3;13436:19;;13429:46;13506:3;13491:19;;13484:35;13550:3;13535:19;;13528:35;;;;13137:3;13122:19;;13104:465::o;13574:678::-;-1:-1:-1;;;;;13949:15:1;;;13931:34;;14001:15;;;;13996:2;13981:18;;13974:43;14048:2;14033:18;;14026:34;;;;14091:2;14076:18;;14069:34;;;;14152:4;14140:17;14134:3;14119:19;;14112:46;13911:3;14174:19;;14167:35;14233:3;14218:19;;14211:35;;;;13880:3;13865:19;;13847:405::o;14257:388::-;-1:-1:-1;;;;;14513:15:1;;;14495:34;;14565:15;;;;14560:2;14545:18;;14538:43;14629:8;14617:21;;;14612:2;14597:18;;14590:49;14445:2;14430:18;;14412:233::o;14650:375::-;-1:-1:-1;;;;;14908:15:1;;;14890:34;;14960:15;;;;14955:2;14940:18;;14933:43;15007:2;14992:18;;14985:34;;;;14840:2;14825:18;;14807:218::o;15030:570::-;-1:-1:-1;;;;;15319:15:1;;;15301:34;;15378:14;;15371:22;15366:2;15351:18;;15344:50;15425:2;15410:18;;15403:34;;;15473:15;;15468:2;15453:18;;15446:43;15281:3;15520;15505:19;;15498:32;;;15030:570;;15547:47;;15574:19;;15566:6;15547:47;:::i;:::-;15539:55;15253:347;-1:-1:-1;;;;;;;15253:347:1:o;15605:274::-;-1:-1:-1;;;;;15797:32:1;;;;15779:51;;15861:2;15846:18;;15839:34;15767:2;15752:18;;15734:145::o;15884:806::-;;16073:2;16113;16102:9;16098:18;16143:2;16132:9;16125:21;16166:6;16201;16195:13;16232:6;16224;16217:22;16270:2;16259:9;16255:18;16248:25;;16333:2;16327;16319:6;16315:15;16304:9;16300:31;16296:40;16282:54;;16371:2;16363:6;16359:15;16392:4;16405:256;16419:6;16416:1;16413:13;16405:256;;;16512:2;16508:7;16496:9;16488:6;16484:22;16480:36;16475:3;16468:49;16540:41;16574:6;16565;16559:13;16540:41;:::i;:::-;16530:51;-1:-1:-1;16639:12:1;;;;16604:15;;;;16441:1;16434:9;16405:256;;;-1:-1:-1;16678:6:1;;16053:637;-1:-1:-1;;;;;;;16053:637:1:o;16695:221::-;;16844:2;16833:9;16826:21;16864:46;16906:2;16895:9;16891:18;16883:6;16864:46;:::i;16921:342::-;17123:2;17105:21;;;17162:2;17142:18;;;17135:30;-1:-1:-1;;;17196:2:1;17181:18;;17174:48;17254:2;17239:18;;17095:168::o;17268:342::-;17470:2;17452:21;;;17509:2;17489:18;;;17482:30;-1:-1:-1;;;17543:2:1;17528:18;;17521:48;17601:2;17586:18;;17442:168::o;17615:341::-;17817:2;17799:21;;;17856:2;17836:18;;;17829:30;-1:-1:-1;;;17890:2:1;17875:18;;17868:47;17947:2;17932:18;;17789:167::o;17961:326::-;18163:2;18145:21;;;18202:1;18182:18;;;18175:29;-1:-1:-1;;;18235:2:1;18220:18;;18213:33;18278:2;18263:18;;18135:152::o;18292:338::-;18494:2;18476:21;;;18533:2;18513:18;;;18506:30;-1:-1:-1;;;18567:2:1;18552:18;;18545:44;18621:2;18606:18;;18466:164::o;18635:325::-;18837:2;18819:21;;;18876:1;18856:18;;;18849:29;-1:-1:-1;;;18909:2:1;18894:18;;18887:32;18951:2;18936:18;;18809:151::o;18965:344::-;19167:2;19149:21;;;19206:2;19186:18;;;19179:30;-1:-1:-1;;;19240:2:1;19225:18;;19218:50;19300:2;19285:18;;19139:170::o;19314:332::-;19516:2;19498:21;;;19555:1;19535:18;;;19528:29;-1:-1:-1;;;19588:2:1;19573:18;;19566:39;19637:2;19622:18;;19488:158::o;19651:345::-;19853:2;19835:21;;;19892:2;19872:18;;;19865:30;-1:-1:-1;;;19926:2:1;19911:18;;19904:51;19987:2;19972:18;;19825:171::o;20001:326::-;20203:2;20185:21;;;20242:1;20222:18;;;20215:29;-1:-1:-1;;;20275:2:1;20260:18;;20253:33;20318:2;20303:18;;20175:152::o;20332:342::-;20534:2;20516:21;;;20573:2;20553:18;;;20546:30;-1:-1:-1;;;20607:2:1;20592:18;;20585:48;20665:2;20650:18;;20506:168::o;20679:343::-;20881:2;20863:21;;;20920:2;20900:18;;;20893:30;-1:-1:-1;;;20954:2:1;20939:18;;20932:49;21013:2;20998:18;;20853:169::o;21027:341::-;21229:2;21211:21;;;21268:2;21248:18;;;21241:30;-1:-1:-1;;;21302:2:1;21287:18;;21280:47;21359:2;21344:18;;21201:167::o;21373:343::-;21575:2;21557:21;;;21614:2;21594:18;;;21587:30;-1:-1:-1;;;21648:2:1;21633:18;;21626:49;21707:2;21692:18;;21547:169::o;21721:342::-;21923:2;21905:21;;;21962:2;21942:18;;;21935:30;-1:-1:-1;;;21996:2:1;21981:18;;21974:48;22054:2;22039:18;;21895:168::o;22068:474::-;;22265:2;22254:9;22247:21;22303:6;22297:13;22346:4;22341:2;22330:9;22326:18;22319:32;22374:52;22422:2;22411:9;22407:18;22393:12;22374:52;:::i;:::-;22486:2;22474:15;;;;22468:22;-1:-1:-1;;;;;22464:48:1;22457:4;22442:20;;;;22435:78;;;;-1:-1:-1;22360:66:1;;22237:305;-1:-1:-1;22237:305:1:o;22547:177::-;22693:25;;;22681:2;22666:18;;22648:76::o;22729:533::-;;;22872:11;22859:25;22966:2;22962:7;22951:8;22935:14;22931:29;22927:43;22907:18;22903:68;22893:2;;22988:4;22982;22975:18;22893:2;23018:33;;23070:20;;;-1:-1:-1;23113:18:1;23102:30;;23099:2;;;23148:4;23142;23135:18;23099:2;23184:4;23172:17;;-1:-1:-1;23215:14:1;23211:27;;;23201:38;;23198:2;;;23252:1;23249;23242:12;23198:2;22823:439;;;;;:::o;23267:242::-;23337:2;23331:9;23367:17;;;23414:18;23399:34;;23435:22;;;23396:62;23393:2;;;23461:9;23393:2;23488;23481:22;23311:198;;-1:-1:-1;23311:198:1:o;23514:181::-;;23597:18;23589:6;23586:30;23583:2;;;23619:9;23583:2;-1:-1:-1;23678:2:1;23655:17;-1:-1:-1;;23651:31:1;23684:4;23647:42;;23573:122::o;23700:258::-;23772:1;23782:113;23796:6;23793:1;23790:13;23782:113;;;23872:11;;;23866:18;23853:11;;;23846:39;23818:2;23811:10;23782:113;;;23913:6;23910:1;23907:13;23904:2;;;-1:-1:-1;;23948:1:1;23930:16;;23923:27;23753:205::o;23963:133::-;-1:-1:-1;;;;;24040:31:1;;24030:42;;24020:2;;24086:1;24083;24076:12;24020:2;24010:86;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1946800",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"WETH9()": "infinite",
								"exactInput((bytes,address,uint256,uint256,uint256))": "infinite",
								"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": "infinite",
								"exactOutput((bytes,address,uint256,uint256,uint256))": "infinite",
								"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": "infinite",
								"factory()": "infinite",
								"multicall(bytes[])": "infinite",
								"refundETH()": "infinite",
								"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"sweepToken(address,uint256,address)": "infinite",
								"sweepTokenWithFee(address,uint256,address,uint256,address)": "infinite",
								"uniswapV3SwapCallback(int256,int256,bytes)": "infinite",
								"unwrapWETH9(uint256,address)": "infinite",
								"unwrapWETH9WithFee(uint256,address,uint256,address)": "infinite"
							},
							"internal": {
								"exactInputInternal(uint256,address,uint160,struct SwapRouter.SwapCallbackData memory)": "infinite",
								"exactOutputInternal(uint256,address,uint160,struct SwapRouter.SwapCallbackData memory)": "infinite",
								"getPool(address,address,uint24)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 77153,
									"end": 85715,
									"name": "PUSH",
									"source": 0,
									"value": "C0"
								},
								{
									"begin": 77153,
									"end": 85715,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 77153,
									"end": 85715,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 77732,
									"end": 77789,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 77732,
									"end": 77789,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 77798,
									"end": 77888,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 77798,
									"end": 77888,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 77798,
									"end": 77888,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 77798,
									"end": 77888,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 77798,
									"end": 77888,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 77798,
									"end": 77888,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 77798,
									"end": 77888,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 77798,
									"end": 77888,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 77798,
									"end": 77888,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 77798,
									"end": 77888,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 77798,
									"end": 77888,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 77798,
									"end": 77888,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 77798,
									"end": 77888,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 77798,
									"end": 77888,
									"name": "PUSHSIZE",
									"source": 0
								},
								{
									"begin": 77798,
									"end": 77888,
									"name": "CODESIZE",
									"source": 0
								},
								{
									"begin": 77798,
									"end": 77888,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 77798,
									"end": 77888,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 77798,
									"end": 77888,
									"name": "PUSHSIZE",
									"source": 0
								},
								{
									"begin": 77798,
									"end": 77888,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 77798,
									"end": 77888,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 77798,
									"end": 77888,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 77798,
									"end": 77888,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 77798,
									"end": 77888,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 77798,
									"end": 77888,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 77798,
									"end": 77888,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 77798,
									"end": 77888,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 77798,
									"end": 77888,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "2"
								},
								{
									"begin": 77798,
									"end": 77888,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 77798,
									"end": 77888,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "3"
								},
								{
									"begin": 77798,
									"end": 77888,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 77798,
									"end": 77888,
									"name": "tag",
									"source": 0,
									"value": "2"
								},
								{
									"begin": 77798,
									"end": 77888,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "60"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 31755,
									"end": 31773,
									"name": "PUSH",
									"source": 0,
									"value": "60"
								},
								{
									"begin": 31755,
									"end": 31773,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 31755,
									"end": 31773,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 31755,
									"end": 31773,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 31755,
									"end": 31773,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 31755,
									"end": 31773,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 31755,
									"end": 31773,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 31755,
									"end": 31773,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 31784,
									"end": 31798,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 31784,
									"end": 31798,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 31784,
									"end": 31798,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 31784,
									"end": 31798,
									"name": "PUSH",
									"source": 0,
									"value": "A0"
								},
								{
									"begin": 31784,
									"end": 31798,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 77153,
									"end": 85715,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 77153,
									"end": 85715,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 14,
									"end": 193,
									"name": "tag",
									"source": 1,
									"value": "10"
								},
								{
									"begin": 14,
									"end": 193,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 95,
									"end": 108,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 95,
									"end": 108,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 137,
									"end": 168,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 137,
									"end": 168,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 127,
									"end": 169,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 127,
									"end": 169,
									"name": "EQ",
									"source": 1
								},
								{
									"begin": 117,
									"end": 119,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "12"
								},
								{
									"begin": 117,
									"end": 119,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 183,
									"end": 184,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 180,
									"end": 181,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 173,
									"end": 185,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 117,
									"end": 119,
									"name": "tag",
									"source": 1,
									"value": "12"
								},
								{
									"begin": 117,
									"end": 119,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 76,
									"end": 193,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 76,
									"end": 193,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 76,
									"end": 193,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 76,
									"end": 193,
									"name": "JUMP",
									"source": 1,
									"value": "[out]"
								},
								{
									"begin": 198,
									"end": 505,
									"name": "tag",
									"source": 1,
									"value": "3"
								},
								{
									"begin": 198,
									"end": 505,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 198,
									"end": 505,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 198,
									"end": 505,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 338,
									"end": 340,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 326,
									"end": 335,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 317,
									"end": 324,
									"name": "DUP6",
									"source": 1
								},
								{
									"begin": 313,
									"end": 336,
									"name": "SUB",
									"source": 1
								},
								{
									"begin": 309,
									"end": 341,
									"name": "SLT",
									"source": 1
								},
								{
									"begin": 306,
									"end": 308,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 306,
									"end": 308,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "14"
								},
								{
									"begin": 306,
									"end": 308,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 359,
									"end": 365,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 351,
									"end": 357,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 344,
									"end": 366,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 306,
									"end": 308,
									"name": "tag",
									"source": 1,
									"value": "14"
								},
								{
									"begin": 306,
									"end": 308,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 387,
									"end": 429,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "15"
								},
								{
									"begin": 419,
									"end": 428,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 387,
									"end": 429,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "10"
								},
								{
									"begin": 387,
									"end": 429,
									"name": "JUMP",
									"source": 1,
									"value": "[in]"
								},
								{
									"begin": 387,
									"end": 429,
									"name": "tag",
									"source": 1,
									"value": "15"
								},
								{
									"begin": 387,
									"end": 429,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 377,
									"end": 429,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 377,
									"end": 429,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 448,
									"end": 499,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "16"
								},
								{
									"begin": 495,
									"end": 497,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 484,
									"end": 493,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 480,
									"end": 498,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 448,
									"end": 499,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "10"
								},
								{
									"begin": 448,
									"end": 499,
									"name": "JUMP",
									"source": 1,
									"value": "[in]"
								},
								{
									"begin": 448,
									"end": 499,
									"name": "tag",
									"source": 1,
									"value": "16"
								},
								{
									"begin": 448,
									"end": 499,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 438,
									"end": 499,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 438,
									"end": 499,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 296,
									"end": 505,
									"name": "SWAP3",
									"source": 1
								},
								{
									"begin": 296,
									"end": 505,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 296,
									"end": 505,
									"name": "SWAP3",
									"source": 1
								},
								{
									"begin": 296,
									"end": 505,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 296,
									"end": 505,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 296,
									"end": 505,
									"name": "JUMP",
									"source": 1,
									"value": "[out]"
								},
								{
									"begin": 296,
									"end": 505,
									"name": "tag",
									"source": 1,
									"value": "9"
								},
								{
									"begin": 296,
									"end": 505,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 77153,
									"end": 85715,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 77153,
									"end": 85715,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 77153,
									"end": 85715,
									"name": "PUSH",
									"source": 0,
									"value": "60"
								},
								{
									"begin": 77153,
									"end": 85715,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 77153,
									"end": 85715,
									"name": "PUSH",
									"source": 0,
									"value": "A0"
								},
								{
									"begin": 77153,
									"end": 85715,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 77153,
									"end": 85715,
									"name": "PUSH",
									"source": 0,
									"value": "60"
								},
								{
									"begin": 77153,
									"end": 85715,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 77153,
									"end": 85715,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 77153,
									"end": 85715,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 77153,
									"end": 85715,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 77153,
									"end": 85715,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 77153,
									"end": 85715,
									"name": "ASSIGNIMMUTABLE",
									"source": 0,
									"value": "1226"
								},
								{
									"begin": 77153,
									"end": 85715,
									"name": "ASSIGNIMMUTABLE",
									"source": 0,
									"value": "1222"
								},
								{
									"begin": 77153,
									"end": 85715,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 77153,
									"end": 85715,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 77153,
									"end": 85715,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212201201df03e515b8d7dc9e629fd1f761e35e5f288d52dbd46cb282386a89e8f93864736f6c63430007060033",
									".code": [
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH",
											"source": 0,
											"value": "C04B8D59"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH",
											"source": 0,
											"value": "DF2AB5BB"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH",
											"source": 0,
											"value": "DF2AB5BB"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH",
											"source": 0,
											"value": "E0E189A0"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH",
											"source": 0,
											"value": "F28C0498"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH",
											"source": 0,
											"value": "F3995C67"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH",
											"source": 0,
											"value": "FA461E33"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "tag",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH",
											"source": 0,
											"value": "C04B8D59"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH",
											"source": 0,
											"value": "C2E3140A"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH",
											"source": 0,
											"value": "C45A0155"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH",
											"source": 0,
											"value": "DB3E2198"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "tag",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH",
											"source": 0,
											"value": "4AA4A4FC"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH",
											"source": 0,
											"value": "4AA4A4FC"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH",
											"source": 0,
											"value": "9B2C0A37"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH",
											"source": 0,
											"value": "A4A78F0C"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH",
											"source": 0,
											"value": "AC9650D8"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "tag",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH",
											"source": 0,
											"value": "12210E8A"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH",
											"source": 0,
											"value": "414BF389"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH",
											"source": 0,
											"value": "4659A494"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH",
											"source": 0,
											"value": "49404B7C"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 32038,
											"end": 32048,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 32052,
											"end": 32057,
											"name": "PUSHIMMUTABLE",
											"source": 0,
											"value": "1226"
										},
										{
											"begin": 32038,
											"end": 32057,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 32038,
											"end": 32057,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 32030,
											"end": 32071,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 32030,
											"end": 32071,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 32030,
											"end": 32071,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 32030,
											"end": 32071,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 32030,
											"end": 32071,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 32030,
											"end": 32071,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 32030,
											"end": 32071,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 32030,
											"end": 32071,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 32030,
											"end": 32071,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 32030,
											"end": 32071,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 32030,
											"end": 32071,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 32030,
											"end": 32071,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 32030,
											"end": 32071,
											"name": "tag",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 32030,
											"end": 32071,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 32030,
											"end": 32071,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 32030,
											"end": 32071,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 32030,
											"end": 32071,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 32030,
											"end": 32071,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 32030,
											"end": 32071,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 32030,
											"end": 32071,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 32030,
											"end": 32071,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 32030,
											"end": 32071,
											"name": "tag",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 32030,
											"end": 32071,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 77153,
											"end": 85715,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 33034,
											"end": 33196,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 33034,
											"end": 33196,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 33034,
											"end": 33196,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 33034,
											"end": 33196,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 33034,
											"end": 33196,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 80771,
											"end": 81332,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 80771,
											"end": 81332,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 80771,
											"end": 81332,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 80771,
											"end": 81332,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 80771,
											"end": 81332,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 80771,
											"end": 81332,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 80771,
											"end": 81332,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 80771,
											"end": 81332,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 80771,
											"end": 81332,
											"name": "tag",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 80771,
											"end": 81332,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 80771,
											"end": 81332,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 80771,
											"end": 81332,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 80771,
											"end": 81332,
											"name": "tag",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 80771,
											"end": 81332,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 80771,
											"end": 81332,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 80771,
											"end": 81332,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 80771,
											"end": 81332,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 80771,
											"end": 81332,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 80771,
											"end": 81332,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 80771,
											"end": 81332,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 80771,
											"end": 81332,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 80771,
											"end": 81332,
											"name": "tag",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 80771,
											"end": 81332,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 80771,
											"end": 81332,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 80771,
											"end": 81332,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 80771,
											"end": 81332,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 80771,
											"end": 81332,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 80771,
											"end": 81332,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 80771,
											"end": 81332,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 80771,
											"end": 81332,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 26487,
											"end": 26785,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 26487,
											"end": 26785,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 26487,
											"end": 26785,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 26487,
											"end": 26785,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 26487,
											"end": 26785,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 26487,
											"end": 26785,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 26487,
											"end": 26785,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 26487,
											"end": 26785,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 26487,
											"end": 26785,
											"name": "tag",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 26487,
											"end": 26785,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 26487,
											"end": 26785,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 26487,
											"end": 26785,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 32127,
											"end": 32532,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 32127,
											"end": 32532,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 32127,
											"end": 32532,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 32127,
											"end": 32532,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 32127,
											"end": 32532,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 32127,
											"end": 32532,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 32127,
											"end": 32532,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 32127,
											"end": 32532,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 32127,
											"end": 32532,
											"name": "tag",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 32127,
											"end": 32532,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 32127,
											"end": 32532,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 32127,
											"end": 32532,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 31650,
											"end": 31689,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 31650,
											"end": 31689,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 31650,
											"end": 31689,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 31650,
											"end": 31689,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 31650,
											"end": 31689,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 31650,
											"end": 31689,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 31650,
											"end": 31689,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 31650,
											"end": 31689,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 31650,
											"end": 31689,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 31650,
											"end": 31689,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 31650,
											"end": 31689,
											"name": "tag",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 31650,
											"end": 31689,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 31650,
											"end": 31689,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 31650,
											"end": 31689,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 31650,
											"end": 31689,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 31650,
											"end": 31689,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 31650,
											"end": 31689,
											"name": "tag",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 31650,
											"end": 31689,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 31650,
											"end": 31689,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 31650,
											"end": 31689,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 31650,
											"end": 31689,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 31650,
											"end": 31689,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 31650,
											"end": 31689,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 31650,
											"end": 31689,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 31650,
											"end": 31689,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 34400,
											"end": 35115,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 34400,
											"end": 35115,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 34400,
											"end": 35115,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 34400,
											"end": 35115,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 34400,
											"end": 35115,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 34400,
											"end": 35115,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 34400,
											"end": 35115,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 34400,
											"end": 35115,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 34400,
											"end": 35115,
											"name": "tag",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 34400,
											"end": 35115,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 34400,
											"end": 35115,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 34400,
											"end": 35115,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 26826,
											"end": 27184,
											"name": "tag",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 26826,
											"end": 27184,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 26826,
											"end": 27184,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 26826,
											"end": 27184,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 26826,
											"end": 27184,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 26826,
											"end": 27184,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 26826,
											"end": 27184,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 26826,
											"end": 27184,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 26826,
											"end": 27184,
											"name": "tag",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 26826,
											"end": 27184,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 26826,
											"end": 27184,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 26826,
											"end": 27184,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 17428,
											"end": 18097,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 17428,
											"end": 18097,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 17428,
											"end": 18097,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 17428,
											"end": 18097,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 17428,
											"end": 18097,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 17428,
											"end": 18097,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 17428,
											"end": 18097,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 17428,
											"end": 18097,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 17428,
											"end": 18097,
											"name": "tag",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 17428,
											"end": 18097,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 17428,
											"end": 18097,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "59"
										},
										{
											"begin": 17428,
											"end": 18097,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 17428,
											"end": 18097,
											"name": "tag",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 17428,
											"end": 18097,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 17428,
											"end": 18097,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 17428,
											"end": 18097,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 17428,
											"end": 18097,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 17428,
											"end": 18097,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 17428,
											"end": 18097,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 17428,
											"end": 18097,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 17428,
											"end": 18097,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 81373,
											"end": 82682,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 81373,
											"end": 82682,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 81373,
											"end": 82682,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 81373,
											"end": 82682,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 81373,
											"end": 82682,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 81373,
											"end": 82682,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 81373,
											"end": 82682,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 81373,
											"end": 82682,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 81373,
											"end": 82682,
											"name": "tag",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 81373,
											"end": 82682,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 81373,
											"end": 82682,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 81373,
											"end": 82682,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 26123,
											"end": 26446,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 26123,
											"end": 26446,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 26123,
											"end": 26446,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 26123,
											"end": 26446,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 26123,
											"end": 26446,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 26123,
											"end": 26446,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 26123,
											"end": 26446,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 26123,
											"end": 26446,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 26123,
											"end": 26446,
											"name": "tag",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 26123,
											"end": 26446,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 26123,
											"end": 26446,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "69"
										},
										{
											"begin": 26123,
											"end": 26446,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 31556,
											"end": 31597,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 31556,
											"end": 31597,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 31556,
											"end": 31597,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 31556,
											"end": 31597,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 31556,
											"end": 31597,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 31556,
											"end": 31597,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "70"
										},
										{
											"begin": 31556,
											"end": 31597,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 31556,
											"end": 31597,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 31556,
											"end": 31597,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 31556,
											"end": 31597,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 31556,
											"end": 31597,
											"name": "tag",
											"source": 0,
											"value": "70"
										},
										{
											"begin": 31556,
											"end": 31597,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 31556,
											"end": 31597,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 31556,
											"end": 31597,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 31556,
											"end": 31597,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 31556,
											"end": 31597,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 84146,
											"end": 84896,
											"name": "tag",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 84146,
											"end": 84896,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 84146,
											"end": 84896,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 84146,
											"end": 84896,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "75"
										},
										{
											"begin": 84146,
											"end": 84896,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 84146,
											"end": 84896,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 84146,
											"end": 84896,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 84146,
											"end": 84896,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 84146,
											"end": 84896,
											"name": "tag",
											"source": 0,
											"value": "75"
										},
										{
											"begin": 84146,
											"end": 84896,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 84146,
											"end": 84896,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 84146,
											"end": 84896,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 32580,
											"end": 32986,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 32580,
											"end": 32986,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 32580,
											"end": 32986,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 32580,
											"end": 32986,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 32580,
											"end": 32986,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 32580,
											"end": 32986,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 32580,
											"end": 32986,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 32580,
											"end": 32986,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 32580,
											"end": 32986,
											"name": "tag",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 32580,
											"end": 32986,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 32580,
											"end": 32986,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 32580,
											"end": 32986,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 35170,
											"end": 35865,
											"name": "tag",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 35170,
											"end": 35865,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 35170,
											"end": 35865,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 35170,
											"end": 35865,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 35170,
											"end": 35865,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 35170,
											"end": 35865,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 35170,
											"end": 35865,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 35170,
											"end": 35865,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 35170,
											"end": 35865,
											"name": "tag",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 35170,
											"end": 35865,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 35170,
											"end": 35865,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 35170,
											"end": 35865,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 84937,
											"end": 85712,
											"name": "tag",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 84937,
											"end": 85712,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 84937,
											"end": 85712,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 84937,
											"end": 85712,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "88"
										},
										{
											"begin": 84937,
											"end": 85712,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 84937,
											"end": 85712,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 84937,
											"end": 85712,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "89"
										},
										{
											"begin": 84937,
											"end": 85712,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 84937,
											"end": 85712,
											"name": "tag",
											"source": 0,
											"value": "88"
										},
										{
											"begin": 84937,
											"end": 85712,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 84937,
											"end": 85712,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 84937,
											"end": 85712,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 25800,
											"end": 26082,
											"name": "tag",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 25800,
											"end": 26082,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 25800,
											"end": 26082,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 25800,
											"end": 26082,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 25800,
											"end": 26082,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 25800,
											"end": 26082,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 25800,
											"end": 26082,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 25800,
											"end": 26082,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 25800,
											"end": 26082,
											"name": "tag",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 25800,
											"end": 26082,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 25800,
											"end": 26082,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "94"
										},
										{
											"begin": 25800,
											"end": 26082,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 78393,
											"end": 79714,
											"name": "tag",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 78393,
											"end": 79714,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 78393,
											"end": 79714,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 78393,
											"end": 79714,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 78393,
											"end": 79714,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 78393,
											"end": 79714,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "95"
										},
										{
											"begin": 78393,
											"end": 79714,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 78393,
											"end": 79714,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 78393,
											"end": 79714,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 78393,
											"end": 79714,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 78393,
											"end": 79714,
											"name": "tag",
											"source": 0,
											"value": "95"
										},
										{
											"begin": 78393,
											"end": 79714,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 78393,
											"end": 79714,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 78393,
											"end": 79714,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "97"
										},
										{
											"begin": 78393,
											"end": 79714,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 78393,
											"end": 79714,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 78393,
											"end": 79714,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "98"
										},
										{
											"begin": 78393,
											"end": 79714,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 78393,
											"end": 79714,
											"name": "tag",
											"source": 0,
											"value": "97"
										},
										{
											"begin": 78393,
											"end": 79714,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 78393,
											"end": 79714,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 78393,
											"end": 79714,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 33034,
											"end": 33196,
											"name": "tag",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 33034,
											"end": 33196,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 33096,
											"end": 33117,
											"name": "SELFBALANCE",
											"source": 0
										},
										{
											"begin": 33096,
											"end": 33121,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 33092,
											"end": 33188,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "102"
										},
										{
											"begin": 33092,
											"end": 33188,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 33123,
											"end": 33188,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "102"
										},
										{
											"begin": 33154,
											"end": 33164,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 33166,
											"end": 33187,
											"name": "SELFBALANCE",
											"source": 0
										},
										{
											"begin": 33123,
											"end": 33153,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 33123,
											"end": 33188,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 33123,
											"end": 33188,
											"name": "tag",
											"source": 0,
											"value": "102"
										},
										{
											"begin": 33123,
											"end": 33188,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 33034,
											"end": 33196,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 80771,
											"end": 81332,
											"name": "tag",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 80771,
											"end": 81332,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 80948,
											"end": 80965,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 80913,
											"end": 80919,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 80913,
											"end": 80928,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 80913,
											"end": 80928,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 80913,
											"end": 80928,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 30752,
											"end": 30760,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 30731,
											"end": 30748,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "105"
										},
										{
											"begin": 30731,
											"end": 30746,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "106"
										},
										{
											"begin": 30731,
											"end": 30748,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 30731,
											"end": 30748,
											"name": "tag",
											"source": 0,
											"value": "105"
										},
										{
											"begin": 30731,
											"end": 30748,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 30731,
											"end": 30760,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 30731,
											"end": 30760,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "109"
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "tag",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 80995,
											"end": 81245,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 81028,
											"end": 81043,
											"name": "PUSH",
											"source": 0,
											"value": "A0"
										},
										{
											"begin": 81028,
											"end": 81043,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 81028,
											"end": 81043,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 81028,
											"end": 81043,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 81058,
											"end": 81074,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 81058,
											"end": 81074,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 81058,
											"end": 81074,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 81058,
											"end": 81074,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 81058,
											"end": 81074,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 81058,
											"end": 81074,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 81058,
											"end": 81074,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 81058,
											"end": 81074,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 81058,
											"end": 81074,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 81058,
											"end": 81074,
											"name": "tag",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 81058,
											"end": 81074,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 81089,
											"end": 81113,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "114"
										},
										{
											"begin": 81089,
											"end": 81113,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 81089,
											"end": 81113,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 81089,
											"end": 81113,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 81089,
											"end": 81113,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 81089,
											"end": 81113,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 81089,
											"end": 81113,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 81089,
											"end": 81113,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 81089,
											"end": 81113,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 81089,
											"end": 81113,
											"name": "tag",
											"source": 0,
											"value": "114"
										},
										{
											"begin": 81089,
											"end": 81113,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 81128,
											"end": 81234,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 81128,
											"end": 81234,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 81128,
											"end": 81234,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 81128,
											"end": 81234,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 81128,
											"end": 81234,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 81128,
											"end": 81234,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 81128,
											"end": 81234,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 81128,
											"end": 81234,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 81128,
											"end": 81234,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 81128,
											"end": 81234,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 81169,
											"end": 81183,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 81169,
											"end": 81183,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 81169,
											"end": 81183,
											"name": "DUP11",
											"source": 0
										},
										{
											"begin": 81169,
											"end": 81183,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 81169,
											"end": 81175,
											"name": "DUP11",
											"source": 0
										},
										{
											"begin": 81169,
											"end": 81183,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 81169,
											"end": 81183,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 81169,
											"end": 81183,
											"name": "tag",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 81169,
											"end": 81183,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 81185,
											"end": 81195,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 81185,
											"end": 81195,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 81185,
											"end": 81195,
											"name": "DUP12",
											"source": 0
										},
										{
											"begin": 81185,
											"end": 81195,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 81185,
											"end": 81195,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 81185,
											"end": 81195,
											"name": "DUP13",
											"source": 0
										},
										{
											"begin": 81185,
											"end": 81195,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 81185,
											"end": 81195,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 81185,
											"end": 81195,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 81185,
											"end": 81195,
											"name": "tag",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 81185,
											"end": 81195,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 81197,
											"end": 81212,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 81197,
											"end": 81212,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 81197,
											"end": 81212,
											"name": "DUP13",
											"source": 0
										},
										{
											"begin": 81197,
											"end": 81212,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 81197,
											"end": 81212,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 81197,
											"end": 81212,
											"name": "DUP14",
											"source": 0
										},
										{
											"begin": 81197,
											"end": 81212,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 81197,
											"end": 81212,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 81197,
											"end": 81212,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 81197,
											"end": 81212,
											"name": "tag",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 81197,
											"end": 81212,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 81152,
											"end": 81213,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 81152,
											"end": 81213,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 81152,
											"end": 81213,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 81152,
											"end": 81213,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 81152,
											"end": 81213,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 81152,
											"end": 81213,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 81152,
											"end": 81213,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 81152,
											"end": 81213,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 81152,
											"end": 81213,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 81152,
											"end": 81213,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 81152,
											"end": 81213,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 81152,
											"end": 81213,
											"name": "tag",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 81152,
											"end": 81213,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 81152,
											"end": 81213,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 81152,
											"end": 81213,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 81152,
											"end": 81213,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 81152,
											"end": 81213,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 81152,
											"end": 81213,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 81152,
											"end": 81213,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 81152,
											"end": 81213,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 81152,
											"end": 81213,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 81152,
											"end": 81213,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 81152,
											"end": 81213,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 81152,
											"end": 81213,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 81152,
											"end": 81213,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 81128,
											"end": 81234,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 81128,
											"end": 81234,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 81128,
											"end": 81234,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 81128,
											"end": 81234,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 81222,
											"end": 81232,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 81128,
											"end": 81234,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 81128,
											"end": 81234,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 81128,
											"end": 81234,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 81128,
											"end": 81234,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 80995,
											"end": 81013,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "122"
										},
										{
											"begin": 80995,
											"end": 81245,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 80995,
											"end": 81245,
											"name": "tag",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 80995,
											"end": 81245,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 80983,
											"end": 81245,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 80983,
											"end": 81245,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 81277,
											"end": 81283,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 81277,
											"end": 81300,
											"name": "PUSH",
											"source": 0,
											"value": "C0"
										},
										{
											"begin": 81277,
											"end": 81300,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 81277,
											"end": 81300,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 81264,
											"end": 81273,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 81264,
											"end": 81300,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 81264,
											"end": 81300,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 81256,
											"end": 81324,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "123"
										},
										{
											"begin": 81256,
											"end": 81324,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 81256,
											"end": 81324,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 81256,
											"end": 81324,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 81256,
											"end": 81324,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 81256,
											"end": 81324,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 81256,
											"end": 81324,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 81256,
											"end": 81324,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 81256,
											"end": 81324,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 81256,
											"end": 81324,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 81256,
											"end": 81324,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 81256,
											"end": 81324,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 81256,
											"end": 81324,
											"name": "tag",
											"source": 0,
											"value": "123"
										},
										{
											"begin": 81256,
											"end": 81324,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 80771,
											"end": 81332,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 80771,
											"end": 81332,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 80771,
											"end": 81332,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 80771,
											"end": 81332,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 80771,
											"end": 81332,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 26487,
											"end": 26785,
											"name": "tag",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 26487,
											"end": 26785,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23F2EBC3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 26687,
											"end": 26720,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 26687,
											"end": 26720,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 26687,
											"end": 26720,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 26687,
											"end": 26720,
											"name": "PUSH",
											"source": 0,
											"value": "8FCBAF0C"
										},
										{
											"begin": 26687,
											"end": 26720,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 26721,
											"end": 26731,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 26721,
											"end": 26731,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 26741,
											"end": 26745,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 26741,
											"end": 26745,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 26748,
											"end": 26753,
											"name": "DUP11",
											"source": 0
										},
										{
											"begin": 26748,
											"end": 26753,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 26755,
											"end": 26761,
											"name": "DUP11",
											"source": 0
										},
										{
											"begin": 26755,
											"end": 26761,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 26763,
											"end": 26767,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 26763,
											"end": 26767,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 26769,
											"end": 26770,
											"name": "DUP12",
											"source": 0
										},
										{
											"begin": 26769,
											"end": 26770,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 26772,
											"end": 26773,
											"name": "DUP12",
											"source": 0
										},
										{
											"begin": 26772,
											"end": 26773,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 26775,
											"end": 26776,
											"name": "DUP12",
											"source": 0
										},
										{
											"begin": 26775,
											"end": 26776,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "128"
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "tag",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "129"
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "tag",
											"source": 0,
											"value": "129"
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "CALL",
											"source": 0
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "tag",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 26687,
											"end": 26777,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 26487,
											"end": 26785,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 26487,
											"end": 26785,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 26487,
											"end": 26785,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 26487,
											"end": 26785,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 26487,
											"end": 26785,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 26487,
											"end": 26785,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 26487,
											"end": 26785,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 32127,
											"end": 32532,
											"name": "tag",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 32127,
											"end": 32532,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70A08231"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 32225,
											"end": 32245,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 32225,
											"end": 32245,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 32255,
											"end": 32260,
											"name": "PUSHIMMUTABLE",
											"source": 0,
											"value": "1226"
										},
										{
											"begin": 32248,
											"end": 32271,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32271,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32271,
											"name": "PUSH",
											"source": 0,
											"value": "70A08231"
										},
										{
											"begin": 32248,
											"end": 32271,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "133"
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 32280,
											"end": 32284,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 32280,
											"end": 32284,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "tag",
											"source": 0,
											"value": "133"
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "tag",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "STATICCALL",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "137"
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "tag",
											"source": 0,
											"value": "137"
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "138"
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "139"
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "tag",
											"source": 0,
											"value": "138"
										},
										{
											"begin": 32248,
											"end": 32286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 32225,
											"end": 32286,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 32225,
											"end": 32286,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 32321,
											"end": 32334,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 32305,
											"end": 32317,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 32305,
											"end": 32334,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 32305,
											"end": 32334,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 32297,
											"end": 32357,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "140"
										},
										{
											"begin": 32297,
											"end": 32357,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 32297,
											"end": 32357,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 32297,
											"end": 32357,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 32297,
											"end": 32357,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 32297,
											"end": 32357,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 32297,
											"end": 32357,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 32297,
											"end": 32357,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 32297,
											"end": 32357,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 32297,
											"end": 32357,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 32297,
											"end": 32357,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "142"
										},
										{
											"begin": 32297,
											"end": 32357,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 32297,
											"end": 32357,
											"name": "tag",
											"source": 0,
											"value": "140"
										},
										{
											"begin": 32297,
											"end": 32357,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 32374,
											"end": 32390,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 32374,
											"end": 32390,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 32370,
											"end": 32525,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "148"
										},
										{
											"begin": 32370,
											"end": 32525,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2E1A7D4D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 32414,
											"end": 32419,
											"name": "PUSHIMMUTABLE",
											"source": 0,
											"value": "1226"
										},
										{
											"begin": 32407,
											"end": 32429,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 32407,
											"end": 32429,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 32407,
											"end": 32429,
											"name": "PUSH",
											"source": 0,
											"value": "2E1A7D4D"
										},
										{
											"begin": 32407,
											"end": 32429,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "144"
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 32430,
											"end": 32442,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 32430,
											"end": 32442,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "tag",
											"source": 0,
											"value": "144"
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "145"
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "tag",
											"source": 0,
											"value": "145"
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "CALL",
											"source": 0
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "147"
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "tag",
											"source": 0,
											"value": "147"
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 32407,
											"end": 32443,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 32458,
											"end": 32513,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "148"
										},
										{
											"begin": 32489,
											"end": 32498,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 32500,
											"end": 32512,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 32458,
											"end": 32488,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 32458,
											"end": 32513,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 32458,
											"end": 32513,
											"name": "tag",
											"source": 0,
											"value": "148"
										},
										{
											"begin": 32458,
											"end": 32513,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 32127,
											"end": 32532,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 32127,
											"end": 32532,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 32127,
											"end": 32532,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 32127,
											"end": 32532,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 31650,
											"end": 31689,
											"name": "tag",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 31650,
											"end": 31689,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 31650,
											"end": 31689,
											"name": "PUSHIMMUTABLE",
											"source": 0,
											"value": "1226"
										},
										{
											"begin": 31650,
											"end": 31689,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 31650,
											"end": 31689,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 34400,
											"end": 35115,
											"name": "tag",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 34400,
											"end": 35115,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 34605,
											"end": 34606,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 34595,
											"end": 34602,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 34595,
											"end": 34606,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 34595,
											"end": 34624,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 34595,
											"end": 34624,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 34595,
											"end": 34624,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "150"
										},
										{
											"begin": 34595,
											"end": 34624,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 34595,
											"end": 34624,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 34621,
											"end": 34624,
											"name": "PUSH",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 34610,
											"end": 34617,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 34610,
											"end": 34624,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 34610,
											"end": 34624,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 34595,
											"end": 34624,
											"name": "tag",
											"source": 0,
											"value": "150"
										},
										{
											"begin": 34595,
											"end": 34624,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 34587,
											"end": 34625,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "151"
										},
										{
											"begin": 34587,
											"end": 34625,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 34587,
											"end": 34625,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 34587,
											"end": 34625,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 34587,
											"end": 34625,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 34587,
											"end": 34625,
											"name": "tag",
											"source": 0,
											"value": "151"
										},
										{
											"begin": 34587,
											"end": 34625,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70A08231"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 34638,
											"end": 34658,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 34638,
											"end": 34658,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 34668,
											"end": 34673,
											"name": "PUSHIMMUTABLE",
											"source": 0,
											"value": "1226"
										},
										{
											"begin": 34661,
											"end": 34684,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34684,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34684,
											"name": "PUSH",
											"source": 0,
											"value": "70A08231"
										},
										{
											"begin": 34661,
											"end": 34684,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "152"
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 34693,
											"end": 34697,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 34693,
											"end": 34697,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "tag",
											"source": 0,
											"value": "152"
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "153"
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "tag",
											"source": 0,
											"value": "153"
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "STATICCALL",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "155"
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "tag",
											"source": 0,
											"value": "155"
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "156"
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "139"
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "tag",
											"source": 0,
											"value": "156"
										},
										{
											"begin": 34661,
											"end": 34699,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 34638,
											"end": 34699,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 34638,
											"end": 34699,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 34734,
											"end": 34747,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 34718,
											"end": 34730,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 34718,
											"end": 34747,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 34718,
											"end": 34747,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 34710,
											"end": 34770,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "157"
										},
										{
											"begin": 34710,
											"end": 34770,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 34710,
											"end": 34770,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 34710,
											"end": 34770,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 34710,
											"end": 34770,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 34710,
											"end": 34770,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 34710,
											"end": 34770,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 34710,
											"end": 34770,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 34710,
											"end": 34770,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 34710,
											"end": 34770,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 34710,
											"end": 34770,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "142"
										},
										{
											"begin": 34710,
											"end": 34770,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 34710,
											"end": 34770,
											"name": "tag",
											"source": 0,
											"value": "157"
										},
										{
											"begin": 34710,
											"end": 34770,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 34787,
											"end": 34803,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 34787,
											"end": 34803,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 34783,
											"end": 35108,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "159"
										},
										{
											"begin": 34783,
											"end": 35108,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2E1A7D4D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 34827,
											"end": 34832,
											"name": "PUSHIMMUTABLE",
											"source": 0,
											"value": "1226"
										},
										{
											"begin": 34820,
											"end": 34842,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 34820,
											"end": 34842,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 34820,
											"end": 34842,
											"name": "PUSH",
											"source": 0,
											"value": "2E1A7D4D"
										},
										{
											"begin": 34820,
											"end": 34842,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "160"
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 34843,
											"end": 34855,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 34843,
											"end": 34855,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "tag",
											"source": 0,
											"value": "160"
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "161"
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "tag",
											"source": 0,
											"value": "161"
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "CALL",
											"source": 0
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "163"
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "tag",
											"source": 0,
											"value": "163"
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 34820,
											"end": 34856,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 34871,
											"end": 34888,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 34919,
											"end": 34925,
											"name": "PUSH",
											"source": 0,
											"value": "2710"
										},
										{
											"begin": 34891,
											"end": 34916,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "164"
										},
										{
											"begin": 34908,
											"end": 34915,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 34891,
											"end": 34903,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 34891,
											"end": 34907,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "165"
										},
										{
											"begin": 34891,
											"end": 34907,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 34891,
											"end": 34916,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 34891,
											"end": 34916,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 34891,
											"end": 34916,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 34891,
											"end": 34916,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 34891,
											"end": 34916,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 34891,
											"end": 34916,
											"name": "tag",
											"source": 0,
											"value": "164"
										},
										{
											"begin": 34891,
											"end": 34916,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 34891,
											"end": 34925,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 34891,
											"end": 34925,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "166"
										},
										{
											"begin": 34891,
											"end": 34925,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 34891,
											"end": 34925,
											"name": "INVALID",
											"source": 0
										},
										{
											"begin": 34891,
											"end": 34925,
											"name": "tag",
											"source": 0,
											"value": "166"
										},
										{
											"begin": 34891,
											"end": 34925,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 34891,
											"end": 34925,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 34891,
											"end": 34925,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 34944,
											"end": 34957,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 34944,
											"end": 34957,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 34940,
											"end": 35014,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "168"
										},
										{
											"begin": 34940,
											"end": 35014,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 34959,
											"end": 35014,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "168"
										},
										{
											"begin": 34990,
											"end": 35002,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 35004,
											"end": 35013,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 34959,
											"end": 34989,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 34959,
											"end": 35014,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 34959,
											"end": 35014,
											"name": "tag",
											"source": 0,
											"value": "168"
										},
										{
											"begin": 34959,
											"end": 35014,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 35029,
											"end": 35096,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "169"
										},
										{
											"begin": 35060,
											"end": 35069,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 35086,
											"end": 35095,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 35071,
											"end": 35083,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 35071,
											"end": 35095,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 35029,
											"end": 35059,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 35029,
											"end": 35096,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 35029,
											"end": 35096,
											"name": "tag",
											"source": 0,
											"value": "169"
										},
										{
											"begin": 35029,
											"end": 35096,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 34783,
											"end": 35108,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 34783,
											"end": 35108,
											"name": "tag",
											"source": 0,
											"value": "159"
										},
										{
											"begin": 34783,
											"end": 35108,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 34400,
											"end": 35115,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 34400,
											"end": 35115,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 34400,
											"end": 35115,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 34400,
											"end": 35115,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 34400,
											"end": 35115,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 34400,
											"end": 35115,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 26826,
											"end": 27184,
											"name": "tag",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 26826,
											"end": 27184,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6EB1769F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 27096,
											"end": 27113,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 27043,
											"end": 27066,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27066,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27066,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27066,
											"name": "PUSH",
											"source": 0,
											"value": "DD62ED3E"
										},
										{
											"begin": 27043,
											"end": 27066,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "171"
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 27067,
											"end": 27077,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 27067,
											"end": 27077,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 27087,
											"end": 27091,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 27087,
											"end": 27091,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "172"
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "tag",
											"source": 0,
											"value": "171"
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "173"
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "tag",
											"source": 0,
											"value": "173"
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "STATICCALL",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "175"
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "tag",
											"source": 0,
											"value": "175"
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "176"
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "139"
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "tag",
											"source": 0,
											"value": "176"
										},
										{
											"begin": 27043,
											"end": 27093,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 27043,
											"end": 27113,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 27039,
											"end": 27176,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 27039,
											"end": 27176,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "169"
										},
										{
											"begin": 27039,
											"end": 27176,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 27128,
											"end": 27176,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "169"
										},
										{
											"begin": 27146,
											"end": 27151,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 27153,
											"end": 27158,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 27160,
											"end": 27166,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 27168,
											"end": 27169,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 27171,
											"end": 27172,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 27174,
											"end": 27175,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 27128,
											"end": 27145,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 27128,
											"end": 27176,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 17428,
											"end": 18097,
											"name": "tag",
											"source": 0,
											"value": "59"
										},
										{
											"begin": 17428,
											"end": 18097,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 17503,
											"end": 17525,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 17560,
											"end": 17564,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "180"
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "tag",
											"source": 0,
											"value": "180"
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "181"
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "tag",
											"source": 0,
											"value": "182"
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "182"
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "tag",
											"source": 0,
											"value": "181"
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 17548,
											"end": 17572,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 17538,
											"end": 17572,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 17538,
											"end": 17572,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 17588,
											"end": 17597,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 17583,
											"end": 18090,
											"name": "tag",
											"source": 0,
											"value": "183"
										},
										{
											"begin": 17583,
											"end": 18090,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 17603,
											"end": 17618,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 17603,
											"end": 17618,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 17603,
											"end": 17618,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 17583,
											"end": 18090,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 17583,
											"end": 18090,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "184"
										},
										{
											"begin": 17583,
											"end": 18090,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 17641,
											"end": 17653,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 17641,
											"end": 17653,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 17686,
											"end": 17690,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 17705,
											"end": 17709,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 17705,
											"end": 17709,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 17710,
											"end": 17711,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 17705,
											"end": 17712,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 17705,
											"end": 17712,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 17705,
											"end": 17712,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 17705,
											"end": 17712,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "186"
										},
										{
											"begin": 17705,
											"end": 17712,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 17705,
											"end": 17712,
											"name": "INVALID",
											"source": 0
										},
										{
											"begin": 17705,
											"end": 17712,
											"name": "tag",
											"source": 0,
											"value": "186"
										},
										{
											"begin": 17705,
											"end": 17712,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 17705,
											"end": 17712,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 17705,
											"end": 17712,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 17705,
											"end": 17712,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 17705,
											"end": 17712,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 17705,
											"end": 17712,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 17705,
											"end": 17712,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 17705,
											"end": 17712,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 17705,
											"end": 17712,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "187"
										},
										{
											"begin": 17705,
											"end": 17712,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 17705,
											"end": 17712,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 17705,
											"end": 17712,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "188"
										},
										{
											"begin": 17705,
											"end": 17712,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 17705,
											"end": 17712,
											"name": "tag",
											"source": 0,
											"value": "187"
										},
										{
											"begin": 17705,
											"end": 17712,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "189"
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "190"
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "tag",
											"source": 0,
											"value": "189"
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "DELEGATECALL",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "193"
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "PUSH",
											"source": 0,
											"value": "3F"
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "192"
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "tag",
											"source": 0,
											"value": "193"
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "tag",
											"source": 0,
											"value": "192"
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 17678,
											"end": 17713,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 17640,
											"end": 17713,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 17640,
											"end": 17713,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 17640,
											"end": 17713,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 17640,
											"end": 17713,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 17735,
											"end": 17742,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 17730,
											"end": 18043,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "194"
										},
										{
											"begin": 17730,
											"end": 18043,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 17864,
											"end": 17866,
											"name": "PUSH",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 17848,
											"end": 17854,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 17848,
											"end": 17861,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 17848,
											"end": 17866,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 17844,
											"end": 17876,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 17844,
											"end": 17876,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "195"
										},
										{
											"begin": 17844,
											"end": 17876,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 17868,
											"end": 17876,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 17868,
											"end": 17876,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 17868,
											"end": 17876,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 17844,
											"end": 17876,
											"name": "tag",
											"source": 0,
											"value": "195"
										},
										{
											"begin": 17844,
											"end": 17876,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 17949,
											"end": 17953,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 17941,
											"end": 17947,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 17937,
											"end": 17954,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 17927,
											"end": 17954,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 17927,
											"end": 17954,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 18009,
											"end": 18015,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 17998,
											"end": 18026,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 17998,
											"end": 18026,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 17998,
											"end": 18026,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 17998,
											"end": 18026,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 17998,
											"end": 18026,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 17998,
											"end": 18026,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 17998,
											"end": 18026,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 17998,
											"end": 18026,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 17998,
											"end": 18026,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "196"
										},
										{
											"begin": 17998,
											"end": 18026,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 17998,
											"end": 18026,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 17998,
											"end": 18026,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "197"
										},
										{
											"begin": 17998,
											"end": 18026,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 17998,
											"end": 18026,
											"name": "tag",
											"source": 0,
											"value": "196"
										},
										{
											"begin": 17998,
											"end": 18026,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 17991,
											"end": 18027,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 17991,
											"end": 18027,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 17991,
											"end": 18027,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 17991,
											"end": 18027,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 17991,
											"end": 18027,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 17991,
											"end": 18027,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 17991,
											"end": 18027,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 17991,
											"end": 18027,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 17991,
											"end": 18027,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 17991,
											"end": 18027,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "199"
										},
										{
											"begin": 17991,
											"end": 18027,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 17730,
											"end": 18043,
											"name": "tag",
											"source": 0,
											"value": "194"
										},
										{
											"begin": 17730,
											"end": 18043,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 18072,
											"end": 18078,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 18059,
											"end": 18066,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 18067,
											"end": 18068,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 18059,
											"end": 18069,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 18059,
											"end": 18069,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 18059,
											"end": 18069,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 18059,
											"end": 18069,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 18059,
											"end": 18069,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "200"
										},
										{
											"begin": 18059,
											"end": 18069,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 18059,
											"end": 18069,
											"name": "INVALID",
											"source": 0
										},
										{
											"begin": 18059,
											"end": 18069,
											"name": "tag",
											"source": 0,
											"value": "200"
										},
										{
											"begin": 18059,
											"end": 18069,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 18059,
											"end": 18069,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 18059,
											"end": 18069,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 18059,
											"end": 18069,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 18059,
											"end": 18069,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 18059,
											"end": 18069,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 18059,
											"end": 18069,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 18059,
											"end": 18069,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 18059,
											"end": 18069,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 18059,
											"end": 18069,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 18059,
											"end": 18078,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 17620,
											"end": 17623,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 17620,
											"end": 17623,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 17583,
											"end": 18090,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "183"
										},
										{
											"begin": 17583,
											"end": 18090,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 17583,
											"end": 18090,
											"name": "tag",
											"source": 0,
											"value": "184"
										},
										{
											"begin": 17583,
											"end": 18090,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 17583,
											"end": 18090,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 17428,
											"end": 18097,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 17428,
											"end": 18097,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 17428,
											"end": 18097,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 17428,
											"end": 18097,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 17428,
											"end": 18097,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 81373,
											"end": 82682,
											"name": "tag",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 81373,
											"end": 82682,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 81536,
											"end": 81553,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 81501,
											"end": 81507,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 81501,
											"end": 81516,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 81501,
											"end": 81516,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 81501,
											"end": 81516,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 30752,
											"end": 30760,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 30731,
											"end": 30748,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "202"
										},
										{
											"begin": 30731,
											"end": 30746,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "106"
										},
										{
											"begin": 30731,
											"end": 30748,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 30731,
											"end": 30748,
											"name": "tag",
											"source": 0,
											"value": "202"
										},
										{
											"begin": 30731,
											"end": 30748,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 30731,
											"end": 30760,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 30731,
											"end": 30760,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "203"
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "109"
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "tag",
											"source": 0,
											"value": "203"
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 81587,
											"end": 81597,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 81647,
											"end": 82594,
											"name": "tag",
											"source": 0,
											"value": "206"
										},
										{
											"begin": 81647,
											"end": 82594,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 81675,
											"end": 81696,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 81699,
											"end": 81729,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "208"
										},
										{
											"begin": 81699,
											"end": 81705,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 81699,
											"end": 81710,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 81699,
											"end": 81710,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 81699,
											"end": 81710,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 81699,
											"end": 81727,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "209"
										},
										{
											"begin": 81699,
											"end": 81729,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 81699,
											"end": 81729,
											"name": "tag",
											"source": 0,
											"value": "208"
										},
										{
											"begin": 81699,
											"end": 81729,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 81675,
											"end": 81729,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 81675,
											"end": 81729,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 81844,
											"end": 82246,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "210"
										},
										{
											"begin": 81881,
											"end": 81887,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 81881,
											"end": 81896,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 81881,
											"end": 81896,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 81881,
											"end": 81896,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 81915,
											"end": 81931,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 81915,
											"end": 81966,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "211"
										},
										{
											"begin": 81915,
											"end": 81966,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 81950,
											"end": 81956,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 81950,
											"end": 81966,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 81950,
											"end": 81966,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 81950,
											"end": 81966,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 81915,
											"end": 81966,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "212"
										},
										{
											"begin": 81915,
											"end": 81966,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 81915,
											"end": 81966,
											"name": "tag",
											"source": 0,
											"value": "211"
										},
										{
											"begin": 81915,
											"end": 81966,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 81942,
											"end": 81946,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 81915,
											"end": 81966,
											"name": "tag",
											"source": 0,
											"value": "212"
										},
										{
											"begin": 81915,
											"end": 81966,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 82036,
											"end": 82037,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 82056,
											"end": 82231,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 82056,
											"end": 82231,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 82056,
											"end": 82231,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 82056,
											"end": 82231,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 82056,
											"end": 82231,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 82056,
											"end": 82231,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 82056,
											"end": 82231,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 82056,
											"end": 82231,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 82102,
											"end": 82128,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "213"
										},
										{
											"begin": 82102,
											"end": 82108,
											"name": "DUP12",
											"source": 0
										},
										{
											"begin": 82102,
											"end": 82113,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 82102,
											"end": 82113,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 82102,
											"end": 82113,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 82102,
											"end": 82126,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "214"
										},
										{
											"begin": 82102,
											"end": 82128,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 82102,
											"end": 82128,
											"name": "tag",
											"source": 0,
											"value": "213"
										},
										{
											"begin": 82102,
											"end": 82128,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 82056,
											"end": 82231,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 82056,
											"end": 82231,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 82056,
											"end": 82231,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 82056,
											"end": 82231,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 82206,
											"end": 82211,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 82056,
											"end": 82231,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 82056,
											"end": 82231,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 82056,
											"end": 82231,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 82056,
											"end": 82231,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 81844,
											"end": 81862,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "122"
										},
										{
											"begin": 81844,
											"end": 82246,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 81844,
											"end": 82246,
											"name": "tag",
											"source": 0,
											"value": "210"
										},
										{
											"begin": 81844,
											"end": 82246,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 81826,
											"end": 81841,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 81826,
											"end": 81841,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 81826,
											"end": 81841,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 81826,
											"end": 82246,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 82319,
											"end": 82583,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 82319,
											"end": 82583,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 82319,
											"end": 82583,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "215"
										},
										{
											"begin": 82319,
											"end": 82583,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 82452,
											"end": 82463,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 82452,
											"end": 82463,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 82376,
											"end": 82380,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 82376,
											"end": 82380,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 82452,
											"end": 82475,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "216"
										},
										{
											"begin": 82452,
											"end": 82475,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 82452,
											"end": 82473,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "217"
										},
										{
											"begin": 82452,
											"end": 82475,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 82452,
											"end": 82475,
											"name": "tag",
											"source": 0,
											"value": "216"
										},
										{
											"begin": 82452,
											"end": 82475,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 82438,
											"end": 82475,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 82438,
											"end": 82475,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 82319,
											"end": 82583,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "218"
										},
										{
											"begin": 82319,
											"end": 82583,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 82319,
											"end": 82583,
											"name": "tag",
											"source": 0,
											"value": "215"
										},
										{
											"begin": 82319,
											"end": 82583,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 82528,
											"end": 82534,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 82528,
											"end": 82543,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 82528,
											"end": 82543,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 82528,
											"end": 82543,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 82516,
											"end": 82543,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 82516,
											"end": 82543,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 82562,
											"end": 82567,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 82562,
											"end": 82567,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "207"
										},
										{
											"begin": 82562,
											"end": 82567,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 82319,
											"end": 82583,
											"name": "tag",
											"source": 0,
											"value": "218"
										},
										{
											"begin": 82319,
											"end": 82583,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 81647,
											"end": 82594,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 81647,
											"end": 82594,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "206"
										},
										{
											"begin": 81647,
											"end": 82594,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 81647,
											"end": 82594,
											"name": "tag",
											"source": 0,
											"value": "207"
										},
										{
											"begin": 81647,
											"end": 82594,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 82627,
											"end": 82633,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 82627,
											"end": 82650,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 82627,
											"end": 82650,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 82627,
											"end": 82650,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 82614,
											"end": 82623,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 82614,
											"end": 82650,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 82614,
											"end": 82650,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 82606,
											"end": 82674,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "219"
										},
										{
											"begin": 82606,
											"end": 82674,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 82606,
											"end": 82674,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 82606,
											"end": 82674,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 82606,
											"end": 82674,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 82606,
											"end": 82674,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 82606,
											"end": 82674,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 82606,
											"end": 82674,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 82606,
											"end": 82674,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 82606,
											"end": 82674,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 82606,
											"end": 82674,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 82606,
											"end": 82674,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 82606,
											"end": 82674,
											"name": "tag",
											"source": 0,
											"value": "219"
										},
										{
											"begin": 82606,
											"end": 82674,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 30795,
											"end": 30796,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 81373,
											"end": 82682,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 81373,
											"end": 82682,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 81373,
											"end": 82682,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 81373,
											"end": 82682,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 81373,
											"end": 82682,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 26123,
											"end": 26446,
											"name": "tag",
											"source": 0,
											"value": "69"
										},
										{
											"begin": 26123,
											"end": 26446,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6EB1769F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 26388,
											"end": 26393,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 26388,
											"end": 26393,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 26335,
											"end": 26358,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26358,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26358,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26358,
											"name": "PUSH",
											"source": 0,
											"value": "DD62ED3E"
										},
										{
											"begin": 26335,
											"end": 26358,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "222"
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 26359,
											"end": 26369,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 26359,
											"end": 26369,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 26379,
											"end": 26383,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 26379,
											"end": 26383,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "172"
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "tag",
											"source": 0,
											"value": "222"
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "223"
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "tag",
											"source": 0,
											"value": "223"
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "STATICCALL",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "225"
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "tag",
											"source": 0,
											"value": "225"
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "226"
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "139"
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "tag",
											"source": 0,
											"value": "226"
										},
										{
											"begin": 26335,
											"end": 26385,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 26335,
											"end": 26393,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 26331,
											"end": 26438,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 26331,
											"end": 26438,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "169"
										},
										{
											"begin": 26331,
											"end": 26438,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 26395,
											"end": 26438,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "169"
										},
										{
											"begin": 26406,
											"end": 26411,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 26413,
											"end": 26418,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 26420,
											"end": 26428,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 26430,
											"end": 26431,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 26433,
											"end": 26434,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 26436,
											"end": 26437,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 26395,
											"end": 26405,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "94"
										},
										{
											"begin": 26395,
											"end": 26438,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 31556,
											"end": 31597,
											"name": "tag",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 31556,
											"end": 31597,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 31556,
											"end": 31597,
											"name": "PUSHIMMUTABLE",
											"source": 0,
											"value": "1222"
										},
										{
											"begin": 31556,
											"end": 31597,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 31556,
											"end": 31597,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 84146,
											"end": 84896,
											"name": "tag",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 84146,
											"end": 84896,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 84325,
											"end": 84341,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 84290,
											"end": 84296,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 84290,
											"end": 84305,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 84290,
											"end": 84305,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 84290,
											"end": 84305,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 30752,
											"end": 30760,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 30731,
											"end": 30748,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "230"
										},
										{
											"begin": 30731,
											"end": 30746,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "106"
										},
										{
											"begin": 30731,
											"end": 30748,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 30731,
											"end": 30748,
											"name": "tag",
											"source": 0,
											"value": "230"
										},
										{
											"begin": 30731,
											"end": 30748,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 30731,
											"end": 30760,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 30731,
											"end": 30760,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "231"
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "109"
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "tag",
											"source": 0,
											"value": "231"
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 84427,
											"end": 84679,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "234"
										},
										{
											"begin": 84461,
											"end": 84477,
											"name": "PUSH",
											"source": 0,
											"value": "A0"
										},
										{
											"begin": 84461,
											"end": 84477,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 84461,
											"end": 84477,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 84461,
											"end": 84477,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 84492,
											"end": 84508,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "235"
										},
										{
											"begin": 84492,
											"end": 84508,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 84492,
											"end": 84508,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 84492,
											"end": 84508,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 84492,
											"end": 84508,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 84492,
											"end": 84508,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 84492,
											"end": 84508,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 84492,
											"end": 84508,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 84492,
											"end": 84508,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 84492,
											"end": 84508,
											"name": "tag",
											"source": 0,
											"value": "235"
										},
										{
											"begin": 84492,
											"end": 84508,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 84523,
											"end": 84547,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "236"
										},
										{
											"begin": 84523,
											"end": 84547,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 84523,
											"end": 84547,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 84523,
											"end": 84547,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 84523,
											"end": 84547,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 84523,
											"end": 84547,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 84523,
											"end": 84547,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 84523,
											"end": 84547,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 84523,
											"end": 84547,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 84523,
											"end": 84547,
											"name": "tag",
											"source": 0,
											"value": "236"
										},
										{
											"begin": 84523,
											"end": 84547,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 84562,
											"end": 84668,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 84562,
											"end": 84668,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 84562,
											"end": 84668,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 84562,
											"end": 84668,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 84562,
											"end": 84668,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 84562,
											"end": 84668,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 84562,
											"end": 84668,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 84562,
											"end": 84668,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 84603,
											"end": 84609,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 84603,
											"end": 84618,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 84603,
											"end": 84618,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 84603,
											"end": 84618,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 84603,
											"end": 84618,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 84603,
											"end": 84618,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 84603,
											"end": 84618,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 84603,
											"end": 84618,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "237"
										},
										{
											"begin": 84603,
											"end": 84618,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 84603,
											"end": 84618,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 84603,
											"end": 84618,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 84603,
											"end": 84618,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 84603,
											"end": 84618,
											"name": "tag",
											"source": 0,
											"value": "237"
										},
										{
											"begin": 84603,
											"end": 84618,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 84620,
											"end": 84630,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "238"
										},
										{
											"begin": 84620,
											"end": 84630,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 84620,
											"end": 84630,
											"name": "DUP12",
											"source": 0
										},
										{
											"begin": 84620,
											"end": 84630,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 84620,
											"end": 84630,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 84620,
											"end": 84630,
											"name": "DUP13",
											"source": 0
										},
										{
											"begin": 84620,
											"end": 84630,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 84620,
											"end": 84630,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 84620,
											"end": 84630,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 84620,
											"end": 84630,
											"name": "tag",
											"source": 0,
											"value": "238"
										},
										{
											"begin": 84620,
											"end": 84630,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 84632,
											"end": 84646,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "239"
										},
										{
											"begin": 84632,
											"end": 84646,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 84632,
											"end": 84646,
											"name": "DUP13",
											"source": 0
										},
										{
											"begin": 84632,
											"end": 84646,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 84632,
											"end": 84638,
											"name": "DUP13",
											"source": 0
										},
										{
											"begin": 84632,
											"end": 84646,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 84632,
											"end": 84646,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 84632,
											"end": 84646,
											"name": "tag",
											"source": 0,
											"value": "239"
										},
										{
											"begin": 84632,
											"end": 84646,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 84586,
											"end": 84647,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 84586,
											"end": 84647,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 84586,
											"end": 84647,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 84586,
											"end": 84647,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 84586,
											"end": 84647,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "240"
										},
										{
											"begin": 84586,
											"end": 84647,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 84586,
											"end": 84647,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 84586,
											"end": 84647,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 84586,
											"end": 84647,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 84586,
											"end": 84647,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 84586,
											"end": 84647,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 84586,
											"end": 84647,
											"name": "tag",
											"source": 0,
											"value": "240"
										},
										{
											"begin": 84586,
											"end": 84647,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 84586,
											"end": 84647,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 84586,
											"end": 84647,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 84586,
											"end": 84647,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 84586,
											"end": 84647,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 84586,
											"end": 84647,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 84586,
											"end": 84647,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 84586,
											"end": 84647,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 84586,
											"end": 84647,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 84586,
											"end": 84647,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 84586,
											"end": 84647,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 84586,
											"end": 84647,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 84586,
											"end": 84647,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 84562,
											"end": 84668,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 84562,
											"end": 84668,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 84562,
											"end": 84668,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 84562,
											"end": 84668,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 84656,
											"end": 84666,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 84562,
											"end": 84668,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 84562,
											"end": 84668,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 84562,
											"end": 84668,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 84562,
											"end": 84668,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 84427,
											"end": 84446,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "241"
										},
										{
											"begin": 84427,
											"end": 84679,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 84427,
											"end": 84679,
											"name": "tag",
											"source": 0,
											"value": "234"
										},
										{
											"begin": 84427,
											"end": 84679,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 84416,
											"end": 84679,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 84416,
											"end": 84679,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 84712,
											"end": 84718,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 84712,
											"end": 84734,
											"name": "PUSH",
											"source": 0,
											"value": "C0"
										},
										{
											"begin": 84712,
											"end": 84734,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 84712,
											"end": 84734,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 84700,
											"end": 84708,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 84700,
											"end": 84734,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 84700,
											"end": 84734,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 84692,
											"end": 84757,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "242"
										},
										{
											"begin": 84692,
											"end": 84757,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 84692,
											"end": 84757,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 84692,
											"end": 84757,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 84692,
											"end": 84757,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 84692,
											"end": 84757,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 84692,
											"end": 84757,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 84692,
											"end": 84757,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 84692,
											"end": 84757,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 84692,
											"end": 84757,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 84692,
											"end": 84757,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "244"
										},
										{
											"begin": 84692,
											"end": 84757,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 84692,
											"end": 84757,
											"name": "tag",
											"source": 0,
											"value": "242"
										},
										{
											"begin": 84692,
											"end": 84757,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 84847,
											"end": 84861,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 84847,
											"end": 84888,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 84146,
											"end": 84896,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 84146,
											"end": 84896,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 84146,
											"end": 84896,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 32580,
											"end": 32986,
											"name": "tag",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 32580,
											"end": 32986,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70A08231"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 32726,
											"end": 32746,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 32726,
											"end": 32746,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 32749,
											"end": 32772,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32772,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32772,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32772,
											"name": "PUSH",
											"source": 0,
											"value": "70A08231"
										},
										{
											"begin": 32749,
											"end": 32772,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "246"
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 32781,
											"end": 32785,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 32781,
											"end": 32785,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "tag",
											"source": 0,
											"value": "246"
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "247"
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "tag",
											"source": 0,
											"value": "247"
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "STATICCALL",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "249"
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "tag",
											"source": 0,
											"value": "249"
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "250"
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "139"
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "tag",
											"source": 0,
											"value": "250"
										},
										{
											"begin": 32749,
											"end": 32787,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 32726,
											"end": 32787,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 32726,
											"end": 32787,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 32822,
											"end": 32835,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 32806,
											"end": 32818,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 32806,
											"end": 32835,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 32806,
											"end": 32835,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 32798,
											"end": 32858,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "251"
										},
										{
											"begin": 32798,
											"end": 32858,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 32798,
											"end": 32858,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 32798,
											"end": 32858,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 32798,
											"end": 32858,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 32798,
											"end": 32858,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 32798,
											"end": 32858,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 32798,
											"end": 32858,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 32798,
											"end": 32858,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 32798,
											"end": 32858,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 32798,
											"end": 32858,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "253"
										},
										{
											"begin": 32798,
											"end": 32858,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 32798,
											"end": 32858,
											"name": "tag",
											"source": 0,
											"value": "251"
										},
										{
											"begin": 32798,
											"end": 32858,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 32875,
											"end": 32891,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 32875,
											"end": 32891,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 32871,
											"end": 32979,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "255"
										},
										{
											"begin": 32871,
											"end": 32979,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 32908,
											"end": 32967,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "255"
										},
										{
											"begin": 32936,
											"end": 32941,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 32943,
											"end": 32952,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 32954,
											"end": 32966,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 32908,
											"end": 32935,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "256"
										},
										{
											"begin": 32908,
											"end": 32967,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 32908,
											"end": 32967,
											"name": "tag",
											"source": 0,
											"value": "255"
										},
										{
											"begin": 32908,
											"end": 32967,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 32580,
											"end": 32986,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 32580,
											"end": 32986,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 32580,
											"end": 32986,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 32580,
											"end": 32986,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 32580,
											"end": 32986,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 35170,
											"end": 35865,
											"name": "tag",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 35170,
											"end": 35865,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 35398,
											"end": 35399,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 35388,
											"end": 35395,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 35388,
											"end": 35399,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 35388,
											"end": 35417,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 35388,
											"end": 35417,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 35388,
											"end": 35417,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "258"
										},
										{
											"begin": 35388,
											"end": 35417,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 35388,
											"end": 35417,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 35414,
											"end": 35417,
											"name": "PUSH",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 35403,
											"end": 35410,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 35403,
											"end": 35417,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 35403,
											"end": 35417,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 35388,
											"end": 35417,
											"name": "tag",
											"source": 0,
											"value": "258"
										},
										{
											"begin": 35388,
											"end": 35417,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 35380,
											"end": 35418,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "259"
										},
										{
											"begin": 35380,
											"end": 35418,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 35380,
											"end": 35418,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 35380,
											"end": 35418,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 35380,
											"end": 35418,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 35380,
											"end": 35418,
											"name": "tag",
											"source": 0,
											"value": "259"
										},
										{
											"begin": 35380,
											"end": 35418,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70A08231"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 35431,
											"end": 35451,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 35431,
											"end": 35451,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 35454,
											"end": 35477,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35477,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35477,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35477,
											"name": "PUSH",
											"source": 0,
											"value": "70A08231"
										},
										{
											"begin": 35454,
											"end": 35477,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "260"
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 35486,
											"end": 35490,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 35486,
											"end": 35490,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "tag",
											"source": 0,
											"value": "260"
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "261"
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "tag",
											"source": 0,
											"value": "261"
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "STATICCALL",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "263"
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "tag",
											"source": 0,
											"value": "263"
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "264"
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "139"
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "tag",
											"source": 0,
											"value": "264"
										},
										{
											"begin": 35454,
											"end": 35492,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 35431,
											"end": 35492,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 35431,
											"end": 35492,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 35527,
											"end": 35540,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 35511,
											"end": 35523,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 35511,
											"end": 35540,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 35511,
											"end": 35540,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 35503,
											"end": 35563,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "265"
										},
										{
											"begin": 35503,
											"end": 35563,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 35503,
											"end": 35563,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 35503,
											"end": 35563,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 35503,
											"end": 35563,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 35503,
											"end": 35563,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 35503,
											"end": 35563,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 35503,
											"end": 35563,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 35503,
											"end": 35563,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 35503,
											"end": 35563,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 35503,
											"end": 35563,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "253"
										},
										{
											"begin": 35503,
											"end": 35563,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 35503,
											"end": 35563,
											"name": "tag",
											"source": 0,
											"value": "265"
										},
										{
											"begin": 35503,
											"end": 35563,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 35580,
											"end": 35596,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 35580,
											"end": 35596,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 35576,
											"end": 35858,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "169"
										},
										{
											"begin": 35576,
											"end": 35858,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 35613,
											"end": 35630,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 35661,
											"end": 35667,
											"name": "PUSH",
											"source": 0,
											"value": "2710"
										},
										{
											"begin": 35633,
											"end": 35658,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "268"
										},
										{
											"begin": 35633,
											"end": 35645,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 35650,
											"end": 35657,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 35633,
											"end": 35649,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "165"
										},
										{
											"begin": 35633,
											"end": 35658,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 35633,
											"end": 35658,
											"name": "tag",
											"source": 0,
											"value": "268"
										},
										{
											"begin": 35633,
											"end": 35658,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 35633,
											"end": 35667,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 35633,
											"end": 35667,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "269"
										},
										{
											"begin": 35633,
											"end": 35667,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 35633,
											"end": 35667,
											"name": "INVALID",
											"source": 0
										},
										{
											"begin": 35633,
											"end": 35667,
											"name": "tag",
											"source": 0,
											"value": "269"
										},
										{
											"begin": 35633,
											"end": 35667,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 35633,
											"end": 35667,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 35633,
											"end": 35667,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 35686,
											"end": 35699,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 35686,
											"end": 35699,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 35682,
											"end": 35760,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "271"
										},
										{
											"begin": 35682,
											"end": 35760,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 35701,
											"end": 35760,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "271"
										},
										{
											"begin": 35729,
											"end": 35734,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 35736,
											"end": 35748,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 35750,
											"end": 35759,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 35701,
											"end": 35728,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "256"
										},
										{
											"begin": 35701,
											"end": 35760,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 35701,
											"end": 35760,
											"name": "tag",
											"source": 0,
											"value": "271"
										},
										{
											"begin": 35701,
											"end": 35760,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 35775,
											"end": 35846,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "272"
										},
										{
											"begin": 35803,
											"end": 35808,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 35810,
											"end": 35819,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 35836,
											"end": 35845,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 35821,
											"end": 35833,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 35821,
											"end": 35845,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 35775,
											"end": 35802,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "256"
										},
										{
											"begin": 35775,
											"end": 35846,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 35775,
											"end": 35846,
											"name": "tag",
											"source": 0,
											"value": "272"
										},
										{
											"begin": 35775,
											"end": 35846,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 35576,
											"end": 35858,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 35170,
											"end": 35865,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 35170,
											"end": 35865,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 35170,
											"end": 35865,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 35170,
											"end": 35865,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 35170,
											"end": 35865,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 35170,
											"end": 35865,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 35170,
											"end": 35865,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 84937,
											"end": 85712,
											"name": "tag",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 84937,
											"end": 85712,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 85104,
											"end": 85120,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 85069,
											"end": 85075,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 85069,
											"end": 85084,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 85069,
											"end": 85084,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 85069,
											"end": 85084,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 30752,
											"end": 30760,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 30731,
											"end": 30748,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "274"
										},
										{
											"begin": 30731,
											"end": 30746,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "106"
										},
										{
											"begin": 30731,
											"end": 30748,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 30731,
											"end": 30748,
											"name": "tag",
											"source": 0,
											"value": "274"
										},
										{
											"begin": 30731,
											"end": 30748,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 30731,
											"end": 30760,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 30731,
											"end": 30760,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "275"
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "109"
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "tag",
											"source": 0,
											"value": "275"
										},
										{
											"begin": 30723,
											"end": 30784,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 85359,
											"end": 85538,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "278"
										},
										{
											"begin": 85393,
											"end": 85409,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 85393,
											"end": 85409,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 85393,
											"end": 85409,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 85393,
											"end": 85409,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 85424,
											"end": 85440,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "279"
										},
										{
											"begin": 85424,
											"end": 85440,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 85424,
											"end": 85440,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 85424,
											"end": 85440,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 85424,
											"end": 85440,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 85424,
											"end": 85440,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 85424,
											"end": 85440,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 85424,
											"end": 85440,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 85424,
											"end": 85440,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 85424,
											"end": 85440,
											"name": "tag",
											"source": 0,
											"value": "279"
										},
										{
											"begin": 85424,
											"end": 85440,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 85455,
											"end": 85456,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 85455,
											"end": 85456,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 85495,
											"end": 85506,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "280"
										},
										{
											"begin": 85495,
											"end": 85501,
											"name": "DUP10",
											"source": 0
										},
										{
											"begin": 85495,
											"end": 85501,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 85495,
											"end": 85506,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "188"
										},
										{
											"begin": 85495,
											"end": 85506,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 85495,
											"end": 85506,
											"name": "tag",
											"source": 0,
											"value": "280"
										},
										{
											"begin": 85495,
											"end": 85506,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "CALLDATACOPY",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 85515,
											"end": 85525,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 85471,
											"end": 85527,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 85359,
											"end": 85378,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "241"
										},
										{
											"begin": 85359,
											"end": 85538,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 85359,
											"end": 85538,
											"name": "tag",
											"source": 0,
											"value": "278"
										},
										{
											"begin": 85359,
											"end": 85538,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 85359,
											"end": 85538,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 85562,
											"end": 85576,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 85562,
											"end": 85576,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 85551,
											"end": 85576,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 85551,
											"end": 85576,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 85607,
											"end": 85613,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 85607,
											"end": 85629,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 85607,
											"end": 85629,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 85607,
											"end": 85629,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 85595,
											"end": 85603,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 85595,
											"end": 85629,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 85595,
											"end": 85629,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 85587,
											"end": 85652,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "242"
										},
										{
											"begin": 85587,
											"end": 85652,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 85587,
											"end": 85652,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 85587,
											"end": 85652,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 85587,
											"end": 85652,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 85587,
											"end": 85652,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 85587,
											"end": 85652,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 85587,
											"end": 85652,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 85587,
											"end": 85652,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 85587,
											"end": 85652,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 85587,
											"end": 85652,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "244"
										},
										{
											"begin": 85587,
											"end": 85652,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 25800,
											"end": 26082,
											"name": "tag",
											"source": 0,
											"value": "94"
										},
										{
											"begin": 25800,
											"end": 26082,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 25995,
											"end": 26074,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 25995,
											"end": 26074,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D505ACCF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 25995,
											"end": 26074,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 25995,
											"end": 26074,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 25995,
											"end": 26021,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 25995,
											"end": 26021,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 25995,
											"end": 26021,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 25995,
											"end": 26021,
											"name": "PUSH",
											"source": 0,
											"value": "D505ACCF"
										},
										{
											"begin": 25995,
											"end": 26021,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 25995,
											"end": 26074,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 25995,
											"end": 26074,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 26022,
											"end": 26032,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 26022,
											"end": 26032,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 26042,
											"end": 26046,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 26042,
											"end": 26046,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 26049,
											"end": 26054,
											"name": "DUP11",
											"source": 0
										},
										{
											"begin": 26049,
											"end": 26054,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 26056,
											"end": 26064,
											"name": "DUP11",
											"source": 0
										},
										{
											"begin": 26056,
											"end": 26064,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 26066,
											"end": 26067,
											"name": "DUP11",
											"source": 0
										},
										{
											"begin": 26066,
											"end": 26067,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 26069,
											"end": 26070,
											"name": "DUP11",
											"source": 0
										},
										{
											"begin": 26069,
											"end": 26070,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 26072,
											"end": 26073,
											"name": "DUP11",
											"source": 0
										},
										{
											"begin": 26072,
											"end": 26073,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 25995,
											"end": 26074,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 25995,
											"end": 26074,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 25995,
											"end": 26074,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "285"
										},
										{
											"begin": 25995,
											"end": 26074,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 78393,
											"end": 79714,
											"name": "tag",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 78393,
											"end": 79714,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 78574,
											"end": 78575,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 78559,
											"end": 78571,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 78559,
											"end": 78575,
											"name": "SGT",
											"source": 0
										},
										{
											"begin": 78559,
											"end": 78595,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 78559,
											"end": 78595,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "290"
										},
										{
											"begin": 78559,
											"end": 78595,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 78559,
											"end": 78595,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 78594,
											"end": 78595,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 78579,
											"end": 78591,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 78579,
											"end": 78595,
											"name": "SGT",
											"source": 0
										},
										{
											"begin": 78559,
											"end": 78595,
											"name": "tag",
											"source": 0,
											"value": "290"
										},
										{
											"begin": 78559,
											"end": 78595,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 78551,
											"end": 78596,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "291"
										},
										{
											"begin": 78551,
											"end": 78596,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 78551,
											"end": 78596,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 78551,
											"end": 78596,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 78551,
											"end": 78596,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 78551,
											"end": 78596,
											"name": "tag",
											"source": 0,
											"value": "291"
										},
										{
											"begin": 78551,
											"end": 78596,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 78670,
											"end": 78698,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 78701,
											"end": 78738,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "292"
										},
										{
											"begin": 78701,
											"end": 78738,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 78701,
											"end": 78738,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 78701,
											"end": 78738,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 78712,
											"end": 78717,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 78701,
											"end": 78738,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "293"
										},
										{
											"begin": 78701,
											"end": 78738,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 78701,
											"end": 78738,
											"name": "tag",
											"source": 0,
											"value": "292"
										},
										{
											"begin": 78701,
											"end": 78738,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 78670,
											"end": 78738,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 78670,
											"end": 78738,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 78750,
											"end": 78765,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 78767,
											"end": 78783,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 78785,
											"end": 78795,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 78799,
											"end": 78826,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "294"
										},
										{
											"begin": 78799,
											"end": 78803,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 78799,
											"end": 78808,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 78799,
											"end": 78808,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 78799,
											"end": 78808,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 78799,
											"end": 78824,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "295"
										},
										{
											"begin": 78799,
											"end": 78826,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 78799,
											"end": 78826,
											"name": "tag",
											"source": 0,
											"value": "294"
										},
										{
											"begin": 78799,
											"end": 78826,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 78749,
											"end": 78826,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 78749,
											"end": 78826,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 78749,
											"end": 78826,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 78749,
											"end": 78826,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 78749,
											"end": 78826,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 78749,
											"end": 78826,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 78837,
											"end": 78903,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "296"
										},
										{
											"begin": 78871,
											"end": 78878,
											"name": "PUSHIMMUTABLE",
											"source": 0,
											"value": "1222"
										},
										{
											"begin": 78880,
											"end": 78887,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 78889,
											"end": 78897,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 78899,
											"end": 78902,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 78837,
											"end": 78870,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "297"
										},
										{
											"begin": 78837,
											"end": 78903,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 78837,
											"end": 78903,
											"name": "tag",
											"source": 0,
											"value": "296"
										},
										{
											"begin": 78837,
											"end": 78903,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 78837,
											"end": 78903,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 78917,
											"end": 78934,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 78936,
											"end": 78955,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 78987,
											"end": 78988,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 78972,
											"end": 78984,
											"name": "DUP11",
											"source": 0
										},
										{
											"begin": 78972,
											"end": 78988,
											"name": "SGT",
											"source": 0
										},
										{
											"begin": 78972,
											"end": 79114,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "298"
										},
										{
											"begin": 78972,
											"end": 79114,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 79083,
											"end": 79090,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 79072,
											"end": 79090,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 79072,
											"end": 79080,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 79072,
											"end": 79090,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 79072,
											"end": 79090,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 79100,
											"end": 79112,
											"name": "DUP10",
											"source": 0
										},
										{
											"begin": 78972,
											"end": 79114,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "299"
										},
										{
											"begin": 78972,
											"end": 79114,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 78972,
											"end": 79114,
											"name": "tag",
											"source": 0,
											"value": "298"
										},
										{
											"begin": 78972,
											"end": 79114,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 79019,
											"end": 79027,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 79009,
											"end": 79027,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 79009,
											"end": 79016,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 79009,
											"end": 79027,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 79009,
											"end": 79027,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 79037,
											"end": 79049,
											"name": "DUP11",
											"source": 0
										},
										{
											"begin": 78972,
											"end": 79114,
											"name": "tag",
											"source": 0,
											"value": "299"
										},
										{
											"begin": 78972,
											"end": 79114,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 78916,
											"end": 79114,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 78916,
											"end": 79114,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 78916,
											"end": 79114,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 78916,
											"end": 79114,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 79129,
											"end": 79141,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 79125,
											"end": 79707,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 79125,
											"end": 79707,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "300"
										},
										{
											"begin": 79125,
											"end": 79707,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 79158,
											"end": 79207,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "301"
										},
										{
											"begin": 79162,
											"end": 79169,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 79171,
											"end": 79175,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 79171,
											"end": 79181,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 79171,
											"end": 79181,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 79171,
											"end": 79181,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 79183,
											"end": 79193,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 79195,
											"end": 79206,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 79158,
											"end": 79161,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "302"
										},
										{
											"begin": 79158,
											"end": 79207,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 79158,
											"end": 79207,
											"name": "tag",
											"source": 0,
											"value": "301"
										},
										{
											"begin": 79158,
											"end": 79207,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 79125,
											"end": 79707,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 79125,
											"end": 79707,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 79125,
											"end": 79707,
											"name": "tag",
											"source": 0,
											"value": "300"
										},
										{
											"begin": 79125,
											"end": 79707,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 79297,
											"end": 79306,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 79297,
											"end": 79306,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 79297,
											"end": 79325,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "304"
										},
										{
											"begin": 79297,
											"end": 79325,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 79297,
											"end": 79323,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "209"
										},
										{
											"begin": 79297,
											"end": 79325,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 79297,
											"end": 79325,
											"name": "tag",
											"source": 0,
											"value": "304"
										},
										{
											"begin": 79297,
											"end": 79325,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 79293,
											"end": 79696,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 79293,
											"end": 79696,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "305"
										},
										{
											"begin": 79293,
											"end": 79696,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 79358,
											"end": 79367,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 79358,
											"end": 79367,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 79358,
											"end": 79379,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "306"
										},
										{
											"begin": 79358,
											"end": 79379,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 79358,
											"end": 79377,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "217"
										},
										{
											"begin": 79358,
											"end": 79379,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 79358,
											"end": 79379,
											"name": "tag",
											"source": 0,
											"value": "306"
										},
										{
											"begin": 79358,
											"end": 79379,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 79346,
											"end": 79379,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 79346,
											"end": 79379,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 79398,
											"end": 79451,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "307"
										},
										{
											"begin": 79418,
											"end": 79429,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 79431,
											"end": 79441,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 79346,
											"end": 79355,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 79346,
											"end": 79350,
											"name": "DUP10",
											"source": 0
										},
										{
											"begin": 79398,
											"end": 79417,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "241"
										},
										{
											"begin": 79398,
											"end": 79451,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 79398,
											"end": 79451,
											"name": "tag",
											"source": 0,
											"value": "307"
										},
										{
											"begin": 79398,
											"end": 79451,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 79398,
											"end": 79451,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 79293,
											"end": 79696,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 79293,
											"end": 79696,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 79293,
											"end": 79696,
											"name": "tag",
											"source": 0,
											"value": "305"
										},
										{
											"begin": 79293,
											"end": 79696,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 79509,
											"end": 79520,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 79492,
											"end": 79506,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 79492,
											"end": 79520,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 79492,
											"end": 79520,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 79492,
											"end": 79520,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 79492,
											"end": 79520,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 79549,
											"end": 79557,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 79539,
											"end": 79557,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 79539,
											"end": 79557,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 79631,
											"end": 79680,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 79635,
											"end": 79642,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 79644,
											"end": 79648,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 79644,
											"end": 79654,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 79644,
											"end": 79654,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 79644,
											"end": 79654,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 79656,
											"end": 79666,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 79668,
											"end": 79679,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 79631,
											"end": 79634,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "302"
										},
										{
											"begin": 79631,
											"end": 79680,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 29565,
											"end": 29733,
											"name": "tag",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 29565,
											"end": 29733,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 29678,
											"end": 29690,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 29678,
											"end": 29690,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 29678,
											"end": 29690,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 29638,
											"end": 29650,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 29678,
											"end": 29690,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 29678,
											"end": 29690,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 29678,
											"end": 29690,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 29678,
											"end": 29690,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 29678,
											"end": 29690,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 29678,
											"end": 29690,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 29678,
											"end": 29690,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 29678,
											"end": 29690,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 29678,
											"end": 29690,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 29656,
											"end": 29663,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29663,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29663,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 29671,
											"end": 29676,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 29671,
											"end": 29676,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "313"
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "314"
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "tag",
											"source": 0,
											"value": "313"
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "CALL",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "317"
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "PUSH",
											"source": 0,
											"value": "3F"
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "316"
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "tag",
											"source": 0,
											"value": "317"
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "tag",
											"source": 0,
											"value": "316"
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 29656,
											"end": 29691,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 29637,
											"end": 29691,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 29637,
											"end": 29691,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 29637,
											"end": 29691,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 29710,
											"end": 29717,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 29702,
											"end": 29725,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "148"
										},
										{
											"begin": 29702,
											"end": 29725,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 29702,
											"end": 29725,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 29702,
											"end": 29725,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 29702,
											"end": 29725,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 29702,
											"end": 29725,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 29702,
											"end": 29725,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 29702,
											"end": 29725,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 29702,
											"end": 29725,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 29702,
											"end": 29725,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 29702,
											"end": 29725,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "320"
										},
										{
											"begin": 29702,
											"end": 29725,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 30411,
											"end": 30519,
											"name": "tag",
											"source": 0,
											"value": "106"
										},
										{
											"begin": 30411,
											"end": 30519,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 30496,
											"end": 30511,
											"name": "TIMESTAMP",
											"source": 0
										},
										{
											"begin": 30411,
											"end": 30519,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 30411,
											"end": 30519,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 79771,
											"end": 80730,
											"name": "tag",
											"source": 0,
											"value": "122"
										},
										{
											"begin": 79771,
											"end": 80730,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 79953,
											"end": 79970,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 80051,
											"end": 80074,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 80051,
											"end": 80074,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 80047,
											"end": 80101,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "323"
										},
										{
											"begin": 80047,
											"end": 80101,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 80096,
											"end": 80100,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 80076,
											"end": 80101,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 80076,
											"end": 80101,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 80047,
											"end": 80101,
											"name": "tag",
											"source": 0,
											"value": "323"
										},
										{
											"begin": 80047,
											"end": 80101,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 80115,
											"end": 80130,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 80132,
											"end": 80148,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 80150,
											"end": 80160,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 80164,
											"end": 80191,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "324"
										},
										{
											"begin": 80164,
											"end": 80168,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 80164,
											"end": 80173,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 80164,
											"end": 80173,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 80164,
											"end": 80173,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 80164,
											"end": 80189,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "295"
										},
										{
											"begin": 80164,
											"end": 80191,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 80164,
											"end": 80191,
											"name": "tag",
											"source": 0,
											"value": "324"
										},
										{
											"begin": 80164,
											"end": 80191,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 80114,
											"end": 80191,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 80114,
											"end": 80191,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 80114,
											"end": 80191,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 80114,
											"end": 80191,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 80222,
											"end": 80240,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 80222,
											"end": 80240,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 80222,
											"end": 80240,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 80222,
											"end": 80240,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 80222,
											"end": 80240,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 80222,
											"end": 80240,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 80222,
											"end": 80240,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 80204,
											"end": 80219,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 80204,
											"end": 80219,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80332,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "325"
										},
										{
											"begin": 80114,
											"end": 80191,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 80114,
											"end": 80191,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 80114,
											"end": 80191,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "326"
										},
										{
											"begin": 80301,
											"end": 80332,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 80301,
											"end": 80332,
											"name": "tag",
											"source": 0,
											"value": "325"
										},
										{
											"begin": 80301,
											"end": 80332,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 80301,
											"end": 80337,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80337,
											"name": "PUSH",
											"source": 0,
											"value": "128ACB08"
										},
										{
											"begin": 80356,
											"end": 80365,
											"name": "DUP12",
											"source": 0
										},
										{
											"begin": 80384,
											"end": 80394,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 80413,
											"end": 80432,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "327"
										},
										{
											"begin": 80413,
											"end": 80421,
											"name": "DUP16",
											"source": 0
										},
										{
											"begin": 80413,
											"end": 80430,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "328"
										},
										{
											"begin": 80413,
											"end": 80432,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 80413,
											"end": 80432,
											"name": "tag",
											"source": 0,
											"value": "327"
										},
										{
											"begin": 80413,
											"end": 80432,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 80451,
											"end": 80473,
											"name": "DUP15",
											"source": 0
										},
										{
											"begin": 80451,
											"end": 80473,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 80451,
											"end": 80473,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 80451,
											"end": 80610,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "329"
										},
										{
											"begin": 80451,
											"end": 80610,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 80593,
											"end": 80610,
											"name": "DUP14",
											"source": 0
										},
										{
											"begin": 80451,
											"end": 80610,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "332"
										},
										{
											"begin": 80451,
											"end": 80610,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 80451,
											"end": 80610,
											"name": "tag",
											"source": 0,
											"value": "329"
										},
										{
											"begin": 80451,
											"end": 80610,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 80498,
											"end": 80508,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 80498,
											"end": 80568,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "331"
										},
										{
											"begin": 80498,
											"end": 80568,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 80541,
											"end": 80568,
											"name": "PUSH",
											"source": 0,
											"value": "FFFD8963EFD1FC6A506488495D951D5263988D25"
										},
										{
											"begin": 80498,
											"end": 80568,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "332"
										},
										{
											"begin": 80498,
											"end": 80568,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 80498,
											"end": 80568,
											"name": "tag",
											"source": 0,
											"value": "331"
										},
										{
											"begin": 80498,
											"end": 80568,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 80511,
											"end": 80538,
											"name": "PUSH",
											"source": 0,
											"value": "1000276A4"
										},
										{
											"begin": 80498,
											"end": 80568,
											"name": "tag",
											"source": 0,
											"value": "332"
										},
										{
											"begin": 80498,
											"end": 80568,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 80640,
											"end": 80644,
											"name": "DUP14",
											"source": 0
										},
										{
											"begin": 80629,
											"end": 80645,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 80629,
											"end": 80645,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 80629,
											"end": 80645,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 80629,
											"end": 80645,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 80629,
											"end": 80645,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "333"
										},
										{
											"begin": 80629,
											"end": 80645,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 80629,
											"end": 80645,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 80629,
											"end": 80645,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "334"
										},
										{
											"begin": 80629,
											"end": 80645,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 80629,
											"end": 80645,
											"name": "tag",
											"source": 0,
											"value": "333"
										},
										{
											"begin": 80629,
											"end": 80645,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 80629,
											"end": 80645,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 80629,
											"end": 80645,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 80629,
											"end": 80645,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 80629,
											"end": 80645,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 80629,
											"end": 80645,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 80629,
											"end": 80645,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 80629,
											"end": 80645,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 80629,
											"end": 80645,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 80629,
											"end": 80645,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 80629,
											"end": 80645,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 80629,
											"end": 80645,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 80629,
											"end": 80645,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "335"
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "SWAP6",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "336"
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "tag",
											"source": 0,
											"value": "335"
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "337"
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "tag",
											"source": 0,
											"value": "337"
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "CALL",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "339"
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "tag",
											"source": 0,
											"value": "339"
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "340"
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "341"
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "tag",
											"source": 0,
											"value": "340"
										},
										{
											"begin": 80301,
											"end": 80660,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 80253,
											"end": 80660,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 80253,
											"end": 80660,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 80253,
											"end": 80660,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 80253,
											"end": 80660,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 80690,
											"end": 80700,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 80690,
											"end": 80720,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "342"
										},
										{
											"begin": 80690,
											"end": 80720,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 80713,
											"end": 80720,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 80690,
											"end": 80720,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "343"
										},
										{
											"begin": 80690,
											"end": 80720,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 80690,
											"end": 80720,
											"name": "tag",
											"source": 0,
											"value": "342"
										},
										{
											"begin": 80690,
											"end": 80720,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 80703,
											"end": 80710,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 80690,
											"end": 80720,
											"name": "tag",
											"source": 0,
											"value": "343"
										},
										{
											"begin": 80690,
											"end": 80720,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 80688,
											"end": 80721,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 80688,
											"end": 80721,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 80688,
											"end": 80721,
											"name": "SWAP12",
											"source": 0
										},
										{
											"begin": 79771,
											"end": 80730,
											"name": "SWAP11",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 79771,
											"end": 80730,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 21802,
											"end": 21929,
											"name": "tag",
											"source": 0,
											"value": "165"
										},
										{
											"begin": 21802,
											"end": 21929,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 21860,
											"end": 21869,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 21890,
											"end": 21896,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 21890,
											"end": 21896,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 21890,
											"end": 21896,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 21890,
											"end": 21920,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "345"
										},
										{
											"begin": 21890,
											"end": 21920,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 21905,
											"end": 21910,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 21905,
											"end": 21910,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 21905,
											"end": 21910,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 21919,
											"end": 21920,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 21914,
											"end": 21915,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 21905,
											"end": 21910,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 21914,
											"end": 21915,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 21900,
											"end": 21915,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "346"
										},
										{
											"begin": 21900,
											"end": 21915,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 21900,
											"end": 21915,
											"name": "INVALID",
											"source": 0
										},
										{
											"begin": 21900,
											"end": 21915,
											"name": "tag",
											"source": 0,
											"value": "346"
										},
										{
											"begin": 21900,
											"end": 21915,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 21900,
											"end": 21915,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 21900,
											"end": 21920,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 21890,
											"end": 21920,
											"name": "tag",
											"source": 0,
											"value": "345"
										},
										{
											"begin": 21890,
											"end": 21920,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 21882,
											"end": 21921,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "347"
										},
										{
											"begin": 21882,
											"end": 21921,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 21882,
											"end": 21921,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 21882,
											"end": 21921,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 21882,
											"end": 21921,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 21882,
											"end": 21921,
											"name": "tag",
											"source": 0,
											"value": "347"
										},
										{
											"begin": 21882,
											"end": 21921,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 21802,
											"end": 21929,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 21802,
											"end": 21929,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 21802,
											"end": 21929,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 21802,
											"end": 21929,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 21802,
											"end": 21929,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 7213,
											"end": 7353,
											"name": "tag",
											"source": 0,
											"value": "209"
										},
										{
											"begin": 7213,
											"end": 7353,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7305,
											"end": 7316,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7305,
											"end": 7316,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 6993,
											"end": 7017,
											"name": "PUSH",
											"source": 0,
											"value": "42"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": 7305,
											"end": 7345,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 7213,
											"end": 7353,
											"name": "tag",
											"source": 0,
											"value": "348"
										},
										{
											"begin": 7213,
											"end": 7353,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7213,
											"end": 7353,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7213,
											"end": 7353,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7213,
											"end": 7353,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7213,
											"end": 7353,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 8574,
											"end": 8703,
											"name": "tag",
											"source": 0,
											"value": "214"
										},
										{
											"begin": 8574,
											"end": 8703,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8638,
											"end": 8650,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 8670,
											"end": 8695,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "347"
										},
										{
											"begin": 8670,
											"end": 8674,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 8681,
											"end": 8682,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6832,
											"end": 6855,
											"name": "PUSH",
											"source": 0,
											"value": "2B"
										},
										{
											"begin": 8670,
											"end": 8680,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "351"
										},
										{
											"begin": 8670,
											"end": 8695,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 8897,
											"end": 9048,
											"name": "tag",
											"source": 0,
											"value": "217"
										},
										{
											"begin": 8897,
											"end": 9048,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9014,
											"end": 9025,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 9014,
											"end": 9025,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 8958,
											"end": 8970,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 8958,
											"end": 8970,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8990,
											"end": 9040,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "347"
										},
										{
											"begin": 8990,
											"end": 9040,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 9014,
											"end": 9018,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 9014,
											"end": 9018,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6719,
											"end": 6739,
											"name": "PUSH",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 6719,
											"end": 6739,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "16"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 9014,
											"end": 9039,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8990,
											"end": 9000,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "351"
										},
										{
											"begin": 8990,
											"end": 9040,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 82740,
											"end": 84105,
											"name": "tag",
											"source": 0,
											"value": "241"
										},
										{
											"begin": 82740,
											"end": 84105,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 82924,
											"end": 82940,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 83021,
											"end": 83044,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 83021,
											"end": 83044,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 83017,
											"end": 83071,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "355"
										},
										{
											"begin": 83017,
											"end": 83071,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 83066,
											"end": 83070,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 83046,
											"end": 83071,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 83046,
											"end": 83071,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 83017,
											"end": 83071,
											"name": "tag",
											"source": 0,
											"value": "355"
										},
										{
											"begin": 83017,
											"end": 83071,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 83085,
											"end": 83101,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 83103,
											"end": 83118,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 83120,
											"end": 83130,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 83134,
											"end": 83161,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "356"
										},
										{
											"begin": 83134,
											"end": 83138,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 83134,
											"end": 83143,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 83134,
											"end": 83143,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 83134,
											"end": 83143,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 83134,
											"end": 83159,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "295"
										},
										{
											"begin": 83134,
											"end": 83161,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 83134,
											"end": 83161,
											"name": "tag",
											"source": 0,
											"value": "356"
										},
										{
											"begin": 83134,
											"end": 83161,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 83084,
											"end": 83161,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 83084,
											"end": 83161,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 83084,
											"end": 83161,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 83084,
											"end": 83161,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 83192,
											"end": 83210,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 83192,
											"end": 83210,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 83192,
											"end": 83210,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 83192,
											"end": 83210,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 83192,
											"end": 83210,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 83192,
											"end": 83210,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 83192,
											"end": 83210,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 83174,
											"end": 83189,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 83174,
											"end": 83189,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83312,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "357"
										},
										{
											"begin": 83084,
											"end": 83161,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 83084,
											"end": 83161,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 83084,
											"end": 83161,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83288,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "326"
										},
										{
											"begin": 83281,
											"end": 83312,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 83281,
											"end": 83312,
											"name": "tag",
											"source": 0,
											"value": "357"
										},
										{
											"begin": 83281,
											"end": 83312,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 83281,
											"end": 83317,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83317,
											"name": "PUSH",
											"source": 0,
											"value": "128ACB08"
										},
										{
											"begin": 83336,
											"end": 83345,
											"name": "DUP12",
											"source": 0
										},
										{
											"begin": 83364,
											"end": 83374,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 83394,
											"end": 83414,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "358"
										},
										{
											"begin": 83394,
											"end": 83403,
											"name": "DUP16",
											"source": 0
										},
										{
											"begin": 83394,
											"end": 83412,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "328"
										},
										{
											"begin": 83394,
											"end": 83414,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 83394,
											"end": 83414,
											"name": "tag",
											"source": 0,
											"value": "358"
										},
										{
											"begin": 83394,
											"end": 83414,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 83393,
											"end": 83414,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 83393,
											"end": 83414,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 83433,
											"end": 83455,
											"name": "DUP15",
											"source": 0
										},
										{
											"begin": 83433,
											"end": 83455,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 83433,
											"end": 83455,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 83433,
											"end": 83592,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "359"
										},
										{
											"begin": 83433,
											"end": 83592,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 83575,
											"end": 83592,
											"name": "DUP14",
											"source": 0
										},
										{
											"begin": 83433,
											"end": 83592,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "362"
										},
										{
											"begin": 83433,
											"end": 83592,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 83433,
											"end": 83592,
											"name": "tag",
											"source": 0,
											"value": "359"
										},
										{
											"begin": 83433,
											"end": 83592,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 83480,
											"end": 83490,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 83480,
											"end": 83550,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "361"
										},
										{
											"begin": 83480,
											"end": 83550,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 83523,
											"end": 83550,
											"name": "PUSH",
											"source": 0,
											"value": "FFFD8963EFD1FC6A506488495D951D5263988D25"
										},
										{
											"begin": 83480,
											"end": 83550,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "362"
										},
										{
											"begin": 83480,
											"end": 83550,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 83480,
											"end": 83550,
											"name": "tag",
											"source": 0,
											"value": "361"
										},
										{
											"begin": 83480,
											"end": 83550,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 83493,
											"end": 83520,
											"name": "PUSH",
											"source": 0,
											"value": "1000276A4"
										},
										{
											"begin": 83480,
											"end": 83550,
											"name": "tag",
											"source": 0,
											"value": "362"
										},
										{
											"begin": 83480,
											"end": 83550,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 83622,
											"end": 83626,
											"name": "DUP14",
											"source": 0
										},
										{
											"begin": 83611,
											"end": 83627,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 83611,
											"end": 83627,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 83611,
											"end": 83627,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 83611,
											"end": 83627,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 83611,
											"end": 83627,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "363"
										},
										{
											"begin": 83611,
											"end": 83627,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 83611,
											"end": 83627,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 83611,
											"end": 83627,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "334"
										},
										{
											"begin": 83611,
											"end": 83627,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 83611,
											"end": 83627,
											"name": "tag",
											"source": 0,
											"value": "363"
										},
										{
											"begin": 83611,
											"end": 83627,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 83611,
											"end": 83627,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 83611,
											"end": 83627,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 83611,
											"end": 83627,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 83611,
											"end": 83627,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 83611,
											"end": 83627,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 83611,
											"end": 83627,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 83611,
											"end": 83627,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 83611,
											"end": 83627,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 83611,
											"end": 83627,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 83611,
											"end": 83627,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 83611,
											"end": 83627,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 83611,
											"end": 83627,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "364"
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "SWAP6",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "336"
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "tag",
											"source": 0,
											"value": "364"
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "365"
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "tag",
											"source": 0,
											"value": "365"
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "CALL",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "367"
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "tag",
											"source": 0,
											"value": "367"
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "368"
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "341"
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "tag",
											"source": 0,
											"value": "368"
										},
										{
											"begin": 83281,
											"end": 83642,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 83223,
											"end": 83642,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 83223,
											"end": 83642,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 83223,
											"end": 83642,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 83223,
											"end": 83642,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 83655,
											"end": 83680,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 83723,
											"end": 83733,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 83723,
											"end": 83859,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "369"
										},
										{
											"begin": 83723,
											"end": 83859,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 83821,
											"end": 83833,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 83845,
											"end": 83857,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 83844,
											"end": 83857,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 83844,
											"end": 83857,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 83723,
											"end": 83859,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "370"
										},
										{
											"begin": 83723,
											"end": 83859,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 83723,
											"end": 83859,
											"name": "tag",
											"source": 0,
											"value": "369"
										},
										{
											"begin": 83723,
											"end": 83859,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 83758,
											"end": 83770,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 83782,
											"end": 83794,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 83781,
											"end": 83794,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 83781,
											"end": 83794,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 83723,
											"end": 83859,
											"name": "tag",
											"source": 0,
											"value": "370"
										},
										{
											"begin": 83723,
											"end": 83859,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 83691,
											"end": 83859,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 83691,
											"end": 83859,
											"name": "SWAP9",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 83691,
											"end": 83859,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 84034,
											"end": 84056,
											"name": "DUP11",
											"source": 0
										},
										{
											"begin": 84034,
											"end": 84056,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 84030,
											"end": 84097,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "372"
										},
										{
											"begin": 84030,
											"end": 84097,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 84087,
											"end": 84096,
											"name": "DUP12",
											"source": 0
										},
										{
											"begin": 84066,
											"end": 84083,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 84066,
											"end": 84096,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 84058,
											"end": 84097,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "372"
										},
										{
											"begin": 84058,
											"end": 84097,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 84058,
											"end": 84097,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 84058,
											"end": 84097,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 84058,
											"end": 84097,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 84058,
											"end": 84097,
											"name": "tag",
											"source": 0,
											"value": "372"
										},
										{
											"begin": 84058,
											"end": 84097,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 82740,
											"end": 84105,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 82740,
											"end": 84105,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 82740,
											"end": 84105,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 82740,
											"end": 84105,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 82740,
											"end": 84105,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 82740,
											"end": 84105,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 82740,
											"end": 84105,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 82740,
											"end": 84105,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 82740,
											"end": 84105,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 82740,
											"end": 84105,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 82740,
											"end": 84105,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 82740,
											"end": 84105,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 82740,
											"end": 84105,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 82740,
											"end": 84105,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 28379,
											"end": 28695,
											"name": "tag",
											"source": 0,
											"value": "256"
										},
										{
											"begin": 28379,
											"end": 28695,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 28498,
											"end": 28510,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 28512,
											"end": 28529,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28538,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 28533,
											"end": 28543,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 28567,
											"end": 28591,
											"name": "PUSH",
											"source": 0,
											"value": "A9059CBB"
										},
										{
											"begin": 28567,
											"end": 28591,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 28567,
											"end": 28591,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 28593,
											"end": 28595,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 28597,
											"end": 28602,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 28544,
											"end": 28603,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 28544,
											"end": 28603,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 28544,
											"end": 28603,
											"name": "PUSH",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 28544,
											"end": 28603,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 28544,
											"end": 28603,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "374"
										},
										{
											"begin": 28544,
											"end": 28603,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 28544,
											"end": 28603,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 28544,
											"end": 28603,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 28544,
											"end": 28603,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "375"
										},
										{
											"begin": 28544,
											"end": 28603,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 28544,
											"end": 28603,
											"name": "tag",
											"source": 0,
											"value": "374"
										},
										{
											"begin": 28544,
											"end": 28603,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 28544,
											"end": 28603,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 28544,
											"end": 28603,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 28544,
											"end": 28603,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 28544,
											"end": 28603,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 28544,
											"end": 28603,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 28544,
											"end": 28603,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 28544,
											"end": 28603,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 28544,
											"end": 28603,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 28544,
											"end": 28603,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 28544,
											"end": 28603,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 28544,
											"end": 28603,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 28544,
											"end": 28603,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 28544,
											"end": 28603,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 28544,
											"end": 28603,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 28544,
											"end": 28603,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 28544,
											"end": 28603,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 28544,
											"end": 28603,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 28544,
											"end": 28603,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 28544,
											"end": 28603,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 28544,
											"end": 28603,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 28544,
											"end": 28603,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 28544,
											"end": 28603,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 28544,
											"end": 28603,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 28544,
											"end": 28603,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 28544,
											"end": 28603,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 28544,
											"end": 28603,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 28544,
											"end": 28603,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 28544,
											"end": 28603,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "376"
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 28544,
											"end": 28603,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "314"
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "tag",
											"source": 0,
											"value": "376"
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "CALL",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "379"
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "PUSH",
											"source": 0,
											"value": "3F"
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "378"
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "tag",
											"source": 0,
											"value": "379"
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "tag",
											"source": 0,
											"value": "378"
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 28533,
											"end": 28604,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 28497,
											"end": 28604,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 28497,
											"end": 28604,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 28497,
											"end": 28604,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 28497,
											"end": 28604,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 28623,
											"end": 28630,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 28623,
											"end": 28680,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 28623,
											"end": 28680,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 28623,
											"end": 28680,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "382"
										},
										{
											"begin": 28623,
											"end": 28680,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 28635,
											"end": 28646,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 28635,
											"end": 28646,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 28635,
											"end": 28651,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 28635,
											"end": 28651,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 28635,
											"end": 28679,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "382"
										},
										{
											"begin": 28635,
											"end": 28679,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 28635,
											"end": 28679,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 28666,
											"end": 28670,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 28655,
											"end": 28679,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 28655,
											"end": 28679,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 28655,
											"end": 28679,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 28655,
											"end": 28679,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 28655,
											"end": 28679,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 28655,
											"end": 28679,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 28655,
											"end": 28679,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 28655,
											"end": 28679,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 28655,
											"end": 28679,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "382"
										},
										{
											"begin": 28655,
											"end": 28679,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 28655,
											"end": 28679,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 28655,
											"end": 28679,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "383"
										},
										{
											"begin": 28655,
											"end": 28679,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 28655,
											"end": 28679,
											"name": "tag",
											"source": 0,
											"value": "382"
										},
										{
											"begin": 28655,
											"end": 28679,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 28615,
											"end": 28687,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "159"
										},
										{
											"begin": 28615,
											"end": 28687,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 28615,
											"end": 28687,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 28615,
											"end": 28687,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 28615,
											"end": 28687,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 28615,
											"end": 28687,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 28615,
											"end": 28687,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 28615,
											"end": 28687,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 28615,
											"end": 28687,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 28615,
											"end": 28687,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 28615,
											"end": 28687,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "386"
										},
										{
											"begin": 28615,
											"end": 28687,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 8017,
											"end": 8343,
											"name": "tag",
											"source": 0,
											"value": "295"
										},
										{
											"begin": 8017,
											"end": 8343,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8125,
											"end": 8139,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8125,
											"end": 8139,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8125,
											"end": 8139,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8230,
											"end": 8247,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "388"
										},
										{
											"begin": 8230,
											"end": 8234,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 8125,
											"end": 8139,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 8230,
											"end": 8244,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "389"
										},
										{
											"begin": 8230,
											"end": 8247,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 8230,
											"end": 8247,
											"name": "tag",
											"source": 0,
											"value": "388"
										},
										{
											"begin": 8230,
											"end": 8247,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8221,
											"end": 8247,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8264,
											"end": 8288,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "390"
										},
										{
											"begin": 8264,
											"end": 8268,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 6511,
											"end": 6513,
											"name": "PUSH",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 8264,
											"end": 8277,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "391"
										},
										{
											"begin": 8264,
											"end": 8288,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 8264,
											"end": 8288,
											"name": "tag",
											"source": 0,
											"value": "390"
										},
										{
											"begin": 8264,
											"end": 8288,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8258,
											"end": 8288,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8308,
											"end": 8335,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "392"
										},
										{
											"begin": 8308,
											"end": 8312,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 6719,
											"end": 6739,
											"name": "PUSH",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 8308,
											"end": 8322,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "389"
										},
										{
											"begin": 8308,
											"end": 8335,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 8308,
											"end": 8335,
											"name": "tag",
											"source": 0,
											"value": "392"
										},
										{
											"begin": 8308,
											"end": 8335,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8299,
											"end": 8335,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8299,
											"end": 8335,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8017,
											"end": 8343,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8017,
											"end": 8343,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 8017,
											"end": 8343,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8017,
											"end": 8343,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 8017,
											"end": 8343,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8017,
											"end": 8343,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 66188,
											"end": 66454,
											"name": "tag",
											"source": 0,
											"value": "297"
										},
										{
											"begin": 66188,
											"end": 66454,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 66339,
											"end": 66358,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 66378,
											"end": 66446,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "394"
										},
										{
											"begin": 66393,
											"end": 66400,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 66402,
											"end": 66445,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "395"
										},
										{
											"begin": 66425,
											"end": 66431,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 66433,
											"end": 66439,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 66441,
											"end": 66444,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 66402,
											"end": 66424,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "396"
										},
										{
											"begin": 66402,
											"end": 66445,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 66402,
											"end": 66445,
											"name": "tag",
											"source": 0,
											"value": "395"
										},
										{
											"begin": 66402,
											"end": 66445,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 66378,
											"end": 66392,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "397"
										},
										{
											"begin": 66378,
											"end": 66446,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 66378,
											"end": 66446,
											"name": "tag",
											"source": 0,
											"value": "394"
										},
										{
											"begin": 66378,
											"end": 66446,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 66371,
											"end": 66446,
											"name": "SWAP6",
											"source": 0
										},
										{
											"begin": 66188,
											"end": 66454,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 66188,
											"end": 66454,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 33393,
											"end": 34109,
											"name": "tag",
											"source": 0,
											"value": "302"
										},
										{
											"begin": 33393,
											"end": 34109,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 33546,
											"end": 33551,
											"name": "PUSHIMMUTABLE",
											"source": 0,
											"value": "1226"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 33537,
											"end": 33551,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 33537,
											"end": 33542,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 33537,
											"end": 33551,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 33537,
											"end": 33551,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 33537,
											"end": 33585,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 33537,
											"end": 33585,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 33537,
											"end": 33585,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "399"
										},
										{
											"begin": 33537,
											"end": 33585,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 33537,
											"end": 33585,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 33580,
											"end": 33585,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 33555,
											"end": 33576,
											"name": "SELFBALANCE",
											"source": 0
										},
										{
											"begin": 33555,
											"end": 33585,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 33555,
											"end": 33585,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 33537,
											"end": 33585,
											"name": "tag",
											"source": 0,
											"value": "399"
										},
										{
											"begin": 33537,
											"end": 33585,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 33533,
											"end": 34102,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 33533,
											"end": 34102,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "400"
										},
										{
											"begin": 33533,
											"end": 34102,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 33640,
											"end": 33645,
											"name": "PUSHIMMUTABLE",
											"source": 0,
											"value": "1226"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 33633,
											"end": 33654,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 33633,
											"end": 33654,
											"name": "PUSH",
											"source": 0,
											"value": "D0E30DB0"
										},
										{
											"begin": 33662,
											"end": 33667,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "401"
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "tag",
											"source": 0,
											"value": "401"
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "CALL",
											"source": 0
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "403"
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "tag",
											"source": 0,
											"value": "403"
										},
										{
											"begin": 33633,
											"end": 33670,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 33727,
											"end": 33732,
											"name": "PUSHIMMUTABLE",
											"source": 0,
											"value": "1226"
										},
										{
											"begin": 33720,
											"end": 33742,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33742,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 33720,
											"end": 33742,
											"name": "PUSH",
											"source": 0,
											"value": "A9059CBB"
										},
										{
											"begin": 33720,
											"end": 33742,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "404"
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 33743,
											"end": 33752,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 33743,
											"end": 33752,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 33754,
											"end": 33759,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 33754,
											"end": 33759,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "375"
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "tag",
											"source": 0,
											"value": "404"
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "405"
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "tag",
											"source": 0,
											"value": "405"
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "CALL",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "407"
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "tag",
											"source": 0,
											"value": "407"
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "408"
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "383"
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "tag",
											"source": 0,
											"value": "408"
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 33720,
											"end": 33760,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 33533,
											"end": 34102,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "255"
										},
										{
											"begin": 33533,
											"end": 34102,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 33533,
											"end": 34102,
											"name": "tag",
											"source": 0,
											"value": "400"
										},
										{
											"begin": 33533,
											"end": 34102,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 33782,
											"end": 33804,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 33782,
											"end": 33804,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 33799,
											"end": 33803,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 33782,
											"end": 33804,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 33778,
											"end": 34102,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 33778,
											"end": 34102,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "410"
										},
										{
											"begin": 33778,
											"end": 34102,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 33913,
											"end": 33965,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "411"
										},
										{
											"begin": 33941,
											"end": 33946,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 33948,
											"end": 33957,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 33959,
											"end": 33964,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 33913,
											"end": 33940,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "256"
										},
										{
											"begin": 33913,
											"end": 33965,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 33913,
											"end": 33965,
											"name": "tag",
											"source": 0,
											"value": "411"
										},
										{
											"begin": 33913,
											"end": 33965,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 33778,
											"end": 34102,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "255"
										},
										{
											"begin": 33778,
											"end": 34102,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 33778,
											"end": 34102,
											"name": "tag",
											"source": 0,
											"value": "410"
										},
										{
											"begin": 33778,
											"end": 34102,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 34027,
											"end": 34090,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "255"
										},
										{
											"begin": 34059,
											"end": 34064,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 34066,
											"end": 34071,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 34073,
											"end": 34082,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 34084,
											"end": 34089,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 34027,
											"end": 34058,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "414"
										},
										{
											"begin": 34027,
											"end": 34090,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 78001,
											"end": 78256,
											"name": "tag",
											"source": 0,
											"value": "326"
										},
										{
											"begin": 78001,
											"end": 78256,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 78118,
											"end": 78132,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 78167,
											"end": 78247,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "416"
										},
										{
											"begin": 78194,
											"end": 78201,
											"name": "PUSHIMMUTABLE",
											"source": 0,
											"value": "1222"
										},
										{
											"begin": 78203,
											"end": 78246,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "417"
										},
										{
											"begin": 78226,
											"end": 78232,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 78234,
											"end": 78240,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 78242,
											"end": 78245,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 78203,
											"end": 78225,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "396"
										},
										{
											"begin": 78203,
											"end": 78246,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 78203,
											"end": 78246,
											"name": "tag",
											"source": 0,
											"value": "417"
										},
										{
											"begin": 78203,
											"end": 78246,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 78167,
											"end": 78193,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "418"
										},
										{
											"begin": 78167,
											"end": 78247,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 78167,
											"end": 78247,
											"name": "tag",
											"source": 0,
											"value": "416"
										},
										{
											"begin": 78167,
											"end": 78247,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 78145,
											"end": 78248,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 78001,
											"end": 78256,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 78001,
											"end": 78256,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 76828,
											"end": 76952,
											"name": "tag",
											"source": 0,
											"value": "328"
										},
										{
											"begin": 76828,
											"end": 76952,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 76880,
											"end": 76888,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 76909,
											"end": 76910,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 76909,
											"end": 76919,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 76901,
											"end": 76920,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "420"
										},
										{
											"begin": 76901,
											"end": 76920,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 76901,
											"end": 76920,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 76901,
											"end": 76920,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 76901,
											"end": 76920,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 76901,
											"end": 76920,
											"name": "tag",
											"source": 0,
											"value": "420"
										},
										{
											"begin": 76901,
											"end": 76920,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 76942,
											"end": 76943,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 76828,
											"end": 76952,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2331,
											"end": 5402,
											"name": "tag",
											"source": 0,
											"value": "351"
										},
										{
											"begin": 2331,
											"end": 5402,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2457,
											"end": 2469,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 2506,
											"end": 2513,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2490,
											"end": 2497,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2500,
											"end": 2502,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 2490,
											"end": 2502,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2490,
											"end": 2513,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 2490,
											"end": 2513,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2482,
											"end": 2532,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "422"
										},
										{
											"begin": 2482,
											"end": 2532,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2482,
											"end": 2532,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2482,
											"end": 2532,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2482,
											"end": 2532,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2482,
											"end": 2532,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2482,
											"end": 2532,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2482,
											"end": 2532,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2482,
											"end": 2532,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 2482,
											"end": 2532,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2482,
											"end": 2532,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "424"
										},
										{
											"begin": 2482,
											"end": 2532,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2482,
											"end": 2532,
											"name": "tag",
											"source": 0,
											"value": "422"
										},
										{
											"begin": 2482,
											"end": 2532,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2571,
											"end": 2577,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2567,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2551,
											"end": 2557,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 2551,
											"end": 2567,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2551,
											"end": 2577,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 2551,
											"end": 2577,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2596,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "425"
										},
										{
											"begin": 2543,
											"end": 2596,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2596,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2543,
											"end": 2596,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2543,
											"end": 2596,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2596,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2596,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2543,
											"end": 2596,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2596,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 2543,
											"end": 2596,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2596,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "424"
										},
										{
											"begin": 2543,
											"end": 2596,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2543,
											"end": 2596,
											"name": "tag",
											"source": 0,
											"value": "425"
										},
										{
											"begin": 2543,
											"end": 2596,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2641,
											"end": 2648,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2632,
											"end": 2638,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2632,
											"end": 2648,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2615,
											"end": 2621,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 2615,
											"end": 2628,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2615,
											"end": 2648,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 2615,
											"end": 2648,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2607,
											"end": 2670,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "427"
										},
										{
											"begin": 2607,
											"end": 2670,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2607,
											"end": 2670,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2607,
											"end": 2670,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2607,
											"end": 2670,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2607,
											"end": 2670,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2607,
											"end": 2670,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2607,
											"end": 2670,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2607,
											"end": 2670,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 2607,
											"end": 2670,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2607,
											"end": 2670,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "429"
										},
										{
											"begin": 2607,
											"end": 2670,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2607,
											"end": 2670,
											"name": "tag",
											"source": 0,
											"value": "427"
										},
										{
											"begin": 2607,
											"end": 2670,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2683,
											"end": 2705,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 2749,
											"end": 2764,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2749,
											"end": 2764,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2782,
											"end": 4919,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2782,
											"end": 4919,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2782,
											"end": 4919,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "431"
										},
										{
											"begin": 2782,
											"end": 4919,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5075,
											"end": 5079,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5069,
											"end": 5080,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 5056,
											"end": 5080,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5056,
											"end": 5080,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5276,
											"end": 5277,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5265,
											"end": 5274,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5258,
											"end": 5278,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5330,
											"end": 5334,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 5319,
											"end": 5328,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5315,
											"end": 5335,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5309,
											"end": 5313,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5302,
											"end": 5336,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2742,
											"end": 5355,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "430"
										},
										{
											"begin": 2742,
											"end": 5355,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2782,
											"end": 4919,
											"name": "tag",
											"source": 0,
											"value": "431"
										},
										{
											"begin": 2782,
											"end": 4919,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2979,
											"end": 2983,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2973,
											"end": 2984,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2960,
											"end": 2984,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2960,
											"end": 2984,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3684,
											"end": 3686,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 3675,
											"end": 3682,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 3671,
											"end": 3687,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4092,
											"end": 4101,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4085,
											"end": 4102,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4079,
											"end": 4083,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4075,
											"end": 4103,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 4063,
											"end": 4072,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4052,
											"end": 4061,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 4048,
											"end": 4073,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4044,
											"end": 4104,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4145,
											"end": 4152,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 4141,
											"end": 4143,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4137,
											"end": 4153,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4418,
											"end": 4424,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 4404,
											"end": 4413,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4397,
											"end": 4414,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4391,
											"end": 4395,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4387,
											"end": 4415,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 4375,
											"end": 4384,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 4367,
											"end": 4373,
											"name": "DUP12",
											"source": 0
										},
										{
											"begin": 4363,
											"end": 4385,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4359,
											"end": 4416,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4355,
											"end": 4425,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4177,
											"end": 4647,
											"name": "tag",
											"source": 0,
											"value": "432"
										},
										{
											"begin": 4177,
											"end": 4647,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4456,
											"end": 4459,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4452,
											"end": 4454,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4449,
											"end": 4460,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 4177,
											"end": 4647,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4177,
											"end": 4647,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "434"
										},
										{
											"begin": 4177,
											"end": 4647,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4614,
											"end": 4623,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4614,
											"end": 4623,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4603,
											"end": 4624,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4603,
											"end": 4624,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4502,
											"end": 4506,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4494,
											"end": 4507,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 4494,
											"end": 4507,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4494,
											"end": 4507,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4494,
											"end": 4507,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 4539,
											"end": 4552,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4177,
											"end": 4647,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "432"
										},
										{
											"begin": 4177,
											"end": 4647,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4177,
											"end": 4647,
											"name": "tag",
											"source": 0,
											"value": "434"
										},
										{
											"begin": 4177,
											"end": 4647,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4671,
											"end": 4697,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 4671,
											"end": 4697,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 4671,
											"end": 4697,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4895,
											"end": 4897,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 4878,
											"end": 4889,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4874,
											"end": 4899,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4868,
											"end": 4872,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4861,
											"end": 4900,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2742,
											"end": 5355,
											"name": "tag",
											"source": 0,
											"value": "430"
										},
										{
											"begin": 2742,
											"end": 5355,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5385,
											"end": 5394,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 2331,
											"end": 5402,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2331,
											"end": 5402,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 5410,
											"end": 5836,
											"name": "tag",
											"source": 0,
											"value": "389"
										},
										{
											"begin": 5410,
											"end": 5836,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5489,
											"end": 5496,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5532,
											"end": 5538,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5517,
											"end": 5523,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5526,
											"end": 5528,
											"name": "PUSH",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 5517,
											"end": 5528,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5517,
											"end": 5538,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 5517,
											"end": 5538,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5509,
											"end": 5561,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "436"
										},
										{
											"begin": 5509,
											"end": 5561,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5509,
											"end": 5561,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5509,
											"end": 5561,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5509,
											"end": 5561,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5509,
											"end": 5561,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5509,
											"end": 5561,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5509,
											"end": 5561,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5509,
											"end": 5561,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 5509,
											"end": 5561,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5509,
											"end": 5561,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "438"
										},
										{
											"begin": 5509,
											"end": 5561,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5509,
											"end": 5561,
											"name": "tag",
											"source": 0,
											"value": "436"
										},
										{
											"begin": 5509,
											"end": 5561,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5597,
											"end": 5603,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5606,
											"end": 5608,
											"name": "PUSH",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 5597,
											"end": 5608,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5580,
											"end": 5586,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5580,
											"end": 5593,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 5580,
											"end": 5608,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 5580,
											"end": 5608,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5572,
											"end": 5634,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "439"
										},
										{
											"begin": 5572,
											"end": 5634,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5572,
											"end": 5634,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5572,
											"end": 5634,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5572,
											"end": 5634,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5572,
											"end": 5634,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5572,
											"end": 5634,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5572,
											"end": 5634,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5572,
											"end": 5634,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 5572,
											"end": 5634,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5572,
											"end": 5634,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "441"
										},
										{
											"begin": 5572,
											"end": 5634,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5572,
											"end": 5634,
											"name": "tag",
											"source": 0,
											"value": "439"
										},
										{
											"begin": 5572,
											"end": 5634,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5726,
											"end": 5756,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5742,
											"end": 5746,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 5726,
											"end": 5756,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5720,
											"end": 5757,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5716,
											"end": 5787,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5716,
											"end": 5787,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 5716,
											"end": 5787,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5410,
											"end": 5836,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 5844,
											"end": 6219,
											"name": "tag",
											"source": 0,
											"value": "391"
										},
										{
											"begin": 5844,
											"end": 6219,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5922,
											"end": 5928,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5963,
											"end": 5969,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5949,
											"end": 5955,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5958,
											"end": 5959,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 5949,
											"end": 5959,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5949,
											"end": 5969,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 5949,
											"end": 5969,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5941,
											"end": 5991,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "443"
										},
										{
											"begin": 5941,
											"end": 5991,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5941,
											"end": 5991,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5941,
											"end": 5991,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5941,
											"end": 5991,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5941,
											"end": 5991,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5941,
											"end": 5991,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5941,
											"end": 5991,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5941,
											"end": 5991,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 5941,
											"end": 5991,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5941,
											"end": 5991,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "445"
										},
										{
											"begin": 5941,
											"end": 5991,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5941,
											"end": 5991,
											"name": "tag",
											"source": 0,
											"value": "443"
										},
										{
											"begin": 5941,
											"end": 5991,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6027,
											"end": 6033,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6036,
											"end": 6037,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 6027,
											"end": 6037,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6010,
											"end": 6016,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 6010,
											"end": 6023,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 6010,
											"end": 6037,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 6010,
											"end": 6037,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 6002,
											"end": 6062,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "446"
										},
										{
											"begin": 6002,
											"end": 6062,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 6002,
											"end": 6062,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6002,
											"end": 6062,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6002,
											"end": 6062,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6002,
											"end": 6062,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6002,
											"end": 6062,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 6002,
											"end": 6062,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6002,
											"end": 6062,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 6002,
											"end": 6062,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6002,
											"end": 6062,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "448"
										},
										{
											"begin": 6002,
											"end": 6062,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6002,
											"end": 6062,
											"name": "tag",
											"source": 0,
											"value": "446"
										},
										{
											"begin": 6002,
											"end": 6062,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6143,
											"end": 6172,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6159,
											"end": 6162,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 6143,
											"end": 6172,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6137,
											"end": 6173,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 6137,
											"end": 6173,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5844,
											"end": 6219,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 853,
											"end": 1134,
											"name": "tag",
											"source": 0,
											"value": "396"
										},
										{
											"begin": 853,
											"end": 1134,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 974,
											"end": 988,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "449"
										},
										{
											"begin": 974,
											"end": 988,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "450"
										},
										{
											"begin": 974,
											"end": 988,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 974,
											"end": 988,
											"name": "tag",
											"source": 0,
											"value": "449"
										},
										{
											"begin": 974,
											"end": 988,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1014,
											"end": 1020,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1005,
											"end": 1020,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1005,
											"end": 1011,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1005,
											"end": 1020,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1005,
											"end": 1020,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 1001,
											"end": 1057,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1001,
											"end": 1057,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "452"
										},
										{
											"begin": 1001,
											"end": 1057,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1042,
											"end": 1048,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1042,
											"end": 1048,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 1050,
											"end": 1056,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1001,
											"end": 1057,
											"name": "tag",
											"source": 0,
											"value": "452"
										},
										{
											"begin": 1001,
											"end": 1057,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1075,
											"end": 1126,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1075,
											"end": 1126,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1126,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1126,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 1075,
											"end": 1126,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1126,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1126,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1126,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1075,
											"end": 1126,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1126,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1126,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1126,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1126,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1126,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1126,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1126,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1126,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1126,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1075,
											"end": 1126,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1126,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1126,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1126,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFF"
										},
										{
											"begin": 1075,
											"end": 1126,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1126,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1126,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1126,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1126,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1126,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1126,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1126,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1126,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 853,
											"end": 1134,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 66707,
											"end": 66993,
											"name": "tag",
											"source": 0,
											"value": "397"
										},
										{
											"begin": 66707,
											"end": 66993,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 66834,
											"end": 66853,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 66893,
											"end": 66937,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "454"
										},
										{
											"begin": 66920,
											"end": 66927,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 66929,
											"end": 66936,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 66893,
											"end": 66919,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "418"
										},
										{
											"begin": 66893,
											"end": 66937,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 66893,
											"end": 66937,
											"name": "tag",
											"source": 0,
											"value": "454"
										},
										{
											"begin": 66893,
											"end": 66937,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 66871,
											"end": 66938,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 66957,
											"end": 66967,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 66957,
											"end": 66984,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 66957,
											"end": 66984,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 66957,
											"end": 66984,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 66949,
											"end": 66985,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "347"
										},
										{
											"begin": 66949,
											"end": 66985,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 66949,
											"end": 66985,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 66949,
											"end": 66985,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 66949,
											"end": 66985,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 27713,
											"end": 28080,
											"name": "tag",
											"source": 0,
											"value": "414"
										},
										{
											"begin": 27713,
											"end": 28080,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 27859,
											"end": 27871,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 27873,
											"end": 27890,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27912,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 27907,
											"end": 27917,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 27941,
											"end": 27969,
											"name": "PUSH",
											"source": 0,
											"value": "23B872DD"
										},
										{
											"begin": 27941,
											"end": 27969,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 27941,
											"end": 27969,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 27971,
											"end": 27975,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 27977,
											"end": 27979,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 27981,
											"end": 27986,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "PUSH",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "457"
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "458"
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "tag",
											"source": 0,
											"value": "457"
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "459"
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 27918,
											"end": 27987,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "314"
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "tag",
											"source": 0,
											"value": "459"
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "CALL",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "462"
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "PUSH",
											"source": 0,
											"value": "3F"
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "461"
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "tag",
											"source": 0,
											"value": "462"
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "tag",
											"source": 0,
											"value": "461"
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 27907,
											"end": 27988,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 27858,
											"end": 27988,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 27858,
											"end": 27988,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 27858,
											"end": 27988,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 27858,
											"end": 27988,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 28007,
											"end": 28014,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 28007,
											"end": 28064,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 28007,
											"end": 28064,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 28007,
											"end": 28064,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "465"
										},
										{
											"begin": 28007,
											"end": 28064,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 28019,
											"end": 28030,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 28019,
											"end": 28030,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 28019,
											"end": 28035,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 28019,
											"end": 28035,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 28019,
											"end": 28063,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "465"
										},
										{
											"begin": 28019,
											"end": 28063,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 28019,
											"end": 28063,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 28050,
											"end": 28054,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 28039,
											"end": 28063,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 28039,
											"end": 28063,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 28039,
											"end": 28063,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 28039,
											"end": 28063,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 28039,
											"end": 28063,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 28039,
											"end": 28063,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 28039,
											"end": 28063,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 28039,
											"end": 28063,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 28039,
											"end": 28063,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "465"
										},
										{
											"begin": 28039,
											"end": 28063,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 28039,
											"end": 28063,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 28039,
											"end": 28063,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "383"
										},
										{
											"begin": 28039,
											"end": 28063,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 28039,
											"end": 28063,
											"name": "tag",
											"source": 0,
											"value": "465"
										},
										{
											"begin": 28039,
											"end": 28063,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 27999,
											"end": 28072,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "169"
										},
										{
											"begin": 27999,
											"end": 28072,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 27999,
											"end": 28072,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 27999,
											"end": 28072,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 27999,
											"end": 28072,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 27999,
											"end": 28072,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 27999,
											"end": 28072,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 27999,
											"end": 28072,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 27999,
											"end": 28072,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 27999,
											"end": 28072,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 27999,
											"end": 28072,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "468"
										},
										{
											"begin": 27999,
											"end": 28072,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1387,
											"end": 1913,
											"name": "tag",
											"source": 0,
											"value": "418"
										},
										{
											"begin": 1387,
											"end": 1913,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1471,
											"end": 1483,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1517,
											"end": 1520,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1517,
											"end": 1527,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1517,
											"end": 1527,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1517,
											"end": 1527,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1504,
											"end": 1527,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1504,
											"end": 1507,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1504,
											"end": 1514,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1504,
											"end": 1514,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1504,
											"end": 1514,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1504,
											"end": 1527,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1504,
											"end": 1527,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 1496,
											"end": 1528,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "470"
										},
										{
											"begin": 1496,
											"end": 1528,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1496,
											"end": 1528,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1496,
											"end": 1528,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1496,
											"end": 1528,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1496,
											"end": 1528,
											"name": "tag",
											"source": 0,
											"value": "470"
										},
										{
											"begin": 1496,
											"end": 1528,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1710,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1758,
											"end": 1761,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1758,
											"end": 1768,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1758,
											"end": 1768,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1758,
											"end": 1768,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1770,
											"end": 1773,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1770,
											"end": 1780,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1770,
											"end": 1780,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1770,
											"end": 1780,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1782,
											"end": 1785,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 1782,
											"end": 1789,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1782,
											"end": 1789,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1782,
											"end": 1789,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1747,
											"end": 1790,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1747,
											"end": 1790,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1747,
											"end": 1790,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1747,
											"end": 1790,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1747,
											"end": 1790,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "471"
										},
										{
											"begin": 1747,
											"end": 1790,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 1747,
											"end": 1790,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 1747,
											"end": 1790,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1747,
											"end": 1790,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1747,
											"end": 1790,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "472"
										},
										{
											"begin": 1747,
											"end": 1790,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1747,
											"end": 1790,
											"name": "tag",
											"source": 0,
											"value": "471"
										},
										{
											"begin": 1747,
											"end": 1790,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1747,
											"end": 1790,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1747,
											"end": 1790,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1747,
											"end": 1790,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1747,
											"end": 1790,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1747,
											"end": 1790,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 1747,
											"end": 1790,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1747,
											"end": 1790,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1747,
											"end": 1790,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1747,
											"end": 1790,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1747,
											"end": 1790,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1747,
											"end": 1790,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1747,
											"end": 1790,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1747,
											"end": 1790,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1737,
											"end": 1791,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1737,
											"end": 1791,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1747,
											"end": 1790,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1737,
											"end": 1791,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1737,
											"end": 1791,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1737,
											"end": 1791,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1737,
											"end": 1791,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 1626,
											"end": 1860,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "473"
										},
										{
											"begin": 1626,
											"end": 1860,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 1626,
											"end": 1860,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 1737,
											"end": 1791,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1737,
											"end": 1791,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 296,
											"end": 362,
											"name": "PUSH",
											"source": 0,
											"value": "E34F199B19B2B4F47F68442619D555527D244F78A3297EA89325F843F87B8B54"
										},
										{
											"begin": 296,
											"end": 362,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1626,
											"end": 1860,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1626,
											"end": 1860,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "474"
										},
										{
											"begin": 1626,
											"end": 1860,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1626,
											"end": 1860,
											"name": "tag",
											"source": 0,
											"value": "473"
										},
										{
											"begin": 1626,
											"end": 1860,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1626,
											"end": 1860,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1626,
											"end": 1860,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1626,
											"end": 1860,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1626,
											"end": 1860,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1626,
											"end": 1860,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 1626,
											"end": 1860,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1626,
											"end": 1860,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1626,
											"end": 1860,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1626,
											"end": 1860,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1626,
											"end": 1860,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1626,
											"end": 1860,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1626,
											"end": 1860,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1594,
											"end": 1879,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1594,
											"end": 1879,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1626,
											"end": 1860,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1594,
											"end": 1879,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1594,
											"end": 1879,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1594,
											"end": 1879,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1594,
											"end": 1879,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 1594,
											"end": 1879,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 1387,
											"end": 1913,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1387,
											"end": 1913,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "450"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": 14,
											"end": 152,
											"name": "tag",
											"source": 1,
											"value": "476"
										},
										{
											"begin": 14,
											"end": 152,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 84,
											"end": 104,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 84,
											"end": 104,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 113,
											"end": 146,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "348"
										},
										{
											"begin": 84,
											"end": 104,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 113,
											"end": 146,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "479"
										},
										{
											"begin": 113,
											"end": 146,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 157,
											"end": 642,
											"name": "tag",
											"source": 1,
											"value": "480"
										},
										{
											"begin": 157,
											"end": 642,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 157,
											"end": 642,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 254,
											"end": 257,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 247,
											"end": 251,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 239,
											"end": 245,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 235,
											"end": 252,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 231,
											"end": 258,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 221,
											"end": 223,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "482"
										},
										{
											"begin": 221,
											"end": 223,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 276,
											"end": 281,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 269,
											"end": 274,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 262,
											"end": 282,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 221,
											"end": 223,
											"name": "tag",
											"source": 1,
											"value": "482"
										},
										{
											"begin": 221,
											"end": 223,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 316,
											"end": 322,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 303,
											"end": 323,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 347,
											"end": 396,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "483"
										},
										{
											"begin": 362,
											"end": 395,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "484"
										},
										{
											"begin": 392,
											"end": 394,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 362,
											"end": 395,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "485"
										},
										{
											"begin": 362,
											"end": 395,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 362,
											"end": 395,
											"name": "tag",
											"source": 1,
											"value": "484"
										},
										{
											"begin": 362,
											"end": 395,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 347,
											"end": 396,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "486"
										},
										{
											"begin": 347,
											"end": 396,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 347,
											"end": 396,
											"name": "tag",
											"source": 1,
											"value": "483"
										},
										{
											"begin": 347,
											"end": 396,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 421,
											"end": 423,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 412,
											"end": 419,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 405,
											"end": 424,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 467,
											"end": 470,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 460,
											"end": 464,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 455,
											"end": 457,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 447,
											"end": 453,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 443,
											"end": 458,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 439,
											"end": 465,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 436,
											"end": 471,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 433,
											"end": 435,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 433,
											"end": 435,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "487"
										},
										{
											"begin": 433,
											"end": 435,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 488,
											"end": 493,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 481,
											"end": 486,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 474,
											"end": 494,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 433,
											"end": 435,
											"name": "tag",
											"source": 1,
											"value": "487"
										},
										{
											"begin": 433,
											"end": 435,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 557,
											"end": 559,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 550,
											"end": 554,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 542,
											"end": 548,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 538,
											"end": 555,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 531,
											"end": 535,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 522,
											"end": 529,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 518,
											"end": 536,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 505,
											"end": 560,
											"name": "CALLDATACOPY",
											"source": 1
										},
										{
											"begin": 580,
											"end": 596,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 580,
											"end": 596,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 580,
											"end": 596,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 598,
											"end": 602,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 576,
											"end": 603,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 569,
											"end": 611,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 569,
											"end": 611,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 569,
											"end": 611,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 569,
											"end": 611,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 584,
											"end": 591,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 211,
											"end": 642,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 211,
											"end": 642,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 647,
											"end": 829,
											"name": "tag",
											"source": 1,
											"value": "488"
										},
										{
											"begin": 647,
											"end": 829,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 647,
											"end": 829,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 770,
											"end": 773,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 761,
											"end": 767,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 756,
											"end": 759,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 752,
											"end": 768,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 748,
											"end": 774,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 745,
											"end": 747,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 745,
											"end": 747,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "123"
										},
										{
											"begin": 745,
											"end": 747,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 791,
											"end": 796,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 784,
											"end": 789,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 777,
											"end": 797,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 834,
											"end": 1093,
											"name": "tag",
											"source": 1,
											"value": "113"
										},
										{
											"begin": 834,
											"end": 1093,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 834,
											"end": 1093,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 946,
											"end": 948,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 934,
											"end": 943,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 925,
											"end": 932,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 921,
											"end": 944,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 917,
											"end": 949,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 914,
											"end": 916,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 914,
											"end": 916,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "492"
										},
										{
											"begin": 914,
											"end": 916,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 967,
											"end": 973,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 959,
											"end": 965,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 952,
											"end": 974,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 914,
											"end": 916,
											"name": "tag",
											"source": 1,
											"value": "492"
										},
										{
											"begin": 914,
											"end": 916,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1011,
											"end": 1020,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 998,
											"end": 1021,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 1030,
											"end": 1063,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "493"
										},
										{
											"begin": 1057,
											"end": 1062,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1030,
											"end": 1063,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "479"
										},
										{
											"begin": 1030,
											"end": 1063,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1030,
											"end": 1063,
											"name": "tag",
											"source": 1,
											"value": "493"
										},
										{
											"begin": 1030,
											"end": 1063,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1082,
											"end": 1087,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 904,
											"end": 1093,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 904,
											"end": 1093,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 1098,
											"end": 1568,
											"name": "tag",
											"source": 1,
											"value": "81"
										},
										{
											"begin": 1098,
											"end": 1568,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1098,
											"end": 1568,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1098,
											"end": 1568,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1098,
											"end": 1568,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1244,
											"end": 1246,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 1232,
											"end": 1241,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 1223,
											"end": 1230,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 1219,
											"end": 1242,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 1215,
											"end": 1247,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 1212,
											"end": 1214,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 1212,
											"end": 1214,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "495"
										},
										{
											"begin": 1212,
											"end": 1214,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1265,
											"end": 1271,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1257,
											"end": 1263,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1250,
											"end": 1272,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 1212,
											"end": 1214,
											"name": "tag",
											"source": 1,
											"value": "495"
										},
										{
											"begin": 1212,
											"end": 1214,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1309,
											"end": 1318,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 1296,
											"end": 1319,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 1328,
											"end": 1361,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "496"
										},
										{
											"begin": 1355,
											"end": 1360,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1328,
											"end": 1361,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "479"
										},
										{
											"begin": 1328,
											"end": 1361,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1328,
											"end": 1361,
											"name": "tag",
											"source": 1,
											"value": "496"
										},
										{
											"begin": 1328,
											"end": 1361,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1380,
											"end": 1385,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1432,
											"end": 1434,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 1417,
											"end": 1435,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 1417,
											"end": 1435,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1404,
											"end": 1436,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 1404,
											"end": 1436,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1488,
											"end": 1490,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1473,
											"end": 1491,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 1473,
											"end": 1491,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1460,
											"end": 1492,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 1501,
											"end": 1536,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "497"
										},
										{
											"begin": 1460,
											"end": 1492,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1501,
											"end": 1536,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "479"
										},
										{
											"begin": 1501,
											"end": 1536,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1501,
											"end": 1536,
											"name": "tag",
											"source": 1,
											"value": "497"
										},
										{
											"begin": 1501,
											"end": 1536,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1555,
											"end": 1562,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1545,
											"end": 1562,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1545,
											"end": 1562,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1545,
											"end": 1562,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1202,
											"end": 1568,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 1202,
											"end": 1568,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1202,
											"end": 1568,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 1202,
											"end": 1568,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1202,
											"end": 1568,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 1202,
											"end": 1568,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 1573,
											"end": 2256,
											"name": "tag",
											"source": 1,
											"value": "85"
										},
										{
											"begin": 1573,
											"end": 2256,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1573,
											"end": 2256,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1573,
											"end": 2256,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1573,
											"end": 2256,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1573,
											"end": 2256,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1573,
											"end": 2256,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1753,
											"end": 1756,
											"name": "PUSH",
											"source": 1,
											"value": "A0"
										},
										{
											"begin": 1741,
											"end": 1750,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 1732,
											"end": 1739,
											"name": "DUP9",
											"source": 1
										},
										{
											"begin": 1728,
											"end": 1751,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 1724,
											"end": 1757,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 1721,
											"end": 1723,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 1721,
											"end": 1723,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "499"
										},
										{
											"begin": 1721,
											"end": 1723,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1775,
											"end": 1781,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1767,
											"end": 1773,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1760,
											"end": 1782,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 1721,
											"end": 1723,
											"name": "tag",
											"source": 1,
											"value": "499"
										},
										{
											"begin": 1721,
											"end": 1723,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1819,
											"end": 1828,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 1806,
											"end": 1829,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 1838,
											"end": 1871,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "500"
										},
										{
											"begin": 1865,
											"end": 1870,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1838,
											"end": 1871,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "479"
										},
										{
											"begin": 1838,
											"end": 1871,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1838,
											"end": 1871,
											"name": "tag",
											"source": 1,
											"value": "500"
										},
										{
											"begin": 1838,
											"end": 1871,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1890,
											"end": 1895,
											"name": "SWAP5",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1942,
											"end": 1944,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 1927,
											"end": 1945,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 1927,
											"end": 1945,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1914,
											"end": 1946,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 1914,
											"end": 1946,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1998,
											"end": 2000,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1983,
											"end": 2001,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 1983,
											"end": 2001,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1970,
											"end": 2002,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 2011,
											"end": 2046,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "501"
										},
										{
											"begin": 1970,
											"end": 2002,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2011,
											"end": 2046,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "479"
										},
										{
											"begin": 2011,
											"end": 2046,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2011,
											"end": 2046,
											"name": "tag",
											"source": 1,
											"value": "501"
										},
										{
											"begin": 2011,
											"end": 2046,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2065,
											"end": 2072,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2119,
											"end": 2121,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 2104,
											"end": 2122,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 2104,
											"end": 2122,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2091,
											"end": 2123,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 2091,
											"end": 2123,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2175,
											"end": 2178,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 2160,
											"end": 2179,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 2160,
											"end": 2179,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2147,
											"end": 2180,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 2189,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "502"
										},
										{
											"begin": 2147,
											"end": 2180,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2189,
											"end": 2224,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "479"
										},
										{
											"begin": 2189,
											"end": 2224,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2189,
											"end": 2224,
											"name": "tag",
											"source": 1,
											"value": "502"
										},
										{
											"begin": 2189,
											"end": 2224,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2243,
											"end": 2250,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2250,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2250,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2250,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1711,
											"end": 2256,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 1711,
											"end": 2256,
											"name": "SWAP6",
											"source": 1
										},
										{
											"begin": 1711,
											"end": 2256,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1711,
											"end": 2256,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 1711,
											"end": 2256,
											"name": "SWAP6",
											"source": 1
										},
										{
											"begin": 1711,
											"end": 2256,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1711,
											"end": 2256,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 1711,
											"end": 2256,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1711,
											"end": 2256,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 2261,
											"end": 2970,
											"name": "tag",
											"source": 1,
											"value": "38"
										},
										{
											"begin": 2261,
											"end": 2970,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2261,
											"end": 2970,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2261,
											"end": 2970,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2261,
											"end": 2970,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2261,
											"end": 2970,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2261,
											"end": 2970,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2261,
											"end": 2970,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2456,
											"end": 2459,
											"name": "PUSH",
											"source": 1,
											"value": "C0"
										},
										{
											"begin": 2444,
											"end": 2453,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 2435,
											"end": 2442,
											"name": "DUP10",
											"source": 1
										},
										{
											"begin": 2431,
											"end": 2454,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2427,
											"end": 2460,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 2424,
											"end": 2426,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2424,
											"end": 2426,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "504"
										},
										{
											"begin": 2424,
											"end": 2426,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2478,
											"end": 2484,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2470,
											"end": 2476,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2463,
											"end": 2485,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 2424,
											"end": 2426,
											"name": "tag",
											"source": 1,
											"value": "504"
										},
										{
											"begin": 2424,
											"end": 2426,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2522,
											"end": 2531,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 2509,
											"end": 2532,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 2541,
											"end": 2574,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "505"
										},
										{
											"begin": 2568,
											"end": 2573,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2541,
											"end": 2574,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "479"
										},
										{
											"begin": 2541,
											"end": 2574,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2541,
											"end": 2574,
											"name": "tag",
											"source": 1,
											"value": "505"
										},
										{
											"begin": 2541,
											"end": 2574,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2593,
											"end": 2598,
											"name": "SWAP6",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2645,
											"end": 2647,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2630,
											"end": 2648,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 2630,
											"end": 2648,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2617,
											"end": 2649,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 2617,
											"end": 2649,
											"name": "SWAP5",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2696,
											"end": 2698,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2681,
											"end": 2699,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 2681,
											"end": 2699,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2668,
											"end": 2700,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 2668,
											"end": 2700,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2752,
											"end": 2754,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 2737,
											"end": 2755,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 2737,
											"end": 2755,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2724,
											"end": 2756,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 2800,
											"end": 2804,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 2787,
											"end": 2805,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2787,
											"end": 2805,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2775,
											"end": 2806,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2775,
											"end": 2806,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 2765,
											"end": 2767,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "506"
										},
										{
											"begin": 2765,
											"end": 2767,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2825,
											"end": 2831,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2817,
											"end": 2823,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2810,
											"end": 2832,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 2765,
											"end": 2767,
											"name": "tag",
											"source": 1,
											"value": "506"
										},
										{
											"begin": 2765,
											"end": 2767,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2414,
											"end": 2970,
											"name": "SWAP6",
											"source": 1
										},
										{
											"begin": 2414,
											"end": 2970,
											"name": "SWAP9",
											"source": 1
										},
										{
											"begin": 2414,
											"end": 2970,
											"name": "SWAP5",
											"source": 1
										},
										{
											"begin": 2414,
											"end": 2970,
											"name": "SWAP8",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2414,
											"end": 2970,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 2414,
											"end": 2970,
											"name": "SWAP6",
											"source": 1
										},
										{
											"begin": 2907,
											"end": 2910,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 2892,
											"end": 2911,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2892,
											"end": 2911,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2879,
											"end": 2912,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 2879,
											"end": 2912,
											"name": "SWAP5",
											"source": 1
										},
										{
											"begin": 2959,
											"end": 2962,
											"name": "PUSH",
											"source": 1,
											"value": "A0"
										},
										{
											"begin": 2944,
											"end": 2963,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2944,
											"end": 2963,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2944,
											"end": 2963,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2931,
											"end": 2964,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 2931,
											"end": 2964,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2414,
											"end": 2970,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2414,
											"end": 2970,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 2975,
											"end": 3652,
											"name": "tag",
											"source": 1,
											"value": "58"
										},
										{
											"begin": 2975,
											"end": 3652,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2975,
											"end": 3652,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2975,
											"end": 3652,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3133,
											"end": 3135,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3121,
											"end": 3130,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 3112,
											"end": 3119,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 3108,
											"end": 3131,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3104,
											"end": 3136,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 3101,
											"end": 3103,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3101,
											"end": 3103,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "508"
										},
										{
											"begin": 3101,
											"end": 3103,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3154,
											"end": 3160,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3146,
											"end": 3152,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3139,
											"end": 3161,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 3101,
											"end": 3103,
											"name": "tag",
											"source": 1,
											"value": "508"
										},
										{
											"begin": 3101,
											"end": 3103,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3199,
											"end": 3208,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3186,
											"end": 3209,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 3228,
											"end": 3246,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3269,
											"end": 3271,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3261,
											"end": 3267,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3258,
											"end": 3272,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 3255,
											"end": 3257,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3255,
											"end": 3257,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "509"
										},
										{
											"begin": 3255,
											"end": 3257,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3290,
											"end": 3296,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 3282,
											"end": 3288,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 3275,
											"end": 3297,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 3255,
											"end": 3257,
											"name": "tag",
											"source": 1,
											"value": "509"
										},
										{
											"begin": 3255,
											"end": 3257,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3333,
											"end": 3339,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3322,
											"end": 3331,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 3318,
											"end": 3340,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3308,
											"end": 3340,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3308,
											"end": 3340,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3378,
											"end": 3385,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 3371,
											"end": 3375,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 3367,
											"end": 3369,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 3363,
											"end": 3376,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3359,
											"end": 3386,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 3349,
											"end": 3351,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "510"
										},
										{
											"begin": 3349,
											"end": 3351,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3405,
											"end": 3411,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 3397,
											"end": 3403,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 3390,
											"end": 3412,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 3349,
											"end": 3351,
											"name": "tag",
											"source": 1,
											"value": "510"
										},
										{
											"begin": 3349,
											"end": 3351,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3450,
											"end": 3452,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3437,
											"end": 3453,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 3476,
											"end": 3478,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3468,
											"end": 3474,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3465,
											"end": 3479,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 3462,
											"end": 3464,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3462,
											"end": 3464,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "511"
										},
										{
											"begin": 3462,
											"end": 3464,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3497,
											"end": 3503,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 3489,
											"end": 3495,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 3482,
											"end": 3504,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 3462,
											"end": 3464,
											"name": "tag",
											"source": 1,
											"value": "511"
										},
										{
											"begin": 3462,
											"end": 3464,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3556,
											"end": 3563,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 3551,
											"end": 3553,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3545,
											"end": 3547,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3537,
											"end": 3543,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 3533,
											"end": 3548,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 3529,
											"end": 3531,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 3525,
											"end": 3549,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3521,
											"end": 3554,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3518,
											"end": 3564,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 3515,
											"end": 3517,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3515,
											"end": 3517,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "512"
										},
										{
											"begin": 3515,
											"end": 3517,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3582,
											"end": 3588,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 3574,
											"end": 3580,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 3567,
											"end": 3589,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 3515,
											"end": 3517,
											"name": "tag",
											"source": 1,
											"value": "512"
										},
										{
											"begin": 3515,
											"end": 3517,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3618,
											"end": 3620,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3610,
											"end": 3621,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 3610,
											"end": 3621,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3610,
											"end": 3621,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 3610,
											"end": 3621,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3610,
											"end": 3621,
											"name": "SWAP7",
											"source": 1
										},
										{
											"begin": 3640,
											"end": 3646,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3640,
											"end": 3646,
											"name": "SWAP6",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3091,
											"end": 3652,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3091,
											"end": 3652,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3091,
											"end": 3652,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 3657,
											"end": 3954,
											"name": "tag",
											"source": 1,
											"value": "383"
										},
										{
											"begin": 3657,
											"end": 3954,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3657,
											"end": 3954,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3777,
											"end": 3779,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3765,
											"end": 3774,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3756,
											"end": 3763,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 3752,
											"end": 3775,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3748,
											"end": 3780,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 3745,
											"end": 3747,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3745,
											"end": 3747,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "514"
										},
										{
											"begin": 3745,
											"end": 3747,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3798,
											"end": 3804,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3790,
											"end": 3796,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3783,
											"end": 3805,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 3745,
											"end": 3747,
											"name": "tag",
											"source": 1,
											"value": "514"
										},
										{
											"begin": 3745,
											"end": 3747,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3835,
											"end": 3844,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3829,
											"end": 3845,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3888,
											"end": 3893,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3881,
											"end": 3894,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3874,
											"end": 3895,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3867,
											"end": 3872,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3864,
											"end": 3896,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 3854,
											"end": 3856,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "493"
										},
										{
											"begin": 3854,
											"end": 3856,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3915,
											"end": 3921,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3907,
											"end": 3913,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3900,
											"end": 3922,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 3959,
											"end": 4212,
											"name": "tag",
											"source": 1,
											"value": "341"
										},
										{
											"begin": 3959,
											"end": 4212,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3959,
											"end": 4212,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3959,
											"end": 4212,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4097,
											"end": 4099,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4085,
											"end": 4094,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 4076,
											"end": 4083,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 4072,
											"end": 4095,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 4068,
											"end": 4100,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 4065,
											"end": 4067,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4065,
											"end": 4067,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "517"
										},
										{
											"begin": 4065,
											"end": 4067,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4118,
											"end": 4124,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4110,
											"end": 4116,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4103,
											"end": 4125,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 4065,
											"end": 4067,
											"name": "tag",
											"source": 1,
											"value": "517"
										},
										{
											"begin": 4065,
											"end": 4067,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4146,
											"end": 4162,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4146,
											"end": 4162,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4202,
											"end": 4204,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4187,
											"end": 4205,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4187,
											"end": 4205,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4187,
											"end": 4205,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4181,
											"end": 4206,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4146,
											"end": 4162,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4146,
											"end": 4162,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 4181,
											"end": 4206,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4181,
											"end": 4206,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4055,
											"end": 4212,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 4217,
											"end": 4992,
											"name": "tag",
											"source": 1,
											"value": "98"
										},
										{
											"begin": 4217,
											"end": 4992,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4217,
											"end": 4992,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4217,
											"end": 4992,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4217,
											"end": 4992,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4217,
											"end": 4992,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4380,
											"end": 4382,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 4368,
											"end": 4377,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 4359,
											"end": 4366,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 4355,
											"end": 4378,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 4351,
											"end": 4383,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 4348,
											"end": 4350,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4348,
											"end": 4350,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "519"
										},
										{
											"begin": 4348,
											"end": 4350,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4401,
											"end": 4407,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4393,
											"end": 4399,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4386,
											"end": 4408,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 4348,
											"end": 4350,
											"name": "tag",
											"source": 1,
											"value": "519"
										},
										{
											"begin": 4348,
											"end": 4350,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4442,
											"end": 4451,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 4429,
											"end": 4452,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 4419,
											"end": 4452,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 4419,
											"end": 4452,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4499,
											"end": 4501,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4488,
											"end": 4497,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 4484,
											"end": 4502,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4471,
											"end": 4503,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 4461,
											"end": 4503,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 4461,
											"end": 4503,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4554,
											"end": 4556,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4543,
											"end": 4552,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 4539,
											"end": 4557,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4526,
											"end": 4558,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 4577,
											"end": 4595,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4618,
											"end": 4620,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4610,
											"end": 4616,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4607,
											"end": 4621,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 4604,
											"end": 4606,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4604,
											"end": 4606,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "520"
										},
										{
											"begin": 4604,
											"end": 4606,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4639,
											"end": 4645,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 4631,
											"end": 4637,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 4624,
											"end": 4646,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 4604,
											"end": 4606,
											"name": "tag",
											"source": 1,
											"value": "520"
										},
										{
											"begin": 4604,
											"end": 4606,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4682,
											"end": 4688,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4671,
											"end": 4680,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 4667,
											"end": 4689,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4657,
											"end": 4689,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4657,
											"end": 4689,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4727,
											"end": 4734,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 4720,
											"end": 4724,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 4716,
											"end": 4718,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 4712,
											"end": 4725,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4708,
											"end": 4735,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 4698,
											"end": 4700,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "521"
										},
										{
											"begin": 4698,
											"end": 4700,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4754,
											"end": 4760,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 4746,
											"end": 4752,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 4739,
											"end": 4761,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 4698,
											"end": 4700,
											"name": "tag",
											"source": 1,
											"value": "521"
										},
										{
											"begin": 4698,
											"end": 4700,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4799,
											"end": 4801,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4786,
											"end": 4802,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 4825,
											"end": 4827,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4817,
											"end": 4823,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4814,
											"end": 4828,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 4811,
											"end": 4813,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4811,
											"end": 4813,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "522"
										},
										{
											"begin": 4811,
											"end": 4813,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4846,
											"end": 4852,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 4838,
											"end": 4844,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 4831,
											"end": 4853,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 4811,
											"end": 4813,
											"name": "tag",
											"source": 1,
											"value": "522"
										},
										{
											"begin": 4811,
											"end": 4813,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4896,
											"end": 4903,
											"name": "DUP9",
											"source": 1
										},
										{
											"begin": 4891,
											"end": 4893,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4882,
											"end": 4888,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4878,
											"end": 4880,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 4874,
											"end": 4889,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4870,
											"end": 4894,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4867,
											"end": 4904,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 4864,
											"end": 4866,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4864,
											"end": 4866,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "523"
										},
										{
											"begin": 4864,
											"end": 4866,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4922,
											"end": 4928,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 4914,
											"end": 4920,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 4907,
											"end": 4929,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 4864,
											"end": 4866,
											"name": "tag",
											"source": 1,
											"value": "523"
										},
										{
											"begin": 4864,
											"end": 4866,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4338,
											"end": 4992,
											"name": "SWAP6",
											"source": 1
										},
										{
											"begin": 4338,
											"end": 4992,
											"name": "SWAP9",
											"source": 1
										},
										{
											"begin": 4338,
											"end": 4992,
											"name": "SWAP5",
											"source": 1
										},
										{
											"begin": 4338,
											"end": 4992,
											"name": "SWAP8",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4958,
											"end": 4960,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4950,
											"end": 4961,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4950,
											"end": 4961,
											"name": "SWAP5",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4338,
											"end": 4992,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 4997,
											"end": 5673,
											"name": "tag",
											"source": 1,
											"value": "197"
										},
										{
											"begin": 4997,
											"end": 5673,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4997,
											"end": 5673,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5130,
											"end": 5132,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5118,
											"end": 5127,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5109,
											"end": 5116,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 5105,
											"end": 5128,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5101,
											"end": 5133,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 5098,
											"end": 5100,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5098,
											"end": 5100,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "525"
										},
										{
											"begin": 5098,
											"end": 5100,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5151,
											"end": 5157,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5143,
											"end": 5149,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5136,
											"end": 5158,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 5098,
											"end": 5100,
											"name": "tag",
											"source": 1,
											"value": "525"
										},
										{
											"begin": 5098,
											"end": 5100,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5189,
											"end": 5198,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5183,
											"end": 5199,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5222,
											"end": 5240,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5214,
											"end": 5220,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5211,
											"end": 5241,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 5208,
											"end": 5210,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5208,
											"end": 5210,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "526"
										},
										{
											"begin": 5208,
											"end": 5210,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5259,
											"end": 5265,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5251,
											"end": 5257,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5244,
											"end": 5266,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 5208,
											"end": 5210,
											"name": "tag",
											"source": 1,
											"value": "526"
										},
										{
											"begin": 5208,
											"end": 5210,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5287,
											"end": 5309,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5287,
											"end": 5309,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5340,
											"end": 5344,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 5332,
											"end": 5345,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5332,
											"end": 5345,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5328,
											"end": 5355,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SGT",
											"source": -1
										},
										{
											"begin": 5318,
											"end": 5320,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "527"
										},
										{
											"begin": 5318,
											"end": 5320,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5374,
											"end": 5380,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5372,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5359,
											"end": 5381,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 5318,
											"end": 5320,
											"name": "tag",
											"source": 1,
											"value": "527"
										},
										{
											"begin": 5318,
											"end": 5320,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5408,
											"end": 5410,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5402,
											"end": 5411,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5433,
											"end": 5482,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "528"
										},
										{
											"begin": 5448,
											"end": 5481,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "484"
										},
										{
											"begin": 5478,
											"end": 5480,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5448,
											"end": 5481,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "485"
										},
										{
											"begin": 5448,
											"end": 5481,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5433,
											"end": 5482,
											"name": "tag",
											"source": 1,
											"value": "528"
										},
										{
											"begin": 5433,
											"end": 5482,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5505,
											"end": 5507,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5498,
											"end": 5503,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5491,
											"end": 5508,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5545,
											"end": 5552,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5540,
											"end": 5542,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5535,
											"end": 5537,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5531,
											"end": 5533,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5527,
											"end": 5538,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5523,
											"end": 5543,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5520,
											"end": 5553,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 5517,
											"end": 5519,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5517,
											"end": 5519,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "530"
										},
										{
											"begin": 5517,
											"end": 5519,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5571,
											"end": 5577,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5563,
											"end": 5569,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 5556,
											"end": 5578,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 5517,
											"end": 5519,
											"name": "tag",
											"source": 1,
											"value": "530"
										},
										{
											"begin": 5517,
											"end": 5519,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5589,
											"end": 5643,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "394"
										},
										{
											"begin": 5640,
											"end": 5642,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5635,
											"end": 5637,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5628,
											"end": 5633,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5624,
											"end": 5638,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5619,
											"end": 5621,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5615,
											"end": 5617,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 5611,
											"end": 5622,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5589,
											"end": 5643,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "532"
										},
										{
											"begin": 5589,
											"end": 5643,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5678,
											"end": 6720,
											"name": "tag",
											"source": 1,
											"value": "64"
										},
										{
											"begin": 5678,
											"end": 6720,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5678,
											"end": 6720,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5824,
											"end": 5826,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5812,
											"end": 5821,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5803,
											"end": 5810,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 5799,
											"end": 5822,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5795,
											"end": 5827,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 5792,
											"end": 5794,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5792,
											"end": 5794,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "534"
										},
										{
											"begin": 5792,
											"end": 5794,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5845,
											"end": 5851,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5837,
											"end": 5843,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5830,
											"end": 5852,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 5792,
											"end": 5794,
											"name": "tag",
											"source": 1,
											"value": "534"
										},
										{
											"begin": 5792,
											"end": 5794,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5890,
											"end": 5899,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5877,
											"end": 5900,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 5919,
											"end": 5937,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5960,
											"end": 5962,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5952,
											"end": 5958,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5949,
											"end": 5963,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 5946,
											"end": 5948,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5946,
											"end": 5948,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "535"
										},
										{
											"begin": 5946,
											"end": 5948,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5981,
											"end": 5987,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5973,
											"end": 5979,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5966,
											"end": 5988,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 5946,
											"end": 5948,
											"name": "tag",
											"source": 1,
											"value": "535"
										},
										{
											"begin": 5946,
											"end": 5948,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6009,
											"end": 6031,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6009,
											"end": 6031,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 6009,
											"end": 6031,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6009,
											"end": 6031,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6069,
											"name": "PUSH",
											"source": 1,
											"value": "A0"
										},
										{
											"begin": 6047,
											"end": 6063,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 6047,
											"end": 6063,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 6047,
											"end": 6063,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 6043,
											"end": 6070,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 6040,
											"end": 6042,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 6040,
											"end": 6042,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "536"
										},
										{
											"begin": 6040,
											"end": 6042,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 6088,
											"end": 6094,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 6080,
											"end": 6086,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 6073,
											"end": 6095,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 6040,
											"end": 6042,
											"name": "tag",
											"source": 1,
											"value": "536"
										},
										{
											"begin": 6040,
											"end": 6042,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6126,
											"end": 6128,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 6120,
											"end": 6129,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 6168,
											"end": 6172,
											"name": "PUSH",
											"source": 1,
											"value": "A0"
										},
										{
											"begin": 6160,
											"end": 6166,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6156,
											"end": 6173,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6223,
											"end": 6229,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6211,
											"end": 6221,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6208,
											"end": 6230,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 6203,
											"end": 6205,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 6191,
											"end": 6201,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 6188,
											"end": 6206,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 6185,
											"end": 6231,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 6182,
											"end": 6184,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 6182,
											"end": 6184,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "537"
										},
										{
											"begin": 6182,
											"end": 6184,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 6234,
											"end": 6243,
											"name": "INVALID",
											"source": 1
										},
										{
											"begin": 6182,
											"end": 6184,
											"name": "tag",
											"source": 1,
											"value": "537"
										},
										{
											"begin": 6182,
											"end": 6184,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6261,
											"end": 6263,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 6254,
											"end": 6276,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6301,
											"end": 6317,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 6301,
											"end": 6317,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 6329,
											"end": 6345,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 6329,
											"end": 6345,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6329,
											"end": 6345,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 6326,
											"end": 6328,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 6326,
											"end": 6328,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "538"
										},
										{
											"begin": 6326,
											"end": 6328,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 6363,
											"end": 6369,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 6355,
											"end": 6361,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 6348,
											"end": 6370,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 6326,
											"end": 6328,
											"name": "tag",
											"source": 1,
											"value": "538"
										},
										{
											"begin": 6326,
											"end": 6328,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6396,
											"end": 6442,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "539"
										},
										{
											"begin": 6434,
											"end": 6441,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 6423,
											"end": 6431,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 6419,
											"end": 6421,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 6415,
											"end": 6432,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6396,
											"end": 6442,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "480"
										},
										{
											"begin": 6396,
											"end": 6442,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 6396,
											"end": 6442,
											"name": "tag",
											"source": 1,
											"value": "539"
										},
										{
											"begin": 6396,
											"end": 6442,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6388,
											"end": 6394,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 6381,
											"end": 6443,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6381,
											"end": 6443,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6476,
											"end": 6509,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "540"
										},
										{
											"begin": 6505,
											"end": 6507,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 6501,
											"end": 6503,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 6497,
											"end": 6508,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6476,
											"end": 6509,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "476"
										},
										{
											"begin": 6476,
											"end": 6509,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 6476,
											"end": 6509,
											"name": "tag",
											"source": 1,
											"value": "540"
										},
										{
											"begin": 6476,
											"end": 6509,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6471,
											"end": 6473,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 6463,
											"end": 6469,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 6459,
											"end": 6474,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6452,
											"end": 6510,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6564,
											"end": 6566,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 6560,
											"end": 6562,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 6556,
											"end": 6567,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6543,
											"end": 6568,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 6538,
											"end": 6540,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 6530,
											"end": 6536,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 6526,
											"end": 6541,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6519,
											"end": 6569,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6623,
											"end": 6625,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 6619,
											"end": 6621,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 6615,
											"end": 6626,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6602,
											"end": 6627,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 6597,
											"end": 6599,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 6589,
											"end": 6595,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 6585,
											"end": 6600,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6578,
											"end": 6628,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6683,
											"end": 6686,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 6679,
											"end": 6681,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 6675,
											"end": 6687,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6662,
											"end": 6688,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 6656,
											"end": 6659,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 6648,
											"end": 6654,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 6644,
											"end": 6660,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6637,
											"end": 6689,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6708,
											"end": 6714,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 6698,
											"end": 6714,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 6698,
											"end": 6714,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6698,
											"end": 6714,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6698,
											"end": 6714,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6698,
											"end": 6714,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5782,
											"end": 6720,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 5782,
											"end": 6720,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5782,
											"end": 6720,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5782,
											"end": 6720,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5782,
											"end": 6720,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 6725,
											"end": 7007,
											"name": "tag",
											"source": 1,
											"value": "32"
										},
										{
											"begin": 6725,
											"end": 7007,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6725,
											"end": 7007,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6879,
											"end": 6882,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 6867,
											"end": 6876,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 6858,
											"end": 6865,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 6854,
											"end": 6877,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 6850,
											"end": 6883,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 6847,
											"end": 6849,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 6847,
											"end": 6849,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "542"
										},
										{
											"begin": 6847,
											"end": 6849,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 6901,
											"end": 6907,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 6893,
											"end": 6899,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6886,
											"end": 6908,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 6847,
											"end": 6849,
											"name": "tag",
											"source": 1,
											"value": "542"
										},
										{
											"begin": 6847,
											"end": 6849,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6929,
											"end": 7001,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "493"
										},
										{
											"begin": 6993,
											"end": 7000,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 6982,
											"end": 6991,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 6929,
											"end": 7001,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "488"
										},
										{
											"begin": 6929,
											"end": 7001,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 7012,
											"end": 7439,
											"name": "tag",
											"source": 1,
											"value": "89"
										},
										{
											"begin": 7012,
											"end": 7439,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7012,
											"end": 7439,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7161,
											"end": 7163,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 7149,
											"end": 7158,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7140,
											"end": 7147,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 7136,
											"end": 7159,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 7132,
											"end": 7164,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 7129,
											"end": 7131,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 7129,
											"end": 7131,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "545"
										},
										{
											"begin": 7129,
											"end": 7131,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 7182,
											"end": 7188,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 7174,
											"end": 7180,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7167,
											"end": 7189,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 7129,
											"end": 7131,
											"name": "tag",
											"source": 1,
											"value": "545"
										},
										{
											"begin": 7129,
											"end": 7131,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7227,
											"end": 7236,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7214,
											"end": 7237,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 7260,
											"end": 7278,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7252,
											"end": 7258,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7249,
											"end": 7279,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 7246,
											"end": 7248,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 7246,
											"end": 7248,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "546"
										},
										{
											"begin": 7246,
											"end": 7248,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 7297,
											"end": 7303,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7289,
											"end": 7295,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7282,
											"end": 7304,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 7246,
											"end": 7248,
											"name": "tag",
											"source": 1,
											"value": "546"
										},
										{
											"begin": 7246,
											"end": 7248,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7325,
											"end": 7347,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7325,
											"end": 7347,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7381,
											"end": 7384,
											"name": "PUSH",
											"source": 1,
											"value": "A0"
										},
										{
											"begin": 7363,
											"end": 7379,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7363,
											"end": 7379,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 7363,
											"end": 7379,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 7359,
											"end": 7385,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 7356,
											"end": 7358,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 7356,
											"end": 7358,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "493"
										},
										{
											"begin": 7356,
											"end": 7358,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 7403,
											"end": 7409,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7395,
											"end": 7401,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7388,
											"end": 7410,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 7732,
											"end": 8660,
											"name": "tag",
											"source": 1,
											"value": "293"
										},
										{
											"begin": 7732,
											"end": 8660,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7732,
											"end": 8660,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7878,
											"end": 7880,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 7866,
											"end": 7875,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7857,
											"end": 7864,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 7853,
											"end": 7876,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 7849,
											"end": 7881,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 7846,
											"end": 7848,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 7846,
											"end": 7848,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "552"
										},
										{
											"begin": 7846,
											"end": 7848,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 7899,
											"end": 7905,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 7891,
											"end": 7897,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7884,
											"end": 7906,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 7846,
											"end": 7848,
											"name": "tag",
											"source": 1,
											"value": "552"
										},
										{
											"begin": 7846,
											"end": 7848,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7944,
											"end": 7953,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7931,
											"end": 7954,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 7973,
											"end": 7991,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8014,
											"end": 8016,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 8006,
											"end": 8012,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 8003,
											"end": 8017,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 8000,
											"end": 8002,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 8000,
											"end": 8002,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "553"
										},
										{
											"begin": 8000,
											"end": 8002,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 8035,
											"end": 8041,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 8027,
											"end": 8033,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 8020,
											"end": 8042,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 8000,
											"end": 8002,
											"name": "tag",
											"source": 1,
											"value": "553"
										},
										{
											"begin": 8000,
											"end": 8002,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8063,
											"end": 8085,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8063,
											"end": 8085,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 8063,
											"end": 8085,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8063,
											"end": 8085,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8119,
											"end": 8123,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 8101,
											"end": 8117,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 8101,
											"end": 8117,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 8101,
											"end": 8117,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 8097,
											"end": 8124,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 8094,
											"end": 8096,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 8094,
											"end": 8096,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "554"
										},
										{
											"begin": 8094,
											"end": 8096,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 8142,
											"end": 8148,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 8134,
											"end": 8140,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 8127,
											"end": 8149,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 8094,
											"end": 8096,
											"name": "tag",
											"source": 1,
											"value": "554"
										},
										{
											"begin": 8094,
											"end": 8096,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8180,
											"end": 8184,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 8174,
											"end": 8185,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 8224,
											"end": 8228,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 8216,
											"end": 8222,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8212,
											"end": 8229,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8279,
											"end": 8285,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8267,
											"end": 8277,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8264,
											"end": 8286,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 8259,
											"end": 8261,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 8247,
											"end": 8257,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 8244,
											"end": 8262,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 8241,
											"end": 8287,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 8238,
											"end": 8240,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 8238,
											"end": 8240,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "555"
										},
										{
											"begin": 8238,
											"end": 8240,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 8290,
											"end": 8299,
											"name": "INVALID",
											"source": 1
										},
										{
											"begin": 8238,
											"end": 8240,
											"name": "tag",
											"source": 1,
											"value": "555"
										},
										{
											"begin": 8238,
											"end": 8240,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8317,
											"end": 8321,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 8310,
											"end": 8334,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 8359,
											"end": 8375,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 8359,
											"end": 8375,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 8387,
											"end": 8403,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 8387,
											"end": 8403,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8387,
											"end": 8403,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 8384,
											"end": 8386,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 8384,
											"end": 8386,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "556"
										},
										{
											"begin": 8384,
											"end": 8386,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 8421,
											"end": 8427,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 8413,
											"end": 8419,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 8406,
											"end": 8428,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 8384,
											"end": 8386,
											"name": "tag",
											"source": 1,
											"value": "556"
										},
										{
											"begin": 8384,
											"end": 8386,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8454,
											"end": 8500,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "557"
										},
										{
											"begin": 8492,
											"end": 8499,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 8481,
											"end": 8489,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 8477,
											"end": 8479,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 8473,
											"end": 8490,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8454,
											"end": 8500,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "480"
										},
										{
											"begin": 8454,
											"end": 8500,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 8454,
											"end": 8500,
											"name": "tag",
											"source": 1,
											"value": "557"
										},
										{
											"begin": 8454,
											"end": 8500,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8446,
											"end": 8452,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 8439,
											"end": 8501,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 8439,
											"end": 8501,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 8544,
											"end": 8546,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 8540,
											"end": 8542,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 8536,
											"end": 8547,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8523,
											"end": 8548,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 8510,
											"end": 8548,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 8510,
											"end": 8548,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 8557,
											"end": 8590,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "558"
										},
										{
											"begin": 8584,
											"end": 8589,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 8557,
											"end": 8590,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "479"
										},
										{
											"begin": 8557,
											"end": 8590,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 8557,
											"end": 8590,
											"name": "tag",
											"source": 1,
											"value": "558"
										},
										{
											"begin": 8557,
											"end": 8590,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8618,
											"end": 8620,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 8606,
											"end": 8621,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8606,
											"end": 8621,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8599,
											"end": 8629,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 8599,
											"end": 8629,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8599,
											"end": 8629,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 8599,
											"end": 8629,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8610,
											"end": 8616,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 7836,
											"end": 8660,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7836,
											"end": 8660,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 8929,
											"end": 9223,
											"name": "tag",
											"source": 1,
											"value": "118"
										},
										{
											"begin": 8929,
											"end": 9223,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8929,
											"end": 9223,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 9040,
											"end": 9042,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 9028,
											"end": 9037,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 9019,
											"end": 9026,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 9015,
											"end": 9038,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 9011,
											"end": 9043,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 9008,
											"end": 9010,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 9008,
											"end": 9010,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "563"
										},
										{
											"begin": 9008,
											"end": 9010,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 9061,
											"end": 9067,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 9053,
											"end": 9059,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 9046,
											"end": 9068,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 9008,
											"end": 9010,
											"name": "tag",
											"source": 1,
											"value": "563"
										},
										{
											"begin": 9008,
											"end": 9010,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 9105,
											"end": 9114,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 9092,
											"end": 9115,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 9155,
											"end": 9163,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFF"
										},
										{
											"begin": 9148,
											"end": 9153,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 9144,
											"end": 9164,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 9137,
											"end": 9142,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 9134,
											"end": 9165,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 9124,
											"end": 9126,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "493"
										},
										{
											"begin": 9124,
											"end": 9126,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 9184,
											"end": 9190,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 9176,
											"end": 9182,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 9169,
											"end": 9191,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 9228,
											"end": 9422,
											"name": "tag",
											"source": 1,
											"value": "139"
										},
										{
											"begin": 9228,
											"end": 9422,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 9228,
											"end": 9422,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 9351,
											"end": 9353,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 9339,
											"end": 9348,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 9330,
											"end": 9337,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 9326,
											"end": 9349,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 9322,
											"end": 9354,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 9319,
											"end": 9321,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 9319,
											"end": 9321,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "566"
										},
										{
											"begin": 9319,
											"end": 9321,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 9372,
											"end": 9378,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 9364,
											"end": 9370,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 9357,
											"end": 9379,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 9319,
											"end": 9321,
											"name": "tag",
											"source": 1,
											"value": "566"
										},
										{
											"begin": 9319,
											"end": 9321,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9400,
											"end": 9416,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 9400,
											"end": 9416,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 9309,
											"end": 9422,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9309,
											"end": 9422,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 9427,
											"end": 9754,
											"name": "tag",
											"source": 1,
											"value": "42"
										},
										{
											"begin": 9427,
											"end": 9754,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 9427,
											"end": 9754,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 9427,
											"end": 9754,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 9556,
											"end": 9558,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 9544,
											"end": 9553,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 9535,
											"end": 9542,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 9531,
											"end": 9554,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 9527,
											"end": 9559,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 9524,
											"end": 9526,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 9524,
											"end": 9526,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "568"
										},
										{
											"begin": 9524,
											"end": 9526,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 9577,
											"end": 9583,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 9569,
											"end": 9575,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 9562,
											"end": 9584,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 9524,
											"end": 9526,
											"name": "tag",
											"source": 1,
											"value": "568"
										},
										{
											"begin": 9524,
											"end": 9526,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 9618,
											"end": 9627,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 9605,
											"end": 9628,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 9595,
											"end": 9628,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 9595,
											"end": 9628,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 9678,
											"end": 9680,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 9667,
											"end": 9676,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 9663,
											"end": 9681,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 9650,
											"end": 9682,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 9691,
											"end": 9724,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "569"
										},
										{
											"begin": 9718,
											"end": 9723,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 9691,
											"end": 9724,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "479"
										},
										{
											"begin": 9691,
											"end": 9724,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 9691,
											"end": 9724,
											"name": "tag",
											"source": 1,
											"value": "569"
										},
										{
											"begin": 9691,
											"end": 9724,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 9743,
											"end": 9748,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 9733,
											"end": 9748,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 9733,
											"end": 9748,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 9733,
											"end": 9748,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 9514,
											"end": 9754,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 9514,
											"end": 9754,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 9514,
											"end": 9754,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 9514,
											"end": 9754,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 9514,
											"end": 9754,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 9514,
											"end": 9754,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 9759,
											"end": 10298,
											"name": "tag",
											"source": 1,
											"value": "51"
										},
										{
											"begin": 9759,
											"end": 10298,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 9759,
											"end": 10298,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 9759,
											"end": 10298,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 9759,
											"end": 10298,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 9759,
											"end": 10298,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 9922,
											"end": 9925,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 9910,
											"end": 9919,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 9901,
											"end": 9908,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 9897,
											"end": 9920,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 9893,
											"end": 9926,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 9890,
											"end": 9892,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 9890,
											"end": 9892,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "571"
										},
										{
											"begin": 9890,
											"end": 9892,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 9944,
											"end": 9950,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 9936,
											"end": 9942,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 9929,
											"end": 9951,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 9890,
											"end": 9892,
											"name": "tag",
											"source": 1,
											"value": "571"
										},
										{
											"begin": 9890,
											"end": 9892,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 9985,
											"end": 9994,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 9972,
											"end": 9995,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 9962,
											"end": 9995,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 9962,
											"end": 9995,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 10045,
											"end": 10047,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 10034,
											"end": 10043,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 10030,
											"end": 10048,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10017,
											"end": 10049,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 10058,
											"end": 10091,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "572"
										},
										{
											"begin": 10085,
											"end": 10090,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10058,
											"end": 10091,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "479"
										},
										{
											"begin": 10058,
											"end": 10091,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 10058,
											"end": 10091,
											"name": "tag",
											"source": 1,
											"value": "572"
										},
										{
											"begin": 10058,
											"end": 10091,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10110,
											"end": 10115,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10162,
											"end": 10164,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 10147,
											"end": 10165,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 10147,
											"end": 10165,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10134,
											"end": 10166,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 10134,
											"end": 10166,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10218,
											"end": 10220,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 10203,
											"end": 10221,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 10203,
											"end": 10221,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10190,
											"end": 10222,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 10231,
											"end": 10266,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "573"
										},
										{
											"begin": 10190,
											"end": 10222,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10231,
											"end": 10266,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "479"
										},
										{
											"begin": 10231,
											"end": 10266,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 10231,
											"end": 10266,
											"name": "tag",
											"source": 1,
											"value": "573"
										},
										{
											"begin": 10231,
											"end": 10266,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 9880,
											"end": 10298,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 9880,
											"end": 10298,
											"name": "SWAP7",
											"source": 1
										},
										{
											"begin": 9880,
											"end": 10298,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 9880,
											"end": 10298,
											"name": "SWAP6",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9880,
											"end": 10298,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 9880,
											"end": 10298,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9880,
											"end": 10298,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 10303,
											"end": 10562,
											"name": "tag",
											"source": 1,
											"value": "574"
										},
										{
											"begin": 10303,
											"end": 10562,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10303,
											"end": 10562,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 10384,
											"end": 10389,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10378,
											"end": 10390,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 10411,
											"end": 10417,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 10406,
											"end": 10409,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 10399,
											"end": 10418,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10427,
											"end": 10490,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "576"
										},
										{
											"begin": 10483,
											"end": 10489,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10476,
											"end": 10480,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 10471,
											"end": 10474,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 10467,
											"end": 10481,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10460,
											"end": 10464,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 10453,
											"end": 10458,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 10449,
											"end": 10465,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10427,
											"end": 10490,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "532"
										},
										{
											"begin": 10427,
											"end": 10490,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 10427,
											"end": 10490,
											"name": "tag",
											"source": 1,
											"value": "576"
										},
										{
											"begin": 10427,
											"end": 10490,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10544,
											"end": 10546,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 10523,
											"end": 10538,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 10519,
											"end": 10548,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 10510,
											"end": 10549,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 10510,
											"end": 10549,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10510,
											"end": 10549,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 10510,
											"end": 10549,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10551,
											"end": 10555,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 10506,
											"end": 10556,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10506,
											"end": 10556,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 10354,
											"end": 10562,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10354,
											"end": 10562,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 10567,
											"end": 10998,
											"name": "tag",
											"source": 1,
											"value": "121"
										},
										{
											"begin": 10567,
											"end": 10998,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10820,
											"end": 10822,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 10816,
											"end": 10831,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 10816,
											"end": 10831,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 10816,
											"end": 10831,
											"name": "SHL",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 10812,
											"end": 10836,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10812,
											"end": 10836,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10812,
											"end": 10836,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 10800,
											"end": 10837,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 10800,
											"end": 10837,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10893,
											"end": 10896,
											"name": "PUSH",
											"source": 1,
											"value": "E8"
										},
										{
											"begin": 10871,
											"end": 10887,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 10871,
											"end": 10887,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10871,
											"end": 10887,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 10871,
											"end": 10887,
											"name": "SHL",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 10867,
											"end": 10908,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 10862,
											"end": 10864,
											"name": "PUSH",
											"source": 1,
											"value": "14"
										},
										{
											"begin": 10853,
											"end": 10865,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 10853,
											"end": 10865,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10846,
											"end": 10909,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10943,
											"end": 10958,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 10943,
											"end": 10958,
											"name": "SHL",
											"source": 1
										},
										{
											"begin": 10939,
											"end": 10963,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 10934,
											"end": 10936,
											"name": "PUSH",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 10925,
											"end": 10937,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 10925,
											"end": 10937,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10918,
											"end": 10964,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10989,
											"end": 10991,
											"name": "PUSH",
											"source": 1,
											"value": "2B"
										},
										{
											"begin": 10980,
											"end": 10992,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10980,
											"end": 10992,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10740,
											"end": 10998,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 11003,
											"end": 11276,
											"name": "tag",
											"source": 1,
											"value": "190"
										},
										{
											"begin": 11003,
											"end": 11276,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11003,
											"end": 11276,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 11186,
											"end": 11192,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 11178,
											"end": 11184,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 11173,
											"end": 11176,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 11160,
											"end": 11193,
											"name": "CALLDATACOPY",
											"source": 1
										},
										{
											"begin": 11212,
											"end": 11228,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 11212,
											"end": 11228,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 11237,
											"end": 11252,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 11237,
											"end": 11252,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 11237,
											"end": 11252,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 11212,
											"end": 11228,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 11150,
											"end": 11276,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11150,
											"end": 11276,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 11281,
											"end": 11555,
											"name": "tag",
											"source": 1,
											"value": "314"
										},
										{
											"begin": 11281,
											"end": 11555,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11281,
											"end": 11555,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 11448,
											"end": 11454,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 11442,
											"end": 11455,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 11464,
											"end": 11517,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "580"
										},
										{
											"begin": 11510,
											"end": 11516,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 11505,
											"end": 11508,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 11498,
											"end": 11502,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 11490,
											"end": 11496,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 11486,
											"end": 11503,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 11464,
											"end": 11517,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "532"
										},
										{
											"begin": 11464,
											"end": 11517,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 11464,
											"end": 11517,
											"name": "tag",
											"source": 1,
											"value": "580"
										},
										{
											"begin": 11464,
											"end": 11517,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11533,
											"end": 11549,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 11533,
											"end": 11549,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 11533,
											"end": 11549,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 11533,
											"end": 11549,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 11533,
											"end": 11549,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 11418,
											"end": 11555,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11418,
											"end": 11555,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 11560,
											"end": 12063,
											"name": "tag",
											"source": 1,
											"value": "474"
										},
										{
											"begin": 11560,
											"end": 12063,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 11846,
											"end": 11872,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 11846,
											"end": 11872,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 11909,
											"end": 11911,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 11905,
											"end": 11920,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 11905,
											"end": 11920,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 11905,
											"end": 11920,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 11905,
											"end": 11920,
											"name": "SHL",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 11901,
											"end": 11954,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 11897,
											"end": 11898,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 11888,
											"end": 11899,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 11888,
											"end": 11899,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 11881,
											"end": 11955,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 11980,
											"end": 11982,
											"name": "PUSH",
											"source": 1,
											"value": "15"
										},
										{
											"begin": 11971,
											"end": 11983,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 11971,
											"end": 11983,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 11964,
											"end": 11992,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 11964,
											"end": 11992,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 11964,
											"end": 11992,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 11964,
											"end": 11992,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 12017,
											"end": 12019,
											"name": "PUSH",
											"source": 1,
											"value": "35"
										},
										{
											"begin": 12008,
											"end": 12020,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 12008,
											"end": 12020,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 12001,
											"end": 12029,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 12054,
											"end": 12056,
											"name": "PUSH",
											"source": 1,
											"value": "55"
										},
										{
											"begin": 12045,
											"end": 12057,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 12045,
											"end": 12057,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 11836,
											"end": 12063,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 12068,
											"end": 12271,
											"name": "tag",
											"source": 1,
											"value": "48"
										},
										{
											"begin": 12068,
											"end": 12271,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 12232,
											"end": 12264,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 12232,
											"end": 12264,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 12232,
											"end": 12264,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 12232,
											"end": 12264,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 12214,
											"end": 12265,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 12214,
											"end": 12265,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 12202,
											"end": 12204,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 12187,
											"end": 12205,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 12187,
											"end": 12205,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 12169,
											"end": 12271,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 12492,
											"end": 12804,
											"name": "tag",
											"source": 1,
											"value": "172"
										},
										{
											"begin": 12492,
											"end": 12804,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 12730,
											"end": 12745,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 12730,
											"end": 12745,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 12730,
											"end": 12745,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 12712,
											"end": 12746,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 12712,
											"end": 12746,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 12782,
											"end": 12797,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 12782,
											"end": 12797,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 12777,
											"end": 12779,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 12762,
											"end": 12780,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 12762,
											"end": 12780,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 12755,
											"end": 12798,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 12662,
											"end": 12664,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 12647,
											"end": 12665,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 12647,
											"end": 12665,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 12629,
											"end": 12804,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 12809,
											"end": 13569,
											"name": "tag",
											"source": 1,
											"value": "128"
										},
										{
											"begin": 12809,
											"end": 13569,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 13206,
											"end": 13221,
											"name": "SWAP9",
											"source": 1
										},
										{
											"begin": 13206,
											"end": 13221,
											"name": "DUP10",
											"source": 1
										},
										{
											"begin": 13206,
											"end": 13221,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 13188,
											"end": 13222,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 13188,
											"end": 13222,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 13258,
											"end": 13273,
											"name": "SWAP7",
											"source": 1
										},
										{
											"begin": 13258,
											"end": 13273,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 13258,
											"end": 13273,
											"name": "SWAP8",
											"source": 1
										},
										{
											"begin": 13258,
											"end": 13273,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 13253,
											"end": 13255,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 13238,
											"end": 13256,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 13238,
											"end": 13256,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 13231,
											"end": 13274,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 13305,
											"end": 13307,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 13290,
											"end": 13308,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 13290,
											"end": 13308,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 13283,
											"end": 13317,
											"name": "SWAP5",
											"source": 1
										},
										{
											"begin": 13283,
											"end": 13317,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 13283,
											"end": 13317,
											"name": "SWAP5",
											"source": 1
										},
										{
											"begin": 13283,
											"end": 13317,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 13348,
											"end": 13350,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 13333,
											"end": 13351,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 13333,
											"end": 13351,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 13326,
											"end": 13360,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 13326,
											"end": 13360,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 13326,
											"end": 13360,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 13326,
											"end": 13360,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 13404,
											"end": 13418,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 13397,
											"end": 13419,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 13391,
											"end": 13394,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 13376,
											"end": 13395,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 13376,
											"end": 13395,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 13369,
											"end": 13420,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 13469,
											"end": 13473,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 13457,
											"end": 13474,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 13168,
											"end": 13171,
											"name": "PUSH",
											"source": 1,
											"value": "A0"
										},
										{
											"begin": 13436,
											"end": 13455,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 13436,
											"end": 13455,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 13429,
											"end": 13475,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 13506,
											"end": 13509,
											"name": "PUSH",
											"source": 1,
											"value": "C0"
										},
										{
											"begin": 13491,
											"end": 13510,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 13491,
											"end": 13510,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 13484,
											"end": 13519,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 13550,
											"end": 13553,
											"name": "PUSH",
											"source": 1,
											"value": "E0"
										},
										{
											"begin": 13535,
											"end": 13554,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 13535,
											"end": 13554,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 13528,
											"end": 13563,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 13528,
											"end": 13563,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 13528,
											"end": 13563,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 13528,
											"end": 13563,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 13137,
											"end": 13140,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 13122,
											"end": 13141,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 13122,
											"end": 13141,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 13104,
											"end": 13569,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 13574,
											"end": 14252,
											"name": "tag",
											"source": 1,
											"value": "285"
										},
										{
											"begin": 13574,
											"end": 14252,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 13949,
											"end": 13964,
											"name": "SWAP8",
											"source": 1
										},
										{
											"begin": 13949,
											"end": 13964,
											"name": "DUP9",
											"source": 1
										},
										{
											"begin": 13949,
											"end": 13964,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 13931,
											"end": 13965,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 13931,
											"end": 13965,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 14001,
											"end": 14016,
											"name": "SWAP6",
											"source": 1
										},
										{
											"begin": 14001,
											"end": 14016,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 14001,
											"end": 14016,
											"name": "SWAP7",
											"source": 1
										},
										{
											"begin": 14001,
											"end": 14016,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 13996,
											"end": 13998,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 13981,
											"end": 13999,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 13981,
											"end": 13999,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 13974,
											"end": 14017,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 14048,
											"end": 14050,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 14033,
											"end": 14051,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 14033,
											"end": 14051,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 14026,
											"end": 14060,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 14026,
											"end": 14060,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 14026,
											"end": 14060,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 14026,
											"end": 14060,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 14091,
											"end": 14093,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 14076,
											"end": 14094,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 14076,
											"end": 14094,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 14069,
											"end": 14103,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 14069,
											"end": 14103,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 14069,
											"end": 14103,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 14069,
											"end": 14103,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 14152,
											"end": 14156,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 14140,
											"end": 14157,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 14134,
											"end": 14137,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 14119,
											"end": 14138,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 14119,
											"end": 14138,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 14112,
											"end": 14158,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 13911,
											"end": 13914,
											"name": "PUSH",
											"source": 1,
											"value": "A0"
										},
										{
											"begin": 14174,
											"end": 14193,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 14174,
											"end": 14193,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 14167,
											"end": 14202,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 14233,
											"end": 14236,
											"name": "PUSH",
											"source": 1,
											"value": "C0"
										},
										{
											"begin": 14218,
											"end": 14237,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 14218,
											"end": 14237,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 14211,
											"end": 14246,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 14211,
											"end": 14246,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 14211,
											"end": 14246,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 14211,
											"end": 14246,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 13880,
											"end": 13883,
											"name": "PUSH",
											"source": 1,
											"value": "E0"
										},
										{
											"begin": 13865,
											"end": 13884,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 13865,
											"end": 13884,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 13847,
											"end": 14252,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 14257,
											"end": 14645,
											"name": "tag",
											"source": 1,
											"value": "472"
										},
										{
											"begin": 14257,
											"end": 14645,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14513,
											"end": 14528,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 14513,
											"end": 14528,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 14513,
											"end": 14528,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 14495,
											"end": 14529,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 14495,
											"end": 14529,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 14565,
											"end": 14580,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 14565,
											"end": 14580,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 14565,
											"end": 14580,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 14565,
											"end": 14580,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 14560,
											"end": 14562,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 14545,
											"end": 14563,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 14545,
											"end": 14563,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 14538,
											"end": 14581,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 14629,
											"end": 14637,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFF"
										},
										{
											"begin": 14617,
											"end": 14638,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 14617,
											"end": 14638,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 14617,
											"end": 14638,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 14612,
											"end": 14614,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 14597,
											"end": 14615,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 14597,
											"end": 14615,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 14590,
											"end": 14639,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 14445,
											"end": 14447,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 14430,
											"end": 14448,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 14430,
											"end": 14448,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 14412,
											"end": 14645,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 14650,
											"end": 15025,
											"name": "tag",
											"source": 1,
											"value": "458"
										},
										{
											"begin": 14650,
											"end": 15025,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14908,
											"end": 14923,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 14908,
											"end": 14923,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 14908,
											"end": 14923,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 14890,
											"end": 14924,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 14890,
											"end": 14924,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 14960,
											"end": 14975,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 14960,
											"end": 14975,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 14960,
											"end": 14975,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 14960,
											"end": 14975,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 14955,
											"end": 14957,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 14940,
											"end": 14958,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 14940,
											"end": 14958,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 14933,
											"end": 14976,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 15007,
											"end": 15009,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 14992,
											"end": 15010,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 14992,
											"end": 15010,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 14985,
											"end": 15019,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 14985,
											"end": 15019,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 14985,
											"end": 15019,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 14985,
											"end": 15019,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 14840,
											"end": 14842,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 14825,
											"end": 14843,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 14825,
											"end": 14843,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 14807,
											"end": 15025,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 15030,
											"end": 15600,
											"name": "tag",
											"source": 1,
											"value": "336"
										},
										{
											"begin": 15030,
											"end": 15600,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 15319,
											"end": 15334,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 15319,
											"end": 15334,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 15319,
											"end": 15334,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 15301,
											"end": 15335,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 15301,
											"end": 15335,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 15378,
											"end": 15392,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 15378,
											"end": 15392,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 15371,
											"end": 15393,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 15366,
											"end": 15368,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 15351,
											"end": 15369,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 15351,
											"end": 15369,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 15344,
											"end": 15394,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 15425,
											"end": 15427,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 15410,
											"end": 15428,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 15410,
											"end": 15428,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 15403,
											"end": 15437,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 15403,
											"end": 15437,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 15403,
											"end": 15437,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 15473,
											"end": 15488,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 15473,
											"end": 15488,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 15468,
											"end": 15470,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 15453,
											"end": 15471,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 15453,
											"end": 15471,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 15446,
											"end": 15489,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 15281,
											"end": 15284,
											"name": "PUSH",
											"source": 1,
											"value": "A0"
										},
										{
											"begin": 15520,
											"end": 15523,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 15505,
											"end": 15524,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 15505,
											"end": 15524,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 15498,
											"end": 15530,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 15498,
											"end": 15530,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 15498,
											"end": 15530,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 15030,
											"end": 15600,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 15030,
											"end": 15600,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 15547,
											"end": 15594,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "590"
										},
										{
											"begin": 15547,
											"end": 15594,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 15574,
											"end": 15593,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 15574,
											"end": 15593,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 15566,
											"end": 15572,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 15547,
											"end": 15594,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "574"
										},
										{
											"begin": 15547,
											"end": 15594,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 15547,
											"end": 15594,
											"name": "tag",
											"source": 1,
											"value": "590"
										},
										{
											"begin": 15547,
											"end": 15594,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 15539,
											"end": 15594,
											"name": "SWAP8",
											"source": 1
										},
										{
											"begin": 15253,
											"end": 15600,
											"name": "SWAP7",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 15253,
											"end": 15600,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 15605,
											"end": 15879,
											"name": "tag",
											"source": 1,
											"value": "375"
										},
										{
											"begin": 15605,
											"end": 15879,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 15797,
											"end": 15829,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 15797,
											"end": 15829,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 15797,
											"end": 15829,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 15797,
											"end": 15829,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 15779,
											"end": 15830,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 15779,
											"end": 15830,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 15861,
											"end": 15863,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 15846,
											"end": 15864,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 15846,
											"end": 15864,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 15839,
											"end": 15873,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 15767,
											"end": 15769,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 15752,
											"end": 15770,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 15752,
											"end": 15770,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 15734,
											"end": 15879,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 15884,
											"end": 16690,
											"name": "tag",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 15884,
											"end": 16690,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 15884,
											"end": 16690,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 16073,
											"end": 16075,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 16113,
											"end": 16115,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 16102,
											"end": 16111,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 16098,
											"end": 16116,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 16143,
											"end": 16145,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 16132,
											"end": 16141,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 16125,
											"end": 16146,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 16166,
											"end": 16172,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 16201,
											"end": 16207,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 16195,
											"end": 16208,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 16232,
											"end": 16238,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 16224,
											"end": 16230,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 16217,
											"end": 16239,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 16270,
											"end": 16272,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 16259,
											"end": 16268,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 16255,
											"end": 16273,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 16248,
											"end": 16273,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 16248,
											"end": 16273,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 16333,
											"end": 16335,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 16327,
											"end": 16329,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 16319,
											"end": 16325,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 16315,
											"end": 16330,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 16304,
											"end": 16313,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 16300,
											"end": 16331,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 16296,
											"end": 16336,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 16282,
											"end": 16336,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 16282,
											"end": 16336,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 16371,
											"end": 16373,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 16363,
											"end": 16369,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 16359,
											"end": 16374,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 16392,
											"end": 16396,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 16405,
											"end": 16661,
											"name": "tag",
											"source": 1,
											"value": "593"
										},
										{
											"begin": 16405,
											"end": 16661,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 16419,
											"end": 16425,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 16416,
											"end": 16417,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 16413,
											"end": 16426,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 16405,
											"end": 16661,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 16405,
											"end": 16661,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "595"
										},
										{
											"begin": 16405,
											"end": 16661,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 16512,
											"end": 16514,
											"name": "PUSH",
											"source": 1,
											"value": "3F"
										},
										{
											"begin": 16508,
											"end": 16515,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 16496,
											"end": 16505,
											"name": "DUP9",
											"source": 1
										},
										{
											"begin": 16488,
											"end": 16494,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 16484,
											"end": 16506,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 16480,
											"end": 16516,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 16475,
											"end": 16478,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 16468,
											"end": 16517,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 16540,
											"end": 16581,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "596"
										},
										{
											"begin": 16574,
											"end": 16580,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 16565,
											"end": 16571,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 16559,
											"end": 16572,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 16540,
											"end": 16581,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "574"
										},
										{
											"begin": 16540,
											"end": 16581,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 16540,
											"end": 16581,
											"name": "tag",
											"source": 1,
											"value": "596"
										},
										{
											"begin": 16540,
											"end": 16581,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 16530,
											"end": 16581,
											"name": "SWAP5",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 16639,
											"end": 16651,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 16639,
											"end": 16651,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 16639,
											"end": 16651,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 16639,
											"end": 16651,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 16604,
											"end": 16619,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 16604,
											"end": 16619,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 16604,
											"end": 16619,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 16604,
											"end": 16619,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 16441,
											"end": 16442,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 16434,
											"end": 16443,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 16405,
											"end": 16661,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "593"
										},
										{
											"begin": 16405,
											"end": 16661,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 16405,
											"end": 16661,
											"name": "tag",
											"source": 1,
											"value": "595"
										},
										{
											"begin": 16405,
											"end": 16661,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 16678,
											"end": 16684,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 16678,
											"end": 16684,
											"name": "SWAP8",
											"source": 1
										},
										{
											"begin": 16053,
											"end": 16690,
											"name": "SWAP7",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 16053,
											"end": 16690,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 16695,
											"end": 16916,
											"name": "tag",
											"source": 1,
											"value": "199"
										},
										{
											"begin": 16695,
											"end": 16916,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 16695,
											"end": 16916,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 16844,
											"end": 16846,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 16833,
											"end": 16842,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 16826,
											"end": 16847,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 16864,
											"end": 16910,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "493"
										},
										{
											"begin": 16906,
											"end": 16908,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 16895,
											"end": 16904,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 16891,
											"end": 16909,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 16883,
											"end": 16889,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 16864,
											"end": 16910,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "574"
										},
										{
											"begin": 16864,
											"end": 16910,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 16921,
											"end": 17263,
											"name": "tag",
											"source": 1,
											"value": "142"
										},
										{
											"begin": 16921,
											"end": 17263,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 17123,
											"end": 17125,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 17105,
											"end": 17126,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 17105,
											"end": 17126,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 17105,
											"end": 17126,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 17162,
											"end": 17164,
											"name": "PUSH",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 17142,
											"end": 17160,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 17142,
											"end": 17160,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 17142,
											"end": 17160,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 17135,
											"end": 17165,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "496E73756666696369656E74205745544839"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 17196,
											"end": 17198,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 17181,
											"end": 17199,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 17181,
											"end": 17199,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 17174,
											"end": 17222,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 17254,
											"end": 17256,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 17239,
											"end": 17257,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 17239,
											"end": 17257,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 17095,
											"end": 17263,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 17268,
											"end": 17610,
											"name": "tag",
											"source": 1,
											"value": "253"
										},
										{
											"begin": 17268,
											"end": 17610,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 17470,
											"end": 17472,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 17452,
											"end": 17473,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 17452,
											"end": 17473,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 17452,
											"end": 17473,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 17509,
											"end": 17511,
											"name": "PUSH",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 17489,
											"end": 17507,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 17489,
											"end": 17507,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 17489,
											"end": 17507,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 17482,
											"end": 17512,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "24B739BAB33334B1B4B2B73A103A37B5B2B7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 17543,
											"end": 17545,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 17528,
											"end": 17546,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 17528,
											"end": 17546,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 17521,
											"end": 17569,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 17601,
											"end": 17603,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 17586,
											"end": 17604,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 17586,
											"end": 17604,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 17442,
											"end": 17610,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 17615,
											"end": 17956,
											"name": "tag",
											"source": 1,
											"value": "445"
										},
										{
											"begin": 17615,
											"end": 17956,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 17817,
											"end": 17819,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 17799,
											"end": 17820,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 17799,
											"end": 17820,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 17799,
											"end": 17820,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 17856,
											"end": 17858,
											"name": "PUSH",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 17836,
											"end": 17854,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 17836,
											"end": 17854,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 17836,
											"end": 17854,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 17829,
											"end": 17859,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "746F55696E7432345F6F766572666C6F77"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "78"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 17890,
											"end": 17892,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 17875,
											"end": 17893,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 17875,
											"end": 17893,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 17868,
											"end": 17915,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 17947,
											"end": 17949,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 17932,
											"end": 17950,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 17932,
											"end": 17950,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 17789,
											"end": 17956,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 17961,
											"end": 18287,
											"name": "tag",
											"source": 1,
											"value": "320"
										},
										{
											"begin": 17961,
											"end": 18287,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 18163,
											"end": 18165,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 18145,
											"end": 18166,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 18145,
											"end": 18166,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 18145,
											"end": 18166,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 18202,
											"end": 18203,
											"name": "PUSH",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 18182,
											"end": 18200,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 18182,
											"end": 18200,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 18182,
											"end": 18200,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 18175,
											"end": 18204,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "535445"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 18235,
											"end": 18237,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 18220,
											"end": 18238,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 18220,
											"end": 18238,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 18213,
											"end": 18246,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 18278,
											"end": 18280,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 18263,
											"end": 18281,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 18263,
											"end": 18281,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 18135,
											"end": 18287,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 18292,
											"end": 18630,
											"name": "tag",
											"source": 1,
											"value": "424"
										},
										{
											"begin": 18292,
											"end": 18630,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 18494,
											"end": 18496,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 18476,
											"end": 18497,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 18476,
											"end": 18497,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 18476,
											"end": 18497,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 18533,
											"end": 18535,
											"name": "PUSH",
											"source": 1,
											"value": "E"
										},
										{
											"begin": 18513,
											"end": 18531,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 18513,
											"end": 18531,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 18513,
											"end": 18531,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 18506,
											"end": 18536,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "736C6963655F6F766572666C6F77"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "90"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 18567,
											"end": 18569,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 18552,
											"end": 18570,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 18552,
											"end": 18570,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 18545,
											"end": 18589,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 18621,
											"end": 18623,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 18606,
											"end": 18624,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 18606,
											"end": 18624,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 18466,
											"end": 18630,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 18635,
											"end": 18960,
											"name": "tag",
											"source": 1,
											"value": "386"
										},
										{
											"begin": 18635,
											"end": 18960,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 18837,
											"end": 18839,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 18819,
											"end": 18840,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 18819,
											"end": 18840,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 18819,
											"end": 18840,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 18876,
											"end": 18877,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 18856,
											"end": 18874,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 18856,
											"end": 18874,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 18856,
											"end": 18874,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 18849,
											"end": 18878,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "14D5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 18909,
											"end": 18911,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 18894,
											"end": 18912,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 18894,
											"end": 18912,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 18887,
											"end": 18919,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 18951,
											"end": 18953,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 18936,
											"end": 18954,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 18936,
											"end": 18954,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 18809,
											"end": 18960,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 18965,
											"end": 19309,
											"name": "tag",
											"source": 1,
											"value": "448"
										},
										{
											"begin": 18965,
											"end": 19309,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 19167,
											"end": 19169,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 19149,
											"end": 19170,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 19149,
											"end": 19170,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 19149,
											"end": 19170,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 19206,
											"end": 19208,
											"name": "PUSH",
											"source": 1,
											"value": "14"
										},
										{
											"begin": 19186,
											"end": 19204,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 19186,
											"end": 19204,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 19186,
											"end": 19204,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 19179,
											"end": 19209,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "746F55696E7432345F6F75744F66426F756E6473"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 19240,
											"end": 19242,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 19225,
											"end": 19243,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 19225,
											"end": 19243,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 19218,
											"end": 19268,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 19300,
											"end": 19302,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 19285,
											"end": 19303,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 19285,
											"end": 19303,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 19139,
											"end": 19309,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 19314,
											"end": 19646,
											"name": "tag",
											"source": 1,
											"value": "27"
										},
										{
											"begin": 19314,
											"end": 19646,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 19516,
											"end": 19518,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 19498,
											"end": 19519,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 19498,
											"end": 19519,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 19498,
											"end": 19519,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 19555,
											"end": 19556,
											"name": "PUSH",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 19535,
											"end": 19553,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 19535,
											"end": 19553,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 19535,
											"end": 19553,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 19528,
											"end": 19557,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E6F74205745544839"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 19588,
											"end": 19590,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 19573,
											"end": 19591,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 19573,
											"end": 19591,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 19566,
											"end": 19605,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 19637,
											"end": 19639,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 19622,
											"end": 19640,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 19622,
											"end": 19640,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 19488,
											"end": 19646,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 19651,
											"end": 19996,
											"name": "tag",
											"source": 1,
											"value": "441"
										},
										{
											"begin": 19651,
											"end": 19996,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 19853,
											"end": 19855,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 19835,
											"end": 19856,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 19835,
											"end": 19856,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 19835,
											"end": 19856,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 19892,
											"end": 19894,
											"name": "PUSH",
											"source": 1,
											"value": "15"
										},
										{
											"begin": 19872,
											"end": 19890,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 19872,
											"end": 19890,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 19872,
											"end": 19890,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 19865,
											"end": 19895,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "746F416464726573735F6F75744F66426F756E6473"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "58"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 19926,
											"end": 19928,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 19911,
											"end": 19929,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 19911,
											"end": 19929,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 19904,
											"end": 19955,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 19987,
											"end": 19989,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 19972,
											"end": 19990,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 19972,
											"end": 19990,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 19825,
											"end": 19996,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 20001,
											"end": 20327,
											"name": "tag",
											"source": 1,
											"value": "468"
										},
										{
											"begin": 20001,
											"end": 20327,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 20203,
											"end": 20205,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 20185,
											"end": 20206,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 20185,
											"end": 20206,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 20185,
											"end": 20206,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 20242,
											"end": 20243,
											"name": "PUSH",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 20222,
											"end": 20240,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 20222,
											"end": 20240,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 20222,
											"end": 20240,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 20215,
											"end": 20244,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "29AA23"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 20275,
											"end": 20277,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 20260,
											"end": 20278,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 20260,
											"end": 20278,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 20253,
											"end": 20286,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 20318,
											"end": 20320,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 20303,
											"end": 20321,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 20303,
											"end": 20321,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 20175,
											"end": 20327,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 20332,
											"end": 20674,
											"name": "tag",
											"source": 1,
											"value": "244"
										},
										{
											"begin": 20332,
											"end": 20674,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 20534,
											"end": 20536,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 20516,
											"end": 20537,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 20516,
											"end": 20537,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 20516,
											"end": 20537,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 20573,
											"end": 20575,
											"name": "PUSH",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 20553,
											"end": 20571,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 20553,
											"end": 20571,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 20553,
											"end": 20571,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 20546,
											"end": 20576,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "151BDBC81B5D58DA081C995C5D595CDD1959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 20607,
											"end": 20609,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 20592,
											"end": 20610,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 20592,
											"end": 20610,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 20585,
											"end": 20633,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 20665,
											"end": 20667,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 20650,
											"end": 20668,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 20650,
											"end": 20668,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 20506,
											"end": 20674,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 20679,
											"end": 21022,
											"name": "tag",
											"source": 1,
											"value": "109"
										},
										{
											"begin": 20679,
											"end": 21022,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 20881,
											"end": 20883,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 20863,
											"end": 20884,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 20863,
											"end": 20884,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 20863,
											"end": 20884,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 20920,
											"end": 20922,
											"name": "PUSH",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 20900,
											"end": 20918,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 20900,
											"end": 20918,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 20900,
											"end": 20918,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 20893,
											"end": 20923,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "151C985B9CD858DD1A5BDB881D1BDBC81BDB19"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6A"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 20954,
											"end": 20956,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 20939,
											"end": 20957,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 20939,
											"end": 20957,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 20932,
											"end": 20981,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 21013,
											"end": 21015,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 20998,
											"end": 21016,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 20998,
											"end": 21016,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 20853,
											"end": 21022,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 21027,
											"end": 21368,
											"name": "tag",
											"source": 1,
											"value": "429"
										},
										{
											"begin": 21027,
											"end": 21368,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 21229,
											"end": 21231,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 21211,
											"end": 21232,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 21211,
											"end": 21232,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 21211,
											"end": 21232,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 21268,
											"end": 21270,
											"name": "PUSH",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 21248,
											"end": 21266,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 21248,
											"end": 21266,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 21248,
											"end": 21266,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 21241,
											"end": 21271,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "736C6963655F6F75744F66426F756E6473"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "78"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 21302,
											"end": 21304,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 21287,
											"end": 21305,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 21287,
											"end": 21305,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 21280,
											"end": 21327,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 21359,
											"end": 21361,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 21344,
											"end": 21362,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 21344,
											"end": 21362,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 21201,
											"end": 21368,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 21373,
											"end": 21716,
											"name": "tag",
											"source": 1,
											"value": "125"
										},
										{
											"begin": 21373,
											"end": 21716,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 21575,
											"end": 21577,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 21557,
											"end": 21578,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 21557,
											"end": 21578,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 21557,
											"end": 21578,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 21614,
											"end": 21616,
											"name": "PUSH",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 21594,
											"end": 21612,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 21594,
											"end": 21612,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 21594,
											"end": 21612,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 21587,
											"end": 21617,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "151BDBC81B1A5D1D1B19481C9958D95A5D9959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6A"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 21648,
											"end": 21650,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 21633,
											"end": 21651,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 21633,
											"end": 21651,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 21626,
											"end": 21675,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 21707,
											"end": 21709,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 21692,
											"end": 21710,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 21692,
											"end": 21710,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 21547,
											"end": 21716,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 21721,
											"end": 22063,
											"name": "tag",
											"source": 1,
											"value": "438"
										},
										{
											"begin": 21721,
											"end": 22063,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 21923,
											"end": 21925,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 21905,
											"end": 21926,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 21905,
											"end": 21926,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 21905,
											"end": 21926,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 21962,
											"end": 21964,
											"name": "PUSH",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 21942,
											"end": 21960,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 21942,
											"end": 21960,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 21942,
											"end": 21960,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 21935,
											"end": 21965,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "746F416464726573735F6F766572666C6F77"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 21996,
											"end": 21998,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 21981,
											"end": 21999,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 21981,
											"end": 21999,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 21974,
											"end": 22022,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 22054,
											"end": 22056,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 22039,
											"end": 22057,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 22039,
											"end": 22057,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 21895,
											"end": 22063,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 22068,
											"end": 22542,
											"name": "tag",
											"source": 1,
											"value": "334"
										},
										{
											"begin": 22068,
											"end": 22542,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 22068,
											"end": 22542,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 22265,
											"end": 22267,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 22254,
											"end": 22263,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 22247,
											"end": 22268,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 22303,
											"end": 22309,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 22297,
											"end": 22310,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 22346,
											"end": 22350,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 22341,
											"end": 22343,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 22330,
											"end": 22339,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 22326,
											"end": 22344,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 22319,
											"end": 22351,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 22374,
											"end": 22426,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "615"
										},
										{
											"begin": 22422,
											"end": 22424,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 22411,
											"end": 22420,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 22407,
											"end": 22425,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 22393,
											"end": 22405,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 22374,
											"end": 22426,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "574"
										},
										{
											"begin": 22374,
											"end": 22426,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 22374,
											"end": 22426,
											"name": "tag",
											"source": 1,
											"value": "615"
										},
										{
											"begin": 22374,
											"end": 22426,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 22486,
											"end": 22488,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 22474,
											"end": 22489,
											"name": "SWAP5",
											"source": 1
										},
										{
											"begin": 22474,
											"end": 22489,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 22474,
											"end": 22489,
											"name": "SWAP5",
											"source": 1
										},
										{
											"begin": 22474,
											"end": 22489,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 22468,
											"end": 22490,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 22464,
											"end": 22512,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 22457,
											"end": 22461,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 22442,
											"end": 22462,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 22442,
											"end": 22462,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 22442,
											"end": 22462,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 22442,
											"end": 22462,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 22435,
											"end": 22513,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 22435,
											"end": 22513,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 22435,
											"end": 22513,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 22435,
											"end": 22513,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 22360,
											"end": 22426,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 22360,
											"end": 22426,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 22237,
											"end": 22542,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 22237,
											"end": 22542,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 22547,
											"end": 22724,
											"name": "tag",
											"source": 1,
											"value": "35"
										},
										{
											"begin": 22547,
											"end": 22724,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 22693,
											"end": 22718,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 22693,
											"end": 22718,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 22693,
											"end": 22718,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 22681,
											"end": 22683,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 22666,
											"end": 22684,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 22666,
											"end": 22684,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 22648,
											"end": 22724,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 22729,
											"end": 23262,
											"name": "tag",
											"source": 1,
											"value": "188"
										},
										{
											"begin": 22729,
											"end": 23262,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 22729,
											"end": 23262,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 22729,
											"end": 23262,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 22872,
											"end": 22883,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 22859,
											"end": 22884,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 22966,
											"end": 22968,
											"name": "PUSH",
											"source": 1,
											"value": "1E"
										},
										{
											"begin": 22962,
											"end": 22969,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 22951,
											"end": 22959,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 22935,
											"end": 22949,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 22931,
											"end": 22960,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 22927,
											"end": 22970,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 22907,
											"end": 22925,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 22903,
											"end": 22971,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 22893,
											"end": 22895,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "618"
										},
										{
											"begin": 22893,
											"end": 22895,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 22988,
											"end": 22992,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 22982,
											"end": 22986,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 22975,
											"end": 22993,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 22893,
											"end": 22895,
											"name": "tag",
											"source": 1,
											"value": "618"
										},
										{
											"begin": 22893,
											"end": 22895,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 23018,
											"end": 23051,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 23018,
											"end": 23051,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 23070,
											"end": 23090,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 23070,
											"end": 23090,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 23070,
											"end": 23090,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 23113,
											"end": 23131,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 23102,
											"end": 23132,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 23102,
											"end": 23132,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 23099,
											"end": 23101,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 23099,
											"end": 23101,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "619"
										},
										{
											"begin": 23099,
											"end": 23101,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 23148,
											"end": 23152,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 23142,
											"end": 23146,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 23135,
											"end": 23153,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 23099,
											"end": 23101,
											"name": "tag",
											"source": 1,
											"value": "619"
										},
										{
											"begin": 23099,
											"end": 23101,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 23184,
											"end": 23188,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 23172,
											"end": 23189,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 23172,
											"end": 23189,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 23215,
											"end": 23229,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 23211,
											"end": 23238,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 23211,
											"end": 23238,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 23211,
											"end": 23238,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 23201,
											"end": 23239,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 23201,
											"end": 23239,
											"name": "SGT",
											"source": 1
										},
										{
											"begin": 23198,
											"end": 23200,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 23198,
											"end": 23200,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "620"
										},
										{
											"begin": 23198,
											"end": 23200,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 23252,
											"end": 23253,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 23249,
											"end": 23250,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 23242,
											"end": 23254,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 23198,
											"end": 23200,
											"name": "tag",
											"source": 1,
											"value": "620"
										},
										{
											"begin": 23198,
											"end": 23200,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 22823,
											"end": 23262,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 22823,
											"end": 23262,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 22823,
											"end": 23262,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 22823,
											"end": 23262,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 22823,
											"end": 23262,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 22823,
											"end": 23262,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 23267,
											"end": 23509,
											"name": "tag",
											"source": 1,
											"value": "486"
										},
										{
											"begin": 23267,
											"end": 23509,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 23337,
											"end": 23339,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 23331,
											"end": 23340,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 23367,
											"end": 23384,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 23367,
											"end": 23384,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 23367,
											"end": 23384,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 23414,
											"end": 23432,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 23399,
											"end": 23433,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 23399,
											"end": 23433,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 23435,
											"end": 23457,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 23435,
											"end": 23457,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 23435,
											"end": 23457,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 23396,
											"end": 23458,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 23393,
											"end": 23395,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 23393,
											"end": 23395,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "622"
										},
										{
											"begin": 23393,
											"end": 23395,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 23461,
											"end": 23470,
											"name": "INVALID",
											"source": 1
										},
										{
											"begin": 23393,
											"end": 23395,
											"name": "tag",
											"source": 1,
											"value": "622"
										},
										{
											"begin": 23393,
											"end": 23395,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 23488,
											"end": 23490,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 23481,
											"end": 23503,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 23311,
											"end": 23509,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 23311,
											"end": 23509,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 23311,
											"end": 23509,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 23514,
											"end": 23695,
											"name": "tag",
											"source": 1,
											"value": "485"
										},
										{
											"begin": 23514,
											"end": 23695,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 23514,
											"end": 23695,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 23597,
											"end": 23615,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 23589,
											"end": 23595,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 23586,
											"end": 23616,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 23583,
											"end": 23585,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 23583,
											"end": 23585,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "624"
										},
										{
											"begin": 23583,
											"end": 23585,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 23619,
											"end": 23628,
											"name": "INVALID",
											"source": 1
										},
										{
											"begin": 23583,
											"end": 23585,
											"name": "tag",
											"source": 1,
											"value": "624"
										},
										{
											"begin": 23583,
											"end": 23585,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 23678,
											"end": 23680,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 23655,
											"end": 23672,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 23651,
											"end": 23682,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 23684,
											"end": 23688,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 23647,
											"end": 23689,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 23647,
											"end": 23689,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 23573,
											"end": 23695,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 23700,
											"end": 23958,
											"name": "tag",
											"source": 1,
											"value": "532"
										},
										{
											"begin": 23700,
											"end": 23958,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 23772,
											"end": 23773,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 23782,
											"end": 23895,
											"name": "tag",
											"source": 1,
											"value": "626"
										},
										{
											"begin": 23782,
											"end": 23895,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 23796,
											"end": 23802,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 23793,
											"end": 23794,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 23790,
											"end": 23803,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 23782,
											"end": 23895,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 23782,
											"end": 23895,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "628"
										},
										{
											"begin": 23782,
											"end": 23895,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 23872,
											"end": 23883,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 23872,
											"end": 23883,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 23872,
											"end": 23883,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 23866,
											"end": 23884,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 23853,
											"end": 23864,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 23853,
											"end": 23864,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 23853,
											"end": 23864,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 23846,
											"end": 23885,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 23818,
											"end": 23820,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 23811,
											"end": 23821,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 23782,
											"end": 23895,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "626"
										},
										{
											"begin": 23782,
											"end": 23895,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 23782,
											"end": 23895,
											"name": "tag",
											"source": 1,
											"value": "628"
										},
										{
											"begin": 23782,
											"end": 23895,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 23913,
											"end": 23919,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 23910,
											"end": 23911,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 23907,
											"end": 23920,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 23904,
											"end": 23906,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 23904,
											"end": 23906,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "255"
										},
										{
											"begin": 23904,
											"end": 23906,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 23948,
											"end": 23949,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 23930,
											"end": 23946,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 23930,
											"end": 23946,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 23923,
											"end": 23950,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 23753,
											"end": 23958,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 23963,
											"end": 24096,
											"name": "tag",
											"source": 1,
											"value": "479"
										},
										{
											"begin": 23963,
											"end": 24096,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 24040,
											"end": 24071,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 24040,
											"end": 24071,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 24030,
											"end": 24072,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 24030,
											"end": 24072,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 24020,
											"end": 24022,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "631"
										},
										{
											"begin": 24020,
											"end": 24022,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 24086,
											"end": 24087,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 24083,
											"end": 24084,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 24076,
											"end": 24088,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 24020,
											"end": 24022,
											"name": "tag",
											"source": 1,
											"value": "631"
										},
										{
											"begin": 24020,
											"end": 24022,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 24010,
											"end": 24096,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 24010,
											"end": 24096,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"WETH9()": "4aa4a4fc",
							"exactInput((bytes,address,uint256,uint256,uint256))": "c04b8d59",
							"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": "414bf389",
							"exactOutput((bytes,address,uint256,uint256,uint256))": "f28c0498",
							"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": "db3e2198",
							"factory()": "c45a0155",
							"multicall(bytes[])": "ac9650d8",
							"refundETH()": "12210e8a",
							"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": "f3995c67",
							"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": "4659a494",
							"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": "a4a78f0c",
							"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": "c2e3140a",
							"sweepToken(address,uint256,address)": "df2ab5bb",
							"sweepTokenWithFee(address,uint256,address,uint256,address)": "e0e189a0",
							"uniswapV3SwapCallback(int256,int256,bytes)": "fa461e33",
							"unwrapWETH9(uint256,address)": "49404b7c",
							"unwrapWETH9WithFee(uint256,address,uint256,address)": "9b2c0a37"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH9\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"internalType\":\"struct ISwapRouter.ExactInputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ISwapRouter.ExactInputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"}],\"internalType\":\"struct ISwapRouter.ExactOutputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ISwapRouter.ExactOutputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitAllowed\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitAllowedIfNecessary\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitIfNecessary\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeBips\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"sweepTokenWithFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH9\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeBips\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH9WithFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"exactInput((bytes,address,uint256,uint256,uint256))\":{\"params\":{\"params\":\"The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\"},\"returns\":{\"amountOut\":\"The amount of the received token\"}},\"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"params\":{\"params\":\"The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\"},\"returns\":{\"amountOut\":\"The amount of the received token\"}},\"exactOutput((bytes,address,uint256,uint256,uint256))\":{\"params\":{\"params\":\"The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\"},\"returns\":{\"amountIn\":\"The amount of the input token\"}},\"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"params\":{\"params\":\"The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\"},\"returns\":{\"amountIn\":\"The amount of the input token\"}},\"multicall(bytes[])\":{\"details\":\"The `msg.value` should not be trusted for any method callable from multicall.\",\"params\":{\"data\":\"The encoded function data for each of the calls to make to this contract\"},\"returns\":{\"results\":\"The results from each of the calls passed in via data\"}},\"refundETH()\":{\"details\":\"Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount\"},\"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this).\",\"params\":{\"deadline\":\"A timestamp, the current blocktime must be less than or equal to this timestamp\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\",\"value\":\"The amount that can be spent of token\"}},\"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this)\",\"params\":{\"expiry\":\"The timestamp at which the permit is no longer valid\",\"nonce\":\"The current nonce of the owner\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this) Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.\",\"params\":{\"expiry\":\"The timestamp at which the permit is no longer valid\",\"nonce\":\"The current nonce of the owner\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this). Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit\",\"params\":{\"deadline\":\"A timestamp, the current blocktime must be less than or equal to this timestamp\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\",\"value\":\"The amount that can be spent of token\"}},\"sweepToken(address,uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing the token from users\",\"params\":{\"amountMinimum\":\"The minimum amount of token required for a transfer\",\"recipient\":\"The destination address of the token\",\"token\":\"The contract address of the token which will be transferred to `recipient`\"}},\"sweepTokenWithFee(address,uint256,address,uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing the token from users\"},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the IUniswapV3PoolActions#swap call\"}},\"unwrapWETH9(uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\",\"params\":{\"amountMinimum\":\"The minimum amount of WETH9 to unwrap\",\"recipient\":\"The address receiving ETH\"}},\"unwrapWETH9WithFee(uint256,address,uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\"}},\"stateVariables\":{\"DEFAULT_AMOUNT_IN_CACHED\":{\"details\":\"Used as the placeholder value for amountInCached, because the computed amount in for an exact output swap can never actually be this value\"},\"amountInCached\":{\"details\":\"Transient storage variable used for returning the computed amount in for an exact output swap.\"}},\"title\":\"Uniswap V3 Swap Router\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"exactInput((bytes,address,uint256,uint256,uint256))\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another along the specified path\"},\"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another token\"},\"exactOutput((bytes,address,uint256,uint256,uint256))\":{\"notice\":\"Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\"},\"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"notice\":\"Swaps as little as possible of one token for `amountOut` of another token\"},\"multicall(bytes[])\":{\"notice\":\"Call multiple functions in the current contract and return the data from all of them if they all succeed\"},\"refundETH()\":{\"notice\":\"Refunds any ETH balance held by this contract to the `msg.sender`\"},\"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend a given token from `msg.sender`\"},\"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\"},\"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\"},\"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend a given token from `msg.sender`\"},\"sweepToken(address,uint256,address)\":{\"notice\":\"Transfers the full amount of a token held by this contract to recipient\"},\"sweepTokenWithFee(address,uint256,address,uint256,address)\":{\"notice\":\"Transfers the full amount of a token held by this contract to recipient, with a percentage between 0 (exclusive) and 1 (inclusive) going to feeRecipient\"},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\"},\"unwrapWETH9(uint256,address)\":{\"notice\":\"Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\"},\"unwrapWETH9WithFee(uint256,address,uint256,address)\":{\"notice\":\"Unwraps the contract's WETH9 balance and sends it to recipient as ETH, with a percentage between 0 (exclusive), and 1 (inclusive) going to feeRecipient\"}},\"notice\":\"Router for stateless execution of swaps against Uniswap V3\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapRouter_flattened.sol\":\"SwapRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SwapRouter_flattened.sol\":{\"keccak256\":\"0xcf1b41bf0cccca5e629d64d60c6017a4d9216bcfc15f13cb44666bd333a64622\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb61746d170c341525404f902539ab06649109533f6db310ef3e0a39dfb00566\",\"dweb:/ipfs/QmWDhgoTVqeFhBxaK5cLCCmbL27rHHo48r8YnN3cLcfpmu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 2851,
								"contract": "contracts/SwapRouter_flattened.sol:SwapRouter",
								"label": "amountInCached",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"exactInput((bytes,address,uint256,uint256,uint256))": {
								"notice": "Swaps `amountIn` of one token for as much as possible of another along the specified path"
							},
							"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
								"notice": "Swaps `amountIn` of one token for as much as possible of another token"
							},
							"exactOutput((bytes,address,uint256,uint256,uint256))": {
								"notice": "Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)"
							},
							"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
								"notice": "Swaps as little as possible of one token for `amountOut` of another token"
							},
							"multicall(bytes[])": {
								"notice": "Call multiple functions in the current contract and return the data from all of them if they all succeed"
							},
							"refundETH()": {
								"notice": "Refunds any ETH balance held by this contract to the `msg.sender`"
							},
							"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend a given token from `msg.sender`"
							},
							"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter"
							},
							"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter"
							},
							"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend a given token from `msg.sender`"
							},
							"sweepToken(address,uint256,address)": {
								"notice": "Transfers the full amount of a token held by this contract to recipient"
							},
							"sweepTokenWithFee(address,uint256,address,uint256,address)": {
								"notice": "Transfers the full amount of a token held by this contract to recipient, with a percentage between 0 (exclusive) and 1 (inclusive) going to feeRecipient"
							},
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"notice": "Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap."
							},
							"unwrapWETH9(uint256,address)": {
								"notice": "Unwraps the contract's WETH9 balance and sends it to recipient as ETH."
							},
							"unwrapWETH9WithFee(uint256,address,uint256,address)": {
								"notice": "Unwraps the contract's WETH9 balance and sends it to recipient as ETH, with a percentage between 0 (exclusive), and 1 (inclusive) going to feeRecipient"
							}
						},
						"notice": "Router for stateless execution of swaps against Uniswap V3",
						"version": 1
					}
				},
				"TickMath": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"MAX_SQRT_RATIO": {
								"details": "The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)"
							},
							"MAX_TICK": {
								"details": "The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128"
							},
							"MIN_SQRT_RATIO": {
								"details": "The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)"
							},
							"MIN_TICK": {
								"details": "The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128"
							}
						},
						"title": "Math library for computing sqrt prices from ticks and vice versa",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/SwapRouter_flattened.sol\":67330:75859  library TickMath {\r... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/SwapRouter_flattened.sol\":67330:75859  library TickMath {\r... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122035831dca397cb4a1c31c27c6956927ffae3f0e6e9a4f3937a77b4050de698cf664736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122035831dca397cb4a1c31c27c6956927ffae3f0e6e9a4f3937a77b4050de698cf664736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATALOAD DUP4 SAR 0xCA CODECOPY PUSH29 0xB4A1C31C27C6956927FFAE3F0E6E9A4F3937A77B4050DE698CF664736F PUSH13 0x63430007060033000000000000 ",
							"sourceMap": "67330:8529:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122035831dca397cb4a1c31c27c6956927ffae3f0e6e9a4f3937a77b4050de698cf664736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATALOAD DUP4 SAR 0xCA CODECOPY PUSH29 0xB4A1C31C27C6956927FFAE3F0E6E9A4F3937A77B4050DE698CF664736F PUSH13 0x63430007060033000000000000 ",
							"sourceMap": "67330:8529:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"getSqrtRatioAtTick(int24)": "infinite",
								"getTickAtSqrtRatio(uint160)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 67330,
									"end": 75859,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 67330,
									"end": 75859,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 67330,
									"end": 75859,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 67330,
									"end": 75859,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 67330,
									"end": 75859,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 67330,
									"end": 75859,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 67330,
									"end": 75859,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 67330,
									"end": 75859,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 67330,
									"end": 75859,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 67330,
									"end": 75859,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 67330,
									"end": 75859,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 67330,
									"end": 75859,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 67330,
									"end": 75859,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 67330,
									"end": 75859,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 67330,
									"end": 75859,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 67330,
									"end": 75859,
									"name": "INVALID",
									"source": 0
								},
								{
									"begin": 67330,
									"end": 75859,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 67330,
									"end": 75859,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 67330,
									"end": 75859,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 67330,
									"end": 75859,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 67330,
									"end": 75859,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 67330,
									"end": 75859,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 67330,
									"end": 75859,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 67330,
									"end": 75859,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 67330,
									"end": 75859,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 67330,
									"end": 75859,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 67330,
									"end": 75859,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122035831dca397cb4a1c31c27c6956927ffae3f0e6e9a4f3937a77b4050de698cf664736f6c63430007060033",
									".code": [
										{
											"begin": 67330,
											"end": 75859,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 67330,
											"end": 75859,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 67330,
											"end": 75859,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 67330,
											"end": 75859,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 67330,
											"end": 75859,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 67330,
											"end": 75859,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 67330,
											"end": 75859,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 67330,
											"end": 75859,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 67330,
											"end": 75859,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"MAX_SQRT_RATIO\":{\"details\":\"The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\"},\"MAX_TICK\":{\"details\":\"The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\"},\"MIN_SQRT_RATIO\":{\"details\":\"The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\"},\"MIN_TICK\":{\"details\":\"The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\"}},\"title\":\"Math library for computing sqrt prices from ticks and vice versa\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapRouter_flattened.sol\":\"TickMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SwapRouter_flattened.sol\":{\"keccak256\":\"0xcf1b41bf0cccca5e629d64d60c6017a4d9216bcfc15f13cb44666bd333a64622\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb61746d170c341525404f902539ab06649109533f6db310ef3e0a39dfb00566\",\"dweb:/ipfs/QmWDhgoTVqeFhBxaK5cLCCmbL27rHHo48r8YnN3cLcfpmu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128",
						"version": 1
					}
				},
				"TransferHelper": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/SwapRouter_flattened.sol\":27274:29736  library TransferHelper {\r... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/SwapRouter_flattened.sol\":27274:29736  library TransferHelper {\r... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212204caef4edda09bf2644e3d4355cb49d178e44dfbc794e3832617976709e73dc7a64736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204caef4edda09bf2644e3d4355cb49d178e44dfbc794e3832617976709e73dc7a64736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4C 0xAE DELEGATECALL 0xED 0xDA MULMOD 0xBF 0x26 DIFFICULTY 0xE3 0xD4 CALLDATALOAD 0x5C 0xB4 SWAP14 OR DUP15 DIFFICULTY 0xDF 0xBC PUSH26 0x4E3832617976709E73DC7A64736F6C6343000706003300000000 ",
							"sourceMap": "27274:2462:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204caef4edda09bf2644e3d4355cb49d178e44dfbc794e3832617976709e73dc7a64736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4C 0xAE DELEGATECALL 0xED 0xDA MULMOD 0xBF 0x26 DIFFICULTY 0xE3 0xD4 CALLDATALOAD 0x5C 0xB4 SWAP14 OR DUP15 DIFFICULTY 0xDF 0xBC PUSH26 0x4E3832617976709E73DC7A64736F6C6343000706003300000000 ",
							"sourceMap": "27274:2462:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"safeApprove(address,address,uint256)": "infinite",
								"safeTransfer(address,address,uint256)": "infinite",
								"safeTransferETH(address,uint256)": "infinite",
								"safeTransferFrom(address,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 27274,
									"end": 29736,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 27274,
									"end": 29736,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 27274,
									"end": 29736,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 27274,
									"end": 29736,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 27274,
									"end": 29736,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 27274,
									"end": 29736,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 27274,
									"end": 29736,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 27274,
									"end": 29736,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 27274,
									"end": 29736,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 27274,
									"end": 29736,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 27274,
									"end": 29736,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 27274,
									"end": 29736,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 27274,
									"end": 29736,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 27274,
									"end": 29736,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 27274,
									"end": 29736,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 27274,
									"end": 29736,
									"name": "INVALID",
									"source": 0
								},
								{
									"begin": 27274,
									"end": 29736,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 27274,
									"end": 29736,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 27274,
									"end": 29736,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 27274,
									"end": 29736,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 27274,
									"end": 29736,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 27274,
									"end": 29736,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 27274,
									"end": 29736,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 27274,
									"end": 29736,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 27274,
									"end": 29736,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 27274,
									"end": 29736,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 27274,
									"end": 29736,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212204caef4edda09bf2644e3d4355cb49d178e44dfbc794e3832617976709e73dc7a64736f6c63430007060033",
									".code": [
										{
											"begin": 27274,
											"end": 29736,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 27274,
											"end": 29736,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 27274,
											"end": 29736,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 27274,
											"end": 29736,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 27274,
											"end": 29736,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 27274,
											"end": 29736,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 27274,
											"end": 29736,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 27274,
											"end": 29736,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 27274,
											"end": 29736,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapRouter_flattened.sol\":\"TransferHelper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SwapRouter_flattened.sol\":{\"keccak256\":\"0xcf1b41bf0cccca5e629d64d60c6017a4d9216bcfc15f13cb44666bd333a64622\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb61746d170c341525404f902539ab06649109533f6db310ef3e0a39dfb00566\",\"dweb:/ipfs/QmWDhgoTVqeFhBxaK5cLCCmbL27rHHo48r8YnN3cLcfpmu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"contracts/SwapRouter_flattened.sol": {
				"ast": {
					"absolutePath": "contracts/SwapRouter_flattened.sol",
					"exportedSymbols": {
						"BlockTimestamp": [
							1181
						],
						"BytesLib": [
							209
						],
						"CallbackValidation": [
							2215
						],
						"IERC20": [
							822
						],
						"IERC20Permit": [
							465
						],
						"IERC20PermitAllowed": [
							363
						],
						"IMulticall": [
							478
						],
						"IPeripheryImmutableState": [
							1214
						],
						"IPeripheryPayments": [
							585
						],
						"IPeripheryPaymentsWithFee": [
							616
						],
						"ISelfPermit": [
							430
						],
						"ISwapRouter": [
							1727
						],
						"IUniswapV3Pool": [
							2156
						],
						"IUniswapV3PoolActions": [
							1965
						],
						"IUniswapV3PoolDerivedState": [
							1995
						],
						"IUniswapV3PoolEvents": [
							1845
						],
						"IUniswapV3PoolImmutables": [
							2141
						],
						"IUniswapV3PoolOwnerActions": [
							1870
						],
						"IUniswapV3PoolState": [
							2102
						],
						"IUniswapV3SwapCallback": [
							1634
						],
						"IWETH9": [
							1168
						],
						"LowGasSafeMath": [
							745
						],
						"Multicall": [
							560
						],
						"Path": [
							340
						],
						"PeripheryImmutableState": [
							1243
						],
						"PeripheryPayments": [
							1447
						],
						"PeripheryPaymentsWithFee": [
							1621
						],
						"PeripheryValidation": [
							1199
						],
						"PoolAddress": [
							91
						],
						"SafeCast": [
							2818
						],
						"SelfPermit": [
							984
						],
						"SwapRouter": [
							3470
						],
						"TickMath": [
							2749
						],
						"TransferHelper": [
							1153
						]
					},
					"id": 3471,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "96:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "124:97:0",
								"text": "@title Provides functions for deriving a pool address from the factory, tokens, and the fee"
							},
							"fullyImplemented": true,
							"id": 91,
							"linearizedBaseContracts": [
								91
							],
							"name": "PoolAddress",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 5,
									"mutability": "constant",
									"name": "POOL_INIT_CODE_HASH",
									"nodeType": "VariableDeclaration",
									"scope": 91,
									"src": "248:114:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 3,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "248:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307865333466313939623139623262346634376636383434323631396435353535323764323434663738613332393765613839333235663834336638376238623534",
										"id": 4,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "296:66:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_102814774271675688723325049954498779091328469440286648861889194717372678376276_by_1",
											"typeString": "int_const 1028...(70 digits omitted)...6276"
										},
										"value": "0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54"
									},
									"visibility": "internal"
								},
								{
									"canonicalName": "PoolAddress.PoolKey",
									"id": 12,
									"members": [
										{
											"constant": false,
											"id": 7,
											"mutability": "mutable",
											"name": "token0",
											"nodeType": "VariableDeclaration",
											"scope": 12,
											"src": "446:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 6,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "446:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 9,
											"mutability": "mutable",
											"name": "token1",
											"nodeType": "VariableDeclaration",
											"scope": 12,
											"src": "471:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 8,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "471:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 11,
											"mutability": "mutable",
											"name": "fee",
											"nodeType": "VariableDeclaration",
											"scope": 12,
											"src": "496:10:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint24",
												"typeString": "uint24"
											},
											"typeName": {
												"id": 10,
												"name": "uint24",
												"nodeType": "ElementaryTypeName",
												"src": "496:6:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "PoolKey",
									"nodeType": "StructDefinition",
									"scope": 91,
									"src": "420:94:0",
									"visibility": "public"
								},
								{
									"body": {
										"id": 42,
										"nodeType": "Block",
										"src": "990:144:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 26,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 24,
														"name": "tokenA",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 15,
														"src": "1005:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 25,
														"name": "tokenB",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 17,
														"src": "1014:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1005:15:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 35,
												"nodeType": "IfStatement",
												"src": "1001:56:0",
												"trueBody": {
													"expression": {
														"id": 33,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"components": [
																{
																	"id": 27,
																	"name": "tokenA",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 15,
																	"src": "1023:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 28,
																	"name": "tokenB",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 17,
																	"src": "1031:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"id": 29,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": true,
															"nodeType": "TupleExpression",
															"src": "1022:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_address_$",
																"typeString": "tuple(address,address)"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"components": [
																{
																	"id": 30,
																	"name": "tokenB",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 17,
																	"src": "1042:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 31,
																	"name": "tokenA",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 15,
																	"src": "1050:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"id": 32,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1041:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_address_$",
																"typeString": "tuple(address,address)"
															}
														},
														"src": "1022:35:0",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 34,
													"nodeType": "ExpressionStatement",
													"src": "1022:35:0"
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 37,
															"name": "tokenA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 15,
															"src": "1092:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 38,
															"name": "tokenB",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 17,
															"src": "1108:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 39,
															"name": "fee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 19,
															"src": "1121:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														],
														"id": 36,
														"name": "PoolKey",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 12,
														"src": "1075:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_PoolKey_$12_storage_ptr_$",
															"typeString": "type(struct PoolAddress.PoolKey storage pointer)"
														}
													},
													"id": 40,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"names": [
														"token0",
														"token1",
														"fee"
													],
													"nodeType": "FunctionCall",
													"src": "1075:51:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolKey_$12_memory_ptr",
														"typeString": "struct PoolAddress.PoolKey memory"
													}
												},
												"functionReturnParameters": 23,
												"id": 41,
												"nodeType": "Return",
												"src": "1068:58:0"
											}
										]
									},
									"documentation": {
										"id": 13,
										"nodeType": "StructuredDocumentation",
										"src": "522:325:0",
										"text": "@notice Returns PoolKey: the ordered tokens with the matched fee levels\n @param tokenA The first token of a pool, unsorted\n @param tokenB The second token of a pool, unsorted\n @param fee The fee level of the pool\n @return Poolkey The pool details with ordered token0 and token1 assignments"
									},
									"id": 43,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getPoolKey",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 20,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 15,
												"mutability": "mutable",
												"name": "tokenA",
												"nodeType": "VariableDeclaration",
												"scope": 43,
												"src": "883:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 14,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "883:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 17,
												"mutability": "mutable",
												"name": "tokenB",
												"nodeType": "VariableDeclaration",
												"scope": 43,
												"src": "908:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 16,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "908:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 19,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 43,
												"src": "933:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 18,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "933:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "872:78:0"
									},
									"returnParameters": {
										"id": 23,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 22,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 43,
												"src": "974:14:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PoolKey_$12_memory_ptr",
													"typeString": "struct PoolAddress.PoolKey"
												},
												"typeName": {
													"id": 21,
													"name": "PoolKey",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 12,
													"src": "974:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolKey_$12_storage_ptr",
														"typeString": "struct PoolAddress.PoolKey"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "973:16:0"
									},
									"scope": 91,
									"src": "853:281:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 89,
										"nodeType": "Block",
										"src": "1485:428:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 58,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 54,
																	"name": "key",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 48,
																	"src": "1504:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_PoolKey_$12_memory_ptr",
																		"typeString": "struct PoolAddress.PoolKey memory"
																	}
																},
																"id": 55,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "token0",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 7,
																"src": "1504:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"expression": {
																	"id": 56,
																	"name": "key",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 48,
																	"src": "1517:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_PoolKey_$12_memory_ptr",
																		"typeString": "struct PoolAddress.PoolKey memory"
																	}
																},
																"id": 57,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "token1",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 9,
																"src": "1517:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1504:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 53,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1496:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 59,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1496:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 60,
												"nodeType": "ExpressionStatement",
												"src": "1496:32:0"
											},
											{
												"expression": {
													"id": 87,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 61,
														"name": "pool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 51,
														"src": "1539:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"hexValue": "ff",
																						"id": 69,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "hexString",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "1669:7:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9",
																							"typeString": "literal_string hex\"ff\""
																						}
																					},
																					{
																						"id": 70,
																						"name": "factory",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 46,
																						"src": "1703:7:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"expression": {
																											"id": 74,
																											"name": "key",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 48,
																											"src": "1758:3:0",
																											"typeDescriptions": {
																												"typeIdentifier": "t_struct$_PoolKey_$12_memory_ptr",
																												"typeString": "struct PoolAddress.PoolKey memory"
																											}
																										},
																										"id": 75,
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"memberName": "token0",
																										"nodeType": "MemberAccess",
																										"referencedDeclaration": 7,
																										"src": "1758:10:0",
																										"typeDescriptions": {
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									},
																									{
																										"expression": {
																											"id": 76,
																											"name": "key",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 48,
																											"src": "1770:3:0",
																											"typeDescriptions": {
																												"typeIdentifier": "t_struct$_PoolKey_$12_memory_ptr",
																												"typeString": "struct PoolAddress.PoolKey memory"
																											}
																										},
																										"id": 77,
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"memberName": "token1",
																										"nodeType": "MemberAccess",
																										"referencedDeclaration": 9,
																										"src": "1770:10:0",
																										"typeDescriptions": {
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									},
																									{
																										"expression": {
																											"id": 78,
																											"name": "key",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 48,
																											"src": "1782:3:0",
																											"typeDescriptions": {
																												"typeIdentifier": "t_struct$_PoolKey_$12_memory_ptr",
																												"typeString": "struct PoolAddress.PoolKey memory"
																											}
																										},
																										"id": 79,
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"memberName": "fee",
																										"nodeType": "MemberAccess",
																										"referencedDeclaration": 11,
																										"src": "1782:7:0",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint24",
																											"typeString": "uint24"
																										}
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										},
																										{
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										},
																										{
																											"typeIdentifier": "t_uint24",
																											"typeString": "uint24"
																										}
																									],
																									"expression": {
																										"id": 72,
																										"name": "abi",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 4294967295,
																										"src": "1747:3:0",
																										"typeDescriptions": {
																											"typeIdentifier": "t_magic_abi",
																											"typeString": "abi"
																										}
																									},
																									"id": 73,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"lValueRequested": false,
																									"memberName": "encode",
																									"nodeType": "MemberAccess",
																									"src": "1747:10:0",
																									"typeDescriptions": {
																										"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																										"typeString": "function () pure returns (bytes memory)"
																									}
																								},
																								"id": 80,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"kind": "functionCall",
																								"lValueRequested": false,
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "1747:43:0",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes_memory_ptr",
																									"typeString": "bytes memory"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_bytes_memory_ptr",
																									"typeString": "bytes memory"
																								}
																							],
																							"id": 71,
																							"name": "keccak256",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967288,
																							"src": "1737:9:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																								"typeString": "function (bytes memory) pure returns (bytes32)"
																							}
																						},
																						"id": 81,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "1737:54:0",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					},
																					{
																						"id": 82,
																						"name": "POOL_INIT_CODE_HASH",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 5,
																						"src": "1818:19:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9",
																							"typeString": "literal_string hex\"ff\""
																						},
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						},
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						},
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					],
																					"expression": {
																						"id": 67,
																						"name": "abi",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967295,
																						"src": "1626:3:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_magic_abi",
																							"typeString": "abi"
																						}
																					},
																					"id": 68,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "encodePacked",
																					"nodeType": "MemberAccess",
																					"src": "1626:16:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																						"typeString": "function () pure returns (bytes memory)"
																					}
																				},
																				"id": 83,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "1626:234:0",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			],
																			"id": 66,
																			"name": "keccak256",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967288,
																			"src": "1594:9:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																				"typeString": "function (bytes memory) pure returns (bytes32)"
																			}
																		},
																		"id": 84,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1594:285:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"id": 65,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1568:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 64,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1568:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 85,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1568:326:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 63,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1546:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 62,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1546:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 86,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1546:359:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "1539:366:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 88,
												"nodeType": "ExpressionStatement",
												"src": "1539:366:0"
											}
										]
									},
									"documentation": {
										"id": 44,
										"nodeType": "StructuredDocumentation",
										"src": "1142:239:0",
										"text": "@notice Deterministically computes the pool address given the factory and PoolKey\n @param factory The Uniswap V3 factory contract address\n @param key The PoolKey\n @return pool The contract address of the V3 pool"
									},
									"id": 90,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "computeAddress",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 49,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 46,
												"mutability": "mutable",
												"name": "factory",
												"nodeType": "VariableDeclaration",
												"scope": 90,
												"src": "1411:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 45,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1411:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 48,
												"mutability": "mutable",
												"name": "key",
												"nodeType": "VariableDeclaration",
												"scope": 90,
												"src": "1428:18:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PoolKey_$12_memory_ptr",
													"typeString": "struct PoolAddress.PoolKey"
												},
												"typeName": {
													"id": 47,
													"name": "PoolKey",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 12,
													"src": "1428:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolKey_$12_storage_ptr",
														"typeString": "struct PoolAddress.PoolKey"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1410:37:0"
									},
									"returnParameters": {
										"id": 52,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 51,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 90,
												"src": "1471:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 50,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1471:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1470:14:0"
									},
									"scope": 91,
									"src": "1387:526:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3471,
							"src": "221:1695:0"
						},
						{
							"id": 92,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "2272:31:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"fullyImplemented": true,
							"id": 209,
							"linearizedBaseContracts": [
								209
							],
							"name": "BytesLib",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 137,
										"nodeType": "Block",
										"src": "2471:2931:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 108,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 106,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 104,
																	"name": "_length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 98,
																	"src": "2490:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "3331",
																	"id": 105,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2500:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_31_by_1",
																		"typeString": "int_const 31"
																	},
																	"value": "31"
																},
																"src": "2490:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 107,
																"name": "_length",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 98,
																"src": "2506:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2490:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "736c6963655f6f766572666c6f77",
															"id": 109,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2515:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e",
																"typeString": "literal_string \"slice_overflow\""
															},
															"value": "slice_overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e",
																"typeString": "literal_string \"slice_overflow\""
															}
														],
														"id": 103,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2482:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 110,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2482:50:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 111,
												"nodeType": "ExpressionStatement",
												"src": "2482:50:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 117,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 115,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 113,
																	"name": "_start",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 96,
																	"src": "2551:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"id": 114,
																	"name": "_length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 98,
																	"src": "2560:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2551:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 116,
																"name": "_start",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 96,
																"src": "2571:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2551:26:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "736c6963655f6f766572666c6f77",
															"id": 118,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2579:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e",
																"typeString": "literal_string \"slice_overflow\""
															},
															"value": "slice_overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e",
																"typeString": "literal_string \"slice_overflow\""
															}
														],
														"id": 112,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2543:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 119,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2543:53:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 120,
												"nodeType": "ExpressionStatement",
												"src": "2543:53:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 127,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 122,
																	"name": "_bytes",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 94,
																	"src": "2615:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																"id": 123,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "2615:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 126,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 124,
																	"name": "_start",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 96,
																	"src": "2632:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"id": 125,
																	"name": "_length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 98,
																	"src": "2641:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2632:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2615:33:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "736c6963655f6f75744f66426f756e6473",
															"id": 128,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2650:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0",
																"typeString": "literal_string \"slice_outOfBounds\""
															},
															"value": "slice_outOfBounds"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0",
																"typeString": "literal_string \"slice_outOfBounds\""
															}
														],
														"id": 121,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2607:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 129,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2607:63:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 130,
												"nodeType": "ExpressionStatement",
												"src": "2607:63:0"
											},
											{
												"assignments": [
													132
												],
												"declarations": [
													{
														"constant": false,
														"id": 132,
														"mutability": "mutable",
														"name": "tempBytes",
														"nodeType": "VariableDeclaration",
														"scope": 137,
														"src": "2683:22:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 131,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "2683:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 133,
												"nodeType": "VariableDeclarationStatement",
												"src": "2683:22:0"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2727:2639:0",
													"statements": [
														{
															"cases": [
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "2789:2130:0",
																		"statements": [
																			{
																				"nodeType": "YulAssignment",
																				"src": "2960:24:0",
																				"value": {
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2979:4:0",
																							"type": "",
																							"value": "0x40"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "2973:5:0"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2973:11:0"
																				},
																				"variableNames": [
																					{
																						"name": "tempBytes",
																						"nodeType": "YulIdentifier",
																						"src": "2960:9:0"
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "3654:33:0",
																				"value": {
																					"arguments": [
																						{
																							"name": "_length",
																							"nodeType": "YulIdentifier",
																							"src": "3675:7:0"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "3684:2:0",
																							"type": "",
																							"value": "31"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nodeType": "YulIdentifier",
																						"src": "3671:3:0"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3671:16:0"
																				},
																				"variables": [
																					{
																						"name": "lengthmod",
																						"nodeType": "YulTypedName",
																						"src": "3658:9:0",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "4034:70:0",
																				"value": {
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "tempBytes",
																									"nodeType": "YulIdentifier",
																									"src": "4052:9:0"
																								},
																								{
																									"name": "lengthmod",
																									"nodeType": "YulIdentifier",
																									"src": "4063:9:0"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "4048:3:0"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "4048:25:0"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "4079:4:0",
																									"type": "",
																									"value": "0x20"
																								},
																								{
																									"arguments": [
																										{
																											"name": "lengthmod",
																											"nodeType": "YulIdentifier",
																											"src": "4092:9:0"
																										}
																									],
																									"functionName": {
																										"name": "iszero",
																										"nodeType": "YulIdentifier",
																										"src": "4085:6:0"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "4085:17:0"
																								}
																							],
																							"functionName": {
																								"name": "mul",
																								"nodeType": "YulIdentifier",
																								"src": "4075:3:0"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "4075:28:0"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "4044:3:0"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4044:60:0"
																				},
																				"variables": [
																					{
																						"name": "mc",
																						"nodeType": "YulTypedName",
																						"src": "4038:2:0",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "4126:27:0",
																				"value": {
																					"arguments": [
																						{
																							"name": "mc",
																							"nodeType": "YulIdentifier",
																							"src": "4141:2:0"
																						},
																						{
																							"name": "_length",
																							"nodeType": "YulIdentifier",
																							"src": "4145:7:0"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "4137:3:0"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4137:16:0"
																				},
																				"variables": [
																					{
																						"name": "end",
																						"nodeType": "YulTypedName",
																						"src": "4130:3:0",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "4576:71:0",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "mc",
																										"nodeType": "YulIdentifier",
																										"src": "4610:2:0"
																									},
																									{
																										"arguments": [
																											{
																												"name": "cc",
																												"nodeType": "YulIdentifier",
																												"src": "4620:2:0"
																											}
																										],
																										"functionName": {
																											"name": "mload",
																											"nodeType": "YulIdentifier",
																											"src": "4614:5:0"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "4614:9:0"
																									}
																								],
																								"functionName": {
																									"name": "mstore",
																									"nodeType": "YulIdentifier",
																									"src": "4603:6:0"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "4603:21:0"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "4603:21:0"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "mc",
																							"nodeType": "YulIdentifier",
																							"src": "4452:2:0"
																						},
																						{
																							"name": "end",
																							"nodeType": "YulIdentifier",
																							"src": "4456:3:0"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nodeType": "YulIdentifier",
																						"src": "4449:2:0"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4449:11:0"
																				},
																				"nodeType": "YulForLoop",
																				"post": {
																					"nodeType": "YulBlock",
																					"src": "4461:114:0",
																					"statements": [
																						{
																							"nodeType": "YulAssignment",
																							"src": "4488:19:0",
																							"value": {
																								"arguments": [
																									{
																										"name": "mc",
																										"nodeType": "YulIdentifier",
																										"src": "4498:2:0"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "4502:4:0",
																										"type": "",
																										"value": "0x20"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "4494:3:0"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "4494:13:0"
																							},
																							"variableNames": [
																								{
																									"name": "mc",
																									"nodeType": "YulIdentifier",
																									"src": "4488:2:0"
																								}
																							]
																						},
																						{
																							"nodeType": "YulAssignment",
																							"src": "4533:19:0",
																							"value": {
																								"arguments": [
																									{
																										"name": "cc",
																										"nodeType": "YulIdentifier",
																										"src": "4543:2:0"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "4547:4:0",
																										"type": "",
																										"value": "0x20"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "4539:3:0"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "4539:13:0"
																							},
																							"variableNames": [
																								{
																									"name": "cc",
																									"nodeType": "YulIdentifier",
																									"src": "4533:2:0"
																								}
																							]
																						}
																					]
																				},
																				"pre": {
																					"nodeType": "YulBlock",
																					"src": "4181:267:0",
																					"statements": [
																						{
																							"nodeType": "YulVariableDeclaration",
																							"src": "4345:80:0",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"arguments": [
																													{
																														"name": "_bytes",
																														"nodeType": "YulIdentifier",
																														"src": "4367:6:0"
																													},
																													{
																														"name": "lengthmod",
																														"nodeType": "YulIdentifier",
																														"src": "4375:9:0"
																													}
																												],
																												"functionName": {
																													"name": "add",
																													"nodeType": "YulIdentifier",
																													"src": "4363:3:0"
																												},
																												"nodeType": "YulFunctionCall",
																												"src": "4363:22:0"
																											},
																											{
																												"arguments": [
																													{
																														"kind": "number",
																														"nodeType": "YulLiteral",
																														"src": "4391:4:0",
																														"type": "",
																														"value": "0x20"
																													},
																													{
																														"arguments": [
																															{
																																"name": "lengthmod",
																																"nodeType": "YulIdentifier",
																																"src": "4404:9:0"
																															}
																														],
																														"functionName": {
																															"name": "iszero",
																															"nodeType": "YulIdentifier",
																															"src": "4397:6:0"
																														},
																														"nodeType": "YulFunctionCall",
																														"src": "4397:17:0"
																													}
																												],
																												"functionName": {
																													"name": "mul",
																													"nodeType": "YulIdentifier",
																													"src": "4387:3:0"
																												},
																												"nodeType": "YulFunctionCall",
																												"src": "4387:28:0"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "4359:3:0"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "4359:57:0"
																									},
																									{
																										"name": "_start",
																										"nodeType": "YulIdentifier",
																										"src": "4418:6:0"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "4355:3:0"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "4355:70:0"
																							},
																							"variables": [
																								{
																									"name": "cc",
																									"nodeType": "YulTypedName",
																									"src": "4349:2:0",
																									"type": ""
																								}
																							]
																						}
																					]
																				},
																				"src": "4177:470:0"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "tempBytes",
																							"nodeType": "YulIdentifier",
																							"src": "4678:9:0"
																						},
																						{
																							"name": "_length",
																							"nodeType": "YulIdentifier",
																							"src": "4689:7:0"
																						}
																					],
																					"functionName": {
																						"name": "mstore",
																						"nodeType": "YulIdentifier",
																						"src": "4671:6:0"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4671:26:0"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "4671:26:0"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "4868:4:0",
																							"type": "",
																							"value": "0x40"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "mc",
																											"nodeType": "YulIdentifier",
																											"src": "4882:2:0"
																										},
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "4886:2:0",
																											"type": "",
																											"value": "31"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "4878:3:0"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "4878:11:0"
																								},
																								{
																									"arguments": [
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "4895:2:0",
																											"type": "",
																											"value": "31"
																										}
																									],
																									"functionName": {
																										"name": "not",
																										"nodeType": "YulIdentifier",
																										"src": "4891:3:0"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "4891:7:0"
																								}
																							],
																							"functionName": {
																								"name": "and",
																								"nodeType": "YulIdentifier",
																								"src": "4874:3:0"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "4874:25:0"
																						}
																					],
																					"functionName": {
																						"name": "mstore",
																						"nodeType": "YulIdentifier",
																						"src": "4861:6:0"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4861:39:0"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "4861:39:0"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "2782:2137:0",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2787:1:0",
																		"type": "",
																		"value": "0"
																	}
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "5033:322:0",
																		"statements": [
																			{
																				"nodeType": "YulAssignment",
																				"src": "5056:24:0",
																				"value": {
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5075:4:0",
																							"type": "",
																							"value": "0x40"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "5069:5:0"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5069:11:0"
																				},
																				"variableNames": [
																					{
																						"name": "tempBytes",
																						"nodeType": "YulIdentifier",
																						"src": "5056:9:0"
																					}
																				]
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "tempBytes",
																							"nodeType": "YulIdentifier",
																							"src": "5265:9:0"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5276:1:0",
																							"type": "",
																							"value": "0"
																						}
																					],
																					"functionName": {
																						"name": "mstore",
																						"nodeType": "YulIdentifier",
																						"src": "5258:6:0"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5258:20:0"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "5258:20:0"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5309:4:0",
																							"type": "",
																							"value": "0x40"
																						},
																						{
																							"arguments": [
																								{
																									"name": "tempBytes",
																									"nodeType": "YulIdentifier",
																									"src": "5319:9:0"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "5330:4:0",
																									"type": "",
																									"value": "0x20"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "5315:3:0"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "5315:20:0"
																						}
																					],
																					"functionName": {
																						"name": "mstore",
																						"nodeType": "YulIdentifier",
																						"src": "5302:6:0"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5302:34:0"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "5302:34:0"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "5025:330:0",
																	"value": "default"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"name": "_length",
																		"nodeType": "YulIdentifier",
																		"src": "2756:7:0"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2749:6:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "2749:15:0"
															},
															"nodeType": "YulSwitch",
															"src": "2742:2613:0"
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 94,
														"isOffset": false,
														"isSlot": false,
														"src": "4367:6:0",
														"valueSize": 1
													},
													{
														"declaration": 98,
														"isOffset": false,
														"isSlot": false,
														"src": "2756:7:0",
														"valueSize": 1
													},
													{
														"declaration": 98,
														"isOffset": false,
														"isSlot": false,
														"src": "3675:7:0",
														"valueSize": 1
													},
													{
														"declaration": 98,
														"isOffset": false,
														"isSlot": false,
														"src": "4145:7:0",
														"valueSize": 1
													},
													{
														"declaration": 98,
														"isOffset": false,
														"isSlot": false,
														"src": "4689:7:0",
														"valueSize": 1
													},
													{
														"declaration": 96,
														"isOffset": false,
														"isSlot": false,
														"src": "4418:6:0",
														"valueSize": 1
													},
													{
														"declaration": 132,
														"isOffset": false,
														"isSlot": false,
														"src": "2960:9:0",
														"valueSize": 1
													},
													{
														"declaration": 132,
														"isOffset": false,
														"isSlot": false,
														"src": "4052:9:0",
														"valueSize": 1
													},
													{
														"declaration": 132,
														"isOffset": false,
														"isSlot": false,
														"src": "4678:9:0",
														"valueSize": 1
													},
													{
														"declaration": 132,
														"isOffset": false,
														"isSlot": false,
														"src": "5056:9:0",
														"valueSize": 1
													},
													{
														"declaration": 132,
														"isOffset": false,
														"isSlot": false,
														"src": "5265:9:0",
														"valueSize": 1
													},
													{
														"declaration": 132,
														"isOffset": false,
														"isSlot": false,
														"src": "5319:9:0",
														"valueSize": 1
													}
												],
												"id": 134,
												"nodeType": "InlineAssembly",
												"src": "2718:2648:0"
											},
											{
												"expression": {
													"id": 135,
													"name": "tempBytes",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 132,
													"src": "5385:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 102,
												"id": 136,
												"nodeType": "Return",
												"src": "5378:16:0"
											}
										]
									},
									"id": 138,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "slice",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 99,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 94,
												"mutability": "mutable",
												"name": "_bytes",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "2356:19:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 93,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2356:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 96,
												"mutability": "mutable",
												"name": "_start",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "2386:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 95,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2386:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 98,
												"mutability": "mutable",
												"name": "_length",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "2411:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 97,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2411:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2345:88:0"
									},
									"returnParameters": {
										"id": 102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 101,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "2457:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 100,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2457:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2456:14:0"
									},
									"scope": 209,
									"src": "2331:3071:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 172,
										"nodeType": "Block",
										"src": "5498:338:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 152,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 150,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 148,
																	"name": "_start",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 142,
																	"src": "5517:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "3230",
																	"id": 149,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5526:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_20_by_1",
																		"typeString": "int_const 20"
																	},
																	"value": "20"
																},
																"src": "5517:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 151,
																"name": "_start",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 142,
																"src": "5532:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5517:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "746f416464726573735f6f766572666c6f77",
															"id": 153,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5540:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f71efb0937d5d9d75bbebe9d7207dad811fd47ced903ea9404d5e8d77eb17a95",
																"typeString": "literal_string \"toAddress_overflow\""
															},
															"value": "toAddress_overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f71efb0937d5d9d75bbebe9d7207dad811fd47ced903ea9404d5e8d77eb17a95",
																"typeString": "literal_string \"toAddress_overflow\""
															}
														],
														"id": 147,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5509:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 154,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5509:52:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 155,
												"nodeType": "ExpressionStatement",
												"src": "5509:52:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 162,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 157,
																	"name": "_bytes",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 140,
																	"src": "5580:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																"id": 158,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "5580:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 161,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 159,
																	"name": "_start",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 142,
																	"src": "5597:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "3230",
																	"id": 160,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5606:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_20_by_1",
																		"typeString": "int_const 20"
																	},
																	"value": "20"
																},
																"src": "5597:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5580:28:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "746f416464726573735f6f75744f66426f756e6473",
															"id": 163,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5610:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9f688071e1df0f70b63e3651005878331be1fe9591d6cfb3187cb52a13439e5d",
																"typeString": "literal_string \"toAddress_outOfBounds\""
															},
															"value": "toAddress_outOfBounds"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9f688071e1df0f70b63e3651005878331be1fe9591d6cfb3187cb52a13439e5d",
																"typeString": "literal_string \"toAddress_outOfBounds\""
															}
														],
														"id": 156,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5572:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 164,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5572:62:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 165,
												"nodeType": "ExpressionStatement",
												"src": "5572:62:0"
											},
											{
												"assignments": [
													167
												],
												"declarations": [
													{
														"constant": false,
														"id": 167,
														"mutability": "mutable",
														"name": "tempAddress",
														"nodeType": "VariableDeclaration",
														"scope": 172,
														"src": "5645:19:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 166,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5645:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 168,
												"nodeType": "VariableDeclarationStatement",
												"src": "5645:19:0"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5686:112:0",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5701:86:0",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "_bytes",
																								"nodeType": "YulIdentifier",
																								"src": "5734:6:0"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "5742:4:0",
																								"type": "",
																								"value": "0x20"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "5730:3:0"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "5730:17:0"
																					},
																					{
																						"name": "_start",
																						"nodeType": "YulIdentifier",
																						"src": "5749:6:0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5726:3:0"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5726:30:0"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "5720:5:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5720:37:0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5759:27:0",
																		"type": "",
																		"value": "0x1000000000000000000000000"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "5716:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "5716:71:0"
															},
															"variableNames": [
																{
																	"name": "tempAddress",
																	"nodeType": "YulIdentifier",
																	"src": "5701:11:0"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 140,
														"isOffset": false,
														"isSlot": false,
														"src": "5734:6:0",
														"valueSize": 1
													},
													{
														"declaration": 142,
														"isOffset": false,
														"isSlot": false,
														"src": "5749:6:0",
														"valueSize": 1
													},
													{
														"declaration": 167,
														"isOffset": false,
														"isSlot": false,
														"src": "5701:11:0",
														"valueSize": 1
													}
												],
												"id": 169,
												"nodeType": "InlineAssembly",
												"src": "5677:121:0"
											},
											{
												"expression": {
													"id": 170,
													"name": "tempAddress",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 167,
													"src": "5817:11:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 146,
												"id": 171,
												"nodeType": "Return",
												"src": "5810:18:0"
											}
										]
									},
									"id": 173,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toAddress",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 140,
												"mutability": "mutable",
												"name": "_bytes",
												"nodeType": "VariableDeclaration",
												"scope": 173,
												"src": "5429:19:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 139,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5429:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 142,
												"mutability": "mutable",
												"name": "_start",
												"nodeType": "VariableDeclaration",
												"scope": 173,
												"src": "5450:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 141,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5450:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5428:37:0"
									},
									"returnParameters": {
										"id": 146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 145,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 173,
												"src": "5489:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 144,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5489:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5488:9:0"
									},
									"scope": 209,
									"src": "5410:426:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 207,
										"nodeType": "Block",
										"src": "5930:289:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 187,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 185,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 183,
																	"name": "_start",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 177,
																	"src": "5949:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "33",
																	"id": 184,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5958:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_3_by_1",
																		"typeString": "int_const 3"
																	},
																	"value": "3"
																},
																"src": "5949:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 186,
																"name": "_start",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 177,
																"src": "5963:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5949:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "746f55696e7432345f6f766572666c6f77",
															"id": 188,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5971:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_428a8ba368fc474210479d5009a3c2ddaf9d762393b1b3cd3cf1b440d48791c5",
																"typeString": "literal_string \"toUint24_overflow\""
															},
															"value": "toUint24_overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_428a8ba368fc474210479d5009a3c2ddaf9d762393b1b3cd3cf1b440d48791c5",
																"typeString": "literal_string \"toUint24_overflow\""
															}
														],
														"id": 182,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5941:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 189,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5941:50:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 190,
												"nodeType": "ExpressionStatement",
												"src": "5941:50:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 197,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 192,
																	"name": "_bytes",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 175,
																	"src": "6010:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																"id": 193,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "6010:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 196,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 194,
																	"name": "_start",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 177,
																	"src": "6027:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "33",
																	"id": 195,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6036:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_3_by_1",
																		"typeString": "int_const 3"
																	},
																	"value": "3"
																},
																"src": "6027:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6010:27:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "746f55696e7432345f6f75744f66426f756e6473",
															"id": 198,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6039:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_92c5fac6e5cb4f75ffccd9c8f373ae2e2c333a8b9c2fdc616c52c36fa31575dc",
																"typeString": "literal_string \"toUint24_outOfBounds\""
															},
															"value": "toUint24_outOfBounds"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_92c5fac6e5cb4f75ffccd9c8f373ae2e2c333a8b9c2fdc616c52c36fa31575dc",
																"typeString": "literal_string \"toUint24_outOfBounds\""
															}
														],
														"id": 191,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6002:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 199,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6002:60:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 200,
												"nodeType": "ExpressionStatement",
												"src": "6002:60:0"
											},
											{
												"assignments": [
													202
												],
												"declarations": [
													{
														"constant": false,
														"id": 202,
														"mutability": "mutable",
														"name": "tempUint",
														"nodeType": "VariableDeclaration",
														"scope": 207,
														"src": "6073:15:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint24",
															"typeString": "uint24"
														},
														"typeName": {
															"id": 201,
															"name": "uint24",
															"nodeType": "ElementaryTypeName",
															"src": "6073:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 203,
												"nodeType": "VariableDeclarationStatement",
												"src": "6073:15:0"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6110:74:0",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6125:48:0",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_bytes",
																						"nodeType": "YulIdentifier",
																						"src": "6151:6:0"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6159:3:0",
																						"type": "",
																						"value": "0x3"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6147:3:0"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6147:16:0"
																			},
																			{
																				"name": "_start",
																				"nodeType": "YulIdentifier",
																				"src": "6165:6:0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6143:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6143:29:0"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "6137:5:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "6137:36:0"
															},
															"variableNames": [
																{
																	"name": "tempUint",
																	"nodeType": "YulIdentifier",
																	"src": "6125:8:0"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 175,
														"isOffset": false,
														"isSlot": false,
														"src": "6151:6:0",
														"valueSize": 1
													},
													{
														"declaration": 177,
														"isOffset": false,
														"isSlot": false,
														"src": "6165:6:0",
														"valueSize": 1
													},
													{
														"declaration": 202,
														"isOffset": false,
														"isSlot": false,
														"src": "6125:8:0",
														"valueSize": 1
													}
												],
												"id": 204,
												"nodeType": "InlineAssembly",
												"src": "6101:83:0"
											},
											{
												"expression": {
													"id": 205,
													"name": "tempUint",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 202,
													"src": "6203:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"functionReturnParameters": 181,
												"id": 206,
												"nodeType": "Return",
												"src": "6196:15:0"
											}
										]
									},
									"id": 208,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toUint24",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 178,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 175,
												"mutability": "mutable",
												"name": "_bytes",
												"nodeType": "VariableDeclaration",
												"scope": 208,
												"src": "5862:19:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 174,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5862:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 177,
												"mutability": "mutable",
												"name": "_start",
												"nodeType": "VariableDeclaration",
												"scope": 208,
												"src": "5883:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 176,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5883:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5861:37:0"
									},
									"returnParameters": {
										"id": 181,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 180,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 208,
												"src": "5922:6:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 179,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "5922:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5921:8:0"
									},
									"scope": 209,
									"src": "5844:375:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3471,
							"src": "2307:3915:0"
						},
						{
							"id": 210,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "6269:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 211,
								"nodeType": "StructuredDocumentation",
								"src": "6299:68:0",
								"text": "@title Functions for manipulating path data for multihop swaps"
							},
							"fullyImplemented": true,
							"id": 340,
							"linearizedBaseContracts": [
								340
							],
							"name": "Path",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 214,
									"libraryName": {
										"id": 212,
										"name": "BytesLib",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 209,
										"src": "6393:8:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_BytesLib_$209",
											"typeString": "library BytesLib"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "6387:25:0",
									"typeName": {
										"id": 213,
										"name": "bytes",
										"nodeType": "ElementaryTypeName",
										"src": "6406:5:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes_storage_ptr",
											"typeString": "bytes"
										}
									}
								},
								{
									"constant": true,
									"documentation": {
										"id": 215,
										"nodeType": "StructuredDocumentation",
										"src": "6420:48:0",
										"text": "@dev The length of the bytes encoded address"
									},
									"id": 218,
									"mutability": "constant",
									"name": "ADDR_SIZE",
									"nodeType": "VariableDeclaration",
									"scope": 340,
									"src": "6474:39:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 216,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "6474:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3230",
										"id": 217,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "6511:2:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_20_by_1",
											"typeString": "int_const 20"
										},
										"value": "20"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"documentation": {
										"id": 219,
										"nodeType": "StructuredDocumentation",
										"src": "6520:44:0",
										"text": "@dev The length of the bytes encoded fee"
									},
									"id": 222,
									"mutability": "constant",
									"name": "FEE_SIZE",
									"nodeType": "VariableDeclaration",
									"scope": 340,
									"src": "6570:37:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 220,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "6570:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "33",
										"id": 221,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "6606:1:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_3_by_1",
											"typeString": "int_const 3"
										},
										"value": "3"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"documentation": {
										"id": 223,
										"nodeType": "StructuredDocumentation",
										"src": "6616:58:0",
										"text": "@dev The offset of a single token address and pool fee"
									},
									"id": 228,
									"mutability": "constant",
									"name": "NEXT_OFFSET",
									"nodeType": "VariableDeclaration",
									"scope": 340,
									"src": "6680:59:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 224,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "6680:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										},
										"id": 227,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"id": 225,
											"name": "ADDR_SIZE",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 218,
											"src": "6719:9:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "BinaryOperation",
										"operator": "+",
										"rightExpression": {
											"id": 226,
											"name": "FEE_SIZE",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 222,
											"src": "6731:8:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"src": "6719:20:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"documentation": {
										"id": 229,
										"nodeType": "StructuredDocumentation",
										"src": "6746:42:0",
										"text": "@dev The offset of an encoded pool key"
									},
									"id": 234,
									"mutability": "constant",
									"name": "POP_OFFSET",
									"nodeType": "VariableDeclaration",
									"scope": 340,
									"src": "6794:61:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 230,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "6794:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										},
										"id": 233,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"id": 231,
											"name": "NEXT_OFFSET",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 228,
											"src": "6832:11:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "BinaryOperation",
										"operator": "+",
										"rightExpression": {
											"id": 232,
											"name": "ADDR_SIZE",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 218,
											"src": "6846:9:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"src": "6832:23:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"documentation": {
										"id": 235,
										"nodeType": "StructuredDocumentation",
										"src": "6862:72:0",
										"text": "@dev The minimum length of an encoding that contains 2 or more pools"
									},
									"id": 240,
									"mutability": "constant",
									"name": "MULTIPLE_POOLS_MIN_LENGTH",
									"nodeType": "VariableDeclaration",
									"scope": 340,
									"src": "6940:77:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 236,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "6940:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										},
										"id": 239,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"id": 237,
											"name": "POP_OFFSET",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 234,
											"src": "6993:10:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "BinaryOperation",
										"operator": "+",
										"rightExpression": {
											"id": 238,
											"name": "NEXT_OFFSET",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 228,
											"src": "7006:11:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"src": "6993:24:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 253,
										"nodeType": "Block",
										"src": "7287:66:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 251,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 248,
															"name": "path",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 243,
															"src": "7305:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 249,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "7305:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"id": 250,
														"name": "MULTIPLE_POOLS_MIN_LENGTH",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 240,
														"src": "7320:25:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7305:40:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 247,
												"id": 252,
												"nodeType": "Return",
												"src": "7298:47:0"
											}
										]
									},
									"documentation": {
										"id": 241,
										"nodeType": "StructuredDocumentation",
										"src": "7026:181:0",
										"text": "@notice Returns true iff the path contains two or more pools\n @param path The encoded swap path\n @return True if path contains two or more pools, otherwise false"
									},
									"id": 254,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "hasMultiplePools",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 244,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 243,
												"mutability": "mutable",
												"name": "path",
												"nodeType": "VariableDeclaration",
												"scope": 254,
												"src": "7239:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 242,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7239:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7238:19:0"
									},
									"returnParameters": {
										"id": 247,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 246,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 254,
												"src": "7281:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 245,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7281:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7280:6:0"
									},
									"scope": 340,
									"src": "7213:140:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 271,
										"nodeType": "Block",
										"src": "7579:169:0",
										"statements": [
											{
												"expression": {
													"components": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 268,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 265,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"id": 262,
																				"name": "path",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 257,
																				"src": "7701:4:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"id": 263,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "length",
																			"nodeType": "MemberAccess",
																			"src": "7701:11:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 264,
																			"name": "ADDR_SIZE",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 218,
																			"src": "7715:9:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "7701:23:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 266,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "7700:25:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 267,
																"name": "NEXT_OFFSET",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 228,
																"src": "7728:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7700:39:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 269,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "7699:41:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 261,
												"id": 270,
												"nodeType": "Return",
												"src": "7692:48:0"
											}
										]
									},
									"documentation": {
										"id": 255,
										"nodeType": "StructuredDocumentation",
										"src": "7361:143:0",
										"text": "@notice Returns the number of pools in the path\n @param path The encoded swap path\n @return The number of pools in the path"
									},
									"id": 272,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "numPools",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 258,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 257,
												"mutability": "mutable",
												"name": "path",
												"nodeType": "VariableDeclaration",
												"scope": 272,
												"src": "7528:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 256,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7528:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7527:19:0"
									},
									"returnParameters": {
										"id": 261,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 260,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 272,
												"src": "7570:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 259,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7570:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7569:9:0"
									},
									"scope": 340,
									"src": "7510:238:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 305,
										"nodeType": "Block",
										"src": "8210:133:0",
										"statements": [
											{
												"expression": {
													"id": 289,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 284,
														"name": "tokenA",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 278,
														"src": "8221:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 287,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8245:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"expression": {
																"id": 285,
																"name": "path",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 275,
																"src": "8230:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 286,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "toAddress",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 173,
															"src": "8230:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_address_$bound_to$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory,uint256) pure returns (address)"
															}
														},
														"id": 288,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8230:17:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "8221:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 290,
												"nodeType": "ExpressionStatement",
												"src": "8221:26:0"
											},
											{
												"expression": {
													"id": 296,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 291,
														"name": "fee",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 282,
														"src": "8258:3:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint24",
															"typeString": "uint24"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 294,
																"name": "ADDR_SIZE",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 218,
																"src": "8278:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 292,
																"name": "path",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 275,
																"src": "8264:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 293,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "toUint24",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 208,
															"src": "8264:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint24_$bound_to$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory,uint256) pure returns (uint24)"
															}
														},
														"id": 295,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8264:24:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint24",
															"typeString": "uint24"
														}
													},
													"src": "8258:30:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"id": 297,
												"nodeType": "ExpressionStatement",
												"src": "8258:30:0"
											},
											{
												"expression": {
													"id": 303,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 298,
														"name": "tokenB",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 280,
														"src": "8299:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 301,
																"name": "NEXT_OFFSET",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 228,
																"src": "8323:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 299,
																"name": "path",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 275,
																"src": "8308:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 300,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "toAddress",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 173,
															"src": "8308:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_address_$bound_to$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory,uint256) pure returns (address)"
															}
														},
														"id": 302,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8308:27:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "8299:36:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 304,
												"nodeType": "ExpressionStatement",
												"src": "8299:36:0"
											}
										]
									},
									"documentation": {
										"id": 273,
										"nodeType": "StructuredDocumentation",
										"src": "7756:255:0",
										"text": "@notice Decodes the first pool in path\n @param path The bytes encoded swap path\n @return tokenA The first token of the given pool\n @return tokenB The second token of the given pool\n @return fee The fee level of the pool"
									},
									"id": 306,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decodeFirstPool",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 276,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 275,
												"mutability": "mutable",
												"name": "path",
												"nodeType": "VariableDeclaration",
												"scope": 306,
												"src": "8042:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 274,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8042:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8041:19:0"
									},
									"returnParameters": {
										"id": 283,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 278,
												"mutability": "mutable",
												"name": "tokenA",
												"nodeType": "VariableDeclaration",
												"scope": 306,
												"src": "8125:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 277,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8125:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 280,
												"mutability": "mutable",
												"name": "tokenB",
												"nodeType": "VariableDeclaration",
												"scope": 306,
												"src": "8154:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 279,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8154:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 282,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 306,
												"src": "8183:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 281,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "8183:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8110:94:0"
									},
									"scope": 340,
									"src": "8017:326:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 320,
										"nodeType": "Block",
										"src": "8652:51:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"hexValue": "30",
															"id": 316,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8681:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 317,
															"name": "POP_OFFSET",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 234,
															"src": "8684:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 314,
															"name": "path",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 309,
															"src": "8670:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 315,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "slice",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 138,
														"src": "8670:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory,uint256,uint256) pure returns (bytes memory)"
														}
													},
													"id": 318,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8670:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 313,
												"id": 319,
												"nodeType": "Return",
												"src": "8663:32:0"
											}
										]
									},
									"documentation": {
										"id": 307,
										"nodeType": "StructuredDocumentation",
										"src": "8351:217:0",
										"text": "@notice Gets the segment corresponding to the first pool in the path\n @param path The bytes encoded swap path\n @return The segment containing all data necessary to target the first pool in the path"
									},
									"id": 321,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getFirstPool",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 310,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 309,
												"mutability": "mutable",
												"name": "path",
												"nodeType": "VariableDeclaration",
												"scope": 321,
												"src": "8596:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 308,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8596:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8595:19:0"
									},
									"returnParameters": {
										"id": 313,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 312,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 321,
												"src": "8638:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 311,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8638:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8637:14:0"
									},
									"scope": 340,
									"src": "8574:129:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 338,
										"nodeType": "Block",
										"src": "8972:76:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 331,
															"name": "NEXT_OFFSET",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 228,
															"src": "9001:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 335,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 332,
																	"name": "path",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 324,
																	"src": "9014:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																"id": 333,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "9014:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 334,
																"name": "NEXT_OFFSET",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 228,
																"src": "9028:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9014:25:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 329,
															"name": "path",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 324,
															"src": "8990:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 330,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "slice",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 138,
														"src": "8990:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory,uint256,uint256) pure returns (bytes memory)"
														}
													},
													"id": 336,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8990:50:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 328,
												"id": 337,
												"nodeType": "Return",
												"src": "8983:57:0"
											}
										]
									},
									"documentation": {
										"id": 322,
										"nodeType": "StructuredDocumentation",
										"src": "8711:180:0",
										"text": "@notice Skips a token + fee element from the buffer and returns the remainder\n @param path The swap path\n @return The remaining token + fee elements in the path"
									},
									"id": 339,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "skipToken",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 325,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 324,
												"mutability": "mutable",
												"name": "path",
												"nodeType": "VariableDeclaration",
												"scope": 339,
												"src": "8916:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 323,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8916:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8915:19:0"
									},
									"returnParameters": {
										"id": 328,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 327,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 339,
												"src": "8958:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 326,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8958:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8957:14:0"
									},
									"scope": 340,
									"src": "8897:151:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3471,
							"src": "6367:2684:0"
						},
						{
							"id": 341,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "9123:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 342,
								"nodeType": "StructuredDocumentation",
								"src": "9151:84:0",
								"text": "@title Interface for permit\n @notice Interface used by DAI/CHAI for permit"
							},
							"fullyImplemented": false,
							"id": 363,
							"linearizedBaseContracts": [
								363
							],
							"name": "IERC20PermitAllowed",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 343,
										"nodeType": "StructuredDocumentation",
										"src": "9272:811:0",
										"text": "@notice Approve the spender to spend some tokens via the holder signature\n @dev This is the permit interface used by DAI and CHAI\n @param holder The address of the token holder, the token owner\n @param spender The address of the token spender\n @param nonce The holder's nonce, increases at each call to permit\n @param expiry The timestamp at which the permit is no longer valid\n @param allowed Boolean that sets approval amount, true for type(uint256).max and false for 0\n @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`"
									},
									"functionSelector": "8fcbaf0c",
									"id": 362,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 360,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 345,
												"mutability": "mutable",
												"name": "holder",
												"nodeType": "VariableDeclaration",
												"scope": 362,
												"src": "10115:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 344,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10115:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 347,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 362,
												"src": "10140:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 346,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10140:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 349,
												"mutability": "mutable",
												"name": "nonce",
												"nodeType": "VariableDeclaration",
												"scope": 362,
												"src": "10166:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 348,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10166:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 351,
												"mutability": "mutable",
												"name": "expiry",
												"nodeType": "VariableDeclaration",
												"scope": 362,
												"src": "10190:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 350,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10190:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 353,
												"mutability": "mutable",
												"name": "allowed",
												"nodeType": "VariableDeclaration",
												"scope": 362,
												"src": "10215:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 352,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10215:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 355,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 362,
												"src": "10238:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 354,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "10238:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 357,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 362,
												"src": "10256:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 356,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "10256:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 359,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 362,
												"src": "10276:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 358,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "10276:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10104:188:0"
									},
									"returnParameters": {
										"id": 361,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10301:0:0"
									},
									"scope": 363,
									"src": "10089:213:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 3471,
							"src": "9235:1070:0"
						},
						{
							"id": 364,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "10360:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 365,
								"nodeType": "StructuredDocumentation",
								"src": "10388:119:0",
								"text": "@title Self Permit\n @notice Functionality to call permit on any EIP-2612-compliant token for use in the route"
							},
							"fullyImplemented": false,
							"id": 430,
							"linearizedBaseContracts": [
								430
							],
							"name": "ISelfPermit",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 366,
										"nodeType": "StructuredDocumentation",
										"src": "10536:670:0",
										"text": "@notice Permits this contract to spend a given token from `msg.sender`\n @dev The `owner` is always msg.sender and the `spender` is always address(this).\n @param token The address of the token spent\n @param value The amount that can be spent of token\n @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\n @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`"
									},
									"functionSelector": "f3995c67",
									"id": 381,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "selfPermit",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 379,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 368,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 381,
												"src": "11242:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 367,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11242:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 370,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 381,
												"src": "11266:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 369,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11266:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 372,
												"mutability": "mutable",
												"name": "deadline",
												"nodeType": "VariableDeclaration",
												"scope": 381,
												"src": "11290:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 371,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11290:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 374,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 381,
												"src": "11317:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 373,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "11317:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 376,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 381,
												"src": "11335:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 375,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "11335:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 378,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 381,
												"src": "11355:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 377,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "11355:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11231:140:0"
									},
									"returnParameters": {
										"id": 380,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11388:0:0"
									},
									"scope": 430,
									"src": "11212:177:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 382,
										"nodeType": "StructuredDocumentation",
										"src": "11397:787:0",
										"text": "@notice Permits this contract to spend a given token from `msg.sender`\n @dev The `owner` is always msg.sender and the `spender` is always address(this).\n Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit\n @param token The address of the token spent\n @param value The amount that can be spent of token\n @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\n @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`"
									},
									"functionSelector": "c2e3140a",
									"id": 397,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "selfPermitIfNecessary",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 395,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 384,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 397,
												"src": "12231:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 383,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12231:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 386,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 397,
												"src": "12255:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 385,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12255:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 388,
												"mutability": "mutable",
												"name": "deadline",
												"nodeType": "VariableDeclaration",
												"scope": 397,
												"src": "12279:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 387,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12279:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 390,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 397,
												"src": "12306:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 389,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "12306:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 392,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 397,
												"src": "12324:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 391,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "12324:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 394,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 397,
												"src": "12344:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 393,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "12344:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12220:140:0"
									},
									"returnParameters": {
										"id": 396,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12377:0:0"
									},
									"scope": 430,
									"src": "12190:188:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 398,
										"nodeType": "StructuredDocumentation",
										"src": "12386:677:0",
										"text": "@notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\n @dev The `owner` is always msg.sender and the `spender` is always address(this)\n @param token The address of the token spent\n @param nonce The current nonce of the owner\n @param expiry The timestamp at which the permit is no longer valid\n @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`"
									},
									"functionSelector": "4659a494",
									"id": 413,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "selfPermitAllowed",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 411,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 400,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 413,
												"src": "13106:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 399,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13106:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 402,
												"mutability": "mutable",
												"name": "nonce",
												"nodeType": "VariableDeclaration",
												"scope": 413,
												"src": "13130:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 401,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13130:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 404,
												"mutability": "mutable",
												"name": "expiry",
												"nodeType": "VariableDeclaration",
												"scope": 413,
												"src": "13154:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 403,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13154:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 406,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 413,
												"src": "13179:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 405,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "13179:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 408,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 413,
												"src": "13197:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 407,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "13197:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 410,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 413,
												"src": "13217:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 409,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "13217:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13095:138:0"
									},
									"returnParameters": {
										"id": 412,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13250:0:0"
									},
									"scope": 430,
									"src": "13069:182:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 414,
										"nodeType": "StructuredDocumentation",
										"src": "13259:809:0",
										"text": "@notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\n @dev The `owner` is always msg.sender and the `spender` is always address(this)\n Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.\n @param token The address of the token spent\n @param nonce The current nonce of the owner\n @param expiry The timestamp at which the permit is no longer valid\n @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`"
									},
									"functionSelector": "a4a78f0c",
									"id": 429,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "selfPermitAllowedIfNecessary",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 427,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 416,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 429,
												"src": "14122:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 415,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14122:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 418,
												"mutability": "mutable",
												"name": "nonce",
												"nodeType": "VariableDeclaration",
												"scope": 429,
												"src": "14146:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 417,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14146:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 420,
												"mutability": "mutable",
												"name": "expiry",
												"nodeType": "VariableDeclaration",
												"scope": 429,
												"src": "14170:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 419,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14170:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 422,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 429,
												"src": "14195:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 421,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "14195:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 424,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 429,
												"src": "14213:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 423,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "14213:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 426,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 429,
												"src": "14233:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 425,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "14233:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14111:138:0"
									},
									"returnParameters": {
										"id": 428,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14266:0:0"
									},
									"scope": 430,
									"src": "14074:193:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 3471,
							"src": "10507:3763:0"
						},
						{
							"id": 431,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "14338:31:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 432,
								"nodeType": "StructuredDocumentation",
								"src": "14373:489:0",
								"text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."
							},
							"fullyImplemented": false,
							"id": 465,
							"linearizedBaseContracts": [
								465
							],
							"name": "IERC20Permit",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 433,
										"nodeType": "StructuredDocumentation",
										"src": "14894:808:0",
										"text": " @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\n given `owner`'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."
									},
									"functionSelector": "d505accf",
									"id": 450,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 448,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 435,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 450,
												"src": "15724:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 434,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15724:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 437,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 450,
												"src": "15739:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 436,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15739:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 439,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 450,
												"src": "15756:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 438,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15756:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 441,
												"mutability": "mutable",
												"name": "deadline",
												"nodeType": "VariableDeclaration",
												"scope": 450,
												"src": "15771:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 440,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15771:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 443,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 450,
												"src": "15789:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 442,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "15789:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 445,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 450,
												"src": "15798:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 444,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "15798:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 447,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 450,
												"src": "15809:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 446,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "15809:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15723:96:0"
									},
									"returnParameters": {
										"id": 449,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15828:0:0"
									},
									"scope": 465,
									"src": "15708:121:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 451,
										"nodeType": "StructuredDocumentation",
										"src": "15837:300:0",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 458,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 454,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 453,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 458,
												"src": "16159:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 452,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16159:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16158:15:0"
									},
									"returnParameters": {
										"id": 457,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 456,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 458,
												"src": "16197:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 455,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16197:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16196:9:0"
									},
									"scope": 465,
									"src": "16143:63:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 459,
										"nodeType": "StructuredDocumentation",
										"src": "16214:130:0",
										"text": " @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 464,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 460,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16429:2:0"
									},
									"returnParameters": {
										"id": 463,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 462,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 464,
												"src": "16455:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 461,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "16455:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16454:9:0"
									},
									"scope": 465,
									"src": "16404:60:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 3471,
							"src": "14864:1603:0"
						},
						{
							"id": 466,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "16521:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 467,
								"nodeType": "StructuredDocumentation",
								"src": "16549:111:0",
								"text": "@title Multicall interface\n @notice Enables calling multiple methods in a single call to the contract"
							},
							"fullyImplemented": false,
							"id": 478,
							"linearizedBaseContracts": [
								478
							],
							"name": "IMulticall",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 468,
										"nodeType": "StructuredDocumentation",
										"src": "16688:381:0",
										"text": "@notice Call multiple functions in the current contract and return the data from all of them if they all succeed\n @dev The `msg.value` should not be trusted for any method callable from multicall.\n @param data The encoded function data for each of the calls to make to this contract\n @return results The results from each of the calls passed in via data"
									},
									"functionSelector": "ac9650d8",
									"id": 477,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "multicall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 472,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 471,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 477,
												"src": "17094:21:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "bytes[]"
												},
												"typeName": {
													"baseType": {
														"id": 469,
														"name": "bytes",
														"nodeType": "ElementaryTypeName",
														"src": "17094:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_storage_ptr",
															"typeString": "bytes"
														}
													},
													"id": 470,
													"nodeType": "ArrayTypeName",
													"src": "17094:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
														"typeString": "bytes[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17093:23:0"
									},
									"returnParameters": {
										"id": 476,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 475,
												"mutability": "mutable",
												"name": "results",
												"nodeType": "VariableDeclaration",
												"scope": 477,
												"src": "17143:22:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
													"typeString": "bytes[]"
												},
												"typeName": {
													"baseType": {
														"id": 473,
														"name": "bytes",
														"nodeType": "ElementaryTypeName",
														"src": "17143:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_storage_ptr",
															"typeString": "bytes"
														}
													},
													"id": 474,
													"nodeType": "ArrayTypeName",
													"src": "17143:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
														"typeString": "bytes[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17142:24:0"
									},
									"scope": 478,
									"src": "17075:92:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 3471,
							"src": "16660:510:0"
						},
						{
							"id": 479,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "17217:23:0"
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 481,
										"name": "IMulticall",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 478,
										"src": "17378:10:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IMulticall_$478",
											"typeString": "contract IMulticall"
										}
									},
									"id": 482,
									"nodeType": "InheritanceSpecifier",
									"src": "17378:10:0"
								}
							],
							"contractDependencies": [
								478
							],
							"contractKind": "contract",
							"documentation": {
								"id": 480,
								"nodeType": "StructuredDocumentation",
								"src": "17246:101:0",
								"text": "@title Multicall\n @notice Enables calling multiple methods in a single call to the contract"
							},
							"fullyImplemented": true,
							"id": 560,
							"linearizedBaseContracts": [
								560,
								478
							],
							"name": "Multicall",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"baseFunctions": [
										477
									],
									"body": {
										"id": 558,
										"nodeType": "Block",
										"src": "17527:570:0",
										"statements": [
											{
												"expression": {
													"id": 500,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 493,
														"name": "results",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 491,
														"src": "17538:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
															"typeString": "bytes memory[] memory"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"expression": {
																	"id": 497,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 486,
																	"src": "17560:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
																		"typeString": "bytes calldata[] calldata"
																	}
																},
																"id": 498,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "17560:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 496,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "NewExpression",
															"src": "17548:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$",
																"typeString": "function (uint256) pure returns (bytes memory[] memory)"
															},
															"typeName": {
																"baseType": {
																	"id": 494,
																	"name": "bytes",
																	"nodeType": "ElementaryTypeName",
																	"src": "17552:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_storage_ptr",
																		"typeString": "bytes"
																	}
																},
																"id": 495,
																"nodeType": "ArrayTypeName",
																"src": "17552:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
																	"typeString": "bytes[]"
																}
															}
														},
														"id": 499,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "17548:24:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
															"typeString": "bytes memory[] memory"
														}
													},
													"src": "17538:34:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
														"typeString": "bytes memory[] memory"
													}
												},
												"id": 501,
												"nodeType": "ExpressionStatement",
												"src": "17538:34:0"
											},
											{
												"body": {
													"id": 556,
													"nodeType": "Block",
													"src": "17625:465:0",
													"statements": [
														{
															"assignments": [
																514,
																516
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 514,
																	"mutability": "mutable",
																	"name": "success",
																	"nodeType": "VariableDeclaration",
																	"scope": 556,
																	"src": "17641:12:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"typeName": {
																		"id": 513,
																		"name": "bool",
																		"nodeType": "ElementaryTypeName",
																		"src": "17641:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"visibility": "internal"
																},
																{
																	"constant": false,
																	"id": 516,
																	"mutability": "mutable",
																	"name": "result",
																	"nodeType": "VariableDeclaration",
																	"scope": 556,
																	"src": "17655:19:0",
																	"stateVariable": false,
																	"storageLocation": "memory",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes"
																	},
																	"typeName": {
																		"id": 515,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "17655:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_storage_ptr",
																			"typeString": "bytes"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 526,
															"initialValue": {
																"arguments": [
																	{
																		"baseExpression": {
																			"id": 522,
																			"name": "data",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 486,
																			"src": "17705:4:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
																				"typeString": "bytes calldata[] calldata"
																			}
																		},
																		"id": 524,
																		"indexExpression": {
																			"id": 523,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 503,
																			"src": "17710:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "17705:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_calldata_ptr",
																			"typeString": "bytes calldata"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_calldata_ptr",
																			"typeString": "bytes calldata"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 519,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "17686:4:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_Multicall_$560",
																					"typeString": "contract Multicall"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_Multicall_$560",
																					"typeString": "contract Multicall"
																				}
																			],
																			"id": 518,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "17678:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 517,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "17678:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 520,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "17678:13:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"id": 521,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "delegatecall",
																	"nodeType": "MemberAccess",
																	"src": "17678:26:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																		"typeString": "function (bytes memory) returns (bool,bytes memory)"
																	}
																},
																"id": 525,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "17678:35:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
																	"typeString": "tuple(bool,bytes memory)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "17640:73:0"
														},
														{
															"condition": {
																"id": 528,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "!",
																"prefix": true,
																"src": "17734:8:0",
																"subExpression": {
																	"id": 527,
																	"name": "success",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 514,
																	"src": "17735:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 549,
															"nodeType": "IfStatement",
															"src": "17730:313:0",
															"trueBody": {
																"id": 548,
																"nodeType": "Block",
																"src": "17744:299:0",
																"statements": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 532,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 529,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 516,
																					"src": "17848:6:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 530,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "17848:13:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "<",
																			"rightExpression": {
																				"hexValue": "3638",
																				"id": 531,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "17864:2:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_68_by_1",
																					"typeString": "int_const 68"
																				},
																				"value": "68"
																			},
																			"src": "17848:18:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"id": 536,
																		"nodeType": "IfStatement",
																		"src": "17844:32:0",
																		"trueBody": {
																			"expression": {
																				"arguments": [],
																				"expression": {
																					"argumentTypes": [],
																					"id": 533,
																					"name": "revert",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [
																						4294967277,
																						4294967277
																					],
																					"referencedDeclaration": 4294967277,
																					"src": "17868:6:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_revert_pure$__$returns$__$",
																						"typeString": "function () pure"
																					}
																				},
																				"id": 534,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "17868:8:0",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_tuple$__$",
																					"typeString": "tuple()"
																				}
																			},
																			"id": 535,
																			"nodeType": "ExpressionStatement",
																			"src": "17868:8:0"
																		}
																	},
																	{
																		"AST": {
																			"nodeType": "YulBlock",
																			"src": "17904:69:0",
																			"statements": [
																				{
																					"nodeType": "YulAssignment",
																					"src": "17927:27:0",
																					"value": {
																						"arguments": [
																							{
																								"name": "result",
																								"nodeType": "YulIdentifier",
																								"src": "17941:6:0"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "17949:4:0",
																								"type": "",
																								"value": "0x04"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "17937:3:0"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "17937:17:0"
																					},
																					"variableNames": [
																						{
																							"name": "result",
																							"nodeType": "YulIdentifier",
																							"src": "17927:6:0"
																						}
																					]
																				}
																			]
																		},
																		"evmVersion": "istanbul",
																		"externalReferences": [
																			{
																				"declaration": 516,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "17927:6:0",
																				"valueSize": 1
																			},
																			{
																				"declaration": 516,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "17941:6:0",
																				"valueSize": 1
																			}
																		],
																		"id": 537,
																		"nodeType": "InlineAssembly",
																		"src": "17895:78:0"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 541,
																							"name": "result",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 516,
																							"src": "18009:6:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bytes_memory_ptr",
																								"typeString": "bytes memory"
																							}
																						},
																						{
																							"components": [
																								{
																									"id": 543,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"lValueRequested": false,
																									"nodeType": "ElementaryTypeNameExpression",
																									"src": "18018:6:0",
																									"typeDescriptions": {
																										"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																										"typeString": "type(string storage pointer)"
																									},
																									"typeName": {
																										"id": 542,
																										"name": "string",
																										"nodeType": "ElementaryTypeName",
																										"src": "18018:6:0",
																										"typeDescriptions": {}
																									}
																								}
																							],
																							"id": 544,
																							"isConstant": false,
																							"isInlineArray": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "TupleExpression",
																							"src": "18017:8:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																								"typeString": "type(string storage pointer)"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_bytes_memory_ptr",
																								"typeString": "bytes memory"
																							},
																							{
																								"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																								"typeString": "type(string storage pointer)"
																							}
																						],
																						"expression": {
																							"id": 539,
																							"name": "abi",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967295,
																							"src": "17998:3:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_magic_abi",
																								"typeString": "abi"
																							}
																						},
																						"id": 540,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"memberName": "decode",
																						"nodeType": "MemberAccess",
																						"src": "17998:10:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																							"typeString": "function () pure"
																						}
																					},
																					"id": 545,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "17998:28:0",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				],
																				"id": 538,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967277,
																					4294967277
																				],
																				"referencedDeclaration": 4294967277,
																				"src": "17991:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 546,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "17991:36:0",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 547,
																		"nodeType": "ExpressionStatement",
																		"src": "17991:36:0"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 554,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 550,
																		"name": "results",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 491,
																		"src": "18059:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
																			"typeString": "bytes memory[] memory"
																		}
																	},
																	"id": 552,
																	"indexExpression": {
																		"id": 551,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 503,
																		"src": "18067:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "18059:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 553,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 516,
																	"src": "18072:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																"src": "18059:19:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 555,
															"nodeType": "ExpressionStatement",
															"src": "18059:19:0"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 509,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 506,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 503,
														"src": "17603:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 507,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 486,
															"src": "17607:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
																"typeString": "bytes calldata[] calldata"
															}
														},
														"id": 508,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "17607:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "17603:15:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 557,
												"initializationExpression": {
													"assignments": [
														503
													],
													"declarations": [
														{
															"constant": false,
															"id": 503,
															"mutability": "mutable",
															"name": "i",
															"nodeType": "VariableDeclaration",
															"scope": 557,
															"src": "17588:9:0",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 502,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "17588:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 505,
													"initialValue": {
														"hexValue": "30",
														"id": 504,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "17600:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "17588:13:0"
												},
												"loopExpression": {
													"expression": {
														"id": 511,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "17620:3:0",
														"subExpression": {
															"id": 510,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 503,
															"src": "17620:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 512,
													"nodeType": "ExpressionStatement",
													"src": "17620:3:0"
												},
												"nodeType": "ForStatement",
												"src": "17583:507:0"
											}
										]
									},
									"documentation": {
										"id": 483,
										"nodeType": "StructuredDocumentation",
										"src": "17396:26:0",
										"text": "@inheritdoc IMulticall"
									},
									"functionSelector": "ac9650d8",
									"id": 559,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "multicall",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 488,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "17485:8:0"
									},
									"parameters": {
										"id": 487,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 486,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 559,
												"src": "17447:21:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "bytes[]"
												},
												"typeName": {
													"baseType": {
														"id": 484,
														"name": "bytes",
														"nodeType": "ElementaryTypeName",
														"src": "17447:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_storage_ptr",
															"typeString": "bytes"
														}
													},
													"id": 485,
													"nodeType": "ArrayTypeName",
													"src": "17447:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
														"typeString": "bytes[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17446:23:0"
									},
									"returnParameters": {
										"id": 492,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 491,
												"mutability": "mutable",
												"name": "results",
												"nodeType": "VariableDeclaration",
												"scope": 559,
												"src": "17503:22:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
													"typeString": "bytes[]"
												},
												"typeName": {
													"baseType": {
														"id": 489,
														"name": "bytes",
														"nodeType": "ElementaryTypeName",
														"src": "17503:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_storage_ptr",
															"typeString": "bytes"
														}
													},
													"id": 490,
													"nodeType": "ArrayTypeName",
													"src": "17503:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
														"typeString": "bytes[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17502:24:0"
									},
									"scope": 560,
									"src": "17428:669:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 3471,
							"src": "17347:753:0"
						},
						{
							"id": 561,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "18162:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 562,
								"nodeType": "StructuredDocumentation",
								"src": "18190:94:0",
								"text": "@title Periphery Payments\n @notice Functions to ease deposits and withdrawals of ETH"
							},
							"fullyImplemented": false,
							"id": 585,
							"linearizedBaseContracts": [
								585
							],
							"name": "IPeripheryPayments",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 563,
										"nodeType": "StructuredDocumentation",
										"src": "18320:305:0",
										"text": "@notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\n @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\n @param amountMinimum The minimum amount of WETH9 to unwrap\n @param recipient The address receiving ETH"
									},
									"functionSelector": "49404b7c",
									"id": 570,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "unwrapWETH9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 568,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 565,
												"mutability": "mutable",
												"name": "amountMinimum",
												"nodeType": "VariableDeclaration",
												"scope": 570,
												"src": "18652:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 564,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "18652:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 567,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 570,
												"src": "18675:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 566,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18675:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18651:42:0"
									},
									"returnParameters": {
										"id": 569,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "18710:0:0"
									},
									"scope": 585,
									"src": "18631:80:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 571,
										"nodeType": "StructuredDocumentation",
										"src": "18719:227:0",
										"text": "@notice Refunds any ETH balance held by this contract to the `msg.sender`\n @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\n that use ether for the input amount"
									},
									"functionSelector": "12210e8a",
									"id": 574,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "refundETH",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 572,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "18970:2:0"
									},
									"returnParameters": {
										"id": 573,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "18989:0:0"
									},
									"scope": 585,
									"src": "18952:38:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 575,
										"nodeType": "StructuredDocumentation",
										"src": "18998:431:0",
										"text": "@notice Transfers the full amount of a token held by this contract to recipient\n @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\n @param token The contract address of the token which will be transferred to `recipient`\n @param amountMinimum The minimum amount of token required for a transfer\n @param recipient The destination address of the token"
									},
									"functionSelector": "df2ab5bb",
									"id": 584,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "sweepToken",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 582,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 577,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 584,
												"src": "19465:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 576,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "19465:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 579,
												"mutability": "mutable",
												"name": "amountMinimum",
												"nodeType": "VariableDeclaration",
												"scope": 584,
												"src": "19489:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 578,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "19489:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 581,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 584,
												"src": "19521:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 580,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "19521:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "19454:91:0"
									},
									"returnParameters": {
										"id": 583,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "19562:0:0"
									},
									"scope": 585,
									"src": "19435:128:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 3471,
							"src": "18284:1282:0"
						},
						{
							"id": 586,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "19635:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 588,
										"name": "IPeripheryPayments",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 585,
										"src": "19798:18:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IPeripheryPayments_$585",
											"typeString": "contract IPeripheryPayments"
										}
									},
									"id": 589,
									"nodeType": "InheritanceSpecifier",
									"src": "19798:18:0"
								}
							],
							"contractDependencies": [
								585
							],
							"contractKind": "interface",
							"documentation": {
								"id": 587,
								"nodeType": "StructuredDocumentation",
								"src": "19665:94:0",
								"text": "@title Periphery Payments\n @notice Functions to ease deposits and withdrawals of ETH"
							},
							"fullyImplemented": false,
							"id": 616,
							"linearizedBaseContracts": [
								616,
								585
							],
							"name": "IPeripheryPaymentsWithFee",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 590,
										"nodeType": "StructuredDocumentation",
										"src": "19824:275:0",
										"text": "@notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH, with a percentage between\n 0 (exclusive), and 1 (inclusive) going to feeRecipient\n @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users."
									},
									"functionSelector": "9b2c0a37",
									"id": 601,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "unwrapWETH9WithFee",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 599,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 592,
												"mutability": "mutable",
												"name": "amountMinimum",
												"nodeType": "VariableDeclaration",
												"scope": 601,
												"src": "20143:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 591,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "20143:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 594,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 601,
												"src": "20175:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 593,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "20175:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 596,
												"mutability": "mutable",
												"name": "feeBips",
												"nodeType": "VariableDeclaration",
												"scope": 601,
												"src": "20203:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 595,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "20203:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 598,
												"mutability": "mutable",
												"name": "feeRecipient",
												"nodeType": "VariableDeclaration",
												"scope": 601,
												"src": "20229:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 597,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "20229:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "20132:124:0"
									},
									"returnParameters": {
										"id": 600,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "20273:0:0"
									},
									"scope": 616,
									"src": "20105:169:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 602,
										"nodeType": "StructuredDocumentation",
										"src": "20282:279:0",
										"text": "@notice Transfers the full amount of a token held by this contract to recipient, with a percentage between\n 0 (exclusive) and 1 (inclusive) going to feeRecipient\n @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users"
									},
									"functionSelector": "e0e189a0",
									"id": 615,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "sweepTokenWithFee",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 613,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 604,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 615,
												"src": "20604:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 603,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "20604:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 606,
												"mutability": "mutable",
												"name": "amountMinimum",
												"nodeType": "VariableDeclaration",
												"scope": 615,
												"src": "20628:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 605,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "20628:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 608,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 615,
												"src": "20660:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 607,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "20660:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 610,
												"mutability": "mutable",
												"name": "feeBips",
												"nodeType": "VariableDeclaration",
												"scope": 615,
												"src": "20688:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 609,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "20688:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 612,
												"mutability": "mutable",
												"name": "feeRecipient",
												"nodeType": "VariableDeclaration",
												"scope": 615,
												"src": "20714:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 611,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "20714:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "20593:148:0"
									},
									"returnParameters": {
										"id": 614,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "20758:0:0"
									},
									"scope": 616,
									"src": "20567:192:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 3471,
							"src": "19759:1003:0"
						},
						{
							"id": 617,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "20836:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 618,
								"nodeType": "StructuredDocumentation",
								"src": "20864:180:0",
								"text": "@title Optimized overflow and underflow safe math operations\n @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost"
							},
							"fullyImplemented": true,
							"id": 745,
							"linearizedBaseContracts": [
								745
							],
							"name": "LowGasSafeMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 639,
										"nodeType": "Block",
										"src": "21304:44:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 636,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"id": 633,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 629,
																			"name": "z",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 626,
																			"src": "21324:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 632,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 630,
																				"name": "x",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 621,
																				"src": "21328:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"id": 631,
																				"name": "y",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 623,
																				"src": "21332:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "21328:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "21324:9:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 634,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "21323:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 635,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 621,
																"src": "21338:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "21323:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 628,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "21315:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 637,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "21315:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 638,
												"nodeType": "ExpressionStatement",
												"src": "21315:25:0"
											}
										]
									},
									"documentation": {
										"id": 619,
										"nodeType": "StructuredDocumentation",
										"src": "21074:155:0",
										"text": "@notice Returns x + y, reverts if sum overflows uint256\n @param x The augend\n @param y The addend\n @return z The sum of x and y"
									},
									"id": 640,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 624,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 621,
												"mutability": "mutable",
												"name": "x",
												"nodeType": "VariableDeclaration",
												"scope": 640,
												"src": "21248:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 620,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "21248:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 623,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 640,
												"src": "21259:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 622,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "21259:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21247:22:0"
									},
									"returnParameters": {
										"id": 627,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 626,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 640,
												"src": "21293:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 625,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "21293:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21292:11:0"
									},
									"scope": 745,
									"src": "21235:113:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 661,
										"nodeType": "Block",
										"src": "21587:44:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 658,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"id": 655,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 651,
																			"name": "z",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 648,
																			"src": "21607:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 654,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 652,
																				"name": "x",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 643,
																				"src": "21611:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 653,
																				"name": "y",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 645,
																				"src": "21615:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "21611:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "21607:9:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 656,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "21606:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 657,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 643,
																"src": "21621:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "21606:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 650,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "21598:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 659,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "21598:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 660,
												"nodeType": "ExpressionStatement",
												"src": "21598:25:0"
											}
										]
									},
									"documentation": {
										"id": 641,
										"nodeType": "StructuredDocumentation",
										"src": "21356:156:0",
										"text": "@notice Returns x - y, reverts if underflows\n @param x The minuend\n @param y The subtrahend\n @return z The difference of x and y"
									},
									"id": 662,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 646,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 643,
												"mutability": "mutable",
												"name": "x",
												"nodeType": "VariableDeclaration",
												"scope": 662,
												"src": "21531:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 642,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "21531:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 645,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 662,
												"src": "21542:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 644,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "21542:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21530:22:0"
									},
									"returnParameters": {
										"id": 649,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 648,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 662,
												"src": "21576:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 647,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "21576:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21575:11:0"
									},
									"scope": 745,
									"src": "21518:113:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 689,
										"nodeType": "Block",
										"src": "21871:58:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 686,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 675,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 673,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 665,
																	"src": "21890:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 674,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "21895:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "21890:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 685,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 683,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"components": [
																			{
																				"id": 680,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftHandSide": {
																					"id": 676,
																					"name": "z",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 670,
																					"src": "21901:1:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "Assignment",
																				"operator": "=",
																				"rightHandSide": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 679,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 677,
																						"name": "x",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 665,
																						"src": "21905:1:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 678,
																						"name": "y",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 667,
																						"src": "21909:1:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "21905:5:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "21901:9:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 681,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "21900:11:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 682,
																		"name": "x",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 665,
																		"src": "21914:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "21900:15:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"id": 684,
																	"name": "y",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 667,
																	"src": "21919:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "21900:20:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "21890:30:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 672,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "21882:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 687,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "21882:39:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 688,
												"nodeType": "ExpressionStatement",
												"src": "21882:39:0"
											}
										]
									},
									"documentation": {
										"id": 663,
										"nodeType": "StructuredDocumentation",
										"src": "21639:157:0",
										"text": "@notice Returns x * y, reverts if overflows\n @param x The multiplicand\n @param y The multiplier\n @return z The product of x and y"
									},
									"id": 690,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 668,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 665,
												"mutability": "mutable",
												"name": "x",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "21815:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 664,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "21815:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 667,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "21826:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 666,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "21826:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21814:22:0"
									},
									"returnParameters": {
										"id": 671,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 670,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "21860:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 669,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "21860:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21859:11:0"
									},
									"scope": 745,
									"src": "21802:127:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 716,
										"nodeType": "Block",
										"src": "22166:56:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 713,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 708,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"id": 705,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 701,
																				"name": "z",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 698,
																				"src": "22186:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"commonType": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				},
																				"id": 704,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 702,
																					"name": "x",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 693,
																					"src": "22190:1:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "+",
																				"rightExpression": {
																					"id": 703,
																					"name": "y",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 695,
																					"src": "22194:1:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				},
																				"src": "22190:5:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "22186:9:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 706,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "22185:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">=",
																"rightExpression": {
																	"id": 707,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 693,
																	"src": "22200:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "22185:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 711,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 709,
																			"name": "y",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 695,
																			"src": "22206:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 710,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "22211:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "22206:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 712,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "22205:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "22185:28:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 700,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "22177:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 714,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "22177:37:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 715,
												"nodeType": "ExpressionStatement",
												"src": "22177:37:0"
											}
										]
									},
									"documentation": {
										"id": 691,
										"nodeType": "StructuredDocumentation",
										"src": "21937:157:0",
										"text": "@notice Returns x + y, reverts if overflows or underflows\n @param x The augend\n @param y The addend\n @return z The sum of x and y"
									},
									"id": 717,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 696,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 693,
												"mutability": "mutable",
												"name": "x",
												"nodeType": "VariableDeclaration",
												"scope": 717,
												"src": "22113:8:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 692,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "22113:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 695,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 717,
												"src": "22123:8:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 694,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "22123:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "22112:20:0"
									},
									"returnParameters": {
										"id": 699,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 698,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 717,
												"src": "22156:8:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 697,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "22156:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "22155:10:0"
									},
									"scope": 745,
									"src": "22100:122:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 743,
										"nodeType": "Block",
										"src": "22471:56:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 740,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 735,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"id": 732,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 728,
																				"name": "z",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 725,
																				"src": "22491:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"commonType": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				},
																				"id": 731,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 729,
																					"name": "x",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 720,
																					"src": "22495:1:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 730,
																					"name": "y",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 722,
																					"src": "22499:1:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				},
																				"src": "22495:5:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "22491:9:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 733,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "22490:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"id": 734,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 720,
																	"src": "22505:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "22490:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 738,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 736,
																			"name": "y",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 722,
																			"src": "22511:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 737,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "22516:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "22511:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 739,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "22510:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "22490:28:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 727,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "22482:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 741,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "22482:37:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 742,
												"nodeType": "ExpressionStatement",
												"src": "22482:37:0"
											}
										]
									},
									"documentation": {
										"id": 718,
										"nodeType": "StructuredDocumentation",
										"src": "22230:169:0",
										"text": "@notice Returns x - y, reverts if overflows or underflows\n @param x The minuend\n @param y The subtrahend\n @return z The difference of x and y"
									},
									"id": 744,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 723,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 720,
												"mutability": "mutable",
												"name": "x",
												"nodeType": "VariableDeclaration",
												"scope": 744,
												"src": "22418:8:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 719,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "22418:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 722,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 744,
												"src": "22428:8:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 721,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "22428:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "22417:20:0"
									},
									"returnParameters": {
										"id": 726,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 725,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 744,
												"src": "22461:8:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 724,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "22461:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "22460:10:0"
									},
									"scope": 745,
									"src": "22405:122:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3471,
							"src": "21044:1486:0"
						},
						{
							"id": 746,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "22597:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 747,
								"nodeType": "StructuredDocumentation",
								"src": "22624:72:0",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 822,
							"linearizedBaseContracts": [
								822
							],
							"name": "IERC20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 748,
										"nodeType": "StructuredDocumentation",
										"src": "22722:68:0",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 753,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 749,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "22816:2:0"
									},
									"returnParameters": {
										"id": 752,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 751,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 753,
												"src": "22842:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 750,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "22842:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "22841:9:0"
									},
									"scope": 822,
									"src": "22796:55:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 754,
										"nodeType": "StructuredDocumentation",
										"src": "22859:74:0",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 761,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 757,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 756,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 761,
												"src": "22958:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 755,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "22958:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "22957:17:0"
									},
									"returnParameters": {
										"id": 760,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 759,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 761,
												"src": "22998:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 758,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "22998:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "22997:9:0"
									},
									"scope": 822,
									"src": "22939:68:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 762,
										"nodeType": "StructuredDocumentation",
										"src": "23015:215:0",
										"text": " @dev Moves `amount` tokens from the caller's account to `recipient`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 771,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 767,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 764,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 771,
												"src": "23254:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 763,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "23254:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 766,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 771,
												"src": "23273:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 765,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "23273:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "23253:35:0"
									},
									"returnParameters": {
										"id": 770,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 769,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 771,
												"src": "23307:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 768,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "23307:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "23306:6:0"
									},
									"scope": 822,
									"src": "23236:77:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 772,
										"nodeType": "StructuredDocumentation",
										"src": "23321:270:0",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 781,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 777,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 774,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 781,
												"src": "23616:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 773,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "23616:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 776,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 781,
												"src": "23631:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 775,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "23631:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "23615:32:0"
									},
									"returnParameters": {
										"id": 780,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 779,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 781,
												"src": "23671:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 778,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "23671:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "23670:9:0"
									},
									"scope": 822,
									"src": "23597:83:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 782,
										"nodeType": "StructuredDocumentation",
										"src": "23688:655:0",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 791,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 787,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 784,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 791,
												"src": "24366:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 783,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "24366:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 786,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 791,
												"src": "24383:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 785,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "24383:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "24365:33:0"
									},
									"returnParameters": {
										"id": 790,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 789,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 791,
												"src": "24417:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 788,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "24417:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "24416:6:0"
									},
									"scope": 822,
									"src": "24349:74:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 792,
										"nodeType": "StructuredDocumentation",
										"src": "24431:304:0",
										"text": " @dev Moves `amount` tokens from `sender` to `recipient` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 803,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 799,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 794,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 803,
												"src": "24763:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 793,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "24763:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 796,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 803,
												"src": "24779:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 795,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "24779:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 798,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 803,
												"src": "24798:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 797,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "24798:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "24762:51:0"
									},
									"returnParameters": {
										"id": 802,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 801,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 803,
												"src": "24832:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 800,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "24832:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "24831:6:0"
									},
									"scope": 822,
									"src": "24741:97:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 804,
										"nodeType": "StructuredDocumentation",
										"src": "24846:163:0",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 812,
									"name": "Transfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 811,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 806,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 812,
												"src": "25030:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 805,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "25030:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 808,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 812,
												"src": "25052:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 807,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "25052:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 810,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 812,
												"src": "25072:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 809,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "25072:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "25029:57:0"
									},
									"src": "25015:72:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 813,
										"nodeType": "StructuredDocumentation",
										"src": "25095:151:0",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 821,
									"name": "Approval",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 820,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 815,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 821,
												"src": "25267:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 814,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "25267:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 817,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 821,
												"src": "25290:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 816,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "25290:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 819,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 821,
												"src": "25315:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 818,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "25315:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "25266:63:0"
									},
									"src": "25252:78:0"
								}
							],
							"scope": 3471,
							"src": "22698:2635:0"
						},
						{
							"id": 823,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "25381:24:0"
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 825,
										"name": "ISelfPermit",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 430,
										"src": "25748:11:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ISelfPermit_$430",
											"typeString": "contract ISelfPermit"
										}
									},
									"id": 826,
									"nodeType": "InheritanceSpecifier",
									"src": "25748:11:0"
								}
							],
							"contractDependencies": [
								430
							],
							"contractKind": "contract",
							"documentation": {
								"id": 824,
								"nodeType": "StructuredDocumentation",
								"src": "25417:299:0",
								"text": "@title Self Permit\n @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\n @dev These functions are expected to be embedded in multicalls to allow EOAs to approve a contract and call a function\n that requires an approval in a single transaction."
							},
							"fullyImplemented": true,
							"id": 984,
							"linearizedBaseContracts": [
								984,
								430
							],
							"name": "SelfPermit",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"baseFunctions": [
										381
									],
									"body": {
										"id": 860,
										"nodeType": "Block",
										"src": "25984:98:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 847,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "26022:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 848,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "26022:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"arguments": [
																{
																	"id": 851,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "26042:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SelfPermit_$984",
																		"typeString": "contract SelfPermit"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SelfPermit_$984",
																		"typeString": "contract SelfPermit"
																	}
																],
																"id": 850,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "26034:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 849,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "26034:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 852,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "26034:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 853,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 831,
															"src": "26049:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 854,
															"name": "deadline",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 833,
															"src": "26056:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 855,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 835,
															"src": "26066:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 856,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 837,
															"src": "26069:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 857,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 839,
															"src": "26072:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 844,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 829,
																	"src": "26008:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 843,
																"name": "IERC20Permit",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 465,
																"src": "25995:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20Permit_$465_$",
																	"typeString": "type(contract IERC20Permit)"
																}
															},
															"id": 845,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "25995:19:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$465",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 846,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "permit",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 450,
														"src": "25995:26:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"
														}
													},
													"id": 858,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "25995:79:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 859,
												"nodeType": "ExpressionStatement",
												"src": "25995:79:0"
											}
										]
									},
									"documentation": {
										"id": 827,
										"nodeType": "StructuredDocumentation",
										"src": "25767:27:0",
										"text": "@inheritdoc ISelfPermit"
									},
									"functionSelector": "f3995c67",
									"id": 861,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "selfPermit",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 841,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "25975:8:0"
									},
									"parameters": {
										"id": 840,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 829,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 861,
												"src": "25830:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 828,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "25830:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 831,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 861,
												"src": "25854:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 830,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "25854:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 833,
												"mutability": "mutable",
												"name": "deadline",
												"nodeType": "VariableDeclaration",
												"scope": 861,
												"src": "25878:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 832,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "25878:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 835,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 861,
												"src": "25905:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 834,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "25905:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 837,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 861,
												"src": "25923:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 836,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "25923:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 839,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 861,
												"src": "25943:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 838,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "25943:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "25819:140:0"
									},
									"returnParameters": {
										"id": 842,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "25984:0:0"
									},
									"scope": 984,
									"src": "25800:282:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										397
									],
									"body": {
										"id": 901,
										"nodeType": "Block",
										"src": "26320:126:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 890,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"expression": {
																	"id": 882,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "26359:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 883,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "26359:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															{
																"arguments": [
																	{
																		"id": 886,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "26379:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_SelfPermit_$984",
																			"typeString": "contract SelfPermit"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_SelfPermit_$984",
																			"typeString": "contract SelfPermit"
																		}
																	],
																	"id": 885,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "26371:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 884,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "26371:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 887,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "26371:13:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"id": 879,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 864,
																		"src": "26342:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 878,
																	"name": "IERC20",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 822,
																	"src": "26335:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_IERC20_$822_$",
																		"typeString": "type(contract IERC20)"
																	}
																},
																"id": 880,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "26335:13:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$822",
																	"typeString": "contract IERC20"
																}
															},
															"id": 881,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "allowance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 781,
															"src": "26335:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																"typeString": "function (address,address) view external returns (uint256)"
															}
														},
														"id": 888,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "26335:50:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 889,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 866,
														"src": "26388:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "26335:58:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 900,
												"nodeType": "IfStatement",
												"src": "26331:107:0",
												"trueBody": {
													"expression": {
														"arguments": [
															{
																"id": 892,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 864,
																"src": "26406:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 893,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 866,
																"src": "26413:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 894,
																"name": "deadline",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 868,
																"src": "26420:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 895,
																"name": "v",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 870,
																"src": "26430:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															{
																"id": 896,
																"name": "r",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 872,
																"src": "26433:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 897,
																"name": "s",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 874,
																"src": "26436:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 891,
															"name": "selfPermit",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 861,
															"src": "26395:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$",
																"typeString": "function (address,uint256,uint256,uint8,bytes32,bytes32)"
															}
														},
														"id": 898,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "26395:43:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 899,
													"nodeType": "ExpressionStatement",
													"src": "26395:43:0"
												}
											}
										]
									},
									"documentation": {
										"id": 862,
										"nodeType": "StructuredDocumentation",
										"src": "26090:27:0",
										"text": "@inheritdoc ISelfPermit"
									},
									"functionSelector": "c2e3140a",
									"id": 902,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "selfPermitIfNecessary",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 876,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "26311:8:0"
									},
									"parameters": {
										"id": 875,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 864,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 902,
												"src": "26164:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 863,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "26164:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 866,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 902,
												"src": "26188:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 865,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "26188:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 868,
												"mutability": "mutable",
												"name": "deadline",
												"nodeType": "VariableDeclaration",
												"scope": 902,
												"src": "26212:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 867,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "26212:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 870,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 902,
												"src": "26239:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 869,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "26239:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 872,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 902,
												"src": "26257:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 871,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "26257:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 874,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 902,
												"src": "26277:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 873,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "26277:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "26153:140:0"
									},
									"returnParameters": {
										"id": 877,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "26320:0:0"
									},
									"scope": 984,
									"src": "26123:323:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										413
									],
									"body": {
										"id": 937,
										"nodeType": "Block",
										"src": "26676:109:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 923,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "26721:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 924,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "26721:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"arguments": [
																{
																	"id": 927,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "26741:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SelfPermit_$984",
																		"typeString": "contract SelfPermit"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SelfPermit_$984",
																		"typeString": "contract SelfPermit"
																	}
																],
																"id": 926,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "26733:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 925,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "26733:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 928,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "26733:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 929,
															"name": "nonce",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 907,
															"src": "26748:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 930,
															"name": "expiry",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 909,
															"src": "26755:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "74727565",
															"id": 931,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "26763:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"id": 932,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 911,
															"src": "26769:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 933,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 913,
															"src": "26772:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 934,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 915,
															"src": "26775:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 920,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 905,
																	"src": "26707:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 919,
																"name": "IERC20PermitAllowed",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 363,
																"src": "26687:19:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20PermitAllowed_$363_$",
																	"typeString": "type(contract IERC20PermitAllowed)"
																}
															},
															"id": 921,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "26687:26:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20PermitAllowed_$363",
																"typeString": "contract IERC20PermitAllowed"
															}
														},
														"id": 922,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "permit",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 362,
														"src": "26687:33:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bool_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (address,address,uint256,uint256,bool,uint8,bytes32,bytes32) external"
														}
													},
													"id": 935,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "26687:90:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 936,
												"nodeType": "ExpressionStatement",
												"src": "26687:90:0"
											}
										]
									},
									"documentation": {
										"id": 903,
										"nodeType": "StructuredDocumentation",
										"src": "26454:27:0",
										"text": "@inheritdoc ISelfPermit"
									},
									"functionSelector": "4659a494",
									"id": 938,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "selfPermitAllowed",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 917,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "26667:8:0"
									},
									"parameters": {
										"id": 916,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 905,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 938,
												"src": "26524:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 904,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "26524:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 907,
												"mutability": "mutable",
												"name": "nonce",
												"nodeType": "VariableDeclaration",
												"scope": 938,
												"src": "26548:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 906,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "26548:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 909,
												"mutability": "mutable",
												"name": "expiry",
												"nodeType": "VariableDeclaration",
												"scope": 938,
												"src": "26572:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 908,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "26572:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 911,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 938,
												"src": "26597:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 910,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "26597:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 913,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 938,
												"src": "26615:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 912,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "26615:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 915,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 938,
												"src": "26635:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 914,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "26635:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "26513:138:0"
									},
									"returnParameters": {
										"id": 918,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "26676:0:0"
									},
									"scope": 984,
									"src": "26487:298:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										429
									],
									"body": {
										"id": 982,
										"nodeType": "Block",
										"src": "27028:156:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 971,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"expression": {
																	"id": 959,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "27067:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 960,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "27067:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															{
																"arguments": [
																	{
																		"id": 963,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "27087:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_SelfPermit_$984",
																			"typeString": "contract SelfPermit"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_SelfPermit_$984",
																			"typeString": "contract SelfPermit"
																		}
																	],
																	"id": 962,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "27079:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 961,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "27079:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 964,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "27079:13:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"id": 956,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 941,
																		"src": "27050:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 955,
																	"name": "IERC20",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 822,
																	"src": "27043:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_IERC20_$822_$",
																		"typeString": "type(contract IERC20)"
																	}
																},
																"id": 957,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "27043:13:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$822",
																	"typeString": "contract IERC20"
																}
															},
															"id": 958,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "allowance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 781,
															"src": "27043:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																"typeString": "function (address,address) view external returns (uint256)"
															}
														},
														"id": 965,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "27043:50:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 968,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "27101:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 967,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "27101:7:0",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 966,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "27096:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 969,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "27096:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 970,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "27096:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "27043:70:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 981,
												"nodeType": "IfStatement",
												"src": "27039:137:0",
												"trueBody": {
													"expression": {
														"arguments": [
															{
																"id": 973,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 941,
																"src": "27146:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 974,
																"name": "nonce",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 943,
																"src": "27153:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 975,
																"name": "expiry",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 945,
																"src": "27160:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 976,
																"name": "v",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 947,
																"src": "27168:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															{
																"id": 977,
																"name": "r",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 949,
																"src": "27171:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 978,
																"name": "s",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 951,
																"src": "27174:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 972,
															"name": "selfPermitAllowed",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 938,
															"src": "27128:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$",
																"typeString": "function (address,uint256,uint256,uint8,bytes32,bytes32)"
															}
														},
														"id": 979,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "27128:48:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 980,
													"nodeType": "ExpressionStatement",
													"src": "27128:48:0"
												}
											}
										]
									},
									"documentation": {
										"id": 939,
										"nodeType": "StructuredDocumentation",
										"src": "26793:27:0",
										"text": "@inheritdoc ISelfPermit"
									},
									"functionSelector": "a4a78f0c",
									"id": 983,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "selfPermitAllowedIfNecessary",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 953,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "27019:8:0"
									},
									"parameters": {
										"id": 952,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 941,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 983,
												"src": "26874:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 940,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "26874:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 943,
												"mutability": "mutable",
												"name": "nonce",
												"nodeType": "VariableDeclaration",
												"scope": 983,
												"src": "26898:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 942,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "26898:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 945,
												"mutability": "mutable",
												"name": "expiry",
												"nodeType": "VariableDeclaration",
												"scope": 983,
												"src": "26922:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 944,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "26922:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 947,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 983,
												"src": "26947:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 946,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "26947:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 949,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 983,
												"src": "26965:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 948,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "26965:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 951,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 983,
												"src": "26985:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 950,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "26985:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "26863:138:0"
									},
									"returnParameters": {
										"id": 954,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "27028:0:0"
									},
									"scope": 984,
									"src": "26826:358:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 3471,
							"src": "25716:1471:0"
						},
						{
							"id": 985,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "27244:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"fullyImplemented": true,
							"id": 1153,
							"linearizedBaseContracts": [
								1153
							],
							"name": "TransferHelper",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1033,
										"nodeType": "Block",
										"src": "27847:233:0",
										"statements": [
											{
												"assignments": [
													998,
													1000
												],
												"declarations": [
													{
														"constant": false,
														"id": 998,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 1033,
														"src": "27859:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 997,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "27859:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1000,
														"mutability": "mutable",
														"name": "data",
														"nodeType": "VariableDeclaration",
														"scope": 1033,
														"src": "27873:17:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 999,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "27873:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1013,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 1005,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 822,
																			"src": "27941:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$822_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1006,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 803,
																		"src": "27941:19:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function IERC20.transferFrom(address,address,uint256) returns (bool)"
																		}
																	},
																	"id": 1007,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "27941:28:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 1008,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 990,
																	"src": "27971:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1009,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 992,
																	"src": "27977:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1010,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 994,
																	"src": "27981:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1003,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "27918:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1004,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "27918:22:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 1011,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "27918:69:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1001,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 988,
															"src": "27907:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1002,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "27907:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1012,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "27907:81:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "27858:130:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1029,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1015,
																"name": "success",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 998,
																"src": "28007:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 1027,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1019,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 1016,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1000,
																					"src": "28019:4:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 1017,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "28019:11:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "30",
																				"id": 1018,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "28034:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"src": "28019:16:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "||",
																		"rightExpression": {
																			"arguments": [
																				{
																					"id": 1022,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1000,
																					"src": "28050:4:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				{
																					"components": [
																						{
																							"id": 1024,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "28057:4:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_bool_$",
																								"typeString": "type(bool)"
																							},
																							"typeName": {
																								"id": 1023,
																								"name": "bool",
																								"nodeType": "ElementaryTypeName",
																								"src": "28057:4:0",
																								"typeDescriptions": {}
																							}
																						}
																					],
																					"id": 1025,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "28056:6:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					},
																					{
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				],
																				"expression": {
																					"id": 1020,
																					"name": "abi",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967295,
																					"src": "28039:3:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_abi",
																						"typeString": "abi"
																					}
																				},
																				"id": 1021,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberName": "decode",
																				"nodeType": "MemberAccess",
																				"src": "28039:10:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 1026,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "28039:24:0",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "28019:44:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 1028,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "28018:46:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "28007:57:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "535446",
															"id": 1030,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "28066:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a1c4b1d67db284650e7cfb49cb11ce76848206ad466478425bd3418f8bbb9a86",
																"typeString": "literal_string \"STF\""
															},
															"value": "STF"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a1c4b1d67db284650e7cfb49cb11ce76848206ad466478425bd3418f8bbb9a86",
																"typeString": "literal_string \"STF\""
															}
														],
														"id": 1014,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "27999:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1031,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "27999:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1032,
												"nodeType": "ExpressionStatement",
												"src": "27999:73:0"
											}
										]
									},
									"documentation": {
										"id": 986,
										"nodeType": "StructuredDocumentation",
										"src": "27304:403:0",
										"text": "@notice Transfers tokens from the targeted address to the given destination\n @notice Errors with 'STF' if transfer fails\n @param token The contract address of the token to be transferred\n @param from The originating address from which the tokens will be transferred\n @param to The destination address of the transfer\n @param value The amount to be transferred"
									},
									"id": 1034,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 995,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 988,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 1034,
												"src": "27749:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 987,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "27749:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 990,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 1034,
												"src": "27773:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 989,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "27773:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 992,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 1034,
												"src": "27796:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 991,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "27796:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 994,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 1034,
												"src": "27817:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 993,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "27817:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "27738:99:0"
									},
									"returnParameters": {
										"id": 996,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "27847:0:0"
									},
									"scope": 1153,
									"src": "27713:367:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1079,
										"nodeType": "Block",
										"src": "28486:209:0",
										"statements": [
											{
												"assignments": [
													1045,
													1047
												],
												"declarations": [
													{
														"constant": false,
														"id": 1045,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 1079,
														"src": "28498:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1044,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "28498:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1047,
														"mutability": "mutable",
														"name": "data",
														"nodeType": "VariableDeclaration",
														"scope": 1079,
														"src": "28512:17:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1046,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "28512:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1059,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 1052,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 822,
																			"src": "28567:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$822_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1053,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 771,
																		"src": "28567:15:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_declaration_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function IERC20.transfer(address,uint256) returns (bool)"
																		}
																	},
																	"id": 1054,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "28567:24:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 1055,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1039,
																	"src": "28593:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1056,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1041,
																	"src": "28597:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1050,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "28544:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1051,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "28544:22:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 1057,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "28544:59:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1048,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1037,
															"src": "28533:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1049,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "28533:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1058,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "28533:71:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "28497:107:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1075,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1061,
																"name": "success",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1045,
																"src": "28623:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 1073,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1065,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 1062,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1047,
																					"src": "28635:4:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 1063,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "28635:11:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "30",
																				"id": 1064,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "28650:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"src": "28635:16:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "||",
																		"rightExpression": {
																			"arguments": [
																				{
																					"id": 1068,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1047,
																					"src": "28666:4:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				{
																					"components": [
																						{
																							"id": 1070,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "28673:4:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_bool_$",
																								"typeString": "type(bool)"
																							},
																							"typeName": {
																								"id": 1069,
																								"name": "bool",
																								"nodeType": "ElementaryTypeName",
																								"src": "28673:4:0",
																								"typeDescriptions": {}
																							}
																						}
																					],
																					"id": 1071,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "28672:6:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					},
																					{
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				],
																				"expression": {
																					"id": 1066,
																					"name": "abi",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967295,
																					"src": "28655:3:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_abi",
																						"typeString": "abi"
																					}
																				},
																				"id": 1067,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberName": "decode",
																				"nodeType": "MemberAccess",
																				"src": "28655:10:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 1072,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "28655:24:0",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "28635:44:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 1074,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "28634:46:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "28623:57:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5354",
															"id": 1076,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "28682:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8e992d6a09e3feb7936717fa482f3a7086f18407e19b697f3153d17fd25870ca",
																"typeString": "literal_string \"ST\""
															},
															"value": "ST"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8e992d6a09e3feb7936717fa482f3a7086f18407e19b697f3153d17fd25870ca",
																"typeString": "literal_string \"ST\""
															}
														],
														"id": 1060,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "28615:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1077,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "28615:72:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1078,
												"nodeType": "ExpressionStatement",
												"src": "28615:72:0"
											}
										]
									},
									"documentation": {
										"id": 1035,
										"nodeType": "StructuredDocumentation",
										"src": "28088:285:0",
										"text": "@notice Transfers tokens from msg.sender to a recipient\n @dev Errors with ST if transfer fails\n @param token The contract address of the token which will be transferred\n @param to The recipient of the transfer\n @param value The value of the transfer"
									},
									"id": 1080,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1042,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1037,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 1080,
												"src": "28411:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1036,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "28411:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1039,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 1080,
												"src": "28435:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1038,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "28435:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1041,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 1080,
												"src": "28456:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1040,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "28456:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "28400:76:0"
									},
									"returnParameters": {
										"id": 1043,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "28486:0:0"
									},
									"scope": 1153,
									"src": "28379:316:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1125,
										"nodeType": "Block",
										"src": "29161:208:0",
										"statements": [
											{
												"assignments": [
													1091,
													1093
												],
												"declarations": [
													{
														"constant": false,
														"id": 1091,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 1125,
														"src": "29173:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1090,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "29173:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1093,
														"mutability": "mutable",
														"name": "data",
														"nodeType": "VariableDeclaration",
														"scope": 1125,
														"src": "29187:17:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1092,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "29187:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1105,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 1098,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 822,
																			"src": "29242:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$822_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1099,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 791,
																		"src": "29242:14:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_declaration_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function IERC20.approve(address,uint256) returns (bool)"
																		}
																	},
																	"id": 1100,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "29242:23:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 1101,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1085,
																	"src": "29267:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1102,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1087,
																	"src": "29271:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1096,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "29219:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1097,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "29219:22:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 1103,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "29219:58:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1094,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1083,
															"src": "29208:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1095,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "29208:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1104,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "29208:70:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "29172:106:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1121,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1107,
																"name": "success",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1091,
																"src": "29297:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 1119,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1111,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 1108,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1093,
																					"src": "29309:4:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 1109,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "29309:11:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "30",
																				"id": 1110,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "29324:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"src": "29309:16:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "||",
																		"rightExpression": {
																			"arguments": [
																				{
																					"id": 1114,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1093,
																					"src": "29340:4:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				{
																					"components": [
																						{
																							"id": 1116,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "29347:4:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_bool_$",
																								"typeString": "type(bool)"
																							},
																							"typeName": {
																								"id": 1115,
																								"name": "bool",
																								"nodeType": "ElementaryTypeName",
																								"src": "29347:4:0",
																								"typeDescriptions": {}
																							}
																						}
																					],
																					"id": 1117,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "29346:6:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					},
																					{
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				],
																				"expression": {
																					"id": 1112,
																					"name": "abi",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967295,
																					"src": "29329:3:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_abi",
																						"typeString": "abi"
																					}
																				},
																				"id": 1113,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberName": "decode",
																				"nodeType": "MemberAccess",
																				"src": "29329:10:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 1118,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "29329:24:0",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "29309:44:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 1120,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "29308:46:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "29297:57:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5341",
															"id": 1122,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "29356:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0c382912095e7706ed01a66755a50c713445aceaf5a9168954498b03dd381faa",
																"typeString": "literal_string \"SA\""
															},
															"value": "SA"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0c382912095e7706ed01a66755a50c713445aceaf5a9168954498b03dd381faa",
																"typeString": "literal_string \"SA\""
															}
														],
														"id": 1106,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "29289:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1123,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "29289:72:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1124,
												"nodeType": "ExpressionStatement",
												"src": "29289:72:0"
											}
										]
									},
									"documentation": {
										"id": 1081,
										"nodeType": "StructuredDocumentation",
										"src": "28703:346:0",
										"text": "@notice Approves the stipulated contract to spend the given allowance in the given token\n @dev Errors with 'SA' if transfer fails\n @param token The contract address of the token to be approved\n @param to The target of the approval\n @param value The amount of the given token the target will be allowed to spend"
									},
									"id": 1126,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1088,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1083,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 1126,
												"src": "29086:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1082,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "29086:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1085,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 1126,
												"src": "29110:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1084,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "29110:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1087,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 1126,
												"src": "29131:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1086,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "29131:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "29075:76:0"
									},
									"returnParameters": {
										"id": 1089,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "29161:0:0"
									},
									"scope": 1153,
									"src": "29055:314:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1151,
										"nodeType": "Block",
										"src": "29626:107:0",
										"statements": [
											{
												"assignments": [
													1135,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 1135,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 1151,
														"src": "29638:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1134,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "29638:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 1145,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1142,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "29688:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1141,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "29678:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (bytes memory)"
																},
																"typeName": {
																	"id": 1140,
																	"name": "bytes",
																	"nodeType": "ElementaryTypeName",
																	"src": "29682:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_storage_ptr",
																		"typeString": "bytes"
																	}
																}
															},
															"id": 1143,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "29678:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 1136,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1129,
																"src": "29656:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1137,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "29656:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 1139,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 1138,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1131,
																"src": "29671:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "29656:21:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1144,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "29656:35:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "29637:54:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1147,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1135,
															"src": "29710:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "535445",
															"id": 1148,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "29719:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_48541fce89df928ec30caa1aed6c0cd94b8e2ef76b3c68b10b9a184ceadb93d4",
																"typeString": "literal_string \"STE\""
															},
															"value": "STE"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_48541fce89df928ec30caa1aed6c0cd94b8e2ef76b3c68b10b9a184ceadb93d4",
																"typeString": "literal_string \"STE\""
															}
														],
														"id": 1146,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "29702:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1149,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "29702:23:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1150,
												"nodeType": "ExpressionStatement",
												"src": "29702:23:0"
											}
										]
									},
									"documentation": {
										"id": 1127,
										"nodeType": "StructuredDocumentation",
										"src": "29377:182:0",
										"text": "@notice Transfers ETH to the recipient address\n @dev Fails with `STE`\n @param to The destination of the transfer\n @param value The value to be transferred"
									},
									"id": 1152,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferETH",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1132,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1129,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 1152,
												"src": "29590:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "29590:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1131,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 1152,
												"src": "29602:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1130,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "29602:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "29589:27:0"
									},
									"returnParameters": {
										"id": 1133,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "29626:0:0"
									},
									"scope": 1153,
									"src": "29565:168:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3471,
							"src": "27274:2462:0"
						},
						{
							"id": 1154,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "29795:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1156,
										"name": "IERC20",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 822,
										"src": "29876:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$822",
											"typeString": "contract IERC20"
										}
									},
									"id": 1157,
									"nodeType": "InheritanceSpecifier",
									"src": "29876:6:0"
								}
							],
							"contractDependencies": [
								822
							],
							"contractKind": "interface",
							"documentation": {
								"id": 1155,
								"nodeType": "StructuredDocumentation",
								"src": "29824:32:0",
								"text": "@title Interface for WETH9"
							},
							"fullyImplemented": false,
							"id": 1168,
							"linearizedBaseContracts": [
								1168,
								822
							],
							"name": "IWETH9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1158,
										"nodeType": "StructuredDocumentation",
										"src": "29890:46:0",
										"text": "@notice Deposit ether to get wrapped ether"
									},
									"functionSelector": "d0e30db0",
									"id": 1161,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "deposit",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1159,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "29958:2:0"
									},
									"returnParameters": {
										"id": 1160,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "29977:0:0"
									},
									"scope": 1168,
									"src": "29942:36:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1162,
										"nodeType": "StructuredDocumentation",
										"src": "29986:47:0",
										"text": "@notice Withdraw wrapped ether to get ether"
									},
									"functionSelector": "2e1a7d4d",
									"id": 1167,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "withdraw",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1165,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1164,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1167,
												"src": "30057:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1163,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "30057:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "30056:9:0"
									},
									"returnParameters": {
										"id": 1166,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "30074:0:0"
									},
									"scope": 1168,
									"src": "30039:36:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 3471,
							"src": "29856:222:0"
						},
						{
							"id": 1169,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "30130:23:0"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1170,
								"nodeType": "StructuredDocumentation",
								"src": "30157:102:0",
								"text": "@title Function for getting block timestamp\n @dev Base contract that is overridden for tests"
							},
							"fullyImplemented": true,
							"id": 1181,
							"linearizedBaseContracts": [
								1181
							],
							"name": "BlockTimestamp",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1179,
										"nodeType": "Block",
										"src": "30478:41:0",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1176,
														"name": "block",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967292,
														"src": "30496:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_block",
															"typeString": "block"
														}
													},
													"id": 1177,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "timestamp",
													"nodeType": "MemberAccess",
													"src": "30496:15:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1175,
												"id": 1178,
												"nodeType": "Return",
												"src": "30489:22:0"
											}
										]
									},
									"documentation": {
										"id": 1171,
										"nodeType": "StructuredDocumentation",
										"src": "30299:106:0",
										"text": "@dev Method that exists purely to be overridden for tests\n @return The current block timestamp"
									},
									"id": 1180,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_blockTimestamp",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1172,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "30435:2:0"
									},
									"returnParameters": {
										"id": 1175,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1174,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1180,
												"src": "30469:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1173,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "30469:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "30468:9:0"
									},
									"scope": 1181,
									"src": "30411:108:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 3471,
							"src": "30259:263:0"
						},
						{
							"id": 1182,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "30579:23:0"
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1183,
										"name": "BlockTimestamp",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1181,
										"src": "30649:14:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_BlockTimestamp_$1181",
											"typeString": "contract BlockTimestamp"
										}
									},
									"id": 1184,
									"nodeType": "InheritanceSpecifier",
									"src": "30649:14:0"
								}
							],
							"contractDependencies": [
								1181
							],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1199,
							"linearizedBaseContracts": [
								1199,
								1181
							],
							"name": "PeripheryValidation",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1197,
										"nodeType": "Block",
										"src": "30712:92:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1192,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1189,
																	"name": "_blockTimestamp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1180,
																	"src": "30731:15:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 1190,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "30731:17:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 1191,
																"name": "deadline",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1186,
																"src": "30752:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "30731:29:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5472616e73616374696f6e20746f6f206f6c64",
															"id": 1193,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "30762:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c2621685b6a86291a4533558eb72fba04db12a0363db47624d86d9bbb608d293",
																"typeString": "literal_string \"Transaction too old\""
															},
															"value": "Transaction too old"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c2621685b6a86291a4533558eb72fba04db12a0363db47624d86d9bbb608d293",
																"typeString": "literal_string \"Transaction too old\""
															}
														],
														"id": 1188,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "30723:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1194,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "30723:61:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1195,
												"nodeType": "ExpressionStatement",
												"src": "30723:61:0"
											},
											{
												"id": 1196,
												"nodeType": "PlaceholderStatement",
												"src": "30795:1:0"
											}
										]
									},
									"id": 1198,
									"name": "checkDeadline",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1187,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1186,
												"mutability": "mutable",
												"name": "deadline",
												"nodeType": "VariableDeclaration",
												"scope": 1198,
												"src": "30694:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1185,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "30694:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "30693:18:0"
									},
									"src": "30671:133:0",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3471,
							"src": "30608:199:0"
						},
						{
							"id": 1200,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "30875:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1201,
								"nodeType": "StructuredDocumentation",
								"src": "30903:93:0",
								"text": "@title Immutable state\n @notice Functions that return immutable state of the router"
							},
							"fullyImplemented": false,
							"id": 1214,
							"linearizedBaseContracts": [
								1214
							],
							"name": "IPeripheryImmutableState",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1202,
										"nodeType": "StructuredDocumentation",
										"src": "31038:57:0",
										"text": "@return Returns the address of the Uniswap V3 factory"
									},
									"functionSelector": "c45a0155",
									"id": 1207,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "factory",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1203,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "31117:2:0"
									},
									"returnParameters": {
										"id": 1206,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1205,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1207,
												"src": "31143:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1204,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "31143:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "31142:9:0"
									},
									"scope": 1214,
									"src": "31101:51:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1208,
										"nodeType": "StructuredDocumentation",
										"src": "31160:40:0",
										"text": "@return Returns the address of WETH9"
									},
									"functionSelector": "4aa4a4fc",
									"id": 1213,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "WETH9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1209,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "31220:2:0"
									},
									"returnParameters": {
										"id": 1212,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1211,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1213,
												"src": "31246:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1210,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "31246:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "31245:9:0"
									},
									"scope": 1214,
									"src": "31206:49:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 3471,
							"src": "30996:262:0"
						},
						{
							"id": 1215,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "31319:23:0"
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1217,
										"name": "IPeripheryImmutableState",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1214,
										"src": "31478:24:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IPeripheryImmutableState_$1214",
											"typeString": "contract IPeripheryImmutableState"
										}
									},
									"id": 1218,
									"nodeType": "InheritanceSpecifier",
									"src": "31478:24:0"
								}
							],
							"contractDependencies": [
								1214
							],
							"contractKind": "contract",
							"documentation": {
								"id": 1216,
								"nodeType": "StructuredDocumentation",
								"src": "31348:85:0",
								"text": "@title Immutable state\n @notice Immutable state used by periphery contracts"
							},
							"fullyImplemented": true,
							"id": 1243,
							"linearizedBaseContracts": [
								1243,
								1214
							],
							"name": "PeripheryImmutableState",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"baseFunctions": [
										1207
									],
									"constant": false,
									"documentation": {
										"id": 1219,
										"nodeType": "StructuredDocumentation",
										"src": "31510:40:0",
										"text": "@inheritdoc IPeripheryImmutableState"
									},
									"functionSelector": "c45a0155",
									"id": 1222,
									"mutability": "immutable",
									"name": "factory",
									"nodeType": "VariableDeclaration",
									"overrides": {
										"id": 1221,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "31581:8:0"
									},
									"scope": 1243,
									"src": "31556:41:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1220,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "31556:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1213
									],
									"constant": false,
									"documentation": {
										"id": 1223,
										"nodeType": "StructuredDocumentation",
										"src": "31604:40:0",
										"text": "@inheritdoc IPeripheryImmutableState"
									},
									"functionSelector": "4aa4a4fc",
									"id": 1226,
									"mutability": "immutable",
									"name": "WETH9",
									"nodeType": "VariableDeclaration",
									"overrides": {
										"id": 1225,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "31675:8:0"
									},
									"scope": 1243,
									"src": "31650:39:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1224,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "31650:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 1241,
										"nodeType": "Block",
										"src": "31744:62:0",
										"statements": [
											{
												"expression": {
													"id": 1235,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1233,
														"name": "factory",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1222,
														"src": "31755:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1234,
														"name": "_factory",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1228,
														"src": "31765:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "31755:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1236,
												"nodeType": "ExpressionStatement",
												"src": "31755:18:0"
											},
											{
												"expression": {
													"id": 1239,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1237,
														"name": "WETH9",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1226,
														"src": "31784:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1238,
														"name": "_WETH9",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1230,
														"src": "31792:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "31784:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1240,
												"nodeType": "ExpressionStatement",
												"src": "31784:14:0"
											}
										]
									},
									"id": 1242,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1231,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1228,
												"mutability": "mutable",
												"name": "_factory",
												"nodeType": "VariableDeclaration",
												"scope": 1242,
												"src": "31710:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1227,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "31710:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1230,
												"mutability": "mutable",
												"name": "_WETH9",
												"nodeType": "VariableDeclaration",
												"scope": 1242,
												"src": "31728:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1229,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "31728:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "31709:34:0"
									},
									"returnParameters": {
										"id": 1232,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "31744:0:0"
									},
									"scope": 1243,
									"src": "31698:108:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3471,
							"src": "31433:376:0"
						},
						{
							"id": 1244,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "31864:24:0"
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1245,
										"name": "IPeripheryPayments",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 585,
										"src": "31941:18:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IPeripheryPayments_$585",
											"typeString": "contract IPeripheryPayments"
										}
									},
									"id": 1246,
									"nodeType": "InheritanceSpecifier",
									"src": "31941:18:0"
								},
								{
									"baseName": {
										"id": 1247,
										"name": "PeripheryImmutableState",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1243,
										"src": "31961:23:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_PeripheryImmutableState_$1243",
											"typeString": "contract PeripheryImmutableState"
										}
									},
									"id": 1248,
									"nodeType": "InheritanceSpecifier",
									"src": "31961:23:0"
								}
							],
							"contractDependencies": [
								585,
								1214,
								1243
							],
							"contractKind": "contract",
							"fullyImplemented": false,
							"id": 1447,
							"linearizedBaseContracts": [
								1447,
								1243,
								1214,
								585
							],
							"name": "PeripheryPayments",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1259,
										"nodeType": "Block",
										"src": "32019:60:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1255,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1252,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "32038:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1253,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "32038:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 1254,
																"name": "WETH9",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1226,
																"src": "32052:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "32038:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f74205745544839",
															"id": 1256,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "32059:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9a5f12903ee10b20c1ea1ca8d6f6723d553112d744fe8db2bc5453efb990e6b1",
																"typeString": "literal_string \"Not WETH9\""
															},
															"value": "Not WETH9"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9a5f12903ee10b20c1ea1ca8d6f6723d553112d744fe8db2bc5453efb990e6b1",
																"typeString": "literal_string \"Not WETH9\""
															}
														],
														"id": 1251,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "32030:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1257,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "32030:41:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1258,
												"nodeType": "ExpressionStatement",
												"src": "32030:41:0"
											}
										]
									},
									"id": 1260,
									"implemented": true,
									"kind": "receive",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1249,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "31999:2:0"
									},
									"returnParameters": {
										"id": 1250,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "32019:0:0"
									},
									"scope": 1447,
									"src": "31992:87:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										570
									],
									"body": {
										"id": 1307,
										"nodeType": "Block",
										"src": "32214:318:0",
										"statements": [
											{
												"assignments": [
													1270
												],
												"declarations": [
													{
														"constant": false,
														"id": 1270,
														"mutability": "mutable",
														"name": "balanceWETH9",
														"nodeType": "VariableDeclaration",
														"scope": 1307,
														"src": "32225:20:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1269,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "32225:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1280,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1277,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "32280:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_PeripheryPayments_$1447",
																		"typeString": "contract PeripheryPayments"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_PeripheryPayments_$1447",
																		"typeString": "contract PeripheryPayments"
																	}
																],
																"id": 1276,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "32272:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1275,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "32272:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 1278,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "32272:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1272,
																	"name": "WETH9",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1226,
																	"src": "32255:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1271,
																"name": "IWETH9",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1168,
																"src": "32248:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IWETH9_$1168_$",
																	"typeString": "type(contract IWETH9)"
																}
															},
															"id": 1273,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "32248:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IWETH9_$1168",
																"typeString": "contract IWETH9"
															}
														},
														"id": 1274,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 761,
														"src": "32248:23:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 1279,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "32248:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "32225:61:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1284,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1282,
																"name": "balanceWETH9",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1270,
																"src": "32305:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1283,
																"name": "amountMinimum",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1263,
																"src": "32321:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "32305:29:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e73756666696369656e74205745544839",
															"id": 1285,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "32336:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_01e23337f78f001c03af3011e04e4dea54f4997ff97d41da263c1606bf0f9f73",
																"typeString": "literal_string \"Insufficient WETH9\""
															},
															"value": "Insufficient WETH9"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_01e23337f78f001c03af3011e04e4dea54f4997ff97d41da263c1606bf0f9f73",
																"typeString": "literal_string \"Insufficient WETH9\""
															}
														],
														"id": 1281,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "32297:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1286,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "32297:60:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1287,
												"nodeType": "ExpressionStatement",
												"src": "32297:60:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1290,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1288,
														"name": "balanceWETH9",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1270,
														"src": "32374:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1289,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "32389:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "32374:16:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1306,
												"nodeType": "IfStatement",
												"src": "32370:155:0",
												"trueBody": {
													"id": 1305,
													"nodeType": "Block",
													"src": "32392:133:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1295,
																		"name": "balanceWETH9",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1270,
																		"src": "32430:12:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 1292,
																				"name": "WETH9",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1226,
																				"src": "32414:5:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1291,
																			"name": "IWETH9",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1168,
																			"src": "32407:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IWETH9_$1168_$",
																				"typeString": "type(contract IWETH9)"
																			}
																		},
																		"id": 1293,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "32407:13:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IWETH9_$1168",
																			"typeString": "contract IWETH9"
																		}
																	},
																	"id": 1294,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "withdraw",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1167,
																	"src": "32407:22:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
																		"typeString": "function (uint256) external"
																	}
																},
																"id": 1296,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "32407:36:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1297,
															"nodeType": "ExpressionStatement",
															"src": "32407:36:0"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1301,
																		"name": "recipient",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1265,
																		"src": "32489:9:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1302,
																		"name": "balanceWETH9",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1270,
																		"src": "32500:12:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1298,
																		"name": "TransferHelper",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1153,
																		"src": "32458:14:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_TransferHelper_$1153_$",
																			"typeString": "type(library TransferHelper)"
																		}
																	},
																	"id": 1300,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "safeTransferETH",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1152,
																	"src": "32458:30:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,uint256)"
																	}
																},
																"id": 1303,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "32458:55:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1304,
															"nodeType": "ExpressionStatement",
															"src": "32458:55:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1261,
										"nodeType": "StructuredDocumentation",
										"src": "32087:34:0",
										"text": "@inheritdoc IPeripheryPayments"
									},
									"functionSelector": "49404b7c",
									"id": 1308,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "unwrapWETH9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1267,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "32205:8:0"
									},
									"parameters": {
										"id": 1266,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1263,
												"mutability": "mutable",
												"name": "amountMinimum",
												"nodeType": "VariableDeclaration",
												"scope": 1308,
												"src": "32148:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1262,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "32148:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1265,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1308,
												"src": "32171:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1264,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "32171:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "32147:42:0"
									},
									"returnParameters": {
										"id": 1268,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "32214:0:0"
									},
									"scope": 1447,
									"src": "32127:405:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										584
									],
									"body": {
										"id": 1351,
										"nodeType": "Block",
										"src": "32715:271:0",
										"statements": [
											{
												"assignments": [
													1320
												],
												"declarations": [
													{
														"constant": false,
														"id": 1320,
														"mutability": "mutable",
														"name": "balanceToken",
														"nodeType": "VariableDeclaration",
														"scope": 1351,
														"src": "32726:20:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1319,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "32726:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1330,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1327,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "32781:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_PeripheryPayments_$1447",
																		"typeString": "contract PeripheryPayments"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_PeripheryPayments_$1447",
																		"typeString": "contract PeripheryPayments"
																	}
																],
																"id": 1326,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "32773:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1325,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "32773:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 1328,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "32773:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1322,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1311,
																	"src": "32756:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1321,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 822,
																"src": "32749:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$822_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 1323,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "32749:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$822",
																"typeString": "contract IERC20"
															}
														},
														"id": 1324,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 761,
														"src": "32749:23:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 1329,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "32749:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "32726:61:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1334,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1332,
																"name": "balanceToken",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1320,
																"src": "32806:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1333,
																"name": "amountMinimum",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1313,
																"src": "32822:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "32806:29:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e73756666696369656e7420746f6b656e",
															"id": 1335,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "32837:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_2cf3b53843c7738cfb0b95230b455802cee89f2ea29be4a30eee707228c97571",
																"typeString": "literal_string \"Insufficient token\""
															},
															"value": "Insufficient token"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_2cf3b53843c7738cfb0b95230b455802cee89f2ea29be4a30eee707228c97571",
																"typeString": "literal_string \"Insufficient token\""
															}
														],
														"id": 1331,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "32798:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1336,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "32798:60:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1337,
												"nodeType": "ExpressionStatement",
												"src": "32798:60:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1340,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1338,
														"name": "balanceToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1320,
														"src": "32875:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1339,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "32890:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "32875:16:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1350,
												"nodeType": "IfStatement",
												"src": "32871:108:0",
												"trueBody": {
													"id": 1349,
													"nodeType": "Block",
													"src": "32893:86:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1344,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1311,
																		"src": "32936:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1345,
																		"name": "recipient",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1315,
																		"src": "32943:9:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1346,
																		"name": "balanceToken",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1320,
																		"src": "32954:12:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1341,
																		"name": "TransferHelper",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1153,
																		"src": "32908:14:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_TransferHelper_$1153_$",
																			"typeString": "type(library TransferHelper)"
																		}
																	},
																	"id": 1343,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1080,
																	"src": "32908:27:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 1347,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "32908:59:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1348,
															"nodeType": "ExpressionStatement",
															"src": "32908:59:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1309,
										"nodeType": "StructuredDocumentation",
										"src": "32540:34:0",
										"text": "@inheritdoc IPeripheryPayments"
									},
									"functionSelector": "df2ab5bb",
									"id": 1352,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sweepToken",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1317,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "32706:8:0"
									},
									"parameters": {
										"id": 1316,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1311,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 1352,
												"src": "32610:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1310,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "32610:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1313,
												"mutability": "mutable",
												"name": "amountMinimum",
												"nodeType": "VariableDeclaration",
												"scope": 1352,
												"src": "32634:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1312,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "32634:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1315,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1352,
												"src": "32666:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1314,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "32666:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "32599:91:0"
									},
									"returnParameters": {
										"id": 1318,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "32715:0:0"
									},
									"scope": 1447,
									"src": "32580:406:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										574
									],
									"body": {
										"id": 1377,
										"nodeType": "Block",
										"src": "33081:115:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1363,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1359,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "33104:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_PeripheryPayments_$1447",
																		"typeString": "contract PeripheryPayments"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_PeripheryPayments_$1447",
																		"typeString": "contract PeripheryPayments"
																	}
																],
																"id": 1358,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "33096:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1357,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "33096:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 1360,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "33096:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 1361,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "balance",
														"nodeType": "MemberAccess",
														"src": "33096:21:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1362,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "33120:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "33096:25:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1376,
												"nodeType": "IfStatement",
												"src": "33092:96:0",
												"trueBody": {
													"expression": {
														"arguments": [
															{
																"expression": {
																	"id": 1367,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "33154:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1368,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "33154:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															{
																"expression": {
																	"arguments": [
																		{
																			"id": 1371,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "33174:4:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_PeripheryPayments_$1447",
																				"typeString": "contract PeripheryPayments"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_PeripheryPayments_$1447",
																				"typeString": "contract PeripheryPayments"
																			}
																		],
																		"id": 1370,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "33166:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1369,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "33166:7:0",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1372,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "33166:13:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																"id": 1373,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "33166:21:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 1364,
																"name": "TransferHelper",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1153,
																"src": "33123:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_TransferHelper_$1153_$",
																	"typeString": "type(library TransferHelper)"
																}
															},
															"id": 1366,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "safeTransferETH",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1152,
															"src": "33123:30:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
																"typeString": "function (address,uint256)"
															}
														},
														"id": 1374,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "33123:65:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1375,
													"nodeType": "ExpressionStatement",
													"src": "33123:65:0"
												}
											}
										]
									},
									"documentation": {
										"id": 1353,
										"nodeType": "StructuredDocumentation",
										"src": "32994:34:0",
										"text": "@inheritdoc IPeripheryPayments"
									},
									"functionSelector": "12210e8a",
									"id": 1378,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "refundETH",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1355,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "33072:8:0"
									},
									"parameters": {
										"id": 1354,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "33052:2:0"
									},
									"returnParameters": {
										"id": 1356,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "33081:0:0"
									},
									"scope": 1447,
									"src": "33034:162:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1445,
										"nodeType": "Block",
										"src": "33522:587:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1400,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 1392,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1390,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1381,
															"src": "33537:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"id": 1391,
															"name": "WETH9",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1226,
															"src": "33546:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "33537:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1399,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 1395,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "33563:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_PeripheryPayments_$1447",
																			"typeString": "contract PeripheryPayments"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_PeripheryPayments_$1447",
																			"typeString": "contract PeripheryPayments"
																		}
																	],
																	"id": 1394,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "33555:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1393,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "33555:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 1396,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "33555:13:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 1397,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "balance",
															"nodeType": "MemberAccess",
															"src": "33555:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">=",
														"rightExpression": {
															"id": 1398,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1387,
															"src": "33580:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "33555:30:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "33537:48:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 1423,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1418,
															"name": "payer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1383,
															"src": "33782:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"arguments": [
																{
																	"id": 1421,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "33799:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_PeripheryPayments_$1447",
																		"typeString": "contract PeripheryPayments"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_PeripheryPayments_$1447",
																		"typeString": "contract PeripheryPayments"
																	}
																],
																"id": 1420,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "33791:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1419,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "33791:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 1422,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "33791:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"src": "33782:22:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"id": 1442,
														"nodeType": "Block",
														"src": "33983:119:0",
														"statements": [
															{
																"expression": {
																	"arguments": [
																		{
																			"id": 1436,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1381,
																			"src": "34059:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1437,
																			"name": "payer",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1383,
																			"src": "34066:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1438,
																			"name": "recipient",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1385,
																			"src": "34073:9:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1439,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1387,
																			"src": "34084:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 1433,
																			"name": "TransferHelper",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1153,
																			"src": "34027:14:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_TransferHelper_$1153_$",
																				"typeString": "type(library TransferHelper)"
																			}
																		},
																		"id": 1435,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "safeTransferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1034,
																		"src": "34027:31:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$",
																			"typeString": "function (address,address,address,uint256)"
																		}
																	},
																	"id": 1440,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "34027:63:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 1441,
																"nodeType": "ExpressionStatement",
																"src": "34027:63:0"
															}
														]
													},
													"id": 1443,
													"nodeType": "IfStatement",
													"src": "33778:324:0",
													"trueBody": {
														"id": 1432,
														"nodeType": "Block",
														"src": "33806:171:0",
														"statements": [
															{
																"expression": {
																	"arguments": [
																		{
																			"id": 1427,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1381,
																			"src": "33941:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1428,
																			"name": "recipient",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1385,
																			"src": "33948:9:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1429,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1387,
																			"src": "33959:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 1424,
																			"name": "TransferHelper",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1153,
																			"src": "33913:14:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_TransferHelper_$1153_$",
																				"typeString": "type(library TransferHelper)"
																			}
																		},
																		"id": 1426,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "safeTransfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1080,
																		"src": "33913:27:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																			"typeString": "function (address,address,uint256)"
																		}
																	},
																	"id": 1430,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "33913:52:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 1431,
																"nodeType": "ExpressionStatement",
																"src": "33913:52:0"
															}
														]
													}
												},
												"id": 1444,
												"nodeType": "IfStatement",
												"src": "33533:569:0",
												"trueBody": {
													"id": 1417,
													"nodeType": "Block",
													"src": "33587:185:0",
													"statements": [
														{
															"expression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"argumentTypes": [],
																		"expression": {
																			"arguments": [
																				{
																					"id": 1402,
																					"name": "WETH9",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1226,
																					"src": "33640:5:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 1401,
																				"name": "IWETH9",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1168,
																				"src": "33633:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_IWETH9_$1168_$",
																					"typeString": "type(contract IWETH9)"
																				}
																			},
																			"id": 1403,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "33633:13:0",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IWETH9_$1168",
																				"typeString": "contract IWETH9"
																			}
																		},
																		"id": 1404,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "deposit",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1161,
																		"src": "33633:21:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_payable$__$returns$__$",
																			"typeString": "function () payable external"
																		}
																	},
																	"id": 1406,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"names": [
																		"value"
																	],
																	"nodeType": "FunctionCallOptions",
																	"options": [
																		{
																			"id": 1405,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1387,
																			"src": "33662:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"src": "33633:35:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_payable$__$returns$__$value",
																		"typeString": "function () payable external"
																	}
																},
																"id": 1407,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "33633:37:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1408,
															"nodeType": "ExpressionStatement",
															"src": "33633:37:0"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1413,
																		"name": "recipient",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1385,
																		"src": "33743:9:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1414,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1387,
																		"src": "33754:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 1410,
																				"name": "WETH9",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1226,
																				"src": "33727:5:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1409,
																			"name": "IWETH9",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1168,
																			"src": "33720:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IWETH9_$1168_$",
																				"typeString": "type(contract IWETH9)"
																			}
																		},
																		"id": 1411,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "33720:13:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IWETH9_$1168",
																			"typeString": "contract IWETH9"
																		}
																	},
																	"id": 1412,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 771,
																	"src": "33720:22:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																"id": 1415,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "33720:40:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1416,
															"nodeType": "ExpressionStatement",
															"src": "33720:40:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1379,
										"nodeType": "StructuredDocumentation",
										"src": "33204:183:0",
										"text": "@param token The token to pay\n @param payer The entity that must pay\n @param recipient The entity that will receive payment\n @param value The amount to pay"
									},
									"id": 1446,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "pay",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1388,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1381,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 1446,
												"src": "33416:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1380,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "33416:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1383,
												"mutability": "mutable",
												"name": "payer",
												"nodeType": "VariableDeclaration",
												"scope": 1446,
												"src": "33440:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1382,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "33440:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1385,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1446,
												"src": "33464:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1384,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "33464:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1387,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 1446,
												"src": "33492:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1386,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "33492:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "33405:107:0"
									},
									"returnParameters": {
										"id": 1389,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "33522:0:0"
									},
									"scope": 1447,
									"src": "33393:716:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3471,
							"src": "31902:2210:0"
						},
						{
							"id": 1448,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "34174:24:0"
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1449,
										"name": "PeripheryPayments",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1447,
										"src": "34260:17:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_PeripheryPayments_$1447",
											"typeString": "contract PeripheryPayments"
										}
									},
									"id": 1450,
									"nodeType": "InheritanceSpecifier",
									"src": "34260:17:0"
								},
								{
									"baseName": {
										"id": 1451,
										"name": "IPeripheryPaymentsWithFee",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 616,
										"src": "34279:25:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IPeripheryPaymentsWithFee_$616",
											"typeString": "contract IPeripheryPaymentsWithFee"
										}
									},
									"id": 1452,
									"nodeType": "InheritanceSpecifier",
									"src": "34279:25:0"
								}
							],
							"contractDependencies": [
								585,
								616,
								1214,
								1243,
								1447
							],
							"contractKind": "contract",
							"fullyImplemented": false,
							"id": 1621,
							"linearizedBaseContracts": [
								1621,
								616,
								1447,
								1243,
								1214,
								585
							],
							"name": "PeripheryPaymentsWithFee",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 1455,
									"libraryName": {
										"id": 1453,
										"name": "LowGasSafeMath",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 745,
										"src": "34318:14:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_LowGasSafeMath_$745",
											"typeString": "library LowGasSafeMath"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "34312:33:0",
									"typeName": {
										"id": 1454,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "34337:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"baseFunctions": [
										601
									],
									"body": {
										"id": 1538,
										"nodeType": "Block",
										"src": "34576:539:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1475,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1471,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1469,
																	"name": "feeBips",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1462,
																	"src": "34595:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1470,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "34605:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "34595:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1474,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1472,
																	"name": "feeBips",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1462,
																	"src": "34610:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"hexValue": "313030",
																	"id": 1473,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "34621:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_100_by_1",
																		"typeString": "int_const 100"
																	},
																	"value": "100"
																},
																"src": "34610:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "34595:29:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1468,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "34587:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1476,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "34587:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1477,
												"nodeType": "ExpressionStatement",
												"src": "34587:38:0"
											},
											{
												"assignments": [
													1479
												],
												"declarations": [
													{
														"constant": false,
														"id": 1479,
														"mutability": "mutable",
														"name": "balanceWETH9",
														"nodeType": "VariableDeclaration",
														"scope": 1538,
														"src": "34638:20:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1478,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "34638:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1489,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1486,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "34693:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_PeripheryPaymentsWithFee_$1621",
																		"typeString": "contract PeripheryPaymentsWithFee"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_PeripheryPaymentsWithFee_$1621",
																		"typeString": "contract PeripheryPaymentsWithFee"
																	}
																],
																"id": 1485,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "34685:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1484,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "34685:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 1487,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "34685:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1481,
																	"name": "WETH9",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1226,
																	"src": "34668:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1480,
																"name": "IWETH9",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1168,
																"src": "34661:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IWETH9_$1168_$",
																	"typeString": "type(contract IWETH9)"
																}
															},
															"id": 1482,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "34661:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IWETH9_$1168",
																"typeString": "contract IWETH9"
															}
														},
														"id": 1483,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 761,
														"src": "34661:23:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 1488,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "34661:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "34638:61:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1493,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1491,
																"name": "balanceWETH9",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1479,
																"src": "34718:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1492,
																"name": "amountMinimum",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1458,
																"src": "34734:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "34718:29:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e73756666696369656e74205745544839",
															"id": 1494,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "34749:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_01e23337f78f001c03af3011e04e4dea54f4997ff97d41da263c1606bf0f9f73",
																"typeString": "literal_string \"Insufficient WETH9\""
															},
															"value": "Insufficient WETH9"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_01e23337f78f001c03af3011e04e4dea54f4997ff97d41da263c1606bf0f9f73",
																"typeString": "literal_string \"Insufficient WETH9\""
															}
														],
														"id": 1490,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "34710:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1495,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "34710:60:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1496,
												"nodeType": "ExpressionStatement",
												"src": "34710:60:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1499,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1497,
														"name": "balanceWETH9",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1479,
														"src": "34787:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1498,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "34802:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "34787:16:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1537,
												"nodeType": "IfStatement",
												"src": "34783:325:0",
												"trueBody": {
													"id": 1536,
													"nodeType": "Block",
													"src": "34805:303:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1504,
																		"name": "balanceWETH9",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1479,
																		"src": "34843:12:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 1501,
																				"name": "WETH9",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1226,
																				"src": "34827:5:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1500,
																			"name": "IWETH9",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1168,
																			"src": "34820:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IWETH9_$1168_$",
																				"typeString": "type(contract IWETH9)"
																			}
																		},
																		"id": 1502,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "34820:13:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IWETH9_$1168",
																			"typeString": "contract IWETH9"
																		}
																	},
																	"id": 1503,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "withdraw",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1167,
																	"src": "34820:22:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
																		"typeString": "function (uint256) external"
																	}
																},
																"id": 1505,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "34820:36:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1506,
															"nodeType": "ExpressionStatement",
															"src": "34820:36:0"
														},
														{
															"assignments": [
																1508
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1508,
																	"mutability": "mutable",
																	"name": "feeAmount",
																	"nodeType": "VariableDeclaration",
																	"scope": 1536,
																	"src": "34871:17:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1507,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "34871:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1515,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1514,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 1511,
																			"name": "feeBips",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1462,
																			"src": "34908:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 1509,
																			"name": "balanceWETH9",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1479,
																			"src": "34891:12:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1510,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "mul",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 690,
																		"src": "34891:16:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 1512,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "34891:25:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"hexValue": "31305f303030",
																	"id": 1513,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "34919:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10000_by_1",
																		"typeString": "int_const 10000"
																	},
																	"value": "10_000"
																},
																"src": "34891:34:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "34871:54:0"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1518,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1516,
																	"name": "feeAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1508,
																	"src": "34944:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1517,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "34956:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "34944:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1526,
															"nodeType": "IfStatement",
															"src": "34940:74:0",
															"trueBody": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1522,
																			"name": "feeRecipient",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1464,
																			"src": "34990:12:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1523,
																			"name": "feeAmount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1508,
																			"src": "35004:9:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 1519,
																			"name": "TransferHelper",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1153,
																			"src": "34959:14:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_TransferHelper_$1153_$",
																				"typeString": "type(library TransferHelper)"
																			}
																		},
																		"id": 1521,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "safeTransferETH",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1152,
																		"src": "34959:30:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
																			"typeString": "function (address,uint256)"
																		}
																	},
																	"id": 1524,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "34959:55:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 1525,
																"nodeType": "ExpressionStatement",
																"src": "34959:55:0"
															}
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1530,
																		"name": "recipient",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1460,
																		"src": "35060:9:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1533,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1531,
																			"name": "balanceWETH9",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1479,
																			"src": "35071:12:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 1532,
																			"name": "feeAmount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1508,
																			"src": "35086:9:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "35071:24:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1527,
																		"name": "TransferHelper",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1153,
																		"src": "35029:14:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_TransferHelper_$1153_$",
																			"typeString": "type(library TransferHelper)"
																		}
																	},
																	"id": 1529,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "safeTransferETH",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1152,
																	"src": "35029:30:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,uint256)"
																	}
																},
																"id": 1534,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "35029:67:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1535,
															"nodeType": "ExpressionStatement",
															"src": "35029:67:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1456,
										"nodeType": "StructuredDocumentation",
										"src": "34353:41:0",
										"text": "@inheritdoc IPeripheryPaymentsWithFee"
									},
									"functionSelector": "9b2c0a37",
									"id": 1539,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "unwrapWETH9WithFee",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1466,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "34567:8:0"
									},
									"parameters": {
										"id": 1465,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1458,
												"mutability": "mutable",
												"name": "amountMinimum",
												"nodeType": "VariableDeclaration",
												"scope": 1539,
												"src": "34438:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1457,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "34438:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1460,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1539,
												"src": "34470:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1459,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "34470:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1462,
												"mutability": "mutable",
												"name": "feeBips",
												"nodeType": "VariableDeclaration",
												"scope": 1539,
												"src": "34498:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1461,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "34498:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1464,
												"mutability": "mutable",
												"name": "feeRecipient",
												"nodeType": "VariableDeclaration",
												"scope": 1539,
												"src": "34524:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1463,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "34524:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "34427:124:0"
									},
									"returnParameters": {
										"id": 1467,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "34576:0:0"
									},
									"scope": 1621,
									"src": "34400:715:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										615
									],
									"body": {
										"id": 1619,
										"nodeType": "Block",
										"src": "35369:496:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1561,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1557,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1555,
																	"name": "feeBips",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1548,
																	"src": "35388:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1556,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "35398:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "35388:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1560,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1558,
																	"name": "feeBips",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1548,
																	"src": "35403:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"hexValue": "313030",
																	"id": 1559,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "35414:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_100_by_1",
																		"typeString": "int_const 100"
																	},
																	"value": "100"
																},
																"src": "35403:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "35388:29:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1554,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "35380:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1562,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "35380:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1563,
												"nodeType": "ExpressionStatement",
												"src": "35380:38:0"
											},
											{
												"assignments": [
													1565
												],
												"declarations": [
													{
														"constant": false,
														"id": 1565,
														"mutability": "mutable",
														"name": "balanceToken",
														"nodeType": "VariableDeclaration",
														"scope": 1619,
														"src": "35431:20:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1564,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "35431:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1575,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1572,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "35486:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_PeripheryPaymentsWithFee_$1621",
																		"typeString": "contract PeripheryPaymentsWithFee"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_PeripheryPaymentsWithFee_$1621",
																		"typeString": "contract PeripheryPaymentsWithFee"
																	}
																],
																"id": 1571,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "35478:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1570,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "35478:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 1573,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "35478:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1567,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1542,
																	"src": "35461:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1566,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 822,
																"src": "35454:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$822_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 1568,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "35454:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$822",
																"typeString": "contract IERC20"
															}
														},
														"id": 1569,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 761,
														"src": "35454:23:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 1574,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "35454:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "35431:61:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1579,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1577,
																"name": "balanceToken",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1565,
																"src": "35511:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1578,
																"name": "amountMinimum",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1544,
																"src": "35527:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "35511:29:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e73756666696369656e7420746f6b656e",
															"id": 1580,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "35542:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_2cf3b53843c7738cfb0b95230b455802cee89f2ea29be4a30eee707228c97571",
																"typeString": "literal_string \"Insufficient token\""
															},
															"value": "Insufficient token"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_2cf3b53843c7738cfb0b95230b455802cee89f2ea29be4a30eee707228c97571",
																"typeString": "literal_string \"Insufficient token\""
															}
														],
														"id": 1576,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "35503:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1581,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "35503:60:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1582,
												"nodeType": "ExpressionStatement",
												"src": "35503:60:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1585,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1583,
														"name": "balanceToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1565,
														"src": "35580:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1584,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "35595:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "35580:16:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1618,
												"nodeType": "IfStatement",
												"src": "35576:282:0",
												"trueBody": {
													"id": 1617,
													"nodeType": "Block",
													"src": "35598:260:0",
													"statements": [
														{
															"assignments": [
																1587
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1587,
																	"mutability": "mutable",
																	"name": "feeAmount",
																	"nodeType": "VariableDeclaration",
																	"scope": 1617,
																	"src": "35613:17:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1586,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "35613:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1594,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1593,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 1590,
																			"name": "feeBips",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1548,
																			"src": "35650:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 1588,
																			"name": "balanceToken",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1565,
																			"src": "35633:12:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1589,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "mul",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 690,
																		"src": "35633:16:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 1591,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "35633:25:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"hexValue": "31305f303030",
																	"id": 1592,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "35661:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10000_by_1",
																		"typeString": "int_const 10000"
																	},
																	"value": "10_000"
																},
																"src": "35633:34:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "35613:54:0"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1597,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1595,
																	"name": "feeAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1587,
																	"src": "35686:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1596,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "35698:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "35686:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1606,
															"nodeType": "IfStatement",
															"src": "35682:78:0",
															"trueBody": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1601,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1542,
																			"src": "35729:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1602,
																			"name": "feeRecipient",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1550,
																			"src": "35736:12:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1603,
																			"name": "feeAmount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1587,
																			"src": "35750:9:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 1598,
																			"name": "TransferHelper",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1153,
																			"src": "35701:14:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_TransferHelper_$1153_$",
																				"typeString": "type(library TransferHelper)"
																			}
																		},
																		"id": 1600,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "safeTransfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1080,
																		"src": "35701:27:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																			"typeString": "function (address,address,uint256)"
																		}
																	},
																	"id": 1604,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "35701:59:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 1605,
																"nodeType": "ExpressionStatement",
																"src": "35701:59:0"
															}
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1610,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1542,
																		"src": "35803:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1611,
																		"name": "recipient",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1546,
																		"src": "35810:9:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1614,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1612,
																			"name": "balanceToken",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1565,
																			"src": "35821:12:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 1613,
																			"name": "feeAmount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1587,
																			"src": "35836:9:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "35821:24:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1607,
																		"name": "TransferHelper",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1153,
																		"src": "35775:14:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_TransferHelper_$1153_$",
																			"typeString": "type(library TransferHelper)"
																		}
																	},
																	"id": 1609,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1080,
																	"src": "35775:27:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 1615,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "35775:71:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1616,
															"nodeType": "ExpressionStatement",
															"src": "35775:71:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1540,
										"nodeType": "StructuredDocumentation",
										"src": "35123:41:0",
										"text": "@inheritdoc IPeripheryPaymentsWithFee"
									},
									"functionSelector": "e0e189a0",
									"id": 1620,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sweepTokenWithFee",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1552,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "35360:8:0"
									},
									"parameters": {
										"id": 1551,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1542,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 1620,
												"src": "35207:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1541,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "35207:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1544,
												"mutability": "mutable",
												"name": "amountMinimum",
												"nodeType": "VariableDeclaration",
												"scope": 1620,
												"src": "35231:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1543,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "35231:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1546,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1620,
												"src": "35263:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1545,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "35263:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1548,
												"mutability": "mutable",
												"name": "feeBips",
												"nodeType": "VariableDeclaration",
												"scope": 1620,
												"src": "35291:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1547,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "35291:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1550,
												"mutability": "mutable",
												"name": "feeRecipient",
												"nodeType": "VariableDeclaration",
												"scope": 1620,
												"src": "35317:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1549,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "35317:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "35196:148:0"
									},
									"returnParameters": {
										"id": 1553,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "35369:0:0"
									},
									"scope": 1621,
									"src": "35170:695:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 3471,
							"src": "34214:1654:0"
						},
						{
							"id": 1622,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "35960:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1623,
								"nodeType": "StructuredDocumentation",
								"src": "35988:146:0",
								"text": "@title Callback for IUniswapV3PoolActions#swap\n @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface"
							},
							"fullyImplemented": false,
							"id": 1634,
							"linearizedBaseContracts": [
								1634
							],
							"name": "IUniswapV3SwapCallback",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1624,
										"nodeType": "StructuredDocumentation",
										"src": "36174:906:0",
										"text": "@notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n @dev In the implementation you must pay the pool tokens owed for the swap.\n The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call"
									},
									"functionSelector": "fa461e33",
									"id": 1633,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "uniswapV3SwapCallback",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1631,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1626,
												"mutability": "mutable",
												"name": "amount0Delta",
												"nodeType": "VariableDeclaration",
												"scope": 1633,
												"src": "37127:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1625,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "37127:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1628,
												"mutability": "mutable",
												"name": "amount1Delta",
												"nodeType": "VariableDeclaration",
												"scope": 1633,
												"src": "37157:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1627,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "37157:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1630,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 1633,
												"src": "37187:19:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1629,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "37187:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "37116:97:0"
									},
									"returnParameters": {
										"id": 1632,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "37222:0:0"
									},
									"scope": 1634,
									"src": "37086:137:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 3471,
							"src": "36134:1092:0"
						},
						{
							"id": 1635,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "37281:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1637,
										"name": "IUniswapV3SwapCallback",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1634,
										"src": "37442:22:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3SwapCallback_$1634",
											"typeString": "contract IUniswapV3SwapCallback"
										}
									},
									"id": 1638,
									"nodeType": "InheritanceSpecifier",
									"src": "37442:22:0"
								}
							],
							"contractDependencies": [
								1634
							],
							"contractKind": "interface",
							"documentation": {
								"id": 1636,
								"nodeType": "StructuredDocumentation",
								"src": "37311:106:0",
								"text": "@title Router token swapping functionality\n @notice Functions for swapping tokens via Uniswap V3"
							},
							"fullyImplemented": false,
							"id": 1727,
							"linearizedBaseContracts": [
								1727,
								1634
							],
							"name": "ISwapRouter",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "ISwapRouter.ExactInputSingleParams",
									"id": 1655,
									"members": [
										{
											"constant": false,
											"id": 1640,
											"mutability": "mutable",
											"name": "tokenIn",
											"nodeType": "VariableDeclaration",
											"scope": 1655,
											"src": "37513:15:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1639,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "37513:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1642,
											"mutability": "mutable",
											"name": "tokenOut",
											"nodeType": "VariableDeclaration",
											"scope": 1655,
											"src": "37539:16:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1641,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "37539:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1644,
											"mutability": "mutable",
											"name": "fee",
											"nodeType": "VariableDeclaration",
											"scope": 1655,
											"src": "37566:10:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint24",
												"typeString": "uint24"
											},
											"typeName": {
												"id": 1643,
												"name": "uint24",
												"nodeType": "ElementaryTypeName",
												"src": "37566:6:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1646,
											"mutability": "mutable",
											"name": "recipient",
											"nodeType": "VariableDeclaration",
											"scope": 1655,
											"src": "37587:17:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1645,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "37587:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1648,
											"mutability": "mutable",
											"name": "deadline",
											"nodeType": "VariableDeclaration",
											"scope": 1655,
											"src": "37615:16:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1647,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "37615:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1650,
											"mutability": "mutable",
											"name": "amountIn",
											"nodeType": "VariableDeclaration",
											"scope": 1655,
											"src": "37642:16:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1649,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "37642:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1652,
											"mutability": "mutable",
											"name": "amountOutMinimum",
											"nodeType": "VariableDeclaration",
											"scope": 1655,
											"src": "37669:24:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1651,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "37669:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1654,
											"mutability": "mutable",
											"name": "sqrtPriceLimitX96",
											"nodeType": "VariableDeclaration",
											"scope": 1655,
											"src": "37704:25:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint160",
												"typeString": "uint160"
											},
											"typeName": {
												"id": 1653,
												"name": "uint160",
												"nodeType": "ElementaryTypeName",
												"src": "37704:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ExactInputSingleParams",
									"nodeType": "StructDefinition",
									"scope": 1727,
									"src": "37472:265:0",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1656,
										"nodeType": "StructuredDocumentation",
										"src": "37745:252:0",
										"text": "@notice Swaps `amountIn` of one token for as much as possible of another token\n @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n @return amountOut The amount of the received token"
									},
									"functionSelector": "414bf389",
									"id": 1663,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "exactInputSingle",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1659,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1658,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 1663,
												"src": "38029:38:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExactInputSingleParams_$1655_calldata_ptr",
													"typeString": "struct ISwapRouter.ExactInputSingleParams"
												},
												"typeName": {
													"id": 1657,
													"name": "ExactInputSingleParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1655,
													"src": "38029:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactInputSingleParams_$1655_storage_ptr",
														"typeString": "struct ISwapRouter.ExactInputSingleParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "38028:40:0"
									},
									"returnParameters": {
										"id": 1662,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1661,
												"mutability": "mutable",
												"name": "amountOut",
												"nodeType": "VariableDeclaration",
												"scope": 1663,
												"src": "38095:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1660,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "38095:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "38094:19:0"
									},
									"scope": 1727,
									"src": "38003:111:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "ISwapRouter.ExactInputParams",
									"id": 1674,
									"members": [
										{
											"constant": false,
											"id": 1665,
											"mutability": "mutable",
											"name": "path",
											"nodeType": "VariableDeclaration",
											"scope": 1674,
											"src": "38157:10:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 1664,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "38157:5:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1667,
											"mutability": "mutable",
											"name": "recipient",
											"nodeType": "VariableDeclaration",
											"scope": 1674,
											"src": "38178:17:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1666,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "38178:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1669,
											"mutability": "mutable",
											"name": "deadline",
											"nodeType": "VariableDeclaration",
											"scope": 1674,
											"src": "38206:16:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1668,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "38206:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1671,
											"mutability": "mutable",
											"name": "amountIn",
											"nodeType": "VariableDeclaration",
											"scope": 1674,
											"src": "38233:16:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1670,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "38233:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1673,
											"mutability": "mutable",
											"name": "amountOutMinimum",
											"nodeType": "VariableDeclaration",
											"scope": 1674,
											"src": "38260:24:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1672,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "38260:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ExactInputParams",
									"nodeType": "StructDefinition",
									"scope": 1727,
									"src": "38122:170:0",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1675,
										"nodeType": "StructuredDocumentation",
										"src": "38300:275:0",
										"text": "@notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n @return amountOut The amount of the received token"
									},
									"functionSelector": "c04b8d59",
									"id": 1682,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "exactInput",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1678,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1677,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 1682,
												"src": "38601:32:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExactInputParams_$1674_calldata_ptr",
													"typeString": "struct ISwapRouter.ExactInputParams"
												},
												"typeName": {
													"id": 1676,
													"name": "ExactInputParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1674,
													"src": "38601:16:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactInputParams_$1674_storage_ptr",
														"typeString": "struct ISwapRouter.ExactInputParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "38600:34:0"
									},
									"returnParameters": {
										"id": 1681,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1680,
												"mutability": "mutable",
												"name": "amountOut",
												"nodeType": "VariableDeclaration",
												"scope": 1682,
												"src": "38661:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1679,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "38661:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "38660:19:0"
									},
									"scope": 1727,
									"src": "38581:99:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "ISwapRouter.ExactOutputSingleParams",
									"id": 1699,
									"members": [
										{
											"constant": false,
											"id": 1684,
											"mutability": "mutable",
											"name": "tokenIn",
											"nodeType": "VariableDeclaration",
											"scope": 1699,
											"src": "38730:15:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1683,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "38730:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1686,
											"mutability": "mutable",
											"name": "tokenOut",
											"nodeType": "VariableDeclaration",
											"scope": 1699,
											"src": "38756:16:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1685,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "38756:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1688,
											"mutability": "mutable",
											"name": "fee",
											"nodeType": "VariableDeclaration",
											"scope": 1699,
											"src": "38783:10:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint24",
												"typeString": "uint24"
											},
											"typeName": {
												"id": 1687,
												"name": "uint24",
												"nodeType": "ElementaryTypeName",
												"src": "38783:6:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1690,
											"mutability": "mutable",
											"name": "recipient",
											"nodeType": "VariableDeclaration",
											"scope": 1699,
											"src": "38804:17:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1689,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "38804:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1692,
											"mutability": "mutable",
											"name": "deadline",
											"nodeType": "VariableDeclaration",
											"scope": 1699,
											"src": "38832:16:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1691,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "38832:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1694,
											"mutability": "mutable",
											"name": "amountOut",
											"nodeType": "VariableDeclaration",
											"scope": 1699,
											"src": "38859:17:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1693,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "38859:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1696,
											"mutability": "mutable",
											"name": "amountInMaximum",
											"nodeType": "VariableDeclaration",
											"scope": 1699,
											"src": "38887:23:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1695,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "38887:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1698,
											"mutability": "mutable",
											"name": "sqrtPriceLimitX96",
											"nodeType": "VariableDeclaration",
											"scope": 1699,
											"src": "38921:25:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint160",
												"typeString": "uint160"
											},
											"typeName": {
												"id": 1697,
												"name": "uint160",
												"nodeType": "ElementaryTypeName",
												"src": "38921:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ExactOutputSingleParams",
									"nodeType": "StructDefinition",
									"scope": 1727,
									"src": "38688:266:0",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1700,
										"nodeType": "StructuredDocumentation",
										"src": "38962:252:0",
										"text": "@notice Swaps as little as possible of one token for `amountOut` of another token\n @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n @return amountIn The amount of the input token"
									},
									"functionSelector": "db3e2198",
									"id": 1707,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "exactOutputSingle",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1703,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1702,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 1707,
												"src": "39247:39:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExactOutputSingleParams_$1699_calldata_ptr",
													"typeString": "struct ISwapRouter.ExactOutputSingleParams"
												},
												"typeName": {
													"id": 1701,
													"name": "ExactOutputSingleParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1699,
													"src": "39247:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactOutputSingleParams_$1699_storage_ptr",
														"typeString": "struct ISwapRouter.ExactOutputSingleParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "39246:41:0"
									},
									"returnParameters": {
										"id": 1706,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1705,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 1707,
												"src": "39314:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1704,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "39314:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "39313:18:0"
									},
									"scope": 1727,
									"src": "39220:112:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "ISwapRouter.ExactOutputParams",
									"id": 1718,
									"members": [
										{
											"constant": false,
											"id": 1709,
											"mutability": "mutable",
											"name": "path",
											"nodeType": "VariableDeclaration",
											"scope": 1718,
											"src": "39376:10:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 1708,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "39376:5:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1711,
											"mutability": "mutable",
											"name": "recipient",
											"nodeType": "VariableDeclaration",
											"scope": 1718,
											"src": "39397:17:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1710,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "39397:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1713,
											"mutability": "mutable",
											"name": "deadline",
											"nodeType": "VariableDeclaration",
											"scope": 1718,
											"src": "39425:16:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1712,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "39425:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1715,
											"mutability": "mutable",
											"name": "amountOut",
											"nodeType": "VariableDeclaration",
											"scope": 1718,
											"src": "39452:17:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1714,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "39452:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1717,
											"mutability": "mutable",
											"name": "amountInMaximum",
											"nodeType": "VariableDeclaration",
											"scope": 1718,
											"src": "39480:23:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1716,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "39480:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ExactOutputParams",
									"nodeType": "StructDefinition",
									"scope": 1727,
									"src": "39340:171:0",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1719,
										"nodeType": "StructuredDocumentation",
										"src": "39519:286:0",
										"text": "@notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n @return amountIn The amount of the input token"
									},
									"functionSelector": "f28c0498",
									"id": 1726,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "exactOutput",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1722,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1721,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 1726,
												"src": "39832:33:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExactOutputParams_$1718_calldata_ptr",
													"typeString": "struct ISwapRouter.ExactOutputParams"
												},
												"typeName": {
													"id": 1720,
													"name": "ExactOutputParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1718,
													"src": "39832:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactOutputParams_$1718_storage_ptr",
														"typeString": "struct ISwapRouter.ExactOutputParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "39831:35:0"
									},
									"returnParameters": {
										"id": 1725,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1724,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 1726,
												"src": "39893:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1723,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "39893:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "39892:18:0"
									},
									"scope": 1727,
									"src": "39811:100:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 3471,
							"src": "37417:2497:0"
						},
						{
							"id": 1728,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "40000:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1729,
								"nodeType": "StructuredDocumentation",
								"src": "40028:90:0",
								"text": "@title Events emitted by a pool\n @notice Contains all events emitted by the pool"
							},
							"fullyImplemented": true,
							"id": 1845,
							"linearizedBaseContracts": [
								1845
							],
							"name": "IUniswapV3PoolEvents",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 1730,
										"nodeType": "StructuredDocumentation",
										"src": "40156:347:0",
										"text": "@notice Emitted exactly once by a pool when #initialize is first called on the pool\n @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"
									},
									"id": 1736,
									"name": "Initialize",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1735,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1732,
												"indexed": false,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 1736,
												"src": "40526:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1731,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "40526:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1734,
												"indexed": false,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 1736,
												"src": "40548:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1733,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "40548:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "40525:34:0"
									},
									"src": "40509:51:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1737,
										"nodeType": "StructuredDocumentation",
										"src": "40568:558:0",
										"text": "@notice Emitted when liquidity is minted for a given position\n @param sender The address that minted the liquidity\n @param owner The owner of the position and recipient of any minted liquidity\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount The amount of liquidity minted to the position range\n @param amount0 How much token0 was required for the minted liquidity\n @param amount1 How much token1 was required for the minted liquidity"
									},
									"id": 1753,
									"name": "Mint",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1752,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1739,
												"indexed": false,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 1753,
												"src": "41153:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1738,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "41153:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1741,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 1753,
												"src": "41178:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1740,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "41178:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1743,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 1753,
												"src": "41210:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1742,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "41210:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1745,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 1753,
												"src": "41244:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1744,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "41244:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1747,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1753,
												"src": "41278:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1746,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "41278:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1749,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1753,
												"src": "41303:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1748,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "41303:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1751,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1753,
												"src": "41329:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1750,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "41329:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "41142:209:0"
									},
									"src": "41132:220:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1754,
										"nodeType": "StructuredDocumentation",
										"src": "41360:499:0",
										"text": "@notice Emitted when fees are collected by the owner of a position\n @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n @param owner The owner of the position for which fees are collected\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount0 The amount of token0 fees collected\n @param amount1 The amount of token1 fees collected"
									},
									"id": 1768,
									"name": "Collect",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1767,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1756,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 1768,
												"src": "41889:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1755,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "41889:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1758,
												"indexed": false,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1768,
												"src": "41921:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1757,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "41921:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1760,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 1768,
												"src": "41949:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1759,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "41949:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1762,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 1768,
												"src": "41983:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1761,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "41983:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1764,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1768,
												"src": "42017:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1763,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "42017:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1766,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1768,
												"src": "42043:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1765,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "42043:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "41878:187:0"
									},
									"src": "41865:201:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1769,
										"nodeType": "StructuredDocumentation",
										"src": "42074:530:0",
										"text": "@notice Emitted when a position's liquidity is removed\n @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n @param owner The owner of the position for which liquidity is removed\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount The amount of liquidity to remove\n @param amount0 The amount of token0 withdrawn\n @param amount1 The amount of token1 withdrawn"
									},
									"id": 1783,
									"name": "Burn",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1782,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1771,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 1783,
												"src": "42631:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1770,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "42631:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1773,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 1783,
												"src": "42663:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1772,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "42663:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1775,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 1783,
												"src": "42697:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1774,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "42697:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1777,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1783,
												"src": "42731:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1776,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "42731:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1779,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1783,
												"src": "42756:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1778,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "42756:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1781,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1783,
												"src": "42782:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1780,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "42782:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "42620:184:0"
									},
									"src": "42610:195:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1784,
										"nodeType": "StructuredDocumentation",
										"src": "42813:607:0",
										"text": "@notice Emitted by the pool for any swaps between token0 and token1\n @param sender The address that initiated the swap call, and that received the callback\n @param recipient The address that received the output of the swap\n @param amount0 The delta of the token0 balance of the pool\n @param amount1 The delta of the token1 balance of the pool\n @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n @param liquidity The liquidity of the pool after the swap\n @param tick The log base 1.0001 of price of the pool after the swap"
									},
									"id": 1800,
									"name": "Swap",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1799,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1786,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 1800,
												"src": "43447:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1785,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "43447:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1788,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1800,
												"src": "43480:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1787,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "43480:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1790,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1800,
												"src": "43516:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1789,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "43516:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1792,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1800,
												"src": "43541:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1791,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "43541:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1794,
												"indexed": false,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 1800,
												"src": "43566:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1793,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "43566:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1796,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 1800,
												"src": "43597:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1795,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "43597:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1798,
												"indexed": false,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 1800,
												"src": "43625:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1797,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "43625:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "43436:206:0"
									},
									"src": "43426:217:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1801,
										"nodeType": "StructuredDocumentation",
										"src": "43651:568:0",
										"text": "@notice Emitted by the pool for any flashes of token0/token1\n @param sender The address that initiated the swap call, and that received the callback\n @param recipient The address that received the tokens from flash\n @param amount0 The amount of token0 that was flashed\n @param amount1 The amount of token1 that was flashed\n @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee"
									},
									"id": 1815,
									"name": "Flash",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1814,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1803,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 1815,
												"src": "44247:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1802,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "44247:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1805,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1815,
												"src": "44280:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1804,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "44280:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1807,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1815,
												"src": "44316:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1806,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "44316:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1809,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1815,
												"src": "44342:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1808,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "44342:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1811,
												"indexed": false,
												"mutability": "mutable",
												"name": "paid0",
												"nodeType": "VariableDeclaration",
												"scope": 1815,
												"src": "44368:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1810,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "44368:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1813,
												"indexed": false,
												"mutability": "mutable",
												"name": "paid1",
												"nodeType": "VariableDeclaration",
												"scope": 1815,
												"src": "44392:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1812,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "44392:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "44236:176:0"
									},
									"src": "44225:188:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1816,
										"nodeType": "StructuredDocumentation",
										"src": "44421:455:0",
										"text": "@notice Emitted by the pool for increases to the number of observations that can be stored\n @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n just before a mint/swap/burn.\n @param observationCardinalityNextOld The previous value of the next observation cardinality\n @param observationCardinalityNextNew The updated value of the next observation cardinality"
									},
									"id": 1822,
									"name": "IncreaseObservationCardinalityNext",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1821,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1818,
												"indexed": false,
												"mutability": "mutable",
												"name": "observationCardinalityNextOld",
												"nodeType": "VariableDeclaration",
												"scope": 1822,
												"src": "44933:36:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1817,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "44933:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1820,
												"indexed": false,
												"mutability": "mutable",
												"name": "observationCardinalityNextNew",
												"nodeType": "VariableDeclaration",
												"scope": 1822,
												"src": "44980:36:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1819,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "44980:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "44922:101:0"
									},
									"src": "44882:142:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1823,
										"nodeType": "StructuredDocumentation",
										"src": "45032:374:0",
										"text": "@notice Emitted when the protocol fee is changed by the pool\n @param feeProtocol0Old The previous value of the token0 protocol fee\n @param feeProtocol1Old The previous value of the token1 protocol fee\n @param feeProtocol0New The updated value of the token0 protocol fee\n @param feeProtocol1New The updated value of the token1 protocol fee"
									},
									"id": 1833,
									"name": "SetFeeProtocol",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1832,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1825,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol0Old",
												"nodeType": "VariableDeclaration",
												"scope": 1833,
												"src": "45433:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1824,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "45433:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1827,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol1Old",
												"nodeType": "VariableDeclaration",
												"scope": 1833,
												"src": "45456:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1826,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "45456:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1829,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol0New",
												"nodeType": "VariableDeclaration",
												"scope": 1833,
												"src": "45479:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1828,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "45479:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1831,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol1New",
												"nodeType": "VariableDeclaration",
												"scope": 1833,
												"src": "45502:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1830,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "45502:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "45432:92:0"
									},
									"src": "45412:113:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1834,
										"nodeType": "StructuredDocumentation",
										"src": "45533:388:0",
										"text": "@notice Emitted when the collected protocol fees are withdrawn by the factory owner\n @param sender The address that collects the protocol fees\n @param recipient The address that receives the collected protocol fees\n @param amount0 The amount of token0 protocol fees that is withdrawn\n @param amount0 The amount of token1 protocol fees that is withdrawn"
									},
									"id": 1844,
									"name": "CollectProtocol",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1843,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1836,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 1844,
												"src": "45949:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1835,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "45949:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1838,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1844,
												"src": "45973:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1837,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "45973:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1840,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1844,
												"src": "46000:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1839,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "46000:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1842,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1844,
												"src": "46017:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1841,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "46017:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "45948:85:0"
									},
									"src": "45927:107:0"
								}
							],
							"scope": 3471,
							"src": "40118:5919:0"
						},
						{
							"id": 1846,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "46129:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1847,
								"nodeType": "StructuredDocumentation",
								"src": "46157:118:0",
								"text": "@title Permissioned pool actions\n @notice Contains pool methods that may only be called by the factory owner"
							},
							"fullyImplemented": false,
							"id": 1870,
							"linearizedBaseContracts": [
								1870
							],
							"name": "IUniswapV3PoolOwnerActions",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1848,
										"nodeType": "StructuredDocumentation",
										"src": "46319:207:0",
										"text": "@notice Set the denominator of the protocol's % share of the fees\n @param feeProtocol0 new protocol fee for token0 of the pool\n @param feeProtocol1 new protocol fee for token1 of the pool"
									},
									"functionSelector": "8206a4d1",
									"id": 1855,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setFeeProtocol",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1853,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1850,
												"mutability": "mutable",
												"name": "feeProtocol0",
												"nodeType": "VariableDeclaration",
												"scope": 1855,
												"src": "46556:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1849,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "46556:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1852,
												"mutability": "mutable",
												"name": "feeProtocol1",
												"nodeType": "VariableDeclaration",
												"scope": 1855,
												"src": "46576:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1851,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "46576:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "46555:40:0"
									},
									"returnParameters": {
										"id": 1854,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "46604:0:0"
									},
									"scope": 1870,
									"src": "46532:73:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1856,
										"nodeType": "StructuredDocumentation",
										"src": "46613:488:0",
										"text": "@notice Collect the protocol fee accrued to the pool\n @param recipient The address to which collected protocol fees should be sent\n @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n @return amount0 The protocol fee collected in token0\n @return amount1 The protocol fee collected in token1"
									},
									"functionSelector": "85b66729",
									"id": 1869,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collectProtocol",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1863,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1858,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1869,
												"src": "47142:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1857,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "47142:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1860,
												"mutability": "mutable",
												"name": "amount0Requested",
												"nodeType": "VariableDeclaration",
												"scope": 1869,
												"src": "47170:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1859,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "47170:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1862,
												"mutability": "mutable",
												"name": "amount1Requested",
												"nodeType": "VariableDeclaration",
												"scope": 1869,
												"src": "47205:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1861,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "47205:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "47131:105:0"
									},
									"returnParameters": {
										"id": 1868,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1865,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1869,
												"src": "47255:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1864,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "47255:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1867,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1869,
												"src": "47272:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1866,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "47272:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "47254:34:0"
									},
									"scope": 1870,
									"src": "47107:182:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 3471,
							"src": "46275:1017:0"
						},
						{
							"id": 1871,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "47379:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1872,
								"nodeType": "StructuredDocumentation",
								"src": "47407:104:0",
								"text": "@title Permissionless pool actions\n @notice Contains pool methods that can be called by anyone"
							},
							"fullyImplemented": false,
							"id": 1965,
							"linearizedBaseContracts": [
								1965
							],
							"name": "IUniswapV3PoolActions",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1873,
										"nodeType": "StructuredDocumentation",
										"src": "47550:208:0",
										"text": "@notice Sets the initial price for the pool\n @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96"
									},
									"functionSelector": "f637731d",
									"id": 1878,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1876,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1875,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 1878,
												"src": "47784:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1874,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "47784:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "47783:22:0"
									},
									"returnParameters": {
										"id": 1877,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "47814:0:0"
									},
									"scope": 1965,
									"src": "47764:51:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1879,
										"nodeType": "StructuredDocumentation",
										"src": "47823:1039:0",
										"text": "@notice Adds liquidity for the given recipient/tickLower/tickUpper position\n @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n on tickLower, tickUpper, the amount of liquidity, and the current price.\n @param recipient The address for which the liquidity will be created\n @param tickLower The lower tick of the position in which to add liquidity\n @param tickUpper The upper tick of the position in which to add liquidity\n @param amount The amount of liquidity to mint\n @param data Any data that should be passed through to the callback\n @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
									},
									"functionSelector": "3c8a7d8d",
									"id": 1896,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1890,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1881,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1896,
												"src": "48892:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1880,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "48892:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1883,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 1896,
												"src": "48920:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1882,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "48920:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1885,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 1896,
												"src": "48946:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1884,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "48946:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1887,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1896,
												"src": "48972:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1886,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "48972:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1889,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 1896,
												"src": "48997:19:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1888,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "48997:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "48881:142:0"
									},
									"returnParameters": {
										"id": 1895,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1892,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1896,
												"src": "49042:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1891,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "49042:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1894,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1896,
												"src": "49059:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1893,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "49059:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "49041:34:0"
									},
									"scope": 1965,
									"src": "48868:208:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1897,
										"nodeType": "StructuredDocumentation",
										"src": "49084:1064:0",
										"text": "@notice Collects tokens owed to a position\n @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n @param recipient The address which should receive the fees collected\n @param tickLower The lower tick of the position for which to collect fees\n @param tickUpper The upper tick of the position for which to collect fees\n @param amount0Requested How much token0 should be withdrawn from the fees owed\n @param amount1Requested How much token1 should be withdrawn from the fees owed\n @return amount0 The amount of fees collected in token0\n @return amount1 The amount of fees collected in token1"
									},
									"functionSelector": "4f1eb3d8",
									"id": 1914,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collect",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1908,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1899,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1914,
												"src": "50181:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1898,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "50181:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1901,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 1914,
												"src": "50209:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1900,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "50209:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1903,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 1914,
												"src": "50235:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1902,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "50235:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1905,
												"mutability": "mutable",
												"name": "amount0Requested",
												"nodeType": "VariableDeclaration",
												"scope": 1914,
												"src": "50261:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1904,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "50261:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1907,
												"mutability": "mutable",
												"name": "amount1Requested",
												"nodeType": "VariableDeclaration",
												"scope": 1914,
												"src": "50296:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1906,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "50296:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "50170:157:0"
									},
									"returnParameters": {
										"id": 1913,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1910,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1914,
												"src": "50346:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1909,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "50346:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1912,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1914,
												"src": "50363:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1911,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "50363:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "50345:34:0"
									},
									"scope": 1965,
									"src": "50154:226:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1915,
										"nodeType": "StructuredDocumentation",
										"src": "50388:638:0",
										"text": "@notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n @dev Fees must be collected separately via a call to #collect\n @param tickLower The lower tick of the position for which to burn liquidity\n @param tickUpper The upper tick of the position for which to burn liquidity\n @param amount How much liquidity to burn\n @return amount0 The amount of token0 sent to the recipient\n @return amount1 The amount of token1 sent to the recipient"
									},
									"functionSelector": "a34123a7",
									"id": 1928,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1922,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1917,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 1928,
												"src": "51056:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1916,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "51056:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1919,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 1928,
												"src": "51082:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1918,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "51082:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1921,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1928,
												"src": "51108:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1920,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "51108:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "51045:84:0"
									},
									"returnParameters": {
										"id": 1927,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1924,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1928,
												"src": "51148:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1923,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "51148:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1926,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1928,
												"src": "51165:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1925,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "51165:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "51147:34:0"
									},
									"scope": 1965,
									"src": "51032:150:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1929,
										"nodeType": "StructuredDocumentation",
										"src": "51190:1024:0",
										"text": "@notice Swap token0 for token1, or token1 for token0\n @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n @param recipient The address to receive the output of the swap\n @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n value after the swap. If one for zero, the price cannot be greater than this value after the swap\n @param data Any data to be passed through to the callback\n @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
									},
									"functionSelector": "128acb08",
									"id": 1946,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "swap",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1940,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1931,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1946,
												"src": "52244:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1930,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "52244:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1933,
												"mutability": "mutable",
												"name": "zeroForOne",
												"nodeType": "VariableDeclaration",
												"scope": 1946,
												"src": "52272:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1932,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "52272:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1935,
												"mutability": "mutable",
												"name": "amountSpecified",
												"nodeType": "VariableDeclaration",
												"scope": 1946,
												"src": "52298:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1934,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "52298:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1937,
												"mutability": "mutable",
												"name": "sqrtPriceLimitX96",
												"nodeType": "VariableDeclaration",
												"scope": 1946,
												"src": "52331:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1936,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "52331:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1939,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 1946,
												"src": "52367:19:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1938,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "52367:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "52233:160:0"
									},
									"returnParameters": {
										"id": 1945,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1942,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1946,
												"src": "52412:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1941,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "52412:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1944,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1946,
												"src": "52428:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1943,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "52428:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "52411:32:0"
									},
									"scope": 1965,
									"src": "52220:224:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1947,
										"nodeType": "StructuredDocumentation",
										"src": "52452:664:0",
										"text": "@notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n with 0 amount{0,1} and sending the donation amount(s) from the callback\n @param recipient The address which will receive the token0 and token1 amounts\n @param amount0 The amount of token0 to send\n @param amount1 The amount of token1 to send\n @param data Any data to be passed through to the callback"
									},
									"functionSelector": "490e6cbc",
									"id": 1958,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "flash",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1956,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1949,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1958,
												"src": "53147:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1948,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "53147:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1951,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1958,
												"src": "53175:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1950,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "53175:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1953,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1958,
												"src": "53201:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1952,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "53201:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1955,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 1958,
												"src": "53227:19:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1954,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "53227:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "53136:117:0"
									},
									"returnParameters": {
										"id": 1957,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "53262:0:0"
									},
									"scope": 1965,
									"src": "53122:141:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1959,
										"nodeType": "StructuredDocumentation",
										"src": "53271:370:0",
										"text": "@notice Increase the maximum number of price and liquidity observations that this pool will store\n @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n the input observationCardinalityNext.\n @param observationCardinalityNext The desired minimum number of observations for the pool to store"
									},
									"functionSelector": "32148f67",
									"id": 1964,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "increaseObservationCardinalityNext",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1962,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1961,
												"mutability": "mutable",
												"name": "observationCardinalityNext",
												"nodeType": "VariableDeclaration",
												"scope": 1964,
												"src": "53691:33:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1960,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "53691:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "53690:35:0"
									},
									"returnParameters": {
										"id": 1963,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "53734:0:0"
									},
									"scope": 1965,
									"src": "53647:88:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 3471,
							"src": "47511:6227:0"
						},
						{
							"id": 1966,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "53830:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1967,
								"nodeType": "StructuredDocumentation",
								"src": "53858:225:0",
								"text": "@title Pool state that is not stored\n @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n blockchain. The functions here may have variable gas costs."
							},
							"fullyImplemented": false,
							"id": 1995,
							"linearizedBaseContracts": [
								1995
							],
							"name": "IUniswapV3PoolDerivedState",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1968,
										"nodeType": "StructuredDocumentation",
										"src": "54127:1054:0",
										"text": "@notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n you must call it with secondsAgos = [3600, 0].\n @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n timestamp"
									},
									"functionSelector": "883bdbfd",
									"id": 1980,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "observe",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1972,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1971,
												"mutability": "mutable",
												"name": "secondsAgos",
												"nodeType": "VariableDeclaration",
												"scope": 1980,
												"src": "55204:29:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint32_$dyn_calldata_ptr",
													"typeString": "uint32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1969,
														"name": "uint32",
														"nodeType": "ElementaryTypeName",
														"src": "55204:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"id": 1970,
													"nodeType": "ArrayTypeName",
													"src": "55204:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint32_$dyn_storage_ptr",
														"typeString": "uint32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "55203:31:0"
									},
									"returnParameters": {
										"id": 1979,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1975,
												"mutability": "mutable",
												"name": "tickCumulatives",
												"nodeType": "VariableDeclaration",
												"scope": 1980,
												"src": "55285:30:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_int56_$dyn_memory_ptr",
													"typeString": "int56[]"
												},
												"typeName": {
													"baseType": {
														"id": 1973,
														"name": "int56",
														"nodeType": "ElementaryTypeName",
														"src": "55285:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_int56",
															"typeString": "int56"
														}
													},
													"id": 1974,
													"nodeType": "ArrayTypeName",
													"src": "55285:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_int56_$dyn_storage_ptr",
														"typeString": "int56[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1978,
												"mutability": "mutable",
												"name": "secondsPerLiquidityCumulativeX128s",
												"nodeType": "VariableDeclaration",
												"scope": 1980,
												"src": "55317:51:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint160_$dyn_memory_ptr",
													"typeString": "uint160[]"
												},
												"typeName": {
													"baseType": {
														"id": 1976,
														"name": "uint160",
														"nodeType": "ElementaryTypeName",
														"src": "55317:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"id": 1977,
													"nodeType": "ArrayTypeName",
													"src": "55317:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint160_$dyn_storage_ptr",
														"typeString": "uint160[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "55284:85:0"
									},
									"scope": 1995,
									"src": "55187:183:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1981,
										"nodeType": "StructuredDocumentation",
										"src": "55378:779:0",
										"text": "@notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n snapshot is taken and the second snapshot is taken.\n @param tickLower The lower tick of the range\n @param tickUpper The upper tick of the range\n @return tickCumulativeInside The snapshot of the tick accumulator for the range\n @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n @return secondsInside The snapshot of seconds per liquidity for the range"
									},
									"functionSelector": "a38807f2",
									"id": 1994,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "snapshotCumulativesInside",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1986,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1983,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 1994,
												"src": "56198:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1982,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "56198:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1985,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 1994,
												"src": "56215:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1984,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "56215:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "56197:34:0"
									},
									"returnParameters": {
										"id": 1993,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1988,
												"mutability": "mutable",
												"name": "tickCumulativeInside",
												"nodeType": "VariableDeclaration",
												"scope": 1994,
												"src": "56296:26:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 1987,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "56296:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1990,
												"mutability": "mutable",
												"name": "secondsPerLiquidityInsideX128",
												"nodeType": "VariableDeclaration",
												"scope": 1994,
												"src": "56337:37:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1989,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "56337:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1992,
												"mutability": "mutable",
												"name": "secondsInside",
												"nodeType": "VariableDeclaration",
												"scope": 1994,
												"src": "56389:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 1991,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "56389:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "56281:139:0"
									},
									"scope": 1995,
									"src": "56163:258:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 3471,
							"src": "54083:2341:0"
						},
						{
							"id": 1996,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "56509:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1997,
								"nodeType": "StructuredDocumentation",
								"src": "56537:172:0",
								"text": "@title Pool state that can change\n @notice These methods compose the pool's state, and can change with any frequency including multiple times\n per transaction"
							},
							"fullyImplemented": false,
							"id": 2102,
							"linearizedBaseContracts": [
								2102
							],
							"name": "IUniswapV3PoolState",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1998,
										"nodeType": "StructuredDocumentation",
										"src": "56746:1152:0",
										"text": "@notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n when accessed externally.\n @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n tick The current tick of the pool, i.e. according to the last tick transition that was run.\n This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n boundary.\n observationIndex The index of the last oracle observation that was written,\n observationCardinality The current maximum number of observations stored in the pool,\n observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n feeProtocol The protocol fee for both tokens of the pool.\n Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n unlocked Whether the pool is currently locked to reentrancy"
									},
									"functionSelector": "3850c7bd",
									"id": 2015,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "slot0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1999,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "57918:2:0"
									},
									"returnParameters": {
										"id": 2014,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2001,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 2015,
												"src": "57985:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 2000,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "57985:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2003,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 2015,
												"src": "58020:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 2002,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "58020:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2005,
												"mutability": "mutable",
												"name": "observationIndex",
												"nodeType": "VariableDeclaration",
												"scope": 2015,
												"src": "58045:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 2004,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "58045:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2007,
												"mutability": "mutable",
												"name": "observationCardinality",
												"nodeType": "VariableDeclaration",
												"scope": 2015,
												"src": "58083:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 2006,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "58083:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2009,
												"mutability": "mutable",
												"name": "observationCardinalityNext",
												"nodeType": "VariableDeclaration",
												"scope": 2015,
												"src": "58127:33:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 2008,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "58127:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2011,
												"mutability": "mutable",
												"name": "feeProtocol",
												"nodeType": "VariableDeclaration",
												"scope": 2015,
												"src": "58175:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2010,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "58175:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2013,
												"mutability": "mutable",
												"name": "unlocked",
												"nodeType": "VariableDeclaration",
												"scope": 2015,
												"src": "58207:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2012,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "58207:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "57970:261:0"
									},
									"scope": 2102,
									"src": "57904:328:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2016,
										"nodeType": "StructuredDocumentation",
										"src": "58240:169:0",
										"text": "@notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n @dev This value can overflow the uint256"
									},
									"functionSelector": "f3058399",
									"id": 2021,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "feeGrowthGlobal0X128",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2017,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "58444:2:0"
									},
									"returnParameters": {
										"id": 2020,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2019,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2021,
												"src": "58470:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2018,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "58470:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "58469:9:0"
									},
									"scope": 2102,
									"src": "58415:64:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2022,
										"nodeType": "StructuredDocumentation",
										"src": "58487:169:0",
										"text": "@notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n @dev This value can overflow the uint256"
									},
									"functionSelector": "46141319",
									"id": 2027,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "feeGrowthGlobal1X128",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2023,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "58691:2:0"
									},
									"returnParameters": {
										"id": 2026,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2025,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2027,
												"src": "58717:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2024,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "58717:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "58716:9:0"
									},
									"scope": 2102,
									"src": "58662:64:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2028,
										"nodeType": "StructuredDocumentation",
										"src": "58734:148:0",
										"text": "@notice The amounts of token0 and token1 that are owed to the protocol\n @dev Protocol fees will never exceed uint128 max in either token"
									},
									"functionSelector": "1ad8b03b",
									"id": 2035,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "protocolFees",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2029,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "58909:2:0"
									},
									"returnParameters": {
										"id": 2034,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2031,
												"mutability": "mutable",
												"name": "token0",
												"nodeType": "VariableDeclaration",
												"scope": 2035,
												"src": "58935:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 2030,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "58935:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2033,
												"mutability": "mutable",
												"name": "token1",
												"nodeType": "VariableDeclaration",
												"scope": 2035,
												"src": "58951:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 2032,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "58951:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "58934:32:0"
									},
									"scope": 2102,
									"src": "58888:79:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2036,
										"nodeType": "StructuredDocumentation",
										"src": "58975:151:0",
										"text": "@notice The currently in range liquidity available to the pool\n @dev This value has no relationship to the total liquidity across all ticks"
									},
									"functionSelector": "1a686502",
									"id": 2041,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "liquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2037,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "59150:2:0"
									},
									"returnParameters": {
										"id": 2040,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2039,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2041,
												"src": "59176:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 2038,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "59176:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "59175:9:0"
									},
									"scope": 2102,
									"src": "59132:53:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2042,
										"nodeType": "StructuredDocumentation",
										"src": "59193:1257:0",
										"text": "@notice Look up information about a specific tick in the pool\n @param tick The tick to look up\n @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n tick upper,\n liquidityNet how much liquidity changes when the pool price crosses the tick,\n feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n secondsOutside the seconds spent on the other side of the tick from the current tick,\n initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n In addition, these values are only relative and must be used only in comparison to previous snapshots for\n a specific position."
									},
									"functionSelector": "f30dba93",
									"id": 2063,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ticks",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2045,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2044,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 2063,
												"src": "60471:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 2043,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "60471:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "60470:12:0"
									},
									"returnParameters": {
										"id": 2062,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2047,
												"mutability": "mutable",
												"name": "liquidityGross",
												"nodeType": "VariableDeclaration",
												"scope": 2063,
												"src": "60547:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 2046,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "60547:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2049,
												"mutability": "mutable",
												"name": "liquidityNet",
												"nodeType": "VariableDeclaration",
												"scope": 2063,
												"src": "60584:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												},
												"typeName": {
													"id": 2048,
													"name": "int128",
													"nodeType": "ElementaryTypeName",
													"src": "60584:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2051,
												"mutability": "mutable",
												"name": "feeGrowthOutside0X128",
												"nodeType": "VariableDeclaration",
												"scope": 2063,
												"src": "60618:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2050,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "60618:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2053,
												"mutability": "mutable",
												"name": "feeGrowthOutside1X128",
												"nodeType": "VariableDeclaration",
												"scope": 2063,
												"src": "60662:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2052,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "60662:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2055,
												"mutability": "mutable",
												"name": "tickCumulativeOutside",
												"nodeType": "VariableDeclaration",
												"scope": 2063,
												"src": "60706:27:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 2054,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "60706:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2057,
												"mutability": "mutable",
												"name": "secondsPerLiquidityOutsideX128",
												"nodeType": "VariableDeclaration",
												"scope": 2063,
												"src": "60748:38:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 2056,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "60748:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2059,
												"mutability": "mutable",
												"name": "secondsOutside",
												"nodeType": "VariableDeclaration",
												"scope": 2063,
												"src": "60801:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 2058,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "60801:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2061,
												"mutability": "mutable",
												"name": "initialized",
												"nodeType": "VariableDeclaration",
												"scope": 2063,
												"src": "60837:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2060,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "60837:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "60532:332:0"
									},
									"scope": 2102,
									"src": "60456:409:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2064,
										"nodeType": "StructuredDocumentation",
										"src": "60873:99:0",
										"text": "@notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
									},
									"functionSelector": "5339c296",
									"id": 2071,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tickBitmap",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2067,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2066,
												"mutability": "mutable",
												"name": "wordPosition",
												"nodeType": "VariableDeclaration",
												"scope": 2071,
												"src": "60998:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int16",
													"typeString": "int16"
												},
												"typeName": {
													"id": 2065,
													"name": "int16",
													"nodeType": "ElementaryTypeName",
													"src": "60998:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int16",
														"typeString": "int16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "60997:20:0"
									},
									"returnParameters": {
										"id": 2070,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2069,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2071,
												"src": "61041:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2068,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "61041:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "61040:9:0"
									},
									"scope": 2102,
									"src": "60978:72:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2072,
										"nodeType": "StructuredDocumentation",
										"src": "61058:706:0",
										"text": "@notice Returns the information about a position by the position's key\n @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n @return _liquidity The amount of liquidity in the position,\n Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
									},
									"functionSelector": "514ea4bf",
									"id": 2087,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "positions",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2075,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2074,
												"mutability": "mutable",
												"name": "key",
												"nodeType": "VariableDeclaration",
												"scope": 2087,
												"src": "61789:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2073,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "61789:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "61788:13:0"
									},
									"returnParameters": {
										"id": 2086,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2077,
												"mutability": "mutable",
												"name": "_liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 2087,
												"src": "61866:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 2076,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "61866:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2079,
												"mutability": "mutable",
												"name": "feeGrowthInside0LastX128",
												"nodeType": "VariableDeclaration",
												"scope": 2087,
												"src": "61899:32:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2078,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "61899:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2081,
												"mutability": "mutable",
												"name": "feeGrowthInside1LastX128",
												"nodeType": "VariableDeclaration",
												"scope": 2087,
												"src": "61946:32:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2080,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "61946:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2083,
												"mutability": "mutable",
												"name": "tokensOwed0",
												"nodeType": "VariableDeclaration",
												"scope": 2087,
												"src": "61993:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 2082,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "61993:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2085,
												"mutability": "mutable",
												"name": "tokensOwed1",
												"nodeType": "VariableDeclaration",
												"scope": 2087,
												"src": "62027:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 2084,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "62027:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "61851:206:0"
									},
									"scope": 2102,
									"src": "61770:288:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2088,
										"nodeType": "StructuredDocumentation",
										"src": "62066:756:0",
										"text": "@notice Returns data about a specific observation index\n @param index The element of the observations array to fetch\n @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n ago, rather than at a specific index in the array.\n @return blockTimestamp The timestamp of the observation,\n Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n Returns initialized whether the observation has been initialized and the values are safe to use"
									},
									"functionSelector": "252c09d7",
									"id": 2101,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "observations",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2091,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2090,
												"mutability": "mutable",
												"name": "index",
												"nodeType": "VariableDeclaration",
												"scope": 2101,
												"src": "62850:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2089,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "62850:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "62849:15:0"
									},
									"returnParameters": {
										"id": 2100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2093,
												"mutability": "mutable",
												"name": "blockTimestamp",
												"nodeType": "VariableDeclaration",
												"scope": 2101,
												"src": "62929:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 2092,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "62929:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2095,
												"mutability": "mutable",
												"name": "tickCumulative",
												"nodeType": "VariableDeclaration",
												"scope": 2101,
												"src": "62965:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 2094,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "62965:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2097,
												"mutability": "mutable",
												"name": "secondsPerLiquidityCumulativeX128",
												"nodeType": "VariableDeclaration",
												"scope": 2101,
												"src": "63000:41:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 2096,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "63000:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2099,
												"mutability": "mutable",
												"name": "initialized",
												"nodeType": "VariableDeclaration",
												"scope": 2101,
												"src": "63056:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2098,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "63056:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "62914:169:0"
									},
									"scope": 2102,
									"src": "62828:256:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 3471,
							"src": "56709:6378:0"
						},
						{
							"id": 2103,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "63177:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2104,
								"nodeType": "StructuredDocumentation",
								"src": "63205:155:0",
								"text": "@title Pool state that never changes\n @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values"
							},
							"fullyImplemented": false,
							"id": 2141,
							"linearizedBaseContracts": [
								2141
							],
							"name": "IUniswapV3PoolImmutables",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2105,
										"nodeType": "StructuredDocumentation",
										"src": "63402:139:0",
										"text": "@notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n @return The contract address"
									},
									"functionSelector": "c45a0155",
									"id": 2110,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "factory",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2106,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "63563:2:0"
									},
									"returnParameters": {
										"id": 2109,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2108,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2110,
												"src": "63589:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2107,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "63589:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "63588:9:0"
									},
									"scope": 2141,
									"src": "63547:51:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2111,
										"nodeType": "StructuredDocumentation",
										"src": "63606:114:0",
										"text": "@notice The first of the two tokens of the pool, sorted by address\n @return The token contract address"
									},
									"functionSelector": "0dfe1681",
									"id": 2116,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "token0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2112,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "63741:2:0"
									},
									"returnParameters": {
										"id": 2115,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2114,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2116,
												"src": "63767:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2113,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "63767:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "63766:9:0"
									},
									"scope": 2141,
									"src": "63726:50:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2117,
										"nodeType": "StructuredDocumentation",
										"src": "63784:115:0",
										"text": "@notice The second of the two tokens of the pool, sorted by address\n @return The token contract address"
									},
									"functionSelector": "d21220a7",
									"id": 2122,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "token1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2118,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "63920:2:0"
									},
									"returnParameters": {
										"id": 2121,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2120,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2122,
												"src": "63946:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2119,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "63946:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "63945:9:0"
									},
									"scope": 2141,
									"src": "63905:50:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2123,
										"nodeType": "StructuredDocumentation",
										"src": "63963:85:0",
										"text": "@notice The pool's fee in hundredths of a bip, i.e. 1e-6\n @return The fee"
									},
									"functionSelector": "ddca3f43",
									"id": 2128,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "fee",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2124,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "64066:2:0"
									},
									"returnParameters": {
										"id": 2127,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2126,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2128,
												"src": "64092:6:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 2125,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "64092:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "64091:8:0"
									},
									"scope": 2141,
									"src": "64054:46:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2129,
										"nodeType": "StructuredDocumentation",
										"src": "64108:362:0",
										"text": "@notice The pool tick spacing\n @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n This value is an int24 to avoid casting even though it is always positive.\n @return The tick spacing"
									},
									"functionSelector": "d0c93a7c",
									"id": 2134,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tickSpacing",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2130,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "64496:2:0"
									},
									"returnParameters": {
										"id": 2133,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2132,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2134,
												"src": "64522:5:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 2131,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "64522:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "64521:7:0"
									},
									"scope": 2141,
									"src": "64476:53:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2135,
										"nodeType": "StructuredDocumentation",
										"src": "64537:366:0",
										"text": "@notice The maximum amount of position liquidity that can use any tick in the range\n @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n @return The max amount of liquidity per tick"
									},
									"functionSelector": "70cf754a",
									"id": 2140,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "maxLiquidityPerTick",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2136,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "64937:2:0"
									},
									"returnParameters": {
										"id": 2139,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2138,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2140,
												"src": "64963:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 2137,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "64963:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "64962:9:0"
									},
									"scope": 2141,
									"src": "64909:63:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 3471,
							"src": "63360:1615:0"
						},
						{
							"id": 2142,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "65050:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 2144,
										"name": "IUniswapV3PoolImmutables",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2141,
										"src": "65392:24:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolImmutables_$2141",
											"typeString": "contract IUniswapV3PoolImmutables"
										}
									},
									"id": 2145,
									"nodeType": "InheritanceSpecifier",
									"src": "65392:24:0"
								},
								{
									"baseName": {
										"id": 2146,
										"name": "IUniswapV3PoolState",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2102,
										"src": "65423:19:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolState_$2102",
											"typeString": "contract IUniswapV3PoolState"
										}
									},
									"id": 2147,
									"nodeType": "InheritanceSpecifier",
									"src": "65423:19:0"
								},
								{
									"baseName": {
										"id": 2148,
										"name": "IUniswapV3PoolDerivedState",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1995,
										"src": "65449:26:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolDerivedState_$1995",
											"typeString": "contract IUniswapV3PoolDerivedState"
										}
									},
									"id": 2149,
									"nodeType": "InheritanceSpecifier",
									"src": "65449:26:0"
								},
								{
									"baseName": {
										"id": 2150,
										"name": "IUniswapV3PoolActions",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1965,
										"src": "65482:21:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolActions_$1965",
											"typeString": "contract IUniswapV3PoolActions"
										}
									},
									"id": 2151,
									"nodeType": "InheritanceSpecifier",
									"src": "65482:21:0"
								},
								{
									"baseName": {
										"id": 2152,
										"name": "IUniswapV3PoolOwnerActions",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1870,
										"src": "65510:26:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolOwnerActions_$1870",
											"typeString": "contract IUniswapV3PoolOwnerActions"
										}
									},
									"id": 2153,
									"nodeType": "InheritanceSpecifier",
									"src": "65510:26:0"
								},
								{
									"baseName": {
										"id": 2154,
										"name": "IUniswapV3PoolEvents",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1845,
										"src": "65543:20:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolEvents_$1845",
											"typeString": "contract IUniswapV3PoolEvents"
										}
									},
									"id": 2155,
									"nodeType": "InheritanceSpecifier",
									"src": "65543:20:0"
								}
							],
							"contractDependencies": [
								1845,
								1870,
								1965,
								1995,
								2102,
								2141
							],
							"contractKind": "interface",
							"documentation": {
								"id": 2143,
								"nodeType": "StructuredDocumentation",
								"src": "65090:269:0",
								"text": "@title The interface for a Uniswap V3 Pool\n @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n to the ERC20 specification\n @dev The pool interface is broken up into many smaller pieces"
							},
							"fullyImplemented": false,
							"id": 2156,
							"linearizedBaseContracts": [
								2156,
								1845,
								1870,
								1965,
								1995,
								2102,
								2141
							],
							"name": "IUniswapV3Pool",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 3471,
							"src": "65359:212:0"
						},
						{
							"id": 2157,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "65632:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2158,
								"nodeType": "StructuredDocumentation",
								"src": "65663:69:0",
								"text": "@notice Provides validation for callbacks from Uniswap V3 Pools"
							},
							"fullyImplemented": true,
							"id": 2215,
							"linearizedBaseContracts": [
								2215
							],
							"name": "CallbackValidation",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2182,
										"nodeType": "Block",
										"src": "66360:94:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2173,
															"name": "factory",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2161,
															"src": "66393:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 2176,
																	"name": "tokenA",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2163,
																	"src": "66425:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2177,
																	"name": "tokenB",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2165,
																	"src": "66433:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2178,
																	"name": "fee",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2167,
																	"src": "66441:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint24",
																		"typeString": "uint24"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint24",
																		"typeString": "uint24"
																	}
																],
																"expression": {
																	"id": 2174,
																	"name": "PoolAddress",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 91,
																	"src": "66402:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_PoolAddress_$91_$",
																		"typeString": "type(library PoolAddress)"
																	}
																},
																"id": 2175,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "getPoolKey",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 43,
																"src": "66402:22:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_address_$_t_address_$_t_uint24_$returns$_t_struct$_PoolKey_$12_memory_ptr_$",
																	"typeString": "function (address,address,uint24) pure returns (struct PoolAddress.PoolKey memory)"
																}
															},
															"id": 2179,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "66402:43:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_PoolKey_$12_memory_ptr",
																"typeString": "struct PoolAddress.PoolKey memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_struct$_PoolKey_$12_memory_ptr",
																"typeString": "struct PoolAddress.PoolKey memory"
															}
														],
														"id": 2172,
														"name": "verifyCallback",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2183,
															2214
														],
														"referencedDeclaration": 2214,
														"src": "66378:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_struct$_PoolKey_$12_memory_ptr_$returns$_t_contract$_IUniswapV3Pool_$2156_$",
															"typeString": "function (address,struct PoolAddress.PoolKey memory) view returns (contract IUniswapV3Pool)"
														}
													},
													"id": 2180,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "66378:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IUniswapV3Pool_$2156",
														"typeString": "contract IUniswapV3Pool"
													}
												},
												"functionReturnParameters": 2171,
												"id": 2181,
												"nodeType": "Return",
												"src": "66371:75:0"
											}
										]
									},
									"documentation": {
										"id": 2159,
										"nodeType": "StructuredDocumentation",
										"src": "65766:416:0",
										"text": "@notice Returns the address of a valid Uniswap V3 Pool\n @param factory The contract address of the Uniswap V3 factory\n @param tokenA The contract address of either token0 or token1\n @param tokenB The contract address of the other token\n @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n @return pool The V3 pool contract address"
									},
									"id": 2183,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallback",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2168,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2161,
												"mutability": "mutable",
												"name": "factory",
												"nodeType": "VariableDeclaration",
												"scope": 2183,
												"src": "66222:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2160,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "66222:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2163,
												"mutability": "mutable",
												"name": "tokenA",
												"nodeType": "VariableDeclaration",
												"scope": 2183,
												"src": "66248:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2162,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "66248:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2165,
												"mutability": "mutable",
												"name": "tokenB",
												"nodeType": "VariableDeclaration",
												"scope": 2183,
												"src": "66273:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2164,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "66273:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2167,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 2183,
												"src": "66298:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 2166,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "66298:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "66211:104:0"
									},
									"returnParameters": {
										"id": 2171,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2170,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 2183,
												"src": "66339:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IUniswapV3Pool_$2156",
													"typeString": "contract IUniswapV3Pool"
												},
												"typeName": {
													"id": 2169,
													"name": "IUniswapV3Pool",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2156,
													"src": "66339:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IUniswapV3Pool_$2156",
														"typeString": "contract IUniswapV3Pool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "66338:21:0"
									},
									"scope": 2215,
									"src": "66188:266:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2213,
										"nodeType": "Block",
										"src": "66860:133:0",
										"statements": [
											{
												"expression": {
													"id": 2201,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2193,
														"name": "pool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2191,
														"src": "66871:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IUniswapV3Pool_$2156",
															"typeString": "contract IUniswapV3Pool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 2197,
																		"name": "factory",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2186,
																		"src": "66920:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 2198,
																		"name": "poolKey",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2188,
																		"src": "66929:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_PoolKey_$12_memory_ptr",
																			"typeString": "struct PoolAddress.PoolKey memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_struct$_PoolKey_$12_memory_ptr",
																			"typeString": "struct PoolAddress.PoolKey memory"
																		}
																	],
																	"expression": {
																		"id": 2195,
																		"name": "PoolAddress",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 91,
																		"src": "66893:11:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_PoolAddress_$91_$",
																			"typeString": "type(library PoolAddress)"
																		}
																	},
																	"id": 2196,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "computeAddress",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 90,
																	"src": "66893:26:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_address_$_t_struct$_PoolKey_$12_memory_ptr_$returns$_t_address_$",
																		"typeString": "function (address,struct PoolAddress.PoolKey memory) pure returns (address)"
																	}
																},
																"id": 2199,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "66893:44:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 2194,
															"name": "IUniswapV3Pool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2156,
															"src": "66878:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IUniswapV3Pool_$2156_$",
																"typeString": "type(contract IUniswapV3Pool)"
															}
														},
														"id": 2200,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "66878:60:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IUniswapV3Pool_$2156",
															"typeString": "contract IUniswapV3Pool"
														}
													},
													"src": "66871:67:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IUniswapV3Pool_$2156",
														"typeString": "contract IUniswapV3Pool"
													}
												},
												"id": 2202,
												"nodeType": "ExpressionStatement",
												"src": "66871:67:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2210,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 2204,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "66957:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 2205,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "66957:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 2208,
																		"name": "pool",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2191,
																		"src": "66979:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IUniswapV3Pool_$2156",
																			"typeString": "contract IUniswapV3Pool"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IUniswapV3Pool_$2156",
																			"typeString": "contract IUniswapV3Pool"
																		}
																	],
																	"id": 2207,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "66971:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 2206,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "66971:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 2209,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "66971:13:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "66957:27:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 2203,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "66949:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 2211,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "66949:36:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2212,
												"nodeType": "ExpressionStatement",
												"src": "66949:36:0"
											}
										]
									},
									"documentation": {
										"id": 2184,
										"nodeType": "StructuredDocumentation",
										"src": "66462:239:0",
										"text": "@notice Returns the address of a valid Uniswap V3 Pool\n @param factory The contract address of the Uniswap V3 factory\n @param poolKey The identifying key of the V3 pool\n @return pool The V3 pool contract address"
									},
									"id": 2214,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallback",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2189,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2186,
												"mutability": "mutable",
												"name": "factory",
												"nodeType": "VariableDeclaration",
												"scope": 2214,
												"src": "66731:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2185,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "66731:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2188,
												"mutability": "mutable",
												"name": "poolKey",
												"nodeType": "VariableDeclaration",
												"scope": 2214,
												"src": "66748:34:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PoolKey_$12_memory_ptr",
													"typeString": "struct PoolAddress.PoolKey"
												},
												"typeName": {
													"id": 2187,
													"name": "PoolAddress.PoolKey",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 12,
													"src": "66748:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolKey_$12_storage_ptr",
														"typeString": "struct PoolAddress.PoolKey"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "66730:53:0"
									},
									"returnParameters": {
										"id": 2192,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2191,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 2214,
												"src": "66834:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IUniswapV3Pool_$2156",
													"typeString": "contract IUniswapV3Pool"
												},
												"typeName": {
													"id": 2190,
													"name": "IUniswapV3Pool",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2156,
													"src": "66834:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IUniswapV3Pool_$2156",
														"typeString": "contract IUniswapV3Pool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "66833:21:0"
									},
									"scope": 2215,
									"src": "66707:286:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3471,
							"src": "65732:1264:0"
						},
						{
							"id": 2216,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "67064:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2217,
								"nodeType": "StructuredDocumentation",
								"src": "67092:238:0",
								"text": "@title Math library for computing sqrt prices from ticks and vice versa\n @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n prices between 2**-128 and 2**128"
							},
							"fullyImplemented": true,
							"id": 2749,
							"linearizedBaseContracts": [
								2749
							],
							"name": "TickMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"documentation": {
										"id": 2218,
										"nodeType": "StructuredDocumentation",
										"src": "67354:108:0",
										"text": "@dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128"
									},
									"id": 2222,
									"mutability": "constant",
									"name": "MIN_TICK",
									"nodeType": "VariableDeclaration",
									"scope": 2749,
									"src": "67468:42:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_int24",
										"typeString": "int24"
									},
									"typeName": {
										"id": 2219,
										"name": "int24",
										"nodeType": "ElementaryTypeName",
										"src": "67468:5:0",
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"value": {
										"id": 2221,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"nodeType": "UnaryOperation",
										"operator": "-",
										"prefix": true,
										"src": "67503:7:0",
										"subExpression": {
											"hexValue": "383837323732",
											"id": 2220,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "67504:6:0",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_887272_by_1",
												"typeString": "int_const 887272"
											},
											"value": "887272"
										},
										"typeDescriptions": {
											"typeIdentifier": "t_rational_minus_887272_by_1",
											"typeString": "int_const -887272"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 2223,
										"nodeType": "StructuredDocumentation",
										"src": "67517:107:0",
										"text": "@dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128"
									},
									"id": 2227,
									"mutability": "constant",
									"name": "MAX_TICK",
									"nodeType": "VariableDeclaration",
									"scope": 2749,
									"src": "67630:44:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_int24",
										"typeString": "int24"
									},
									"typeName": {
										"id": 2224,
										"name": "int24",
										"nodeType": "ElementaryTypeName",
										"src": "67630:5:0",
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"value": {
										"id": 2226,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"nodeType": "UnaryOperation",
										"operator": "-",
										"prefix": true,
										"src": "67665:9:0",
										"subExpression": {
											"id": 2225,
											"name": "MIN_TICK",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 2222,
											"src": "67666:8:0",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											}
										},
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 2228,
										"nodeType": "StructuredDocumentation",
										"src": "67683:116:0",
										"text": "@dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)"
									},
									"id": 2231,
									"mutability": "constant",
									"name": "MIN_SQRT_RATIO",
									"nodeType": "VariableDeclaration",
									"scope": 2749,
									"src": "67805:53:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint160",
										"typeString": "uint160"
									},
									"typeName": {
										"id": 2229,
										"name": "uint160",
										"nodeType": "ElementaryTypeName",
										"src": "67805:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint160",
											"typeString": "uint160"
										}
									},
									"value": {
										"hexValue": "34323935313238373339",
										"id": 2230,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "67848:10:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_4295128739_by_1",
											"typeString": "int_const 4295128739"
										},
										"value": "4295128739"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 2232,
										"nodeType": "StructuredDocumentation",
										"src": "67865:116:0",
										"text": "@dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)"
									},
									"id": 2235,
									"mutability": "constant",
									"name": "MAX_SQRT_RATIO",
									"nodeType": "VariableDeclaration",
									"scope": 2749,
									"src": "67987:92:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint160",
										"typeString": "uint160"
									},
									"typeName": {
										"id": 2233,
										"name": "uint160",
										"nodeType": "ElementaryTypeName",
										"src": "67987:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint160",
											"typeString": "uint160"
										}
									},
									"value": {
										"hexValue": "31343631343436373033343835323130313033323837323733303532323033393838383232333738373233393730333432",
										"id": 2234,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "68030:49:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1461446703485210103287273052203988822378723970342_by_1",
											"typeString": "int_const 1461...(41 digits omitted)...0342"
										},
										"value": "1461446703485210103287273052203988822378723970342"
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2608,
										"nodeType": "Block",
										"src": "68480:2526:0",
										"statements": [
											{
												"assignments": [
													2244
												],
												"declarations": [
													{
														"constant": false,
														"id": 2244,
														"mutability": "mutable",
														"name": "absTick",
														"nodeType": "VariableDeclaration",
														"scope": 2608,
														"src": "68491:15:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2243,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "68491:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2264,
												"initialValue": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"id": 2247,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2245,
															"name": "tick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2238,
															"src": "68509:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"hexValue": "30",
															"id": 2246,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "68516:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "68509:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 2260,
																		"name": "tick",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2238,
																		"src": "68560:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	],
																	"id": 2259,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "68553:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_int256_$",
																		"typeString": "type(int256)"
																	},
																	"typeName": {
																		"id": 2258,
																		"name": "int256",
																		"nodeType": "ElementaryTypeName",
																		"src": "68553:6:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 2261,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "68553:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															],
															"id": 2257,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "68545:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 2256,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "68545:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 2262,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "68545:21:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2263,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "68509:57:0",
													"trueExpression": {
														"arguments": [
															{
																"id": 2254,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "-",
																"prefix": true,
																"src": "68528:13:0",
																"subExpression": {
																	"arguments": [
																		{
																			"id": 2252,
																			"name": "tick",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2238,
																			"src": "68536:4:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		],
																		"id": 2251,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "68529:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 2250,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "68529:6:0",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2253,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "68529:12:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															],
															"id": 2249,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "68520:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 2248,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "68520:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 2255,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "68520:22:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "68491:75:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2271,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2266,
																"name": "absTick",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2244,
																"src": "68585:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 2269,
																		"name": "MAX_TICK",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2227,
																		"src": "68604:8:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	],
																	"id": 2268,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "68596:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 2267,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "68596:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 2270,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "68596:17:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "68585:28:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "54",
															"id": 2272,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "68615:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_846b7b6deb1cfa110d0ea7ec6162a7123b761785528db70cceed5143183b11fc",
																"typeString": "literal_string \"T\""
															},
															"value": "T"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_846b7b6deb1cfa110d0ea7ec6162a7123b761785528db70cceed5143183b11fc",
																"typeString": "literal_string \"T\""
															}
														],
														"id": 2265,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "68577:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2273,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "68577:42:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2274,
												"nodeType": "ExpressionStatement",
												"src": "68577:42:0"
											},
											{
												"assignments": [
													2276
												],
												"declarations": [
													{
														"constant": false,
														"id": 2276,
														"mutability": "mutable",
														"name": "ratio",
														"nodeType": "VariableDeclaration",
														"scope": 2608,
														"src": "68632:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2275,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "68632:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2285,
												"initialValue": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2281,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2279,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2277,
																"name": "absTick",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2244,
																"src": "68648:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"hexValue": "307831",
																"id": 2278,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "68658:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "0x1"
															},
															"src": "68648:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "30",
															"id": 2280,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "68665:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "68648:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"hexValue": "3078313030303030303030303030303030303030303030303030303030303030303030",
														"id": 2283,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "68706:35:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_340282366920938463463374607431768211456_by_1",
															"typeString": "int_const 3402...(31 digits omitted)...1456"
														},
														"value": "0x100000000000000000000000000000000"
													},
													"id": 2284,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "68648:93:0",
													"trueExpression": {
														"hexValue": "30786666666362393333626436666164333761613264313632643161353934303031",
														"id": 2282,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "68669:34:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_340265354078544963557816517032075149313_by_1",
															"typeString": "int_const 3402...(31 digits omitted)...9313"
														},
														"value": "0xfffcb933bd6fad37aa2d162d1a594001"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint136",
														"typeString": "uint136"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "68632:109:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2290,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2288,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2286,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2244,
															"src": "68756:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307832",
															"id": 2287,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "68766:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "0x2"
														},
														"src": "68756:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2289,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "68773:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "68756:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2300,
												"nodeType": "IfStatement",
												"src": "68752:83:0",
												"trueBody": {
													"expression": {
														"id": 2298,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2291,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2276,
															"src": "68776:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2297,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2294,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2292,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2276,
																			"src": "68785:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666663937323732333733643431333235396134363939303538306532313361",
																			"id": 2293,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "68793:34:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340248342086729790484326174814286782778_by_1",
																				"typeString": "int_const 3402...(31 digits omitted)...2778"
																			},
																			"value": "0xfff97272373d413259a46990580e213a"
																		},
																		"src": "68785:42:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2295,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "68784:44:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2296,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "68832:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "68784:51:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "68776:59:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2299,
													"nodeType": "ExpressionStatement",
													"src": "68776:59:0"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2305,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2303,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2301,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2244,
															"src": "68850:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307834",
															"id": 2302,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "68860:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_4_by_1",
																"typeString": "int_const 4"
															},
															"value": "0x4"
														},
														"src": "68850:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2304,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "68867:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "68850:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2315,
												"nodeType": "IfStatement",
												"src": "68846:83:0",
												"trueBody": {
													"expression": {
														"id": 2313,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2306,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2276,
															"src": "68870:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2312,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2309,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2307,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2276,
																			"src": "68879:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666663265353066356636353639333265663132333537636633633766646363",
																			"id": 2308,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "68887:34:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340214320654664324051920982716015181260_by_1",
																				"typeString": "int_const 3402...(31 digits omitted)...1260"
																			},
																			"value": "0xfff2e50f5f656932ef12357cf3c7fdcc"
																		},
																		"src": "68879:42:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2310,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "68878:44:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2311,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "68926:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "68878:51:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "68870:59:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2314,
													"nodeType": "ExpressionStatement",
													"src": "68870:59:0"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2320,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2318,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2316,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2244,
															"src": "68944:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307838",
															"id": 2317,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "68954:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_8_by_1",
																"typeString": "int_const 8"
															},
															"value": "0x8"
														},
														"src": "68944:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2319,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "68961:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "68944:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2330,
												"nodeType": "IfStatement",
												"src": "68940:83:0",
												"trueBody": {
													"expression": {
														"id": 2328,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2321,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2276,
															"src": "68964:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2327,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2324,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2322,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2276,
																			"src": "68973:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666653563616361376531306534653631633336323465616130393431636430",
																			"id": 2323,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "68981:34:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340146287995602323631171512101879684304_by_1",
																				"typeString": "int_const 3401...(31 digits omitted)...4304"
																			},
																			"value": "0xffe5caca7e10e4e61c3624eaa0941cd0"
																		},
																		"src": "68973:42:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2325,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "68972:44:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2326,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "69020:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "68972:51:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "68964:59:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2329,
													"nodeType": "ExpressionStatement",
													"src": "68964:59:0"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2335,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2333,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2331,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2244,
															"src": "69038:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783130",
															"id": 2332,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "69048:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_16_by_1",
																"typeString": "int_const 16"
															},
															"value": "0x10"
														},
														"src": "69038:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2334,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "69056:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "69038:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2345,
												"nodeType": "IfStatement",
												"src": "69034:84:0",
												"trueBody": {
													"expression": {
														"id": 2343,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2336,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2276,
															"src": "69059:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2342,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2339,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2337,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2276,
																			"src": "69068:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666636239383433643630663631353963396462353838333563393236363434",
																			"id": 2338,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "69076:34:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340010263488231146823593991679159461444_by_1",
																				"typeString": "int_const 3400...(31 digits omitted)...1444"
																			},
																			"value": "0xffcb9843d60f6159c9db58835c926644"
																		},
																		"src": "69068:42:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2340,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "69067:44:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2341,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "69115:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "69067:51:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "69059:59:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2344,
													"nodeType": "ExpressionStatement",
													"src": "69059:59:0"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2350,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2348,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2346,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2244,
															"src": "69133:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783230",
															"id": 2347,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "69143:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															},
															"value": "0x20"
														},
														"src": "69133:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2349,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "69151:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "69133:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2360,
												"nodeType": "IfStatement",
												"src": "69129:84:0",
												"trueBody": {
													"expression": {
														"id": 2358,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2351,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2276,
															"src": "69154:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2357,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2354,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2352,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2276,
																			"src": "69163:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666393733623431666139386330383134373265363839366466623235346330",
																			"id": 2353,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "69171:34:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_339738377640345403697157401104375502016_by_1",
																				"typeString": "int_const 3397...(31 digits omitted)...2016"
																			},
																			"value": "0xff973b41fa98c081472e6896dfb254c0"
																		},
																		"src": "69163:42:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2355,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "69162:44:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2356,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "69210:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "69162:51:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "69154:59:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2359,
													"nodeType": "ExpressionStatement",
													"src": "69154:59:0"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2365,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2363,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2361,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2244,
															"src": "69228:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783430",
															"id": 2362,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "69238:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_64_by_1",
																"typeString": "int_const 64"
															},
															"value": "0x40"
														},
														"src": "69228:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2364,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "69246:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "69228:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2375,
												"nodeType": "IfStatement",
												"src": "69224:84:0",
												"trueBody": {
													"expression": {
														"id": 2373,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2366,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2276,
															"src": "69249:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2372,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2369,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2367,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2276,
																			"src": "69258:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666326561313634363663393661333834336563373862333236623532383631",
																			"id": 2368,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "69266:34:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_339195258003219555707034227454543997025_by_1",
																				"typeString": "int_const 3391...(31 digits omitted)...7025"
																			},
																			"value": "0xff2ea16466c96a3843ec78b326b52861"
																		},
																		"src": "69258:42:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2370,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "69257:44:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2371,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "69305:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "69257:51:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "69249:59:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2374,
													"nodeType": "ExpressionStatement",
													"src": "69249:59:0"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2380,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2378,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2376,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2244,
															"src": "69323:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783830",
															"id": 2377,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "69333:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_128_by_1",
																"typeString": "int_const 128"
															},
															"value": "0x80"
														},
														"src": "69323:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2379,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "69341:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "69323:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2390,
												"nodeType": "IfStatement",
												"src": "69319:84:0",
												"trueBody": {
													"expression": {
														"id": 2388,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2381,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2276,
															"src": "69344:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2387,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2384,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2382,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2276,
																			"src": "69353:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786665356465653034366139396132613831316334363166313936396333303533",
																			"id": 2383,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "69361:34:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_338111622100601834656805679988414885971_by_1",
																				"typeString": "int_const 3381...(31 digits omitted)...5971"
																			},
																			"value": "0xfe5dee046a99a2a811c461f1969c3053"
																		},
																		"src": "69353:42:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2385,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "69352:44:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2386,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "69400:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "69352:51:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "69344:59:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2389,
													"nodeType": "ExpressionStatement",
													"src": "69344:59:0"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2395,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2393,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2391,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2244,
															"src": "69418:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078313030",
															"id": 2392,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "69428:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_256_by_1",
																"typeString": "int_const 256"
															},
															"value": "0x100"
														},
														"src": "69418:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2394,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "69437:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "69418:20:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2405,
												"nodeType": "IfStatement",
												"src": "69414:85:0",
												"trueBody": {
													"expression": {
														"id": 2403,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2396,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2276,
															"src": "69440:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2402,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2399,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2397,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2276,
																			"src": "69449:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786663626538366337393030613838616564636666633833623437396161336134",
																			"id": 2398,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "69457:34:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_335954724994790223023589805789778977700_by_1",
																				"typeString": "int_const 3359...(31 digits omitted)...7700"
																			},
																			"value": "0xfcbe86c7900a88aedcffc83b479aa3a4"
																		},
																		"src": "69449:42:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2400,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "69448:44:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2401,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "69496:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "69448:51:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "69440:59:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2404,
													"nodeType": "ExpressionStatement",
													"src": "69440:59:0"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2410,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2408,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2406,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2244,
															"src": "69514:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078323030",
															"id": 2407,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "69524:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_512_by_1",
																"typeString": "int_const 512"
															},
															"value": "0x200"
														},
														"src": "69514:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2409,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "69533:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "69514:20:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2420,
												"nodeType": "IfStatement",
												"src": "69510:85:0",
												"trueBody": {
													"expression": {
														"id": 2418,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2411,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2276,
															"src": "69536:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2417,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2414,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2412,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2276,
																			"src": "69545:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786639383761373235336163343133313736663262303734636637383135653534",
																			"id": 2413,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "69553:34:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_331682121138379247127172139078559817300_by_1",
																				"typeString": "int_const 3316...(31 digits omitted)...7300"
																			},
																			"value": "0xf987a7253ac413176f2b074cf7815e54"
																		},
																		"src": "69545:42:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2415,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "69544:44:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2416,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "69592:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "69544:51:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "69536:59:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2419,
													"nodeType": "ExpressionStatement",
													"src": "69536:59:0"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2425,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2423,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2421,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2244,
															"src": "69610:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078343030",
															"id": 2422,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "69620:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1024_by_1",
																"typeString": "int_const 1024"
															},
															"value": "0x400"
														},
														"src": "69610:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2424,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "69629:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "69610:20:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2435,
												"nodeType": "IfStatement",
												"src": "69606:85:0",
												"trueBody": {
													"expression": {
														"id": 2433,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2426,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2276,
															"src": "69632:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2432,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2429,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2427,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2276,
																			"src": "69641:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786633333932623038323262373030303539343063376133393865346237306633",
																			"id": 2428,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "69649:34:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_323299236684853023288211250268160618739_by_1",
																				"typeString": "int_const 3232...(31 digits omitted)...8739"
																			},
																			"value": "0xf3392b0822b70005940c7a398e4b70f3"
																		},
																		"src": "69641:42:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2430,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "69640:44:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2431,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "69688:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "69640:51:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "69632:59:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2434,
													"nodeType": "ExpressionStatement",
													"src": "69632:59:0"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2440,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2438,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2436,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2244,
															"src": "69706:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078383030",
															"id": 2437,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "69716:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2048_by_1",
																"typeString": "int_const 2048"
															},
															"value": "0x800"
														},
														"src": "69706:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2439,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "69725:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "69706:20:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2450,
												"nodeType": "IfStatement",
												"src": "69702:85:0",
												"trueBody": {
													"expression": {
														"id": 2448,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2441,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2276,
															"src": "69728:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2447,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2444,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2442,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2276,
																			"src": "69737:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786537313539343735613263323962373434336232396337666136653838396439",
																			"id": 2443,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "69745:34:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_307163716377032989948697243942600083929_by_1",
																				"typeString": "int_const 3071...(31 digits omitted)...3929"
																			},
																			"value": "0xe7159475a2c29b7443b29c7fa6e889d9"
																		},
																		"src": "69737:42:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2445,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "69736:44:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2446,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "69784:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "69736:51:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "69728:59:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2449,
													"nodeType": "ExpressionStatement",
													"src": "69728:59:0"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2455,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2453,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2451,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2244,
															"src": "69802:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307831303030",
															"id": 2452,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "69812:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_4096_by_1",
																"typeString": "int_const 4096"
															},
															"value": "0x1000"
														},
														"src": "69802:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2454,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "69822:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "69802:21:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2465,
												"nodeType": "IfStatement",
												"src": "69798:86:0",
												"trueBody": {
													"expression": {
														"id": 2463,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2456,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2276,
															"src": "69825:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2462,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2459,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2457,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2276,
																			"src": "69834:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786430393766336264666432303232623838343561643866373932616135383235",
																			"id": 2458,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "69842:34:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_277268403626896220162999269216087595045_by_1",
																				"typeString": "int_const 2772...(31 digits omitted)...5045"
																			},
																			"value": "0xd097f3bdfd2022b8845ad8f792aa5825"
																		},
																		"src": "69834:42:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2460,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "69833:44:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2461,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "69881:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "69833:51:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "69825:59:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2464,
													"nodeType": "ExpressionStatement",
													"src": "69825:59:0"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2470,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2468,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2466,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2244,
															"src": "69899:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307832303030",
															"id": 2467,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "69909:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_8192_by_1",
																"typeString": "int_const 8192"
															},
															"value": "0x2000"
														},
														"src": "69899:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2469,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "69919:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "69899:21:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2480,
												"nodeType": "IfStatement",
												"src": "69895:86:0",
												"trueBody": {
													"expression": {
														"id": 2478,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2471,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2276,
															"src": "69922:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2477,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2474,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2472,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2276,
																			"src": "69931:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786139663734363436326438373066646638613635646331663930653036316535",
																			"id": 2473,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "69939:34:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_225923453940442621947126027127485391333_by_1",
																				"typeString": "int_const 2259...(31 digits omitted)...1333"
																			},
																			"value": "0xa9f746462d870fdf8a65dc1f90e061e5"
																		},
																		"src": "69931:42:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2475,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "69930:44:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2476,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "69978:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "69930:51:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "69922:59:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2479,
													"nodeType": "ExpressionStatement",
													"src": "69922:59:0"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2485,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2483,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2481,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2244,
															"src": "69996:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307834303030",
															"id": 2482,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "70006:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_16384_by_1",
																"typeString": "int_const 16384"
															},
															"value": "0x4000"
														},
														"src": "69996:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2484,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "70016:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "69996:21:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2495,
												"nodeType": "IfStatement",
												"src": "69992:86:0",
												"trueBody": {
													"expression": {
														"id": 2493,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2486,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2276,
															"src": "70019:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2492,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2489,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2487,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2276,
																			"src": "70028:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30783730643836396131353664326131623839306262336466363262616633326637",
																			"id": 2488,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "70036:34:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_149997214084966997727330242082538205943_by_1",
																				"typeString": "int_const 1499...(31 digits omitted)...5943"
																			},
																			"value": "0x70d869a156d2a1b890bb3df62baf32f7"
																		},
																		"src": "70028:42:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2490,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "70027:44:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2491,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "70075:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "70027:51:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "70019:59:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2494,
													"nodeType": "ExpressionStatement",
													"src": "70019:59:0"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2500,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2498,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2496,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2244,
															"src": "70093:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307838303030",
															"id": 2497,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "70103:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32768_by_1",
																"typeString": "int_const 32768"
															},
															"value": "0x8000"
														},
														"src": "70093:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2499,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "70113:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "70093:21:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2510,
												"nodeType": "IfStatement",
												"src": "70089:86:0",
												"trueBody": {
													"expression": {
														"id": 2508,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2501,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2276,
															"src": "70116:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2507,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2504,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2502,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2276,
																			"src": "70125:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30783331626531333566393764303866643938313233313530353534326663666136",
																			"id": 2503,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "70133:34:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_66119101136024775622716233608466517926_by_1",
																				"typeString": "int_const 6611...(30 digits omitted)...7926"
																			},
																			"value": "0x31be135f97d08fd981231505542fcfa6"
																		},
																		"src": "70125:42:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2505,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "70124:44:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2506,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "70172:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "70124:51:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "70116:59:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2509,
													"nodeType": "ExpressionStatement",
													"src": "70116:59:0"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2515,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2513,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2511,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2244,
															"src": "70190:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783130303030",
															"id": 2512,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "70200:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_65536_by_1",
																"typeString": "int_const 65536"
															},
															"value": "0x10000"
														},
														"src": "70190:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2514,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "70211:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "70190:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2525,
												"nodeType": "IfStatement",
												"src": "70186:86:0",
												"trueBody": {
													"expression": {
														"id": 2523,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2516,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2276,
															"src": "70214:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2522,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2519,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2517,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2276,
																			"src": "70223:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "307839616135303862356237613834653163363737646535346633653939626339",
																			"id": 2518,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "70231:33:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_12847376061809297530290974190478138313_by_1",
																				"typeString": "int_const 1284...(30 digits omitted)...8313"
																			},
																			"value": "0x9aa508b5b7a84e1c677de54f3e99bc9"
																		},
																		"src": "70223:41:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2520,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "70222:43:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2521,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "70269:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "70222:50:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "70214:58:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2524,
													"nodeType": "ExpressionStatement",
													"src": "70214:58:0"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2530,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2528,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2526,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2244,
															"src": "70287:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783230303030",
															"id": 2527,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "70297:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_131072_by_1",
																"typeString": "int_const 131072"
															},
															"value": "0x20000"
														},
														"src": "70287:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2529,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "70308:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "70287:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2540,
												"nodeType": "IfStatement",
												"src": "70283:85:0",
												"trueBody": {
													"expression": {
														"id": 2538,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2531,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2276,
															"src": "70311:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2537,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2534,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2532,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2276,
																			"src": "70320:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "3078356436616638646564623831313936363939633332393232356565363034",
																			"id": 2533,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "70328:32:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_485053260817066172746253684029974020_by_1",
																				"typeString": "int_const 4850...(28 digits omitted)...4020"
																			},
																			"value": "0x5d6af8dedb81196699c329225ee604"
																		},
																		"src": "70320:40:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2535,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "70319:42:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2536,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "70365:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "70319:49:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "70311:57:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2539,
													"nodeType": "ExpressionStatement",
													"src": "70311:57:0"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2545,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2543,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2541,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2244,
															"src": "70383:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783430303030",
															"id": 2542,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "70393:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_262144_by_1",
																"typeString": "int_const 262144"
															},
															"value": "0x40000"
														},
														"src": "70383:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2544,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "70404:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "70383:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2555,
												"nodeType": "IfStatement",
												"src": "70379:83:0",
												"trueBody": {
													"expression": {
														"id": 2553,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2546,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2276,
															"src": "70407:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2552,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2549,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2547,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2276,
																			"src": "70416:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "307832323136653538346635666131656139323630343162656466653938",
																			"id": 2548,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "70424:30:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_691415978906521570653435304214168_by_1",
																				"typeString": "int_const 6914...(25 digits omitted)...4168"
																			},
																			"value": "0x2216e584f5fa1ea926041bedfe98"
																		},
																		"src": "70416:38:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2550,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "70415:40:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2551,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "70459:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "70415:47:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "70407:55:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2554,
													"nodeType": "ExpressionStatement",
													"src": "70407:55:0"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2560,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2558,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2556,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2244,
															"src": "70477:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783830303030",
															"id": 2557,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "70487:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_524288_by_1",
																"typeString": "int_const 524288"
															},
															"value": "0x80000"
														},
														"src": "70477:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2559,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "70498:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "70477:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2570,
												"nodeType": "IfStatement",
												"src": "70473:78:0",
												"trueBody": {
													"expression": {
														"id": 2568,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2561,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2276,
															"src": "70501:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2567,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2564,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2562,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2276,
																			"src": "70510:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30783438613137303339316637646334323434346538666132",
																			"id": 2563,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "70518:25:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1404880482679654955896180642_by_1",
																				"typeString": "int_const 1404880482679654955896180642"
																			},
																			"value": "0x48a170391f7dc42444e8fa2"
																		},
																		"src": "70510:33:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2565,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "70509:35:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2566,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "70548:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "70509:42:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "70501:50:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2569,
													"nodeType": "ExpressionStatement",
													"src": "70501:50:0"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													},
													"id": 2573,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2571,
														"name": "tick",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2238,
														"src": "70568:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 2572,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "70575:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "70568:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2584,
												"nodeType": "IfStatement",
												"src": "70564:47:0",
												"trueBody": {
													"expression": {
														"id": 2582,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2574,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2276,
															"src": "70578:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2581,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 2577,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "70591:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			},
																			"typeName": {
																				"id": 2576,
																				"name": "uint256",
																				"nodeType": "ElementaryTypeName",
																				"src": "70591:7:0",
																				"typeDescriptions": {}
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			}
																		],
																		"id": 2575,
																		"name": "type",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967269,
																		"src": "70586:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 2578,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "70586:13:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_meta_type_t_uint256",
																		"typeString": "type(uint256)"
																	}
																},
																"id": 2579,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "max",
																"nodeType": "MemberAccess",
																"src": "70586:17:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 2580,
																"name": "ratio",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2276,
																"src": "70606:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "70586:25:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "70578:33:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2583,
													"nodeType": "ExpressionStatement",
													"src": "70578:33:0"
												}
											},
											{
												"expression": {
													"id": 2606,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2585,
														"name": "sqrtPriceX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2241,
														"src": "70926:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2604,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2590,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2588,
																				"name": "ratio",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2276,
																				"src": "70950:5:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": ">>",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 2589,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "70959:2:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "70950:11:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2591,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "70949:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"components": [
																		{
																			"condition": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2599,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2597,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 2592,
																						"name": "ratio",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2276,
																						"src": "70966:5:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "%",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_rational_4294967296_by_1",
																									"typeString": "int_const 4294967296"
																								},
																								"id": 2595,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"lValueRequested": false,
																								"leftExpression": {
																									"hexValue": "31",
																									"id": 2593,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "70975:1:0",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_1_by_1",
																										"typeString": "int_const 1"
																									},
																									"value": "1"
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "<<",
																								"rightExpression": {
																									"hexValue": "3332",
																									"id": 2594,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "70980:2:0",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_32_by_1",
																										"typeString": "int_const 32"
																									},
																									"value": "32"
																								},
																								"src": "70975:7:0",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_4294967296_by_1",
																									"typeString": "int_const 4294967296"
																								}
																							}
																						],
																						"id": 2596,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "70974:9:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_4294967296_by_1",
																							"typeString": "int_const 4294967296"
																						}
																					},
																					"src": "70966:17:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"hexValue": "30",
																					"id": 2598,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "70987:1:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					},
																					"value": "0"
																				},
																				"src": "70966:22:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"falseExpression": {
																				"hexValue": "31",
																				"id": 2601,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "70995:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"id": 2602,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "Conditional",
																			"src": "70966:30:0",
																			"trueExpression": {
																				"hexValue": "30",
																				"id": 2600,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "70991:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		}
																	],
																	"id": 2603,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "70965:32:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "70949:48:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 2587,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "70941:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint160_$",
																"typeString": "type(uint160)"
															},
															"typeName": {
																"id": 2586,
																"name": "uint160",
																"nodeType": "ElementaryTypeName",
																"src": "70941:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 2605,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "70941:57:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "70926:72:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"id": 2607,
												"nodeType": "ExpressionStatement",
												"src": "70926:72:0"
											}
										]
									},
									"documentation": {
										"id": 2236,
										"nodeType": "StructuredDocumentation",
										"src": "68088:301:0",
										"text": "@notice Calculates sqrt(1.0001^tick) * 2^96\n @dev Throws if |tick| > max tick\n @param tick The input tick for the above formula\n @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n at the given tick"
									},
									"id": 2609,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getSqrtRatioAtTick",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2239,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2238,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 2609,
												"src": "68423:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 2237,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "68423:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "68422:12:0"
									},
									"returnParameters": {
										"id": 2242,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2241,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 2609,
												"src": "68458:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 2240,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "68458:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "68457:22:0"
									},
									"scope": 2749,
									"src": "68395:2611:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2747,
										"nodeType": "Block",
										"src": "71517:4339:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2624,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 2620,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2618,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2612,
																	"src": "71636:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">=",
																"rightExpression": {
																	"id": 2619,
																	"name": "MIN_SQRT_RATIO",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2231,
																	"src": "71652:14:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "71636:30:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 2623,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2621,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2612,
																	"src": "71670:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 2622,
																	"name": "MAX_SQRT_RATIO",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2235,
																	"src": "71685:14:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "71670:29:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "71636:63:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "52",
															"id": 2625,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "71701:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef22bddd350b943170a67d35191c27e310709a28c38b5762a152ff640108f5b2",
																"typeString": "literal_string \"R\""
															},
															"value": "R"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef22bddd350b943170a67d35191c27e310709a28c38b5762a152ff640108f5b2",
																"typeString": "literal_string \"R\""
															}
														],
														"id": 2617,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "71628:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2626,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "71628:77:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2627,
												"nodeType": "ExpressionStatement",
												"src": "71628:77:0"
											},
											{
												"assignments": [
													2629
												],
												"declarations": [
													{
														"constant": false,
														"id": 2629,
														"mutability": "mutable",
														"name": "ratio",
														"nodeType": "VariableDeclaration",
														"scope": 2747,
														"src": "71716:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2628,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "71716:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2636,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2635,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 2632,
																"name": "sqrtPriceX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2612,
																"src": "71740:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															],
															"id": 2631,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "71732:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 2630,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "71732:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 2633,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "71732:21:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"hexValue": "3332",
														"id": 2634,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "71757:2:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"src": "71732:27:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "71716:43:0"
											},
											{
												"assignments": [
													2638
												],
												"declarations": [
													{
														"constant": false,
														"id": 2638,
														"mutability": "mutable",
														"name": "r",
														"nodeType": "VariableDeclaration",
														"scope": 2747,
														"src": "71772:9:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2637,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "71772:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2640,
												"initialValue": {
													"id": 2639,
													"name": "ratio",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2629,
													"src": "71784:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "71772:17:0"
											},
											{
												"assignments": [
													2642
												],
												"declarations": [
													{
														"constant": false,
														"id": 2642,
														"mutability": "mutable",
														"name": "msb",
														"nodeType": "VariableDeclaration",
														"scope": 2747,
														"src": "71800:11:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2641,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "71800:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2644,
												"initialValue": {
													"hexValue": "30",
													"id": 2643,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "71814:1:0",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "71800:15:0"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "71837:143:0",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "71852:58:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "71865:1:0",
																		"type": "",
																		"value": "7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "71871:1:0"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "71874:34:0",
																				"type": "",
																				"value": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "71868:2:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "71868:41:0"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "71861:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "71861:49:0"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "71856:1:0",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "71924:17:0",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "71934:3:0"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "71939:1:0"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "71931:2:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "71931:10:0"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "71924:3:0"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "71955:14:0",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "71964:1:0"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "71967:1:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "71960:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "71960:9:0"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "71955:1:0"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2642,
														"isOffset": false,
														"isSlot": false,
														"src": "71924:3:0",
														"valueSize": 1
													},
													{
														"declaration": 2642,
														"isOffset": false,
														"isSlot": false,
														"src": "71934:3:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "71871:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "71955:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "71967:1:0",
														"valueSize": 1
													}
												],
												"id": 2645,
												"nodeType": "InlineAssembly",
												"src": "71828:152:0"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "71999:127:0",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "72014:42:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "72027:1:0",
																		"type": "",
																		"value": "6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "72033:1:0"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "72036:18:0",
																				"type": "",
																				"value": "0xFFFFFFFFFFFFFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "72030:2:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "72030:25:0"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "72023:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "72023:33:0"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "72018:1:0",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "72070:17:0",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "72080:3:0"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "72085:1:0"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "72077:2:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "72077:10:0"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "72070:3:0"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "72101:14:0",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "72110:1:0"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "72113:1:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "72106:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "72106:9:0"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "72101:1:0"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2642,
														"isOffset": false,
														"isSlot": false,
														"src": "72070:3:0",
														"valueSize": 1
													},
													{
														"declaration": 2642,
														"isOffset": false,
														"isSlot": false,
														"src": "72080:3:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "72033:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "72101:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "72113:1:0",
														"valueSize": 1
													}
												],
												"id": 2646,
												"nodeType": "InlineAssembly",
												"src": "71990:136:0"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "72145:119:0",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "72160:34:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "72173:1:0",
																		"type": "",
																		"value": "5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "72179:1:0"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "72182:10:0",
																				"type": "",
																				"value": "0xFFFFFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "72176:2:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "72176:17:0"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "72169:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "72169:25:0"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "72164:1:0",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "72208:17:0",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "72218:3:0"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "72223:1:0"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "72215:2:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "72215:10:0"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "72208:3:0"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "72239:14:0",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "72248:1:0"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "72251:1:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "72244:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "72244:9:0"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "72239:1:0"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2642,
														"isOffset": false,
														"isSlot": false,
														"src": "72208:3:0",
														"valueSize": 1
													},
													{
														"declaration": 2642,
														"isOffset": false,
														"isSlot": false,
														"src": "72218:3:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "72179:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "72239:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "72251:1:0",
														"valueSize": 1
													}
												],
												"id": 2647,
												"nodeType": "InlineAssembly",
												"src": "72136:128:0"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "72283:115:0",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "72298:30:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "72311:1:0",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "72317:1:0"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "72320:6:0",
																				"type": "",
																				"value": "0xFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "72314:2:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "72314:13:0"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "72307:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "72307:21:0"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "72302:1:0",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "72342:17:0",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "72352:3:0"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "72357:1:0"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "72349:2:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "72349:10:0"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "72342:3:0"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "72373:14:0",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "72382:1:0"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "72385:1:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "72378:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "72378:9:0"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "72373:1:0"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2642,
														"isOffset": false,
														"isSlot": false,
														"src": "72342:3:0",
														"valueSize": 1
													},
													{
														"declaration": 2642,
														"isOffset": false,
														"isSlot": false,
														"src": "72352:3:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "72317:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "72373:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "72385:1:0",
														"valueSize": 1
													}
												],
												"id": 2648,
												"nodeType": "InlineAssembly",
												"src": "72274:124:0"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "72417:113:0",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "72432:28:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "72445:1:0",
																		"type": "",
																		"value": "3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "72451:1:0"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "72454:4:0",
																				"type": "",
																				"value": "0xFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "72448:2:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "72448:11:0"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "72441:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "72441:19:0"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "72436:1:0",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "72474:17:0",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "72484:3:0"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "72489:1:0"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "72481:2:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "72481:10:0"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "72474:3:0"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "72505:14:0",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "72514:1:0"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "72517:1:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "72510:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "72510:9:0"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "72505:1:0"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2642,
														"isOffset": false,
														"isSlot": false,
														"src": "72474:3:0",
														"valueSize": 1
													},
													{
														"declaration": 2642,
														"isOffset": false,
														"isSlot": false,
														"src": "72484:3:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "72451:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "72505:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "72517:1:0",
														"valueSize": 1
													}
												],
												"id": 2649,
												"nodeType": "InlineAssembly",
												"src": "72408:122:0"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "72549:112:0",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "72564:27:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "72577:1:0",
																		"type": "",
																		"value": "2"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "72583:1:0"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "72586:3:0",
																				"type": "",
																				"value": "0xF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "72580:2:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "72580:10:0"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "72573:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "72573:18:0"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "72568:1:0",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "72605:17:0",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "72615:3:0"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "72620:1:0"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "72612:2:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "72612:10:0"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "72605:3:0"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "72636:14:0",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "72645:1:0"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "72648:1:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "72641:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "72641:9:0"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "72636:1:0"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2642,
														"isOffset": false,
														"isSlot": false,
														"src": "72605:3:0",
														"valueSize": 1
													},
													{
														"declaration": 2642,
														"isOffset": false,
														"isSlot": false,
														"src": "72615:3:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "72583:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "72636:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "72648:1:0",
														"valueSize": 1
													}
												],
												"id": 2650,
												"nodeType": "InlineAssembly",
												"src": "72540:121:0"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "72680:112:0",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "72695:27:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "72708:1:0",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "72714:1:0"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "72717:3:0",
																				"type": "",
																				"value": "0x3"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "72711:2:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "72711:10:0"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "72704:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "72704:18:0"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "72699:1:0",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "72736:17:0",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "72746:3:0"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "72751:1:0"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "72743:2:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "72743:10:0"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "72736:3:0"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "72767:14:0",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "72776:1:0"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "72779:1:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "72772:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "72772:9:0"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "72767:1:0"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2642,
														"isOffset": false,
														"isSlot": false,
														"src": "72736:3:0",
														"valueSize": 1
													},
													{
														"declaration": 2642,
														"isOffset": false,
														"isSlot": false,
														"src": "72746:3:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "72714:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "72767:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "72779:1:0",
														"valueSize": 1
													}
												],
												"id": 2651,
												"nodeType": "InlineAssembly",
												"src": "72671:121:0"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "72811:76:0",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "72826:19:0",
															"value": {
																"arguments": [
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "72838:1:0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "72841:3:0",
																		"type": "",
																		"value": "0x1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "72835:2:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "72835:10:0"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "72830:1:0",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "72859:17:0",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "72869:3:0"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "72874:1:0"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "72866:2:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "72866:10:0"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "72859:3:0"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2642,
														"isOffset": false,
														"isSlot": false,
														"src": "72859:3:0",
														"valueSize": 1
													},
													{
														"declaration": 2642,
														"isOffset": false,
														"isSlot": false,
														"src": "72869:3:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "72838:1:0",
														"valueSize": 1
													}
												],
												"id": 2652,
												"nodeType": "InlineAssembly",
												"src": "72802:85:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2655,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2653,
														"name": "msb",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2642,
														"src": "72903:3:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"hexValue": "313238",
														"id": 2654,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "72910:3:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_128_by_1",
															"typeString": "int_const 128"
														},
														"value": "128"
													},
													"src": "72903:10:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"expression": {
														"id": 2672,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2665,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2638,
															"src": "72955:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2671,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2666,
																"name": "ratio",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2629,
																"src": "72959:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<<",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2669,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "313237",
																			"id": 2667,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "72969:3:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_127_by_1",
																				"typeString": "int_const 127"
																			},
																			"value": "127"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 2668,
																			"name": "msb",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2642,
																			"src": "72975:3:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "72969:9:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2670,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "72968:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "72959:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "72955:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2673,
													"nodeType": "ExpressionStatement",
													"src": "72955:24:0"
												},
												"id": 2674,
												"nodeType": "IfStatement",
												"src": "72899:80:0",
												"trueBody": {
													"expression": {
														"id": 2663,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 2656,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2638,
															"src": "72915:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2662,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2657,
																"name": "ratio",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2629,
																"src": "72919:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2660,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2658,
																			"name": "msb",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2642,
																			"src": "72929:3:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "313237",
																			"id": 2659,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "72935:3:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_127_by_1",
																				"typeString": "int_const 127"
																			},
																			"value": "127"
																		},
																		"src": "72929:9:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2661,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "72928:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "72919:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "72915:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2664,
													"nodeType": "ExpressionStatement",
													"src": "72915:24:0"
												}
											},
											{
												"assignments": [
													2676
												],
												"declarations": [
													{
														"constant": false,
														"id": 2676,
														"mutability": "mutable",
														"name": "log_2",
														"nodeType": "VariableDeclaration",
														"scope": 2747,
														"src": "72992:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 2675,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "72992:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2686,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 2685,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 2682,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 2679,
																			"name": "msb",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2642,
																			"src": "73015:3:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 2678,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "73008:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 2677,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "73008:6:0",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2680,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "73008:11:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 2681,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "73022:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "73008:17:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 2683,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "73007:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"hexValue": "3634",
														"id": 2684,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "73030:2:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_64_by_1",
															"typeString": "int_const 64"
														},
														"value": "64"
													},
													"src": "73007:25:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "72992:40:0"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "73054:156:0",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "73069:24:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "73078:3:0",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "73087:1:0"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "73090:1:0"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "73083:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "73083:9:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "73074:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "73074:19:0"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "73069:1:0"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "73107:20:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "73120:3:0",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "73125:1:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "73116:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "73116:11:0"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "73111:1:0",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "73141:30:0",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "73153:5:0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "73164:2:0",
																				"type": "",
																				"value": "63"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "73168:1:0"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "73160:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "73160:10:0"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "73150:2:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "73150:21:0"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "73141:5:0"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "73185:14:0",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "73194:1:0"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "73197:1:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "73190:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "73190:9:0"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "73185:1:0"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2676,
														"isOffset": false,
														"isSlot": false,
														"src": "73141:5:0",
														"valueSize": 1
													},
													{
														"declaration": 2676,
														"isOffset": false,
														"isSlot": false,
														"src": "73153:5:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "73069:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "73087:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "73090:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "73125:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "73185:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "73197:1:0",
														"valueSize": 1
													}
												],
												"id": 2687,
												"nodeType": "InlineAssembly",
												"src": "73045:165:0"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "73229:156:0",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "73244:24:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "73253:3:0",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "73262:1:0"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "73265:1:0"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "73258:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "73258:9:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "73249:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "73249:19:0"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "73244:1:0"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "73282:20:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "73295:3:0",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "73300:1:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "73291:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "73291:11:0"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "73286:1:0",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "73316:30:0",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "73328:5:0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "73339:2:0",
																				"type": "",
																				"value": "62"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "73343:1:0"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "73335:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "73335:10:0"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "73325:2:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "73325:21:0"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "73316:5:0"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "73360:14:0",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "73369:1:0"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "73372:1:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "73365:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "73365:9:0"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "73360:1:0"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2676,
														"isOffset": false,
														"isSlot": false,
														"src": "73316:5:0",
														"valueSize": 1
													},
													{
														"declaration": 2676,
														"isOffset": false,
														"isSlot": false,
														"src": "73328:5:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "73244:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "73262:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "73265:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "73300:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "73360:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "73372:1:0",
														"valueSize": 1
													}
												],
												"id": 2688,
												"nodeType": "InlineAssembly",
												"src": "73220:165:0"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "73404:156:0",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "73419:24:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "73428:3:0",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "73437:1:0"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "73440:1:0"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "73433:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "73433:9:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "73424:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "73424:19:0"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "73419:1:0"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "73457:20:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "73470:3:0",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "73475:1:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "73466:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "73466:11:0"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "73461:1:0",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "73491:30:0",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "73503:5:0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "73514:2:0",
																				"type": "",
																				"value": "61"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "73518:1:0"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "73510:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "73510:10:0"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "73500:2:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "73500:21:0"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "73491:5:0"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "73535:14:0",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "73544:1:0"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "73547:1:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "73540:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "73540:9:0"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "73535:1:0"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2676,
														"isOffset": false,
														"isSlot": false,
														"src": "73491:5:0",
														"valueSize": 1
													},
													{
														"declaration": 2676,
														"isOffset": false,
														"isSlot": false,
														"src": "73503:5:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "73419:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "73437:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "73440:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "73475:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "73535:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "73547:1:0",
														"valueSize": 1
													}
												],
												"id": 2689,
												"nodeType": "InlineAssembly",
												"src": "73395:165:0"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "73579:156:0",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "73594:24:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "73603:3:0",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "73612:1:0"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "73615:1:0"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "73608:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "73608:9:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "73599:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "73599:19:0"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "73594:1:0"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "73632:20:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "73645:3:0",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "73650:1:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "73641:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "73641:11:0"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "73636:1:0",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "73666:30:0",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "73678:5:0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "73689:2:0",
																				"type": "",
																				"value": "60"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "73693:1:0"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "73685:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "73685:10:0"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "73675:2:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "73675:21:0"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "73666:5:0"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "73710:14:0",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "73719:1:0"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "73722:1:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "73715:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "73715:9:0"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "73710:1:0"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2676,
														"isOffset": false,
														"isSlot": false,
														"src": "73666:5:0",
														"valueSize": 1
													},
													{
														"declaration": 2676,
														"isOffset": false,
														"isSlot": false,
														"src": "73678:5:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "73594:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "73612:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "73615:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "73650:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "73710:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "73722:1:0",
														"valueSize": 1
													}
												],
												"id": 2690,
												"nodeType": "InlineAssembly",
												"src": "73570:165:0"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "73754:156:0",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "73769:24:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "73778:3:0",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "73787:1:0"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "73790:1:0"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "73783:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "73783:9:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "73774:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "73774:19:0"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "73769:1:0"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "73807:20:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "73820:3:0",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "73825:1:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "73816:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "73816:11:0"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "73811:1:0",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "73841:30:0",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "73853:5:0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "73864:2:0",
																				"type": "",
																				"value": "59"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "73868:1:0"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "73860:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "73860:10:0"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "73850:2:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "73850:21:0"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "73841:5:0"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "73885:14:0",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "73894:1:0"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "73897:1:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "73890:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "73890:9:0"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "73885:1:0"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2676,
														"isOffset": false,
														"isSlot": false,
														"src": "73841:5:0",
														"valueSize": 1
													},
													{
														"declaration": 2676,
														"isOffset": false,
														"isSlot": false,
														"src": "73853:5:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "73769:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "73787:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "73790:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "73825:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "73885:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "73897:1:0",
														"valueSize": 1
													}
												],
												"id": 2691,
												"nodeType": "InlineAssembly",
												"src": "73745:165:0"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "73929:156:0",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "73944:24:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "73953:3:0",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "73962:1:0"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "73965:1:0"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "73958:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "73958:9:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "73949:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "73949:19:0"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "73944:1:0"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "73982:20:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "73995:3:0",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "74000:1:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "73991:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "73991:11:0"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "73986:1:0",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "74016:30:0",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "74028:5:0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "74039:2:0",
																				"type": "",
																				"value": "58"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "74043:1:0"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "74035:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "74035:10:0"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "74025:2:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "74025:21:0"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "74016:5:0"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "74060:14:0",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "74069:1:0"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "74072:1:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "74065:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "74065:9:0"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "74060:1:0"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2676,
														"isOffset": false,
														"isSlot": false,
														"src": "74016:5:0",
														"valueSize": 1
													},
													{
														"declaration": 2676,
														"isOffset": false,
														"isSlot": false,
														"src": "74028:5:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "73944:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "73962:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "73965:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "74000:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "74060:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "74072:1:0",
														"valueSize": 1
													}
												],
												"id": 2692,
												"nodeType": "InlineAssembly",
												"src": "73920:165:0"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "74104:156:0",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "74119:24:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "74128:3:0",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "74137:1:0"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "74140:1:0"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "74133:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "74133:9:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "74124:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "74124:19:0"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "74119:1:0"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "74157:20:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "74170:3:0",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "74175:1:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "74166:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "74166:11:0"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "74161:1:0",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "74191:30:0",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "74203:5:0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "74214:2:0",
																				"type": "",
																				"value": "57"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "74218:1:0"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "74210:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "74210:10:0"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "74200:2:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "74200:21:0"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "74191:5:0"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "74235:14:0",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "74244:1:0"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "74247:1:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "74240:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "74240:9:0"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "74235:1:0"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2676,
														"isOffset": false,
														"isSlot": false,
														"src": "74191:5:0",
														"valueSize": 1
													},
													{
														"declaration": 2676,
														"isOffset": false,
														"isSlot": false,
														"src": "74203:5:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "74119:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "74137:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "74140:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "74175:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "74235:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "74247:1:0",
														"valueSize": 1
													}
												],
												"id": 2693,
												"nodeType": "InlineAssembly",
												"src": "74095:165:0"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "74279:156:0",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "74294:24:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "74303:3:0",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "74312:1:0"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "74315:1:0"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "74308:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "74308:9:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "74299:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "74299:19:0"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "74294:1:0"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "74332:20:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "74345:3:0",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "74350:1:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "74341:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "74341:11:0"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "74336:1:0",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "74366:30:0",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "74378:5:0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "74389:2:0",
																				"type": "",
																				"value": "56"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "74393:1:0"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "74385:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "74385:10:0"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "74375:2:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "74375:21:0"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "74366:5:0"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "74410:14:0",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "74419:1:0"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "74422:1:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "74415:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "74415:9:0"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "74410:1:0"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2676,
														"isOffset": false,
														"isSlot": false,
														"src": "74366:5:0",
														"valueSize": 1
													},
													{
														"declaration": 2676,
														"isOffset": false,
														"isSlot": false,
														"src": "74378:5:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "74294:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "74312:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "74315:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "74350:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "74410:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "74422:1:0",
														"valueSize": 1
													}
												],
												"id": 2694,
												"nodeType": "InlineAssembly",
												"src": "74270:165:0"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "74454:156:0",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "74469:24:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "74478:3:0",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "74487:1:0"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "74490:1:0"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "74483:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "74483:9:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "74474:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "74474:19:0"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "74469:1:0"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "74507:20:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "74520:3:0",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "74525:1:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "74516:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "74516:11:0"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "74511:1:0",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "74541:30:0",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "74553:5:0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "74564:2:0",
																				"type": "",
																				"value": "55"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "74568:1:0"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "74560:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "74560:10:0"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "74550:2:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "74550:21:0"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "74541:5:0"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "74585:14:0",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "74594:1:0"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "74597:1:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "74590:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "74590:9:0"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "74585:1:0"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2676,
														"isOffset": false,
														"isSlot": false,
														"src": "74541:5:0",
														"valueSize": 1
													},
													{
														"declaration": 2676,
														"isOffset": false,
														"isSlot": false,
														"src": "74553:5:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "74469:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "74487:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "74490:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "74525:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "74585:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "74597:1:0",
														"valueSize": 1
													}
												],
												"id": 2695,
												"nodeType": "InlineAssembly",
												"src": "74445:165:0"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "74629:156:0",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "74644:24:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "74653:3:0",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "74662:1:0"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "74665:1:0"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "74658:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "74658:9:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "74649:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "74649:19:0"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "74644:1:0"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "74682:20:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "74695:3:0",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "74700:1:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "74691:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "74691:11:0"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "74686:1:0",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "74716:30:0",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "74728:5:0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "74739:2:0",
																				"type": "",
																				"value": "54"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "74743:1:0"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "74735:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "74735:10:0"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "74725:2:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "74725:21:0"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "74716:5:0"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "74760:14:0",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "74769:1:0"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "74772:1:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "74765:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "74765:9:0"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "74760:1:0"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2676,
														"isOffset": false,
														"isSlot": false,
														"src": "74716:5:0",
														"valueSize": 1
													},
													{
														"declaration": 2676,
														"isOffset": false,
														"isSlot": false,
														"src": "74728:5:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "74644:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "74662:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "74665:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "74700:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "74760:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "74772:1:0",
														"valueSize": 1
													}
												],
												"id": 2696,
												"nodeType": "InlineAssembly",
												"src": "74620:165:0"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "74804:156:0",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "74819:24:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "74828:3:0",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "74837:1:0"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "74840:1:0"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "74833:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "74833:9:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "74824:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "74824:19:0"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "74819:1:0"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "74857:20:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "74870:3:0",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "74875:1:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "74866:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "74866:11:0"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "74861:1:0",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "74891:30:0",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "74903:5:0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "74914:2:0",
																				"type": "",
																				"value": "53"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "74918:1:0"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "74910:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "74910:10:0"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "74900:2:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "74900:21:0"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "74891:5:0"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "74935:14:0",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "74944:1:0"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "74947:1:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "74940:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "74940:9:0"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "74935:1:0"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2676,
														"isOffset": false,
														"isSlot": false,
														"src": "74891:5:0",
														"valueSize": 1
													},
													{
														"declaration": 2676,
														"isOffset": false,
														"isSlot": false,
														"src": "74903:5:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "74819:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "74837:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "74840:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "74875:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "74935:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "74947:1:0",
														"valueSize": 1
													}
												],
												"id": 2697,
												"nodeType": "InlineAssembly",
												"src": "74795:165:0"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "74979:156:0",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "74994:24:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "75003:3:0",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "75012:1:0"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "75015:1:0"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "75008:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "75008:9:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "74999:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "74999:19:0"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "74994:1:0"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "75032:20:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "75045:3:0",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "75050:1:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "75041:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "75041:11:0"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "75036:1:0",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "75066:30:0",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "75078:5:0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "75089:2:0",
																				"type": "",
																				"value": "52"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "75093:1:0"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "75085:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "75085:10:0"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "75075:2:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "75075:21:0"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "75066:5:0"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "75110:14:0",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "75119:1:0"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "75122:1:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "75115:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "75115:9:0"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "75110:1:0"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2676,
														"isOffset": false,
														"isSlot": false,
														"src": "75066:5:0",
														"valueSize": 1
													},
													{
														"declaration": 2676,
														"isOffset": false,
														"isSlot": false,
														"src": "75078:5:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "74994:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "75012:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "75015:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "75050:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "75110:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "75122:1:0",
														"valueSize": 1
													}
												],
												"id": 2698,
												"nodeType": "InlineAssembly",
												"src": "74970:165:0"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "75154:156:0",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "75169:24:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "75178:3:0",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "75187:1:0"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "75190:1:0"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "75183:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "75183:9:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "75174:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "75174:19:0"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "75169:1:0"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "75207:20:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "75220:3:0",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "75225:1:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "75216:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "75216:11:0"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "75211:1:0",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "75241:30:0",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "75253:5:0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "75264:2:0",
																				"type": "",
																				"value": "51"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "75268:1:0"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "75260:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "75260:10:0"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "75250:2:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "75250:21:0"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "75241:5:0"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "75285:14:0",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "75294:1:0"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "75297:1:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "75290:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "75290:9:0"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "75285:1:0"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2676,
														"isOffset": false,
														"isSlot": false,
														"src": "75241:5:0",
														"valueSize": 1
													},
													{
														"declaration": 2676,
														"isOffset": false,
														"isSlot": false,
														"src": "75253:5:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "75169:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "75187:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "75190:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "75225:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "75285:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "75297:1:0",
														"valueSize": 1
													}
												],
												"id": 2699,
												"nodeType": "InlineAssembly",
												"src": "75145:165:0"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "75329:128:0",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "75344:24:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "75353:3:0",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "75362:1:0"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "75365:1:0"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "75358:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "75358:9:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "75349:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "75349:19:0"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "75344:1:0"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "75382:20:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "75395:3:0",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "75400:1:0"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "75391:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "75391:11:0"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "75386:1:0",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "75416:30:0",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "75428:5:0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "75439:2:0",
																				"type": "",
																				"value": "50"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "75443:1:0"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "75435:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "75435:10:0"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "75425:2:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "75425:21:0"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "75416:5:0"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 2676,
														"isOffset": false,
														"isSlot": false,
														"src": "75416:5:0",
														"valueSize": 1
													},
													{
														"declaration": 2676,
														"isOffset": false,
														"isSlot": false,
														"src": "75428:5:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "75344:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "75362:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "75365:1:0",
														"valueSize": 1
													},
													{
														"declaration": 2638,
														"isOffset": false,
														"isSlot": false,
														"src": "75400:1:0",
														"valueSize": 1
													}
												],
												"id": 2700,
												"nodeType": "InlineAssembly",
												"src": "75320:137:0"
											},
											{
												"assignments": [
													2702
												],
												"declarations": [
													{
														"constant": false,
														"id": 2702,
														"mutability": "mutable",
														"name": "log_sqrt10001",
														"nodeType": "VariableDeclaration",
														"scope": 2747,
														"src": "75469:20:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 2701,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "75469:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2706,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 2705,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2703,
														"name": "log_2",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2676,
														"src": "75492:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"hexValue": "323535373338393538393939363033383236333437313431",
														"id": 2704,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "75500:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_255738958999603826347141_by_1",
															"typeString": "int_const 255738958999603826347141"
														},
														"value": "255738958999603826347141"
													},
													"src": "75492:32:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "75469:55:0"
											},
											{
												"assignments": [
													2708
												],
												"declarations": [
													{
														"constant": false,
														"id": 2708,
														"mutability": "mutable",
														"name": "tickLow",
														"nodeType": "VariableDeclaration",
														"scope": 2747,
														"src": "75555:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"typeName": {
															"id": 2707,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "75555:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2718,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															"id": 2716,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 2713,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2711,
																			"name": "log_sqrt10001",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2702,
																			"src": "75578:13:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "33343032393932393536383039313332343138353936313430313030363630323437323130",
																			"id": 2712,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "75594:37:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3402992956809132418596140100660247210_by_1",
																				"typeString": "int_const 3402...(29 digits omitted)...7210"
																			},
																			"value": "3402992956809132418596140100660247210"
																		},
																		"src": "75578:53:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	}
																],
																"id": 2714,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "75577:55:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2715,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "75636:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "75577:62:0",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														],
														"id": 2710,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "75571:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_int24_$",
															"typeString": "type(int24)"
														},
														"typeName": {
															"id": 2709,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "75571:5:0",
															"typeDescriptions": {}
														}
													},
													"id": 2717,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "75571:69:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "75555:85:0"
											},
											{
												"assignments": [
													2720
												],
												"declarations": [
													{
														"constant": false,
														"id": 2720,
														"mutability": "mutable",
														"name": "tickHi",
														"nodeType": "VariableDeclaration",
														"scope": 2747,
														"src": "75651:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"typeName": {
															"id": 2719,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "75651:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2730,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															"id": 2728,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 2725,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2723,
																			"name": "log_sqrt10001",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2702,
																			"src": "75673:13:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"hexValue": "323931333339343634373731393839363232393037303237363231313533333938303838343935",
																			"id": 2724,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "75689:39:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_291339464771989622907027621153398088495_by_1",
																				"typeString": "int_const 2913...(31 digits omitted)...8495"
																			},
																			"value": "291339464771989622907027621153398088495"
																		},
																		"src": "75673:55:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	}
																],
																"id": 2726,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "75672:57:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 2727,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "75733:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "75672:64:0",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														],
														"id": 2722,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "75666:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_int24_$",
															"typeString": "type(int24)"
														},
														"typeName": {
															"id": 2721,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "75666:5:0",
															"typeDescriptions": {}
														}
													},
													"id": 2729,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "75666:71:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "75651:86:0"
											},
											{
												"expression": {
													"id": 2745,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2731,
														"name": "tick",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2615,
														"src": "75750:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															},
															"id": 2734,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2732,
																"name": "tickLow",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2708,
																"src": "75757:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 2733,
																"name": "tickHi",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2720,
																"src": "75768:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"src": "75757:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseExpression": {
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 2740,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 2737,
																			"name": "tickHi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2720,
																			"src": "75806:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		],
																		"id": 2736,
																		"name": "getSqrtRatioAtTick",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2609,
																		"src": "75787:18:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_int24_$returns$_t_uint160_$",
																			"typeString": "function (int24) pure returns (uint160)"
																		}
																	},
																	"id": 2738,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "75787:26:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"id": 2739,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2612,
																	"src": "75817:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "75787:42:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseExpression": {
																"id": 2742,
																"name": "tickLow",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2708,
																"src": "75841:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"id": 2743,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "Conditional",
															"src": "75787:61:0",
															"trueExpression": {
																"id": 2741,
																"name": "tickHi",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2720,
																"src": "75832:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"id": 2744,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "Conditional",
														"src": "75757:91:0",
														"trueExpression": {
															"id": 2735,
															"name": "tickLow",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2708,
															"src": "75777:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"src": "75750:98:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"id": 2746,
												"nodeType": "ExpressionStatement",
												"src": "75750:98:0"
											}
										]
									},
									"documentation": {
										"id": 2610,
										"nodeType": "StructuredDocumentation",
										"src": "71014:412:0",
										"text": "@notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n ever return.\n @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n @return tick The greatest tick for which the ratio is less than or equal to the input ratio"
									},
									"id": 2748,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getTickAtSqrtRatio",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2613,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2612,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 2748,
												"src": "71460:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 2611,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "71460:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "71459:22:0"
									},
									"returnParameters": {
										"id": 2616,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2615,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 2748,
												"src": "71505:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 2614,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "71505:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "71504:12:0"
									},
									"scope": 2749,
									"src": "71432:4424:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3471,
							"src": "67330:8529:0"
						},
						{
							"id": 2750,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "75927:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2751,
								"nodeType": "StructuredDocumentation",
								"src": "75955:96:0",
								"text": "@title Safe casting methods\n @notice Contains methods for safely casting between types"
							},
							"fullyImplemented": true,
							"id": 2818,
							"linearizedBaseContracts": [
								2818
							],
							"name": "SafeCast",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2771,
										"nodeType": "Block",
										"src": "76311:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2768,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"id": 2765,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2760,
																			"name": "z",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2757,
																			"src": "76331:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"arguments": [
																				{
																					"id": 2763,
																					"name": "y",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2754,
																					"src": "76343:1:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 2762,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "76335:7:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint160_$",
																					"typeString": "type(uint160)"
																				},
																				"typeName": {
																					"id": 2761,
																					"name": "uint160",
																					"nodeType": "ElementaryTypeName",
																					"src": "76335:7:0",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 2764,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "76335:10:0",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		"src": "76331:14:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	}
																],
																"id": 2766,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "76330:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 2767,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2754,
																"src": "76350:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "76330:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 2759,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "76322:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 2769,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "76322:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2770,
												"nodeType": "ExpressionStatement",
												"src": "76322:30:0"
											}
										]
									},
									"documentation": {
										"id": 2752,
										"nodeType": "StructuredDocumentation",
										"src": "76075:166:0",
										"text": "@notice Cast a uint256 to a uint160, revert on overflow\n @param y The uint256 to be downcasted\n @return z The downcasted integer, now type uint160"
									},
									"id": 2772,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toUint160",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2755,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2754,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 2772,
												"src": "76266:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2753,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "76266:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "76265:11:0"
									},
									"returnParameters": {
										"id": 2758,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2757,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 2772,
												"src": "76300:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 2756,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "76300:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "76299:11:0"
									},
									"scope": 2818,
									"src": "76247:113:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2792,
										"nodeType": "Block",
										"src": "76610:48:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															"id": 2789,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"id": 2786,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2781,
																			"name": "z",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2778,
																			"src": "76630:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int128",
																				"typeString": "int128"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"arguments": [
																				{
																					"id": 2784,
																					"name": "y",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2775,
																					"src": "76641:1:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				],
																				"id": 2783,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "76634:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_int128_$",
																					"typeString": "type(int128)"
																				},
																				"typeName": {
																					"id": 2782,
																					"name": "int128",
																					"nodeType": "ElementaryTypeName",
																					"src": "76634:6:0",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 2785,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "76634:9:0",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_int128",
																				"typeString": "int128"
																			}
																		},
																		"src": "76630:13:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int128",
																			"typeString": "int128"
																		}
																	}
																],
																"id": 2787,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "76629:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_int128",
																	"typeString": "int128"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 2788,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2775,
																"src": "76648:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"src": "76629:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 2780,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "76621:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 2790,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "76621:29:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2791,
												"nodeType": "ExpressionStatement",
												"src": "76621:29:0"
											}
										]
									},
									"documentation": {
										"id": 2773,
										"nodeType": "StructuredDocumentation",
										"src": "76368:175:0",
										"text": "@notice Cast a int256 to a int128, revert on overflow or underflow\n @param y The int256 to be downcasted\n @return z The downcasted integer, now type int128"
									},
									"id": 2793,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toInt128",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2776,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2775,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 2793,
												"src": "76567:8:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2774,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "76567:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "76566:10:0"
									},
									"returnParameters": {
										"id": 2779,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2778,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 2793,
												"src": "76600:8:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												},
												"typeName": {
													"id": 2777,
													"name": "int128",
													"nodeType": "ElementaryTypeName",
													"src": "76600:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "76599:10:0"
									},
									"scope": 2818,
									"src": "76549:109:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2816,
										"nodeType": "Block",
										"src": "76890:62:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2806,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2802,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2796,
																"src": "76909:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819968_by_1",
																	"typeString": "int_const 5789...(69 digits omitted)...9968"
																},
																"id": 2805,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2803,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "76913:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "323535",
																	"id": 2804,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "76916:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_255_by_1",
																		"typeString": "int_const 255"
																	},
																	"value": "255"
																},
																"src": "76913:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819968_by_1",
																	"typeString": "int_const 5789...(69 digits omitted)...9968"
																}
															},
															"src": "76909:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 2801,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "76901:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 2807,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "76901:19:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2808,
												"nodeType": "ExpressionStatement",
												"src": "76901:19:0"
											},
											{
												"expression": {
													"id": 2814,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2809,
														"name": "z",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2799,
														"src": "76931:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2812,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2796,
																"src": "76942:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 2811,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "76935:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_int256_$",
																"typeString": "type(int256)"
															},
															"typeName": {
																"id": 2810,
																"name": "int256",
																"nodeType": "ElementaryTypeName",
																"src": "76935:6:0",
																"typeDescriptions": {}
															}
														},
														"id": 2813,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "76935:9:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "76931:13:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"id": 2815,
												"nodeType": "ExpressionStatement",
												"src": "76931:13:0"
											}
										]
									},
									"documentation": {
										"id": 2794,
										"nodeType": "StructuredDocumentation",
										"src": "76666:156:0",
										"text": "@notice Cast a uint256 to a int256, revert on overflow\n @param y The uint256 to be casted\n @return z The casted integer, now type int256"
									},
									"id": 2817,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toInt256",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2797,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2796,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 2817,
												"src": "76846:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2795,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "76846:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "76845:11:0"
									},
									"returnParameters": {
										"id": 2800,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2799,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 2817,
												"src": "76880:8:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2798,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "76880:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "76879:10:0"
									},
									"scope": 2818,
									"src": "76828:124:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3471,
							"src": "76051:904:0"
						},
						{
							"id": 2819,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "76998:23:0"
						},
						{
							"id": 2820,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "77023:19:0"
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 2822,
										"name": "ISwapRouter",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1727,
										"src": "77181:11:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ISwapRouter_$1727",
											"typeString": "contract ISwapRouter"
										}
									},
									"id": 2823,
									"nodeType": "InheritanceSpecifier",
									"src": "77181:11:0"
								},
								{
									"baseName": {
										"id": 2824,
										"name": "PeripheryImmutableState",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1243,
										"src": "77199:23:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_PeripheryImmutableState_$1243",
											"typeString": "contract PeripheryImmutableState"
										}
									},
									"id": 2825,
									"nodeType": "InheritanceSpecifier",
									"src": "77199:23:0"
								},
								{
									"baseName": {
										"id": 2826,
										"name": "PeripheryValidation",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1199,
										"src": "77229:19:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_PeripheryValidation_$1199",
											"typeString": "contract PeripheryValidation"
										}
									},
									"id": 2827,
									"nodeType": "InheritanceSpecifier",
									"src": "77229:19:0"
								},
								{
									"baseName": {
										"id": 2828,
										"name": "PeripheryPaymentsWithFee",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1621,
										"src": "77255:24:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_PeripheryPaymentsWithFee_$1621",
											"typeString": "contract PeripheryPaymentsWithFee"
										}
									},
									"id": 2829,
									"nodeType": "InheritanceSpecifier",
									"src": "77255:24:0"
								},
								{
									"baseName": {
										"id": 2830,
										"name": "Multicall",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 560,
										"src": "77286:9:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Multicall_$560",
											"typeString": "contract Multicall"
										}
									},
									"id": 2831,
									"nodeType": "InheritanceSpecifier",
									"src": "77286:9:0"
								},
								{
									"baseName": {
										"id": 2832,
										"name": "SelfPermit",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 984,
										"src": "77302:10:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SelfPermit_$984",
											"typeString": "contract SelfPermit"
										}
									},
									"id": 2833,
									"nodeType": "InheritanceSpecifier",
									"src": "77302:10:0"
								}
							],
							"contractDependencies": [
								430,
								478,
								560,
								585,
								616,
								984,
								1181,
								1199,
								1214,
								1243,
								1447,
								1621,
								1634,
								1727
							],
							"contractKind": "contract",
							"documentation": {
								"id": 2821,
								"nodeType": "StructuredDocumentation",
								"src": "77046:107:0",
								"text": "@title Uniswap V3 Swap Router\n @notice Router for stateless execution of swaps against Uniswap V3"
							},
							"fullyImplemented": true,
							"id": 3470,
							"linearizedBaseContracts": [
								3470,
								984,
								430,
								560,
								478,
								1621,
								616,
								1447,
								1199,
								1243,
								1214,
								585,
								1181,
								1727,
								1634
							],
							"name": "SwapRouter",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 2836,
									"libraryName": {
										"id": 2834,
										"name": "Path",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 340,
										"src": "77327:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Path_$340",
											"typeString": "library Path"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "77321:21:0",
									"typeName": {
										"id": 2835,
										"name": "bytes",
										"nodeType": "ElementaryTypeName",
										"src": "77336:5:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes_storage_ptr",
											"typeString": "bytes"
										}
									}
								},
								{
									"id": 2839,
									"libraryName": {
										"id": 2837,
										"name": "SafeCast",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2818,
										"src": "77354:8:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeCast_$2818",
											"typeString": "library SafeCast"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "77348:27:0",
									"typeName": {
										"id": 2838,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "77367:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": true,
									"documentation": {
										"id": 2840,
										"nodeType": "StructuredDocumentation",
										"src": "77383:156:0",
										"text": "@dev Used as the placeholder value for amountInCached, because the computed amount in for an exact output swap\n can never actually be this value"
									},
									"id": 2847,
									"mutability": "constant",
									"name": "DEFAULT_AMOUNT_IN_CACHED",
									"nodeType": "VariableDeclaration",
									"scope": 3470,
									"src": "77545:69:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2841,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "77545:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"expression": {
											"arguments": [
												{
													"id": 2844,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"nodeType": "ElementaryTypeNameExpression",
													"src": "77602:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_type$_t_uint256_$",
														"typeString": "type(uint256)"
													},
													"typeName": {
														"id": 2843,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "77602:7:0",
														"typeDescriptions": {}
													}
												}
											],
											"expression": {
												"argumentTypes": [
													{
														"typeIdentifier": "t_type$_t_uint256_$",
														"typeString": "type(uint256)"
													}
												],
												"id": 2842,
												"name": "type",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 4294967269,
												"src": "77597:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
													"typeString": "function () pure"
												}
											},
											"id": 2845,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "functionCall",
											"lValueRequested": false,
											"names": [],
											"nodeType": "FunctionCall",
											"src": "77597:13:0",
											"tryCall": false,
											"typeDescriptions": {
												"typeIdentifier": "t_magic_meta_type_t_uint256",
												"typeString": "type(uint256)"
											}
										},
										"id": 2846,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"memberName": "max",
										"nodeType": "MemberAccess",
										"src": "77597:17:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"documentation": {
										"id": 2848,
										"nodeType": "StructuredDocumentation",
										"src": "77623:103:0",
										"text": "@dev Transient storage variable used for returning the computed amount in for an exact output swap."
									},
									"id": 2851,
									"mutability": "mutable",
									"name": "amountInCached",
									"nodeType": "VariableDeclaration",
									"scope": 3470,
									"src": "77732:57:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2849,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "77732:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"id": 2850,
										"name": "DEFAULT_AMOUNT_IN_CACHED",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2847,
										"src": "77765:24:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 2862,
										"nodeType": "Block",
										"src": "77886:2:0",
										"statements": []
									},
									"id": 2863,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 2858,
													"name": "_factory",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2853,
													"src": "77868:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												{
													"id": 2859,
													"name": "_WETH9",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2855,
													"src": "77878:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 2860,
											"modifierName": {
												"id": 2857,
												"name": "PeripheryImmutableState",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 1243,
												"src": "77844:23:0",
												"typeDescriptions": {
													"typeIdentifier": "t_type$_t_contract$_PeripheryImmutableState_$1243_$",
													"typeString": "type(contract PeripheryImmutableState)"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "77844:41:0"
										}
									],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2856,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2853,
												"mutability": "mutable",
												"name": "_factory",
												"nodeType": "VariableDeclaration",
												"scope": 2863,
												"src": "77810:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2852,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "77810:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2855,
												"mutability": "mutable",
												"name": "_WETH9",
												"nodeType": "VariableDeclaration",
												"scope": 2863,
												"src": "77828:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2854,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "77828:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "77809:34:0"
									},
									"returnParameters": {
										"id": 2861,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "77886:0:0"
									},
									"scope": 3470,
									"src": "77798:90:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2888,
										"nodeType": "Block",
										"src": "78134:122:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 2878,
																	"name": "factory",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1222,
																	"src": "78194:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 2881,
																			"name": "tokenA",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2866,
																			"src": "78226:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 2882,
																			"name": "tokenB",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2868,
																			"src": "78234:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 2883,
																			"name": "fee",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2870,
																			"src": "78242:3:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint24",
																				"typeString": "uint24"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint24",
																				"typeString": "uint24"
																			}
																		],
																		"expression": {
																			"id": 2879,
																			"name": "PoolAddress",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 91,
																			"src": "78203:11:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_PoolAddress_$91_$",
																				"typeString": "type(library PoolAddress)"
																			}
																		},
																		"id": 2880,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "getPoolKey",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 43,
																		"src": "78203:22:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_address_$_t_address_$_t_uint24_$returns$_t_struct$_PoolKey_$12_memory_ptr_$",
																			"typeString": "function (address,address,uint24) pure returns (struct PoolAddress.PoolKey memory)"
																		}
																	},
																	"id": 2884,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "78203:43:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_PoolKey_$12_memory_ptr",
																		"typeString": "struct PoolAddress.PoolKey memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_struct$_PoolKey_$12_memory_ptr",
																		"typeString": "struct PoolAddress.PoolKey memory"
																	}
																],
																"expression": {
																	"id": 2876,
																	"name": "PoolAddress",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 91,
																	"src": "78167:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_PoolAddress_$91_$",
																		"typeString": "type(library PoolAddress)"
																	}
																},
																"id": 2877,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "computeAddress",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 90,
																"src": "78167:26:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_address_$_t_struct$_PoolKey_$12_memory_ptr_$returns$_t_address_$",
																	"typeString": "function (address,struct PoolAddress.PoolKey memory) pure returns (address)"
																}
															},
															"id": 2885,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "78167:80:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 2875,
														"name": "IUniswapV3Pool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2156,
														"src": "78152:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_contract$_IUniswapV3Pool_$2156_$",
															"typeString": "type(contract IUniswapV3Pool)"
														}
													},
													"id": 2886,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "78152:96:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IUniswapV3Pool_$2156",
														"typeString": "contract IUniswapV3Pool"
													}
												},
												"functionReturnParameters": 2874,
												"id": 2887,
												"nodeType": "Return",
												"src": "78145:103:0"
											}
										]
									},
									"documentation": {
										"id": 2864,
										"nodeType": "StructuredDocumentation",
										"src": "77896:99:0",
										"text": "@dev Returns the pool for the given token pair and fee. The pool contract may or may not exist."
									},
									"id": 2889,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getPool",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2871,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2866,
												"mutability": "mutable",
												"name": "tokenA",
												"nodeType": "VariableDeclaration",
												"scope": 2889,
												"src": "78028:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2865,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "78028:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2868,
												"mutability": "mutable",
												"name": "tokenB",
												"nodeType": "VariableDeclaration",
												"scope": 2889,
												"src": "78053:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2867,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "78053:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2870,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 2889,
												"src": "78078:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 2869,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "78078:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "78017:78:0"
									},
									"returnParameters": {
										"id": 2874,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2873,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2889,
												"src": "78118:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IUniswapV3Pool_$2156",
													"typeString": "contract IUniswapV3Pool"
												},
												"typeName": {
													"id": 2872,
													"name": "IUniswapV3Pool",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2156,
													"src": "78118:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IUniswapV3Pool_$2156",
														"typeString": "contract IUniswapV3Pool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "78117:16:0"
									},
									"scope": 3470,
									"src": "78001:255:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"canonicalName": "SwapRouter.SwapCallbackData",
									"id": 2894,
									"members": [
										{
											"constant": false,
											"id": 2891,
											"mutability": "mutable",
											"name": "path",
											"nodeType": "VariableDeclaration",
											"scope": 2894,
											"src": "78299:10:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 2890,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "78299:5:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2893,
											"mutability": "mutable",
											"name": "payer",
											"nodeType": "VariableDeclaration",
											"scope": 2894,
											"src": "78320:13:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2892,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "78320:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "SwapCallbackData",
									"nodeType": "StructDefinition",
									"scope": 3470,
									"src": "78264:77:0",
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1633
									],
									"body": {
										"id": 3023,
										"nodeType": "Block",
										"src": "78540:1174:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2912,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 2908,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2906,
																	"name": "amount0Delta",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2897,
																	"src": "78559:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 2907,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "78574:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "78559:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 2911,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2909,
																	"name": "amount1Delta",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2899,
																	"src": "78579:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 2910,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "78594:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "78579:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "78559:36:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 2905,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "78551:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 2913,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "78551:45:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2914,
												"nodeType": "ExpressionStatement",
												"src": "78551:45:0"
											},
											{
												"assignments": [
													2916
												],
												"declarations": [
													{
														"constant": false,
														"id": 2916,
														"mutability": "mutable",
														"name": "data",
														"nodeType": "VariableDeclaration",
														"scope": 3023,
														"src": "78670:28:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_SwapCallbackData_$2894_memory_ptr",
															"typeString": "struct SwapRouter.SwapCallbackData"
														},
														"typeName": {
															"id": 2915,
															"name": "SwapCallbackData",
															"nodeType": "UserDefinedTypeName",
															"referencedDeclaration": 2894,
															"src": "78670:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SwapCallbackData_$2894_storage_ptr",
																"typeString": "struct SwapRouter.SwapCallbackData"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2923,
												"initialValue": {
													"arguments": [
														{
															"id": 2919,
															"name": "_data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2901,
															"src": "78712:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															}
														},
														{
															"components": [
																{
																	"id": 2920,
																	"name": "SwapCallbackData",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2894,
																	"src": "78720:16:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_struct$_SwapCallbackData_$2894_storage_ptr_$",
																		"typeString": "type(struct SwapRouter.SwapCallbackData storage pointer)"
																	}
																}
															],
															"id": 2921,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "78719:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_struct$_SwapCallbackData_$2894_storage_ptr_$",
																"typeString": "type(struct SwapRouter.SwapCallbackData storage pointer)"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															},
															{
																"typeIdentifier": "t_type$_t_struct$_SwapCallbackData_$2894_storage_ptr_$",
																"typeString": "type(struct SwapRouter.SwapCallbackData storage pointer)"
															}
														],
														"expression": {
															"id": 2917,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "78701:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 2918,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "decode",
														"nodeType": "MemberAccess",
														"src": "78701:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
															"typeString": "function () pure"
														}
													},
													"id": 2922,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "78701:37:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_SwapCallbackData_$2894_memory_ptr",
														"typeString": "struct SwapRouter.SwapCallbackData memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "78670:68:0"
											},
											{
												"assignments": [
													2925,
													2927,
													2929
												],
												"declarations": [
													{
														"constant": false,
														"id": 2925,
														"mutability": "mutable",
														"name": "tokenIn",
														"nodeType": "VariableDeclaration",
														"scope": 3023,
														"src": "78750:15:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 2924,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "78750:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2927,
														"mutability": "mutable",
														"name": "tokenOut",
														"nodeType": "VariableDeclaration",
														"scope": 3023,
														"src": "78767:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 2926,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "78767:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2929,
														"mutability": "mutable",
														"name": "fee",
														"nodeType": "VariableDeclaration",
														"scope": 3023,
														"src": "78785:10:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint24",
															"typeString": "uint24"
														},
														"typeName": {
															"id": 2928,
															"name": "uint24",
															"nodeType": "ElementaryTypeName",
															"src": "78785:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2934,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"expression": {
																"id": 2930,
																"name": "data",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2916,
																"src": "78799:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_SwapCallbackData_$2894_memory_ptr",
																	"typeString": "struct SwapRouter.SwapCallbackData memory"
																}
															},
															"id": 2931,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "path",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2891,
															"src": "78799:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 2932,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "decodeFirstPool",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 306,
														"src": "78799:25:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_address_$_t_address_$_t_uint24_$bound_to$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) pure returns (address,address,uint24)"
														}
													},
													"id": 2933,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "78799:27:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint24_$",
														"typeString": "tuple(address,address,uint24)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "78749:77:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2938,
															"name": "factory",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1222,
															"src": "78871:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2939,
															"name": "tokenIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2925,
															"src": "78880:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2940,
															"name": "tokenOut",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2927,
															"src": "78889:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2941,
															"name": "fee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2929,
															"src": "78899:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														],
														"expression": {
															"id": 2935,
															"name": "CallbackValidation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2215,
															"src": "78837:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_CallbackValidation_$2215_$",
																"typeString": "type(library CallbackValidation)"
															}
														},
														"id": 2937,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "verifyCallback",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2183,
														"src": "78837:33:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$_t_address_$_t_uint24_$returns$_t_contract$_IUniswapV3Pool_$2156_$",
															"typeString": "function (address,address,address,uint24) view returns (contract IUniswapV3Pool)"
														}
													},
													"id": 2942,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "78837:66:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IUniswapV3Pool_$2156",
														"typeString": "contract IUniswapV3Pool"
													}
												},
												"id": 2943,
												"nodeType": "ExpressionStatement",
												"src": "78837:66:0"
											},
											{
												"assignments": [
													2945,
													2947
												],
												"declarations": [
													{
														"constant": false,
														"id": 2945,
														"mutability": "mutable",
														"name": "isExactInput",
														"nodeType": "VariableDeclaration",
														"scope": 3023,
														"src": "78917:17:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2944,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "78917:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2947,
														"mutability": "mutable",
														"name": "amountToPay",
														"nodeType": "VariableDeclaration",
														"scope": 3023,
														"src": "78936:19:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2946,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "78936:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2968,
												"initialValue": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"id": 2950,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2948,
															"name": "amount0Delta",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2897,
															"src": "78972:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 2949,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "78987:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "78972:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 2961,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2959,
																	"name": "tokenOut",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2927,
																	"src": "79072:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 2960,
																	"name": "tokenIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2925,
																	"src": "79083:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "79072:18:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															{
																"arguments": [
																	{
																		"id": 2964,
																		"name": "amount1Delta",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2899,
																		"src": "79100:12:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	],
																	"id": 2963,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "79092:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 2962,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "79092:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 2965,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "79092:21:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2966,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "79071:43:0",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
															"typeString": "tuple(bool,uint256)"
														}
													},
													"id": 2967,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "78972:142:0",
													"trueExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 2953,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2951,
																	"name": "tokenIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2925,
																	"src": "79009:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 2952,
																	"name": "tokenOut",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2927,
																	"src": "79019:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "79009:18:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															{
																"arguments": [
																	{
																		"id": 2956,
																		"name": "amount0Delta",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2897,
																		"src": "79037:12:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	],
																	"id": 2955,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "79029:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 2954,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "79029:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 2957,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "79029:21:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2958,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "79008:43:0",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
															"typeString": "tuple(bool,uint256)"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "78916:198:0"
											},
											{
												"condition": {
													"id": 2969,
													"name": "isExactInput",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2945,
													"src": "79129:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 3021,
													"nodeType": "Block",
													"src": "79225:482:0",
													"statements": [
														{
															"condition": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"expression": {
																			"id": 2980,
																			"name": "data",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2916,
																			"src": "79297:4:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_SwapCallbackData_$2894_memory_ptr",
																				"typeString": "struct SwapRouter.SwapCallbackData memory"
																			}
																		},
																		"id": 2981,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "path",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2891,
																		"src": "79297:9:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 2982,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "hasMultiplePools",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 254,
																	"src": "79297:26:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bool_$bound_to$_t_bytes_memory_ptr_$",
																		"typeString": "function (bytes memory) pure returns (bool)"
																	}
																},
																"id": 2983,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "79297:28:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 3019,
																"nodeType": "Block",
																"src": "79473:223:0",
																"statements": [
																	{
																		"expression": {
																			"id": 3004,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 3002,
																				"name": "amountInCached",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2851,
																				"src": "79492:14:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"id": 3003,
																				"name": "amountToPay",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2947,
																				"src": "79509:11:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "79492:28:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 3005,
																		"nodeType": "ExpressionStatement",
																		"src": "79492:28:0"
																	},
																	{
																		"expression": {
																			"id": 3008,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 3006,
																				"name": "tokenIn",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2925,
																				"src": "79539:7:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"id": 3007,
																				"name": "tokenOut",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2927,
																				"src": "79549:8:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"src": "79539:18:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"id": 3009,
																		"nodeType": "ExpressionStatement",
																		"src": "79539:18:0"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 3011,
																					"name": "tokenIn",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2925,
																					"src": "79635:7:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"expression": {
																						"id": 3012,
																						"name": "data",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2916,
																						"src": "79644:4:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_SwapCallbackData_$2894_memory_ptr",
																							"typeString": "struct SwapRouter.SwapCallbackData memory"
																						}
																					},
																					"id": 3013,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "payer",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2893,
																					"src": "79644:10:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"expression": {
																						"id": 3014,
																						"name": "msg",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967281,
																						"src": "79656:3:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_magic_message",
																							"typeString": "msg"
																						}
																					},
																					"id": 3015,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "sender",
																					"nodeType": "MemberAccess",
																					"src": "79656:10:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address_payable",
																						"typeString": "address payable"
																					}
																				},
																				{
																					"id": 3016,
																					"name": "amountToPay",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2947,
																					"src": "79668:11:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address_payable",
																						"typeString": "address payable"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 3010,
																				"name": "pay",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1446,
																				"src": "79631:3:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$",
																					"typeString": "function (address,address,address,uint256)"
																				}
																			},
																			"id": 3017,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "79631:49:0",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 3018,
																		"nodeType": "ExpressionStatement",
																		"src": "79631:49:0"
																	}
																]
															},
															"id": 3020,
															"nodeType": "IfStatement",
															"src": "79293:403:0",
															"trueBody": {
																"id": 3001,
																"nodeType": "Block",
																"src": "79327:140:0",
																"statements": [
																	{
																		"expression": {
																			"id": 2991,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"expression": {
																					"id": 2984,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2916,
																					"src": "79346:4:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_SwapCallbackData_$2894_memory_ptr",
																						"typeString": "struct SwapRouter.SwapCallbackData memory"
																					}
																				},
																				"id": 2986,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"memberName": "path",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 2891,
																				"src": "79346:9:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"arguments": [],
																				"expression": {
																					"argumentTypes": [],
																					"expression": {
																						"expression": {
																							"id": 2987,
																							"name": "data",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2916,
																							"src": "79358:4:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_SwapCallbackData_$2894_memory_ptr",
																								"typeString": "struct SwapRouter.SwapCallbackData memory"
																							}
																						},
																						"id": 2988,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "path",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 2891,
																						"src": "79358:9:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					},
																					"id": 2989,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "skipToken",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 339,
																					"src": "79358:19:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$",
																						"typeString": "function (bytes memory) pure returns (bytes memory)"
																					}
																				},
																				"id": 2990,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "79358:21:0",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"src": "79346:33:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 2992,
																		"nodeType": "ExpressionStatement",
																		"src": "79346:33:0"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 2994,
																					"name": "amountToPay",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2947,
																					"src": "79418:11:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"expression": {
																						"id": 2995,
																						"name": "msg",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967281,
																						"src": "79431:3:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_magic_message",
																							"typeString": "msg"
																						}
																					},
																					"id": 2996,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "sender",
																					"nodeType": "MemberAccess",
																					"src": "79431:10:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address_payable",
																						"typeString": "address payable"
																					}
																				},
																				{
																					"hexValue": "30",
																					"id": 2997,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "79443:1:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					},
																					"value": "0"
																				},
																				{
																					"id": 2998,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2916,
																					"src": "79446:4:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_SwapCallbackData_$2894_memory_ptr",
																						"typeString": "struct SwapRouter.SwapCallbackData memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_address_payable",
																						"typeString": "address payable"
																					},
																					{
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					},
																					{
																						"typeIdentifier": "t_struct$_SwapCallbackData_$2894_memory_ptr",
																						"typeString": "struct SwapRouter.SwapCallbackData memory"
																					}
																				],
																				"id": 2993,
																				"name": "exactOutputInternal",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3375,
																				"src": "79398:19:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_address_$_t_uint160_$_t_struct$_SwapCallbackData_$2894_memory_ptr_$returns$_t_uint256_$",
																					"typeString": "function (uint256,address,uint160,struct SwapRouter.SwapCallbackData memory) returns (uint256)"
																				}
																			},
																			"id": 2999,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "79398:53:0",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 3000,
																		"nodeType": "ExpressionStatement",
																		"src": "79398:53:0"
																	}
																]
															}
														}
													]
												},
												"id": 3022,
												"nodeType": "IfStatement",
												"src": "79125:582:0",
												"trueBody": {
													"id": 2979,
													"nodeType": "Block",
													"src": "79143:76:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2971,
																		"name": "tokenIn",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2925,
																		"src": "79162:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 2972,
																			"name": "data",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2916,
																			"src": "79171:4:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_SwapCallbackData_$2894_memory_ptr",
																				"typeString": "struct SwapRouter.SwapCallbackData memory"
																			}
																		},
																		"id": 2973,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "payer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2893,
																		"src": "79171:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 2974,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "79183:3:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 2975,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "79183:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	},
																	{
																		"id": 2976,
																		"name": "amountToPay",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2947,
																		"src": "79195:11:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 2970,
																	"name": "pay",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1446,
																	"src": "79158:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,address,uint256)"
																	}
																},
																"id": 2977,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "79158:49:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2978,
															"nodeType": "ExpressionStatement",
															"src": "79158:49:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2895,
										"nodeType": "StructuredDocumentation",
										"src": "78349:38:0",
										"text": "@inheritdoc IUniswapV3SwapCallback"
									},
									"functionSelector": "fa461e33",
									"id": 3024,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "uniswapV3SwapCallback",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2903,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "78531:8:0"
									},
									"parameters": {
										"id": 2902,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2897,
												"mutability": "mutable",
												"name": "amount0Delta",
												"nodeType": "VariableDeclaration",
												"scope": 3024,
												"src": "78434:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2896,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "78434:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2899,
												"mutability": "mutable",
												"name": "amount1Delta",
												"nodeType": "VariableDeclaration",
												"scope": 3024,
												"src": "78464:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2898,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "78464:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2901,
												"mutability": "mutable",
												"name": "_data",
												"nodeType": "VariableDeclaration",
												"scope": 3024,
												"src": "78494:20:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2900,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "78494:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "78423:98:0"
									},
									"returnParameters": {
										"id": 2904,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "78540:0:0"
									},
									"scope": 3470,
									"src": "78393:1321:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 3116,
										"nodeType": "Block",
										"src": "79972:758:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 3043,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3038,
														"name": "recipient",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3029,
														"src": "80051:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 3041,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "80072:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 3040,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "80064:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 3039,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "80064:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 3042,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "80064:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "80051:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3051,
												"nodeType": "IfStatement",
												"src": "80047:54:0",
												"trueBody": {
													"expression": {
														"id": 3049,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 3044,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3029,
															"src": "80076:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"arguments": [
																{
																	"id": 3047,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "80096:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SwapRouter_$3470",
																		"typeString": "contract SwapRouter"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SwapRouter_$3470",
																		"typeString": "contract SwapRouter"
																	}
																],
																"id": 3046,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "80088:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 3045,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "80088:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 3048,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "80088:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"src": "80076:25:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 3050,
													"nodeType": "ExpressionStatement",
													"src": "80076:25:0"
												}
											},
											{
												"assignments": [
													3053,
													3055,
													3057
												],
												"declarations": [
													{
														"constant": false,
														"id": 3053,
														"mutability": "mutable",
														"name": "tokenIn",
														"nodeType": "VariableDeclaration",
														"scope": 3116,
														"src": "80115:15:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 3052,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "80115:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 3055,
														"mutability": "mutable",
														"name": "tokenOut",
														"nodeType": "VariableDeclaration",
														"scope": 3116,
														"src": "80132:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 3054,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "80132:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 3057,
														"mutability": "mutable",
														"name": "fee",
														"nodeType": "VariableDeclaration",
														"scope": 3116,
														"src": "80150:10:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint24",
															"typeString": "uint24"
														},
														"typeName": {
															"id": 3056,
															"name": "uint24",
															"nodeType": "ElementaryTypeName",
															"src": "80150:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3062,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"expression": {
																"id": 3058,
																"name": "data",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3033,
																"src": "80164:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_SwapCallbackData_$2894_memory_ptr",
																	"typeString": "struct SwapRouter.SwapCallbackData memory"
																}
															},
															"id": 3059,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "path",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2891,
															"src": "80164:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 3060,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "decodeFirstPool",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 306,
														"src": "80164:25:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_address_$_t_address_$_t_uint24_$bound_to$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) pure returns (address,address,uint24)"
														}
													},
													"id": 3061,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "80164:27:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint24_$",
														"typeString": "tuple(address,address,uint24)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "80114:77:0"
											},
											{
												"assignments": [
													3064
												],
												"declarations": [
													{
														"constant": false,
														"id": 3064,
														"mutability": "mutable",
														"name": "zeroForOne",
														"nodeType": "VariableDeclaration",
														"scope": 3116,
														"src": "80204:15:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 3063,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "80204:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3068,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 3067,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3065,
														"name": "tokenIn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3053,
														"src": "80222:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 3066,
														"name": "tokenOut",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3055,
														"src": "80232:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "80222:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "80204:36:0"
											},
											{
												"assignments": [
													3070,
													3072
												],
												"declarations": [
													{
														"constant": false,
														"id": 3070,
														"mutability": "mutable",
														"name": "amount0",
														"nodeType": "VariableDeclaration",
														"scope": 3116,
														"src": "80254:14:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 3069,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "80254:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 3072,
														"mutability": "mutable",
														"name": "amount1",
														"nodeType": "VariableDeclaration",
														"scope": 3116,
														"src": "80270:14:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 3071,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "80270:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3105,
												"initialValue": {
													"arguments": [
														{
															"id": 3079,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3029,
															"src": "80356:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3080,
															"name": "zeroForOne",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3064,
															"src": "80384:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"expression": {
																	"id": 3081,
																	"name": "amountIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3027,
																	"src": "80413:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 3082,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "toInt256",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2817,
																"src": "80413:17:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_int256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (int256)"
																}
															},
															"id": 3083,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "80413:19:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 3086,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3084,
																	"name": "sqrtPriceLimitX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3031,
																	"src": "80451:17:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 3085,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "80472:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "80451:22:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseExpression": {
																"id": 3098,
																"name": "sqrtPriceLimitX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3031,
																"src": "80593:17:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"id": 3099,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "Conditional",
															"src": "80451:159:0",
															"trueExpression": {
																"components": [
																	{
																		"condition": {
																			"id": 3087,
																			"name": "zeroForOne",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3064,
																			"src": "80498:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			"id": 3095,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 3092,
																					"name": "TickMath",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2749,
																					"src": "80541:8:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_TickMath_$2749_$",
																						"typeString": "type(library TickMath)"
																					}
																				},
																				"id": 3093,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "MAX_SQRT_RATIO",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 2235,
																				"src": "80541:23:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 3094,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "80567:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "80541:27:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		"id": 3096,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "80498:70:0",
																		"trueExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			"id": 3091,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 3088,
																					"name": "TickMath",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2749,
																					"src": "80511:8:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_TickMath_$2749_$",
																						"typeString": "type(library TickMath)"
																					}
																				},
																				"id": 3089,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "MIN_SQRT_RATIO",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 2231,
																				"src": "80511:23:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 3090,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "80537:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "80511:27:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	}
																],
																"id": 3097,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "80497:72:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														{
															"arguments": [
																{
																	"id": 3102,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3033,
																	"src": "80640:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_SwapCallbackData_$2894_memory_ptr",
																		"typeString": "struct SwapRouter.SwapCallbackData memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_struct$_SwapCallbackData_$2894_memory_ptr",
																		"typeString": "struct SwapRouter.SwapCallbackData memory"
																	}
																],
																"expression": {
																	"id": 3100,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "80629:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 3101,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "80629:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 3103,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "80629:16:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 3074,
																	"name": "tokenIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3053,
																	"src": "80309:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 3075,
																	"name": "tokenOut",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3055,
																	"src": "80318:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 3076,
																	"name": "fee",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3057,
																	"src": "80328:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint24",
																		"typeString": "uint24"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint24",
																		"typeString": "uint24"
																	}
																],
																"id": 3073,
																"name": "getPool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2889,
																"src": "80301:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$_t_uint24_$returns$_t_contract$_IUniswapV3Pool_$2156_$",
																	"typeString": "function (address,address,uint24) view returns (contract IUniswapV3Pool)"
																}
															},
															"id": 3077,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "80301:31:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IUniswapV3Pool_$2156",
																"typeString": "contract IUniswapV3Pool"
															}
														},
														"id": 3078,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "swap",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1946,
														"src": "80301:36:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_bool_$_t_int256_$_t_uint160_$_t_bytes_memory_ptr_$returns$_t_int256_$_t_int256_$",
															"typeString": "function (address,bool,int256,uint160,bytes memory) external returns (int256,int256)"
														}
													},
													"id": 3104,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "80301:359:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$",
														"typeString": "tuple(int256,int256)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "80253:407:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 3113,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "-",
															"prefix": true,
															"src": "80688:33:0",
															"subExpression": {
																"components": [
																	{
																		"condition": {
																			"id": 3108,
																			"name": "zeroForOne",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3064,
																			"src": "80690:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"id": 3110,
																			"name": "amount0",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3070,
																			"src": "80713:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"id": 3111,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "80690:30:0",
																		"trueExpression": {
																			"id": 3109,
																			"name": "amount1",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3072,
																			"src": "80703:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	}
																],
																"id": 3112,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "80689:32:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														],
														"id": 3107,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "80680:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint256_$",
															"typeString": "type(uint256)"
														},
														"typeName": {
															"id": 3106,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "80680:7:0",
															"typeDescriptions": {}
														}
													},
													"id": 3114,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "80680:42:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3037,
												"id": 3115,
												"nodeType": "Return",
												"src": "80673:49:0"
											}
										]
									},
									"documentation": {
										"id": 3025,
										"nodeType": "StructuredDocumentation",
										"src": "79722:43:0",
										"text": "@dev Performs a single exact input swap"
									},
									"id": 3117,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "exactInputInternal",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3034,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3027,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 3117,
												"src": "79809:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3026,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "79809:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3029,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 3117,
												"src": "79836:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3028,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "79836:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3031,
												"mutability": "mutable",
												"name": "sqrtPriceLimitX96",
												"nodeType": "VariableDeclaration",
												"scope": 3117,
												"src": "79864:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 3030,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "79864:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3033,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 3117,
												"src": "79900:28:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_SwapCallbackData_$2894_memory_ptr",
													"typeString": "struct SwapRouter.SwapCallbackData"
												},
												"typeName": {
													"id": 3032,
													"name": "SwapCallbackData",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2894,
													"src": "79900:16:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_SwapCallbackData_$2894_storage_ptr",
														"typeString": "struct SwapRouter.SwapCallbackData"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "79798:137:0"
									},
									"returnParameters": {
										"id": 3037,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3036,
												"mutability": "mutable",
												"name": "amountOut",
												"nodeType": "VariableDeclaration",
												"scope": 3117,
												"src": "79953:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3035,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "79953:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "79952:19:0"
									},
									"scope": 3470,
									"src": "79771:959:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"baseFunctions": [
										1663
									],
									"body": {
										"id": 3162,
										"nodeType": "Block",
										"src": "80972:360:0",
										"statements": [
											{
												"expression": {
													"id": 3152,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3130,
														"name": "amountOut",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3128,
														"src": "80983:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"expression": {
																	"id": 3132,
																	"name": "params",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3120,
																	"src": "81028:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ExactInputSingleParams_$1655_calldata_ptr",
																		"typeString": "struct ISwapRouter.ExactInputSingleParams calldata"
																	}
																},
																"id": 3133,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "amountIn",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1650,
																"src": "81028:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"expression": {
																	"id": 3134,
																	"name": "params",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3120,
																	"src": "81058:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ExactInputSingleParams_$1655_calldata_ptr",
																		"typeString": "struct ISwapRouter.ExactInputSingleParams calldata"
																	}
																},
																"id": 3135,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "recipient",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1646,
																"src": "81058:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"expression": {
																	"id": 3136,
																	"name": "params",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3120,
																	"src": "81089:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ExactInputSingleParams_$1655_calldata_ptr",
																		"typeString": "struct ISwapRouter.ExactInputSingleParams calldata"
																	}
																},
																"id": 3137,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sqrtPriceLimitX96",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1654,
																"src": "81089:24:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 3141,
																					"name": "params",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3120,
																					"src": "81169:6:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_ExactInputSingleParams_$1655_calldata_ptr",
																						"typeString": "struct ISwapRouter.ExactInputSingleParams calldata"
																					}
																				},
																				"id": 3142,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "tokenIn",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1640,
																				"src": "81169:14:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"expression": {
																					"id": 3143,
																					"name": "params",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3120,
																					"src": "81185:6:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_ExactInputSingleParams_$1655_calldata_ptr",
																						"typeString": "struct ISwapRouter.ExactInputSingleParams calldata"
																					}
																				},
																				"id": 3144,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "fee",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1644,
																				"src": "81185:10:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint24",
																					"typeString": "uint24"
																				}
																			},
																			{
																				"expression": {
																					"id": 3145,
																					"name": "params",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3120,
																					"src": "81197:6:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_ExactInputSingleParams_$1655_calldata_ptr",
																						"typeString": "struct ISwapRouter.ExactInputSingleParams calldata"
																					}
																				},
																				"id": 3146,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "tokenOut",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1642,
																				"src": "81197:15:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint24",
																					"typeString": "uint24"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"expression": {
																				"id": 3139,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "81152:3:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 3140,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "encodePacked",
																			"nodeType": "MemberAccess",
																			"src": "81152:16:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function () pure returns (bytes memory)"
																			}
																		},
																		"id": 3147,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "81152:61:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"expression": {
																			"id": 3148,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "81222:3:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 3149,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "81222:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	],
																	"id": 3138,
																	"name": "SwapCallbackData",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2894,
																	"src": "81128:16:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_struct$_SwapCallbackData_$2894_storage_ptr_$",
																		"typeString": "type(struct SwapRouter.SwapCallbackData storage pointer)"
																	}
																},
																"id": 3150,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "structConstructorCall",
																"lValueRequested": false,
																"names": [
																	"path",
																	"payer"
																],
																"nodeType": "FunctionCall",
																"src": "81128:106:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_SwapCallbackData_$2894_memory_ptr",
																	"typeString": "struct SwapRouter.SwapCallbackData memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																{
																	"typeIdentifier": "t_struct$_SwapCallbackData_$2894_memory_ptr",
																	"typeString": "struct SwapRouter.SwapCallbackData memory"
																}
															],
															"id": 3131,
															"name": "exactInputInternal",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3117,
															"src": "80995:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_address_$_t_uint160_$_t_struct$_SwapCallbackData_$2894_memory_ptr_$returns$_t_uint256_$",
																"typeString": "function (uint256,address,uint160,struct SwapRouter.SwapCallbackData memory) returns (uint256)"
															}
														},
														"id": 3151,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "80995:250:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "80983:262:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 3153,
												"nodeType": "ExpressionStatement",
												"src": "80983:262:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3158,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3155,
																"name": "amountOut",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3128,
																"src": "81264:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"expression": {
																	"id": 3156,
																	"name": "params",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3120,
																	"src": "81277:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ExactInputSingleParams_$1655_calldata_ptr",
																		"typeString": "struct ISwapRouter.ExactInputSingleParams calldata"
																	}
																},
																"id": 3157,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "amountOutMinimum",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1652,
																"src": "81277:23:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "81264:36:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "546f6f206c6974746c65207265636569766564",
															"id": 3159,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "81302:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f037a9cbca9be03859489f289f0cf5f85c0414bbfdd9785bc7ab31bd734e249c",
																"typeString": "literal_string \"Too little received\""
															},
															"value": "Too little received"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f037a9cbca9be03859489f289f0cf5f85c0414bbfdd9785bc7ab31bd734e249c",
																"typeString": "literal_string \"Too little received\""
															}
														],
														"id": 3154,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "81256:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3160,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "81256:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3161,
												"nodeType": "ExpressionStatement",
												"src": "81256:68:0"
											}
										]
									},
									"documentation": {
										"id": 3118,
										"nodeType": "StructuredDocumentation",
										"src": "80738:27:0",
										"text": "@inheritdoc ISwapRouter"
									},
									"functionSelector": "414bf389",
									"id": 3163,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"expression": {
														"id": 3124,
														"name": "params",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3120,
														"src": "80913:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ExactInputSingleParams_$1655_calldata_ptr",
															"typeString": "struct ISwapRouter.ExactInputSingleParams calldata"
														}
													},
													"id": 3125,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "deadline",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1648,
													"src": "80913:15:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											],
											"id": 3126,
											"modifierName": {
												"id": 3123,
												"name": "checkDeadline",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 1198,
												"src": "80899:13:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$_t_uint256_$",
													"typeString": "modifier (uint256)"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "80899:30:0"
										}
									],
									"name": "exactInputSingle",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 3122,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "80881:8:0"
									},
									"parameters": {
										"id": 3121,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3120,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 3163,
												"src": "80797:38:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExactInputSingleParams_$1655_calldata_ptr",
													"typeString": "struct ISwapRouter.ExactInputSingleParams"
												},
												"typeName": {
													"id": 3119,
													"name": "ExactInputSingleParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1655,
													"src": "80797:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactInputSingleParams_$1655_storage_ptr",
														"typeString": "struct ISwapRouter.ExactInputSingleParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "80796:40:0"
									},
									"returnParameters": {
										"id": 3129,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3128,
												"mutability": "mutable",
												"name": "amountOut",
												"nodeType": "VariableDeclaration",
												"scope": 3163,
												"src": "80948:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3127,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "80948:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "80947:19:0"
									},
									"scope": 3470,
									"src": "80771:561:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										1682
									],
									"body": {
										"id": 3250,
										"nodeType": "Block",
										"src": "81560:1122:0",
										"statements": [
											{
												"assignments": [
													3177
												],
												"declarations": [
													{
														"constant": false,
														"id": 3177,
														"mutability": "mutable",
														"name": "payer",
														"nodeType": "VariableDeclaration",
														"scope": 3250,
														"src": "81571:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 3176,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "81571:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3180,
												"initialValue": {
													"expression": {
														"id": 3178,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "81587:3:0",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 3179,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "81587:10:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "81571:26:0"
											},
											{
												"body": {
													"id": 3240,
													"nodeType": "Block",
													"src": "81660:934:0",
													"statements": [
														{
															"assignments": [
																3183
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 3183,
																	"mutability": "mutable",
																	"name": "hasMultiplePools",
																	"nodeType": "VariableDeclaration",
																	"scope": 3240,
																	"src": "81675:21:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"typeName": {
																		"id": 3182,
																		"name": "bool",
																		"nodeType": "ElementaryTypeName",
																		"src": "81675:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 3188,
															"initialValue": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"expression": {
																			"id": 3184,
																			"name": "params",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3166,
																			"src": "81699:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_ExactInputParams_$1674_memory_ptr",
																				"typeString": "struct ISwapRouter.ExactInputParams memory"
																			}
																		},
																		"id": 3185,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "path",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1665,
																		"src": "81699:11:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 3186,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "hasMultiplePools",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 254,
																	"src": "81699:28:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bool_$bound_to$_t_bytes_memory_ptr_$",
																		"typeString": "function (bytes memory) pure returns (bool)"
																	}
																},
																"id": 3187,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "81699:30:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "81675:54:0"
														},
														{
															"expression": {
																"id": 3212,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 3189,
																		"name": "params",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3166,
																		"src": "81826:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_ExactInputParams_$1674_memory_ptr",
																			"typeString": "struct ISwapRouter.ExactInputParams memory"
																		}
																	},
																	"id": 3191,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "amountIn",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1671,
																	"src": "81826:15:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"expression": {
																				"id": 3193,
																				"name": "params",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3166,
																				"src": "81881:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_ExactInputParams_$1674_memory_ptr",
																					"typeString": "struct ISwapRouter.ExactInputParams memory"
																				}
																			},
																			"id": 3194,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "amountIn",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1671,
																			"src": "81881:15:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"condition": {
																				"id": 3195,
																				"name": "hasMultiplePools",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3183,
																				"src": "81915:16:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"falseExpression": {
																				"expression": {
																					"id": 3200,
																					"name": "params",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3166,
																					"src": "81950:6:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_ExactInputParams_$1674_memory_ptr",
																						"typeString": "struct ISwapRouter.ExactInputParams memory"
																					}
																				},
																				"id": 3201,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "recipient",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1667,
																				"src": "81950:16:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"id": 3202,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "Conditional",
																			"src": "81915:51:0",
																			"trueExpression": {
																				"arguments": [
																					{
																						"id": 3198,
																						"name": "this",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967268,
																						"src": "81942:4:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_contract$_SwapRouter_$3470",
																							"typeString": "contract SwapRouter"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_contract$_SwapRouter_$3470",
																							"typeString": "contract SwapRouter"
																						}
																					],
																					"id": 3197,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "81934:7:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_address_$",
																						"typeString": "type(address)"
																					},
																					"typeName": {
																						"id": 3196,
																						"name": "address",
																						"nodeType": "ElementaryTypeName",
																						"src": "81934:7:0",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 3199,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "81934:13:0",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_address_payable",
																					"typeString": "address payable"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"hexValue": "30",
																			"id": 3203,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "82036:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		{
																			"arguments": [
																				{
																					"arguments": [],
																					"expression": {
																						"argumentTypes": [],
																						"expression": {
																							"expression": {
																								"id": 3205,
																								"name": "params",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 3166,
																								"src": "82102:6:0",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_ExactInputParams_$1674_memory_ptr",
																									"typeString": "struct ISwapRouter.ExactInputParams memory"
																								}
																							},
																							"id": 3206,
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "path",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 1665,
																							"src": "82102:11:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bytes_memory_ptr",
																								"typeString": "bytes memory"
																							}
																						},
																						"id": 3207,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "getFirstPool",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 321,
																						"src": "82102:24:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$",
																							"typeString": "function (bytes memory) pure returns (bytes memory)"
																						}
																					},
																					"id": 3208,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "82102:26:0",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				{
																					"id": 3209,
																					"name": "payer",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3177,
																					"src": "82206:5:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 3204,
																				"name": "SwapCallbackData",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2894,
																				"src": "82056:16:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_struct$_SwapCallbackData_$2894_storage_ptr_$",
																					"typeString": "type(struct SwapRouter.SwapCallbackData storage pointer)"
																				}
																			},
																			"id": 3210,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "structConstructorCall",
																			"lValueRequested": false,
																			"names": [
																				"path",
																				"payer"
																			],
																			"nodeType": "FunctionCall",
																			"src": "82056:175:0",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_SwapCallbackData_$2894_memory_ptr",
																				"typeString": "struct SwapRouter.SwapCallbackData memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			{
																				"typeIdentifier": "t_struct$_SwapCallbackData_$2894_memory_ptr",
																				"typeString": "struct SwapRouter.SwapCallbackData memory"
																			}
																		],
																		"id": 3192,
																		"name": "exactInputInternal",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3117,
																		"src": "81844:18:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_address_$_t_uint160_$_t_struct$_SwapCallbackData_$2894_memory_ptr_$returns$_t_uint256_$",
																			"typeString": "function (uint256,address,uint160,struct SwapRouter.SwapCallbackData memory) returns (uint256)"
																		}
																	},
																	"id": 3211,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "81844:402:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "81826:420:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3213,
															"nodeType": "ExpressionStatement",
															"src": "81826:420:0"
														},
														{
															"condition": {
																"id": 3214,
																"name": "hasMultiplePools",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3183,
																"src": "82323:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 3238,
																"nodeType": "Block",
																"src": "82497:86:0",
																"statements": [
																	{
																		"expression": {
																			"id": 3235,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 3232,
																				"name": "amountOut",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3174,
																				"src": "82516:9:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"expression": {
																					"id": 3233,
																					"name": "params",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3166,
																					"src": "82528:6:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_ExactInputParams_$1674_memory_ptr",
																						"typeString": "struct ISwapRouter.ExactInputParams memory"
																					}
																				},
																				"id": 3234,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "amountIn",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1671,
																				"src": "82528:15:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "82516:27:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 3236,
																		"nodeType": "ExpressionStatement",
																		"src": "82516:27:0"
																	},
																	{
																		"id": 3237,
																		"nodeType": "Break",
																		"src": "82562:5:0"
																	}
																]
															},
															"id": 3239,
															"nodeType": "IfStatement",
															"src": "82319:264:0",
															"trueBody": {
																"id": 3231,
																"nodeType": "Block",
																"src": "82341:150:0",
																"statements": [
																	{
																		"expression": {
																			"id": 3220,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 3215,
																				"name": "payer",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3177,
																				"src": "82360:5:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"arguments": [
																					{
																						"id": 3218,
																						"name": "this",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967268,
																						"src": "82376:4:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_contract$_SwapRouter_$3470",
																							"typeString": "contract SwapRouter"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_contract$_SwapRouter_$3470",
																							"typeString": "contract SwapRouter"
																						}
																					],
																					"id": 3217,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "82368:7:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_address_$",
																						"typeString": "type(address)"
																					},
																					"typeName": {
																						"id": 3216,
																						"name": "address",
																						"nodeType": "ElementaryTypeName",
																						"src": "82368:7:0",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 3219,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "82368:13:0",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_address_payable",
																					"typeString": "address payable"
																				}
																			},
																			"src": "82360:21:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"id": 3221,
																		"nodeType": "ExpressionStatement",
																		"src": "82360:21:0"
																	},
																	{
																		"expression": {
																			"id": 3229,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"expression": {
																					"id": 3222,
																					"name": "params",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3166,
																					"src": "82438:6:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_ExactInputParams_$1674_memory_ptr",
																						"typeString": "struct ISwapRouter.ExactInputParams memory"
																					}
																				},
																				"id": 3224,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"memberName": "path",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1665,
																				"src": "82438:11:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"arguments": [],
																				"expression": {
																					"argumentTypes": [],
																					"expression": {
																						"expression": {
																							"id": 3225,
																							"name": "params",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 3166,
																							"src": "82452:6:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_ExactInputParams_$1674_memory_ptr",
																								"typeString": "struct ISwapRouter.ExactInputParams memory"
																							}
																						},
																						"id": 3226,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "path",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 1665,
																						"src": "82452:11:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					},
																					"id": 3227,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "skipToken",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 339,
																					"src": "82452:21:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$",
																						"typeString": "function (bytes memory) pure returns (bytes memory)"
																					}
																				},
																				"id": 3228,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "82452:23:0",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"src": "82438:37:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 3230,
																		"nodeType": "ExpressionStatement",
																		"src": "82438:37:0"
																	}
																]
															}
														}
													]
												},
												"condition": {
													"hexValue": "74727565",
													"id": 3181,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "81654:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"id": 3241,
												"nodeType": "WhileStatement",
												"src": "81647:947:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3246,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3243,
																"name": "amountOut",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3174,
																"src": "82614:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"expression": {
																	"id": 3244,
																	"name": "params",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3166,
																	"src": "82627:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ExactInputParams_$1674_memory_ptr",
																		"typeString": "struct ISwapRouter.ExactInputParams memory"
																	}
																},
																"id": 3245,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "amountOutMinimum",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1673,
																"src": "82627:23:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "82614:36:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "546f6f206c6974746c65207265636569766564",
															"id": 3247,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "82652:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f037a9cbca9be03859489f289f0cf5f85c0414bbfdd9785bc7ab31bd734e249c",
																"typeString": "literal_string \"Too little received\""
															},
															"value": "Too little received"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f037a9cbca9be03859489f289f0cf5f85c0414bbfdd9785bc7ab31bd734e249c",
																"typeString": "literal_string \"Too little received\""
															}
														],
														"id": 3242,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "82606:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3248,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "82606:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3249,
												"nodeType": "ExpressionStatement",
												"src": "82606:68:0"
											}
										]
									},
									"documentation": {
										"id": 3164,
										"nodeType": "StructuredDocumentation",
										"src": "81340:27:0",
										"text": "@inheritdoc ISwapRouter"
									},
									"functionSelector": "c04b8d59",
									"id": 3251,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"expression": {
														"id": 3170,
														"name": "params",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3166,
														"src": "81501:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ExactInputParams_$1674_memory_ptr",
															"typeString": "struct ISwapRouter.ExactInputParams memory"
														}
													},
													"id": 3171,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "deadline",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1669,
													"src": "81501:15:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											],
											"id": 3172,
											"modifierName": {
												"id": 3169,
												"name": "checkDeadline",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 1198,
												"src": "81487:13:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$_t_uint256_$",
													"typeString": "modifier (uint256)"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "81487:30:0"
										}
									],
									"name": "exactInput",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 3168,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "81469:8:0"
									},
									"parameters": {
										"id": 3167,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3166,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 3251,
												"src": "81393:30:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExactInputParams_$1674_memory_ptr",
													"typeString": "struct ISwapRouter.ExactInputParams"
												},
												"typeName": {
													"id": 3165,
													"name": "ExactInputParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1674,
													"src": "81393:16:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactInputParams_$1674_storage_ptr",
														"typeString": "struct ISwapRouter.ExactInputParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "81392:32:0"
									},
									"returnParameters": {
										"id": 3175,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3174,
												"mutability": "mutable",
												"name": "amountOut",
												"nodeType": "VariableDeclaration",
												"scope": 3251,
												"src": "81536:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3173,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "81536:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "81535:19:0"
									},
									"scope": 3470,
									"src": "81373:1309:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 3374,
										"nodeType": "Block",
										"src": "82942:1163:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 3270,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3265,
														"name": "recipient",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3256,
														"src": "83021:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 3268,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "83042:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 3267,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "83034:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 3266,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "83034:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 3269,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "83034:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "83021:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3278,
												"nodeType": "IfStatement",
												"src": "83017:54:0",
												"trueBody": {
													"expression": {
														"id": 3276,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 3271,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3256,
															"src": "83046:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"arguments": [
																{
																	"id": 3274,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "83066:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SwapRouter_$3470",
																		"typeString": "contract SwapRouter"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SwapRouter_$3470",
																		"typeString": "contract SwapRouter"
																	}
																],
																"id": 3273,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "83058:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 3272,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "83058:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 3275,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "83058:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"src": "83046:25:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 3277,
													"nodeType": "ExpressionStatement",
													"src": "83046:25:0"
												}
											},
											{
												"assignments": [
													3280,
													3282,
													3284
												],
												"declarations": [
													{
														"constant": false,
														"id": 3280,
														"mutability": "mutable",
														"name": "tokenOut",
														"nodeType": "VariableDeclaration",
														"scope": 3374,
														"src": "83085:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 3279,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "83085:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 3282,
														"mutability": "mutable",
														"name": "tokenIn",
														"nodeType": "VariableDeclaration",
														"scope": 3374,
														"src": "83103:15:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 3281,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "83103:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 3284,
														"mutability": "mutable",
														"name": "fee",
														"nodeType": "VariableDeclaration",
														"scope": 3374,
														"src": "83120:10:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint24",
															"typeString": "uint24"
														},
														"typeName": {
															"id": 3283,
															"name": "uint24",
															"nodeType": "ElementaryTypeName",
															"src": "83120:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3289,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"expression": {
																"id": 3285,
																"name": "data",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3260,
																"src": "83134:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_SwapCallbackData_$2894_memory_ptr",
																	"typeString": "struct SwapRouter.SwapCallbackData memory"
																}
															},
															"id": 3286,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "path",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2891,
															"src": "83134:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 3287,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "decodeFirstPool",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 306,
														"src": "83134:25:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_address_$_t_address_$_t_uint24_$bound_to$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) pure returns (address,address,uint24)"
														}
													},
													"id": 3288,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "83134:27:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint24_$",
														"typeString": "tuple(address,address,uint24)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "83084:77:0"
											},
											{
												"assignments": [
													3291
												],
												"declarations": [
													{
														"constant": false,
														"id": 3291,
														"mutability": "mutable",
														"name": "zeroForOne",
														"nodeType": "VariableDeclaration",
														"scope": 3374,
														"src": "83174:15:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 3290,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "83174:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3295,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 3294,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3292,
														"name": "tokenIn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3282,
														"src": "83192:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 3293,
														"name": "tokenOut",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3280,
														"src": "83202:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "83192:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "83174:36:0"
											},
											{
												"assignments": [
													3297,
													3299
												],
												"declarations": [
													{
														"constant": false,
														"id": 3297,
														"mutability": "mutable",
														"name": "amount0Delta",
														"nodeType": "VariableDeclaration",
														"scope": 3374,
														"src": "83224:19:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 3296,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "83224:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 3299,
														"mutability": "mutable",
														"name": "amount1Delta",
														"nodeType": "VariableDeclaration",
														"scope": 3374,
														"src": "83245:19:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 3298,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "83245:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3333,
												"initialValue": {
													"arguments": [
														{
															"id": 3306,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3256,
															"src": "83336:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3307,
															"name": "zeroForOne",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3291,
															"src": "83364:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 3311,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "-",
															"prefix": true,
															"src": "83393:21:0",
															"subExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 3308,
																		"name": "amountOut",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3254,
																		"src": "83394:9:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3309,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "toInt256",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2817,
																	"src": "83394:18:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_int256_$bound_to$_t_uint256_$",
																		"typeString": "function (uint256) pure returns (int256)"
																	}
																},
																"id": 3310,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "83394:20:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 3314,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3312,
																	"name": "sqrtPriceLimitX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3258,
																	"src": "83433:17:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 3313,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "83454:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "83433:22:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseExpression": {
																"id": 3326,
																"name": "sqrtPriceLimitX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3258,
																"src": "83575:17:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"id": 3327,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "Conditional",
															"src": "83433:159:0",
															"trueExpression": {
																"components": [
																	{
																		"condition": {
																			"id": 3315,
																			"name": "zeroForOne",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3291,
																			"src": "83480:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			"id": 3323,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 3320,
																					"name": "TickMath",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2749,
																					"src": "83523:8:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_TickMath_$2749_$",
																						"typeString": "type(library TickMath)"
																					}
																				},
																				"id": 3321,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "MAX_SQRT_RATIO",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 2235,
																				"src": "83523:23:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 3322,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "83549:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "83523:27:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		"id": 3324,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "83480:70:0",
																		"trueExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			"id": 3319,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 3316,
																					"name": "TickMath",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2749,
																					"src": "83493:8:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_TickMath_$2749_$",
																						"typeString": "type(library TickMath)"
																					}
																				},
																				"id": 3317,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "MIN_SQRT_RATIO",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 2231,
																				"src": "83493:23:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 3318,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "83519:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "83493:27:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	}
																],
																"id": 3325,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "83479:72:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														{
															"arguments": [
																{
																	"id": 3330,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3260,
																	"src": "83622:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_SwapCallbackData_$2894_memory_ptr",
																		"typeString": "struct SwapRouter.SwapCallbackData memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_struct$_SwapCallbackData_$2894_memory_ptr",
																		"typeString": "struct SwapRouter.SwapCallbackData memory"
																	}
																],
																"expression": {
																	"id": 3328,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "83611:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 3329,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "83611:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 3331,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "83611:16:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 3301,
																	"name": "tokenIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3282,
																	"src": "83289:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 3302,
																	"name": "tokenOut",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3280,
																	"src": "83298:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 3303,
																	"name": "fee",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3284,
																	"src": "83308:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint24",
																		"typeString": "uint24"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint24",
																		"typeString": "uint24"
																	}
																],
																"id": 3300,
																"name": "getPool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2889,
																"src": "83281:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$_t_uint24_$returns$_t_contract$_IUniswapV3Pool_$2156_$",
																	"typeString": "function (address,address,uint24) view returns (contract IUniswapV3Pool)"
																}
															},
															"id": 3304,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "83281:31:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IUniswapV3Pool_$2156",
																"typeString": "contract IUniswapV3Pool"
															}
														},
														"id": 3305,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "swap",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1946,
														"src": "83281:36:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_bool_$_t_int256_$_t_uint160_$_t_bytes_memory_ptr_$returns$_t_int256_$_t_int256_$",
															"typeString": "function (address,bool,int256,uint160,bytes memory) external returns (int256,int256)"
														}
													},
													"id": 3332,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "83281:361:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$",
														"typeString": "tuple(int256,int256)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "83223:419:0"
											},
											{
												"assignments": [
													3335
												],
												"declarations": [
													{
														"constant": false,
														"id": 3335,
														"mutability": "mutable",
														"name": "amountOutReceived",
														"nodeType": "VariableDeclaration",
														"scope": 3374,
														"src": "83655:25:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3334,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "83655:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3336,
												"nodeType": "VariableDeclarationStatement",
												"src": "83655:25:0"
											},
											{
												"expression": {
													"id": 3362,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"components": [
															{
																"id": 3337,
																"name": "amountIn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3263,
																"src": "83692:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 3338,
																"name": "amountOutReceived",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3335,
																"src": "83702:17:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 3339,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "TupleExpression",
														"src": "83691:29:0",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
															"typeString": "tuple(uint256,uint256)"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"condition": {
															"id": 3340,
															"name": "zeroForOne",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3291,
															"src": "83723:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseExpression": {
															"components": [
																{
																	"arguments": [
																		{
																			"id": 3353,
																			"name": "amount1Delta",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3299,
																			"src": "83821:12:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		],
																		"id": 3352,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "83813:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 3351,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "83813:7:0",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 3354,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "83813:21:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 3358,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "-",
																			"prefix": true,
																			"src": "83844:13:0",
																			"subExpression": {
																				"id": 3357,
																				"name": "amount0Delta",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3297,
																				"src": "83845:12:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		],
																		"id": 3356,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "83836:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 3355,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "83836:7:0",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 3359,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "83836:22:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 3360,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "83812:47:0",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
																"typeString": "tuple(uint256,uint256)"
															}
														},
														"id": 3361,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "Conditional",
														"src": "83723:136:0",
														"trueExpression": {
															"components": [
																{
																	"arguments": [
																		{
																			"id": 3343,
																			"name": "amount0Delta",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3297,
																			"src": "83758:12:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		],
																		"id": 3342,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "83750:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 3341,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "83750:7:0",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 3344,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "83750:21:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 3348,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "-",
																			"prefix": true,
																			"src": "83781:13:0",
																			"subExpression": {
																				"id": 3347,
																				"name": "amount1Delta",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3299,
																				"src": "83782:12:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		],
																		"id": 3346,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "83773:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 3345,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "83773:7:0",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 3349,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "83773:22:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 3350,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "83749:47:0",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
																"typeString": "tuple(uint256,uint256)"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
															"typeString": "tuple(uint256,uint256)"
														}
													},
													"src": "83691:168:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3363,
												"nodeType": "ExpressionStatement",
												"src": "83691:168:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													},
													"id": 3366,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3364,
														"name": "sqrtPriceLimitX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3258,
														"src": "84034:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 3365,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "84055:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "84034:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3373,
												"nodeType": "IfStatement",
												"src": "84030:67:0",
												"trueBody": {
													"expression": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3370,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3368,
																	"name": "amountOutReceived",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3335,
																	"src": "84066:17:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"id": 3369,
																	"name": "amountOut",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3254,
																	"src": "84087:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "84066:30:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															],
															"id": 3367,
															"name": "require",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																4294967278,
																4294967278
															],
															"referencedDeclaration": 4294967278,
															"src": "84058:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
																"typeString": "function (bool) pure"
															}
														},
														"id": 3371,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "84058:39:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 3372,
													"nodeType": "ExpressionStatement",
													"src": "84058:39:0"
												}
											}
										]
									},
									"documentation": {
										"id": 3252,
										"nodeType": "StructuredDocumentation",
										"src": "82690:44:0",
										"text": "@dev Performs a single exact output swap"
									},
									"id": 3375,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "exactOutputInternal",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3261,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3254,
												"mutability": "mutable",
												"name": "amountOut",
												"nodeType": "VariableDeclaration",
												"scope": 3375,
												"src": "82779:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3253,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "82779:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3256,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 3375,
												"src": "82807:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3255,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "82807:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3258,
												"mutability": "mutable",
												"name": "sqrtPriceLimitX96",
												"nodeType": "VariableDeclaration",
												"scope": 3375,
												"src": "82835:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 3257,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "82835:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3260,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 3375,
												"src": "82871:28:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_SwapCallbackData_$2894_memory_ptr",
													"typeString": "struct SwapRouter.SwapCallbackData"
												},
												"typeName": {
													"id": 3259,
													"name": "SwapCallbackData",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2894,
													"src": "82871:16:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_SwapCallbackData_$2894_storage_ptr",
														"typeString": "struct SwapRouter.SwapCallbackData"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "82768:138:0"
									},
									"returnParameters": {
										"id": 3264,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3263,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 3375,
												"src": "82924:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3262,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "82924:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "82923:18:0"
									},
									"scope": 3470,
									"src": "82740:1365:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"baseFunctions": [
										1707
									],
									"body": {
										"id": 3424,
										"nodeType": "Block",
										"src": "84348:548:0",
										"statements": [
											{
												"expression": {
													"id": 3410,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3388,
														"name": "amountIn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3386,
														"src": "84416:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"expression": {
																	"id": 3390,
																	"name": "params",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3378,
																	"src": "84461:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ExactOutputSingleParams_$1699_calldata_ptr",
																		"typeString": "struct ISwapRouter.ExactOutputSingleParams calldata"
																	}
																},
																"id": 3391,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "amountOut",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1694,
																"src": "84461:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"expression": {
																	"id": 3392,
																	"name": "params",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3378,
																	"src": "84492:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ExactOutputSingleParams_$1699_calldata_ptr",
																		"typeString": "struct ISwapRouter.ExactOutputSingleParams calldata"
																	}
																},
																"id": 3393,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "recipient",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1690,
																"src": "84492:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"expression": {
																	"id": 3394,
																	"name": "params",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3378,
																	"src": "84523:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ExactOutputSingleParams_$1699_calldata_ptr",
																		"typeString": "struct ISwapRouter.ExactOutputSingleParams calldata"
																	}
																},
																"id": 3395,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sqrtPriceLimitX96",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1698,
																"src": "84523:24:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 3399,
																					"name": "params",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3378,
																					"src": "84603:6:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_ExactOutputSingleParams_$1699_calldata_ptr",
																						"typeString": "struct ISwapRouter.ExactOutputSingleParams calldata"
																					}
																				},
																				"id": 3400,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "tokenOut",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1686,
																				"src": "84603:15:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"expression": {
																					"id": 3401,
																					"name": "params",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3378,
																					"src": "84620:6:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_ExactOutputSingleParams_$1699_calldata_ptr",
																						"typeString": "struct ISwapRouter.ExactOutputSingleParams calldata"
																					}
																				},
																				"id": 3402,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "fee",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1688,
																				"src": "84620:10:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint24",
																					"typeString": "uint24"
																				}
																			},
																			{
																				"expression": {
																					"id": 3403,
																					"name": "params",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3378,
																					"src": "84632:6:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_ExactOutputSingleParams_$1699_calldata_ptr",
																						"typeString": "struct ISwapRouter.ExactOutputSingleParams calldata"
																					}
																				},
																				"id": 3404,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "tokenIn",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1684,
																				"src": "84632:14:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint24",
																					"typeString": "uint24"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"expression": {
																				"id": 3397,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "84586:3:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 3398,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "encodePacked",
																			"nodeType": "MemberAccess",
																			"src": "84586:16:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function () pure returns (bytes memory)"
																			}
																		},
																		"id": 3405,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "84586:61:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"expression": {
																			"id": 3406,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "84656:3:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 3407,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "84656:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	],
																	"id": 3396,
																	"name": "SwapCallbackData",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2894,
																	"src": "84562:16:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_struct$_SwapCallbackData_$2894_storage_ptr_$",
																		"typeString": "type(struct SwapRouter.SwapCallbackData storage pointer)"
																	}
																},
																"id": 3408,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "structConstructorCall",
																"lValueRequested": false,
																"names": [
																	"path",
																	"payer"
																],
																"nodeType": "FunctionCall",
																"src": "84562:106:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_SwapCallbackData_$2894_memory_ptr",
																	"typeString": "struct SwapRouter.SwapCallbackData memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																{
																	"typeIdentifier": "t_struct$_SwapCallbackData_$2894_memory_ptr",
																	"typeString": "struct SwapRouter.SwapCallbackData memory"
																}
															],
															"id": 3389,
															"name": "exactOutputInternal",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3375,
															"src": "84427:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_address_$_t_uint160_$_t_struct$_SwapCallbackData_$2894_memory_ptr_$returns$_t_uint256_$",
																"typeString": "function (uint256,address,uint160,struct SwapRouter.SwapCallbackData memory) returns (uint256)"
															}
														},
														"id": 3409,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "84427:252:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "84416:263:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 3411,
												"nodeType": "ExpressionStatement",
												"src": "84416:263:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3416,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3413,
																"name": "amountIn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3386,
																"src": "84700:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"expression": {
																	"id": 3414,
																	"name": "params",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3378,
																	"src": "84712:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ExactOutputSingleParams_$1699_calldata_ptr",
																		"typeString": "struct ISwapRouter.ExactOutputSingleParams calldata"
																	}
																},
																"id": 3415,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "amountInMaximum",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1696,
																"src": "84712:22:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "84700:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "546f6f206d75636820726571756573746564",
															"id": 3417,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "84736:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a5c1362ddf12293b907d8907d79f16e40792a7ddc4f09ee6d70cfec4ad443305",
																"typeString": "literal_string \"Too much requested\""
															},
															"value": "Too much requested"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a5c1362ddf12293b907d8907d79f16e40792a7ddc4f09ee6d70cfec4ad443305",
																"typeString": "literal_string \"Too much requested\""
															}
														],
														"id": 3412,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "84692:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3418,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "84692:65:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3419,
												"nodeType": "ExpressionStatement",
												"src": "84692:65:0"
											},
											{
												"expression": {
													"id": 3422,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3420,
														"name": "amountInCached",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2851,
														"src": "84847:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 3421,
														"name": "DEFAULT_AMOUNT_IN_CACHED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2847,
														"src": "84864:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "84847:41:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 3423,
												"nodeType": "ExpressionStatement",
												"src": "84847:41:0"
											}
										]
									},
									"documentation": {
										"id": 3376,
										"nodeType": "StructuredDocumentation",
										"src": "84113:27:0",
										"text": "@inheritdoc ISwapRouter"
									},
									"functionSelector": "db3e2198",
									"id": 3425,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"expression": {
														"id": 3382,
														"name": "params",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3378,
														"src": "84290:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ExactOutputSingleParams_$1699_calldata_ptr",
															"typeString": "struct ISwapRouter.ExactOutputSingleParams calldata"
														}
													},
													"id": 3383,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "deadline",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1692,
													"src": "84290:15:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											],
											"id": 3384,
											"modifierName": {
												"id": 3381,
												"name": "checkDeadline",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 1198,
												"src": "84276:13:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$_t_uint256_$",
													"typeString": "modifier (uint256)"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "84276:30:0"
										}
									],
									"name": "exactOutputSingle",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 3380,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "84258:8:0"
									},
									"parameters": {
										"id": 3379,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3378,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 3425,
												"src": "84173:39:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExactOutputSingleParams_$1699_calldata_ptr",
													"typeString": "struct ISwapRouter.ExactOutputSingleParams"
												},
												"typeName": {
													"id": 3377,
													"name": "ExactOutputSingleParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1699,
													"src": "84173:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactOutputSingleParams_$1699_storage_ptr",
														"typeString": "struct ISwapRouter.ExactOutputSingleParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "84172:41:0"
									},
									"returnParameters": {
										"id": 3387,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3386,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 3425,
												"src": "84325:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3385,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "84325:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "84324:18:0"
									},
									"scope": 3470,
									"src": "84146:750:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										1726
									],
									"body": {
										"id": 3468,
										"nodeType": "Block",
										"src": "85127:585:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 3439,
																"name": "params",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3428,
																"src": "85393:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_ExactOutputParams_$1718_calldata_ptr",
																	"typeString": "struct ISwapRouter.ExactOutputParams calldata"
																}
															},
															"id": 3440,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "amountOut",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1715,
															"src": "85393:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 3441,
																"name": "params",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3428,
																"src": "85424:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_ExactOutputParams_$1718_calldata_ptr",
																	"typeString": "struct ISwapRouter.ExactOutputParams calldata"
																}
															},
															"id": 3442,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "recipient",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1711,
															"src": "85424:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"hexValue": "30",
															"id": 3443,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "85455:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 3445,
																		"name": "params",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3428,
																		"src": "85495:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_ExactOutputParams_$1718_calldata_ptr",
																			"typeString": "struct ISwapRouter.ExactOutputParams calldata"
																		}
																	},
																	"id": 3446,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "path",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1709,
																	"src": "85495:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_calldata_ptr",
																		"typeString": "bytes calldata"
																	}
																},
																{
																	"expression": {
																		"id": 3447,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "85515:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 3448,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "85515:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes_calldata_ptr",
																		"typeString": "bytes calldata"
																	},
																	{
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																],
																"id": 3444,
																"name": "SwapCallbackData",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2894,
																"src": "85471:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_struct$_SwapCallbackData_$2894_storage_ptr_$",
																	"typeString": "type(struct SwapRouter.SwapCallbackData storage pointer)"
																}
															},
															"id": 3449,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "structConstructorCall",
															"lValueRequested": false,
															"names": [
																"path",
																"payer"
															],
															"nodeType": "FunctionCall",
															"src": "85471:56:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_SwapCallbackData_$2894_memory_ptr",
																"typeString": "struct SwapRouter.SwapCallbackData memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_struct$_SwapCallbackData_$2894_memory_ptr",
																"typeString": "struct SwapRouter.SwapCallbackData memory"
															}
														],
														"id": 3438,
														"name": "exactOutputInternal",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3375,
														"src": "85359:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_address_$_t_uint160_$_t_struct$_SwapCallbackData_$2894_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (uint256,address,uint160,struct SwapRouter.SwapCallbackData memory) returns (uint256)"
														}
													},
													"id": 3450,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "85359:179:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 3451,
												"nodeType": "ExpressionStatement",
												"src": "85359:179:0"
											},
											{
												"expression": {
													"id": 3454,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3452,
														"name": "amountIn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3436,
														"src": "85551:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 3453,
														"name": "amountInCached",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2851,
														"src": "85562:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "85551:25:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 3455,
												"nodeType": "ExpressionStatement",
												"src": "85551:25:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3460,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3457,
																"name": "amountIn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3436,
																"src": "85595:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"expression": {
																	"id": 3458,
																	"name": "params",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3428,
																	"src": "85607:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ExactOutputParams_$1718_calldata_ptr",
																		"typeString": "struct ISwapRouter.ExactOutputParams calldata"
																	}
																},
																"id": 3459,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "amountInMaximum",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1717,
																"src": "85607:22:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "85595:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "546f6f206d75636820726571756573746564",
															"id": 3461,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "85631:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a5c1362ddf12293b907d8907d79f16e40792a7ddc4f09ee6d70cfec4ad443305",
																"typeString": "literal_string \"Too much requested\""
															},
															"value": "Too much requested"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a5c1362ddf12293b907d8907d79f16e40792a7ddc4f09ee6d70cfec4ad443305",
																"typeString": "literal_string \"Too much requested\""
															}
														],
														"id": 3456,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "85587:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3462,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "85587:65:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3463,
												"nodeType": "ExpressionStatement",
												"src": "85587:65:0"
											},
											{
												"expression": {
													"id": 3466,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3464,
														"name": "amountInCached",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2851,
														"src": "85663:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 3465,
														"name": "DEFAULT_AMOUNT_IN_CACHED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2847,
														"src": "85680:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "85663:41:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 3467,
												"nodeType": "ExpressionStatement",
												"src": "85663:41:0"
											}
										]
									},
									"documentation": {
										"id": 3426,
										"nodeType": "StructuredDocumentation",
										"src": "84904:27:0",
										"text": "@inheritdoc ISwapRouter"
									},
									"functionSelector": "f28c0498",
									"id": 3469,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"expression": {
														"id": 3432,
														"name": "params",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3428,
														"src": "85069:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ExactOutputParams_$1718_calldata_ptr",
															"typeString": "struct ISwapRouter.ExactOutputParams calldata"
														}
													},
													"id": 3433,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "deadline",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1713,
													"src": "85069:15:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											],
											"id": 3434,
											"modifierName": {
												"id": 3431,
												"name": "checkDeadline",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 1198,
												"src": "85055:13:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$_t_uint256_$",
													"typeString": "modifier (uint256)"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "85055:30:0"
										}
									],
									"name": "exactOutput",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 3430,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "85037:8:0"
									},
									"parameters": {
										"id": 3429,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3428,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 3469,
												"src": "84958:33:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExactOutputParams_$1718_calldata_ptr",
													"typeString": "struct ISwapRouter.ExactOutputParams"
												},
												"typeName": {
													"id": 3427,
													"name": "ExactOutputParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1718,
													"src": "84958:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactOutputParams_$1718_storage_ptr",
														"typeString": "struct ISwapRouter.ExactOutputParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "84957:35:0"
									},
									"returnParameters": {
										"id": 3437,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3436,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 3469,
												"src": "85104:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3435,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "85104:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "85103:18:0"
									},
									"scope": 3470,
									"src": "84937:775:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 3471,
							"src": "77153:8562:0"
						}
					],
					"src": "96:85621:0"
				},
				"id": 0
			}
		}
	}
}