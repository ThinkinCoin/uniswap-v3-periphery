{
	"id": "4de17ea1c5ab8454df05f95dd1b1501c",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.7.6",
	"solcLongVersion": "0.7.6+commit.7338295f",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/V3Migrator.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity =0.7.6;\r\npragma abicoder v2;\r\n\r\nimport '@thinkincoin-libs/uniswap-v3-core/contracts/libraries/LowGasSafeMath.sol';\r\nimport '@thinkincoin-libs/uniswap-v2-core/contracts/interfaces/IUniswapV2Pair.sol';\r\n\r\nimport './interfaces/INonfungiblePositionManager.sol';\r\n\r\nimport './libraries/TransferHelper.sol';\r\n\r\nimport './interfaces/IV3Migrator.sol';\r\nimport './base/PeripheryImmutableState.sol';\r\nimport './base/Multicall.sol';\r\nimport './base/SelfPermit.sol';\r\nimport './interfaces/external/IWETH9.sol';\r\nimport './base/PoolInitializer.sol';\r\n\r\n/// @title Uniswap V3 Migrator\r\ncontract V3Migrator is IV3Migrator, PeripheryImmutableState, PoolInitializer, Multicall, SelfPermit {\r\n    using LowGasSafeMath for uint256;\r\n\r\n    address public immutable nonfungiblePositionManager;\r\n\r\n    constructor(\r\n        address _factory,\r\n        address _WETH9,\r\n        address _nonfungiblePositionManager\r\n    ) PeripheryImmutableState(_factory, _WETH9) {\r\n        nonfungiblePositionManager = _nonfungiblePositionManager;\r\n    }\r\n\r\n    receive() external payable {\r\n        require(msg.sender == WETH9, 'Not WETH9');\r\n    }\r\n\r\n    function migrate(MigrateParams calldata params) external override {\r\n        require(params.percentageToMigrate > 0, 'Percentage too small');\r\n        require(params.percentageToMigrate <= 100, 'Percentage too large');\r\n\r\n        // burn v2 liquidity to this address\r\n        IUniswapV2Pair(params.pair).transferFrom(msg.sender, params.pair, params.liquidityToMigrate);\r\n        (uint256 amount0V2, uint256 amount1V2) = IUniswapV2Pair(params.pair).burn(address(this));\r\n\r\n        // calculate the amounts to migrate to v3\r\n        uint256 amount0V2ToMigrate = amount0V2.mul(params.percentageToMigrate) / 100;\r\n        uint256 amount1V2ToMigrate = amount1V2.mul(params.percentageToMigrate) / 100;\r\n\r\n        // approve the position manager up to the maximum token amounts\r\n        TransferHelper.safeApprove(params.token0, nonfungiblePositionManager, amount0V2ToMigrate);\r\n        TransferHelper.safeApprove(params.token1, nonfungiblePositionManager, amount1V2ToMigrate);\r\n\r\n        // mint v3 position\r\n        (, , uint256 amount0V3, uint256 amount1V3) =\r\n            INonfungiblePositionManager(nonfungiblePositionManager).mint(\r\n                INonfungiblePositionManager.MintParams({\r\n                    token0: params.token0,\r\n                    token1: params.token1,\r\n                    fee: params.fee,\r\n                    tickLower: params.tickLower,\r\n                    tickUpper: params.tickUpper,\r\n                    amount0Desired: amount0V2ToMigrate,\r\n                    amount1Desired: amount1V2ToMigrate,\r\n                    amount0Min: params.amount0Min,\r\n                    amount1Min: params.amount1Min,\r\n                    recipient: params.recipient,\r\n                    deadline: params.deadline\r\n                })\r\n            );\r\n\r\n        // if necessary, clear allowance and refund dust\r\n        if (amount0V3 < amount0V2) {\r\n            if (amount0V3 < amount0V2ToMigrate) {\r\n                TransferHelper.safeApprove(params.token0, nonfungiblePositionManager, 0);\r\n            }\r\n\r\n            uint256 refund0 = amount0V2 - amount0V3;\r\n            if (params.refundAsETH && params.token0 == WETH9) {\r\n                IWETH9(WETH9).withdraw(refund0);\r\n                TransferHelper.safeTransferETH(msg.sender, refund0);\r\n            } else {\r\n                TransferHelper.safeTransfer(params.token0, msg.sender, refund0);\r\n            }\r\n        }\r\n        if (amount1V3 < amount1V2) {\r\n            if (amount1V3 < amount1V2ToMigrate) {\r\n                TransferHelper.safeApprove(params.token1, nonfungiblePositionManager, 0);\r\n            }\r\n\r\n            uint256 refund1 = amount1V2 - amount1V3;\r\n            if (params.refundAsETH && params.token1 == WETH9) {\r\n                IWETH9(WETH9).withdraw(refund1);\r\n                TransferHelper.safeTransferETH(msg.sender, refund1);\r\n            } else {\r\n                TransferHelper.safeTransfer(params.token1, msg.sender, refund1);\r\n            }\r\n        }\r\n    }\r\n}\r\n"
			},
			"contracts/base/PoolInitializer.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity =0.7.6;\r\n\r\nimport '@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/IUniswapV3Factory.sol';\r\nimport '@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/IUniswapV3Pool.sol';\r\n\r\nimport './PeripheryImmutableState.sol';\r\nimport '../interfaces/IPoolInitializer.sol';\r\n\r\n/// @title Creates and initializes V3 Pools\r\nabstract contract PoolInitializer is IPoolInitializer, PeripheryImmutableState {\r\n    /// @inheritdoc IPoolInitializer\r\n    function createAndInitializePoolIfNecessary(\r\n        address token0,\r\n        address token1,\r\n        uint24 fee,\r\n        uint160 sqrtPriceX96\r\n    ) external payable override returns (address pool) {\r\n        require(token0 < token1);\r\n        pool = IUniswapV3Factory(factory).getPool(token0, token1, fee);\r\n\r\n        if (pool == address(0)) {\r\n            pool = IUniswapV3Factory(factory).createPool(token0, token1, fee);\r\n            IUniswapV3Pool(pool).initialize(sqrtPriceX96);\r\n        } else {\r\n            (uint160 sqrtPriceX96Existing, , , , , , ) = IUniswapV3Pool(pool).slot0();\r\n            if (sqrtPriceX96Existing == 0) {\r\n                IUniswapV3Pool(pool).initialize(sqrtPriceX96);\r\n            }\r\n        }\r\n    }\r\n}\r\n"
			},
			"contracts/interfaces/external/IWETH9.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity =0.7.6;\r\n\r\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\r\n\r\n/// @title Interface for WETH9\r\ninterface IWETH9 is IERC20 {\r\n    /// @notice Deposit ether to get wrapped ether\r\n    function deposit() external payable;\r\n\r\n    /// @notice Withdraw wrapped ether to get ether\r\n    function withdraw(uint256) external;\r\n}\r\n"
			},
			"contracts/base/SelfPermit.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\r\nimport '@openzeppelin/contracts/drafts/IERC20Permit.sol';\r\n\r\nimport '../interfaces/ISelfPermit.sol';\r\nimport '../interfaces/external/IERC20PermitAllowed.sol';\r\n\r\n/// @title Self Permit\r\n/// @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\r\n/// @dev These functions are expected to be embedded in multicalls to allow EOAs to approve a contract and call a function\r\n/// that requires an approval in a single transaction.\r\nabstract contract SelfPermit is ISelfPermit {\r\n    /// @inheritdoc ISelfPermit\r\n    function selfPermit(\r\n        address token,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public payable override {\r\n        IERC20Permit(token).permit(msg.sender, address(this), value, deadline, v, r, s);\r\n    }\r\n\r\n    /// @inheritdoc ISelfPermit\r\n    function selfPermitIfNecessary(\r\n        address token,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external payable override {\r\n        if (IERC20(token).allowance(msg.sender, address(this)) < value) selfPermit(token, value, deadline, v, r, s);\r\n    }\r\n\r\n    /// @inheritdoc ISelfPermit\r\n    function selfPermitAllowed(\r\n        address token,\r\n        uint256 nonce,\r\n        uint256 expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public payable override {\r\n        IERC20PermitAllowed(token).permit(msg.sender, address(this), nonce, expiry, true, v, r, s);\r\n    }\r\n\r\n    /// @inheritdoc ISelfPermit\r\n    function selfPermitAllowedIfNecessary(\r\n        address token,\r\n        uint256 nonce,\r\n        uint256 expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external payable override {\r\n        if (IERC20(token).allowance(msg.sender, address(this)) < type(uint256).max)\r\n            selfPermitAllowed(token, nonce, expiry, v, r, s);\r\n    }\r\n}\r\n"
			},
			"contracts/base/Multicall.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity =0.7.6;\r\npragma abicoder v2;\r\n\r\nimport '../interfaces/IMulticall.sol';\r\n\r\n/// @title Multicall\r\n/// @notice Enables calling multiple methods in a single call to the contract\r\nabstract contract Multicall is IMulticall {\r\n    /// @inheritdoc IMulticall\r\n    function multicall(bytes[] calldata data) public payable override returns (bytes[] memory results) {\r\n        results = new bytes[](data.length);\r\n        for (uint256 i = 0; i < data.length; i++) {\r\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\r\n\r\n            if (!success) {\r\n                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\r\n                if (result.length < 68) revert();\r\n                assembly {\r\n                    result := add(result, 0x04)\r\n                }\r\n                revert(abi.decode(result, (string)));\r\n            }\r\n\r\n            results[i] = result;\r\n        }\r\n    }\r\n}\r\n"
			},
			"contracts/base/PeripheryImmutableState.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity =0.7.6;\r\n\r\nimport '../interfaces/IPeripheryImmutableState.sol';\r\n\r\n/// @title Immutable state\r\n/// @notice Immutable state used by periphery contracts\r\nabstract contract PeripheryImmutableState is IPeripheryImmutableState {\r\n    /// @inheritdoc IPeripheryImmutableState\r\n    address public immutable override factory;\r\n    /// @inheritdoc IPeripheryImmutableState\r\n    address public immutable override WETH9;\r\n\r\n    constructor(address _factory, address _WETH9) {\r\n        factory = _factory;\r\n        WETH9 = _WETH9;\r\n    }\r\n}\r\n"
			},
			"contracts/interfaces/IV3Migrator.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.7.5;\r\npragma abicoder v2;\r\n\r\nimport './IMulticall.sol';\r\nimport './ISelfPermit.sol';\r\nimport './IPoolInitializer.sol';\r\n\r\n/// @title V3 Migrator\r\n/// @notice Enables migration of liqudity from Uniswap v2-compatible pairs into Uniswap v3 pools\r\ninterface IV3Migrator is IMulticall, ISelfPermit, IPoolInitializer {\r\n    struct MigrateParams {\r\n        address pair; // the Uniswap v2-compatible pair\r\n        uint256 liquidityToMigrate; // expected to be balanceOf(msg.sender)\r\n        uint8 percentageToMigrate; // represented as a numerator over 100\r\n        address token0;\r\n        address token1;\r\n        uint24 fee;\r\n        int24 tickLower;\r\n        int24 tickUpper;\r\n        uint256 amount0Min; // must be discounted by percentageToMigrate\r\n        uint256 amount1Min; // must be discounted by percentageToMigrate\r\n        address recipient;\r\n        uint256 deadline;\r\n        bool refundAsETH;\r\n    }\r\n\r\n    /// @notice Migrates liquidity to v3 by burning v2 liquidity and minting a new position for v3\r\n    /// @dev Slippage protection is enforced via `amount{0,1}Min`, which should be a discount of the expected values of\r\n    /// the maximum amount of v3 liquidity that the v2 liquidity can get. For the special case of migrating to an\r\n    /// out-of-range position, `amount{0,1}Min` may be set to 0, enforcing that the position remains out of range\r\n    /// @param params The params necessary to migrate v2 liquidity, encoded as `MigrateParams` in calldata\r\n    function migrate(MigrateParams calldata params) external;\r\n}\r\n"
			},
			"contracts/libraries/TransferHelper.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.6.0;\r\n\r\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\r\n\r\nlibrary TransferHelper {\r\n    /// @notice Transfers tokens from the targeted address to the given destination\r\n    /// @notice Errors with 'STF' if transfer fails\r\n    /// @param token The contract address of the token to be transferred\r\n    /// @param from The originating address from which the tokens will be transferred\r\n    /// @param to The destination address of the transfer\r\n    /// @param value The amount to be transferred\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\r\n    }\r\n\r\n    /// @notice Transfers tokens from msg.sender to a recipient\r\n    /// @dev Errors with ST if transfer fails\r\n    /// @param token The contract address of the token which will be transferred\r\n    /// @param to The recipient of the transfer\r\n    /// @param value The value of the transfer\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\r\n    }\r\n\r\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\r\n    /// @dev Errors with 'SA' if transfer fails\r\n    /// @param token The contract address of the token to be approved\r\n    /// @param to The target of the approval\r\n    /// @param value The amount of the given token the target will be allowed to spend\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\r\n    }\r\n\r\n    /// @notice Transfers ETH to the recipient address\r\n    /// @dev Fails with `STE`\r\n    /// @param to The destination of the transfer\r\n    /// @param value The value to be transferred\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, 'STE');\r\n    }\r\n}\r\n"
			},
			"contracts/interfaces/INonfungiblePositionManager.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.7.5;\r\npragma abicoder v2;\r\n\r\nimport '@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol';\r\nimport '@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol';\r\n\r\nimport './IPoolInitializer.sol';\r\nimport './IERC721Permit.sol';\r\nimport './IPeripheryPayments.sol';\r\nimport './IPeripheryImmutableState.sol';\r\nimport '../libraries/PoolAddress.sol';\r\n\r\n/// @title Non-fungible token for positions\r\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\r\n/// and authorized.\r\ninterface INonfungiblePositionManager is\r\n    IPoolInitializer,\r\n    IPeripheryPayments,\r\n    IPeripheryImmutableState,\r\n    IERC721Metadata,\r\n    IERC721Enumerable,\r\n    IERC721Permit\r\n{\r\n    /// @notice Emitted when liquidity is increased for a position NFT\r\n    /// @dev Also emitted when a token is minted\r\n    /// @param tokenId The ID of the token for which liquidity was increased\r\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\r\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\r\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\r\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\r\n    /// @notice Emitted when liquidity is decreased for a position NFT\r\n    /// @param tokenId The ID of the token for which liquidity was decreased\r\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\r\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\r\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\r\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\r\n    /// @notice Emitted when tokens are collected for a position NFT\r\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\r\n    /// @param tokenId The ID of the token for which underlying tokens were collected\r\n    /// @param recipient The address of the account that received the collected tokens\r\n    /// @param amount0 The amount of token0 owed to the position that was collected\r\n    /// @param amount1 The amount of token1 owed to the position that was collected\r\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\r\n\r\n    /// @notice Returns the position information associated with a given token ID.\r\n    /// @dev Throws if the token ID is not valid.\r\n    /// @param tokenId The ID of the token that represents the position\r\n    /// @return nonce The nonce for permits\r\n    /// @return operator The address that is approved for spending\r\n    /// @return token0 The address of the token0 for a specific pool\r\n    /// @return token1 The address of the token1 for a specific pool\r\n    /// @return fee The fee associated with the pool\r\n    /// @return tickLower The lower end of the tick range for the position\r\n    /// @return tickUpper The higher end of the tick range for the position\r\n    /// @return liquidity The liquidity of the position\r\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\r\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\r\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\r\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\r\n    function positions(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (\r\n            uint96 nonce,\r\n            address operator,\r\n            address token0,\r\n            address token1,\r\n            uint24 fee,\r\n            int24 tickLower,\r\n            int24 tickUpper,\r\n            uint128 liquidity,\r\n            uint256 feeGrowthInside0LastX128,\r\n            uint256 feeGrowthInside1LastX128,\r\n            uint128 tokensOwed0,\r\n            uint128 tokensOwed1\r\n        );\r\n\r\n    struct MintParams {\r\n        address token0;\r\n        address token1;\r\n        uint24 fee;\r\n        int24 tickLower;\r\n        int24 tickUpper;\r\n        uint256 amount0Desired;\r\n        uint256 amount1Desired;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n        address recipient;\r\n        uint256 deadline;\r\n    }\r\n\r\n    /// @notice Creates a new position wrapped in a NFT\r\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\r\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\r\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\r\n    /// @return tokenId The ID of the token that represents the minted position\r\n    /// @return liquidity The amount of liquidity for this position\r\n    /// @return amount0 The amount of token0\r\n    /// @return amount1 The amount of token1\r\n    function mint(MintParams calldata params)\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 tokenId,\r\n            uint128 liquidity,\r\n            uint256 amount0,\r\n            uint256 amount1\r\n        );\r\n\r\n    struct IncreaseLiquidityParams {\r\n        uint256 tokenId;\r\n        uint256 amount0Desired;\r\n        uint256 amount1Desired;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n        uint256 deadline;\r\n    }\r\n\r\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\r\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\r\n    /// amount0Desired The desired amount of token0 to be spent,\r\n    /// amount1Desired The desired amount of token1 to be spent,\r\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\r\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\r\n    /// deadline The time by which the transaction must be included to effect the change\r\n    /// @return liquidity The new liquidity amount as a result of the increase\r\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\r\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\r\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\r\n        external\r\n        payable\r\n        returns (\r\n            uint128 liquidity,\r\n            uint256 amount0,\r\n            uint256 amount1\r\n        );\r\n\r\n    struct DecreaseLiquidityParams {\r\n        uint256 tokenId;\r\n        uint128 liquidity;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n        uint256 deadline;\r\n    }\r\n\r\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\r\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\r\n    /// amount The amount by which liquidity will be decreased,\r\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\r\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\r\n    /// deadline The time by which the transaction must be included to effect the change\r\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\r\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\r\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\r\n        external\r\n        payable\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    struct CollectParams {\r\n        uint256 tokenId;\r\n        address recipient;\r\n        uint128 amount0Max;\r\n        uint128 amount1Max;\r\n    }\r\n\r\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\r\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\r\n    /// recipient The account that should receive the tokens,\r\n    /// amount0Max The maximum amount of token0 to collect,\r\n    /// amount1Max The maximum amount of token1 to collect\r\n    /// @return amount0 The amount of fees collected in token0\r\n    /// @return amount1 The amount of fees collected in token1\r\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\r\n\r\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\r\n    /// must be collected first.\r\n    /// @param tokenId The ID of the token that is being burned\r\n    function burn(uint256 tokenId) external payable;\r\n}\r\n"
			},
			"@thinkincoin-libs/uniswap-v2-core/contracts/interfaces/IUniswapV2Pair.sol": {
				"content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/LowGasSafeMath.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.0;\n\n/// @title Optimized overflow and underflow safe math operations\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\nlibrary LowGasSafeMath {\n    /// @notice Returns x + y, reverts if sum overflows uint256\n    /// @param x The augend\n    /// @param y The addend\n    /// @return z The sum of x and y\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x);\n    }\n\n    /// @notice Returns x - y, reverts if underflows\n    /// @param x The minuend\n    /// @param y The subtrahend\n    /// @return z The difference of x and y\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x);\n    }\n\n    /// @notice Returns x * y, reverts if overflows\n    /// @param x The multiplicand\n    /// @param y The multiplier\n    /// @return z The product of x and y\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(x == 0 || (z = x * y) / x == y);\n    }\n\n    /// @notice Returns x + y, reverts if overflows or underflows\n    /// @param x The augend\n    /// @param y The addend\n    /// @return z The sum of x and y\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\n        require((z = x + y) >= x == (y >= 0));\n    }\n\n    /// @notice Returns x - y, reverts if overflows or underflows\n    /// @param x The minuend\n    /// @param y The subtrahend\n    /// @return z The difference of x and y\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\n        require((z = x - y) <= x == (y >= 0));\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
			},
			"contracts/interfaces/IPoolInitializer.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.7.5;\r\npragma abicoder v2;\r\n\r\n/// @title Creates and initializes V3 Pools\r\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\r\n/// require the pool to exist.\r\ninterface IPoolInitializer {\r\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\r\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\r\n    /// @param token0 The contract address of token0 of the pool\r\n    /// @param token1 The contract address of token1 of the pool\r\n    /// @param fee The fee amount of the v3 pool for the specified token pair\r\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\r\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\r\n    function createAndInitializePoolIfNecessary(\r\n        address token0,\r\n        address token1,\r\n        uint24 fee,\r\n        uint160 sqrtPriceX96\r\n    ) external payable returns (address pool);\r\n}\r\n"
			},
			"contracts/interfaces/ISelfPermit.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.7.5;\r\n\r\n/// @title Self Permit\r\n/// @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\r\ninterface ISelfPermit {\r\n    /// @notice Permits this contract to spend a given token from `msg.sender`\r\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\r\n    /// @param token The address of the token spent\r\n    /// @param value The amount that can be spent of token\r\n    /// @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\r\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\r\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\r\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\r\n    function selfPermit(\r\n        address token,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external payable;\r\n\r\n    /// @notice Permits this contract to spend a given token from `msg.sender`\r\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\r\n    /// Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit\r\n    /// @param token The address of the token spent\r\n    /// @param value The amount that can be spent of token\r\n    /// @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\r\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\r\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\r\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\r\n    function selfPermitIfNecessary(\r\n        address token,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external payable;\r\n\r\n    /// @notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\r\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this)\r\n    /// @param token The address of the token spent\r\n    /// @param nonce The current nonce of the owner\r\n    /// @param expiry The timestamp at which the permit is no longer valid\r\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\r\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\r\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\r\n    function selfPermitAllowed(\r\n        address token,\r\n        uint256 nonce,\r\n        uint256 expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external payable;\r\n\r\n    /// @notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\r\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this)\r\n    /// Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.\r\n    /// @param token The address of the token spent\r\n    /// @param nonce The current nonce of the owner\r\n    /// @param expiry The timestamp at which the permit is no longer valid\r\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\r\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\r\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\r\n    function selfPermitAllowedIfNecessary(\r\n        address token,\r\n        uint256 nonce,\r\n        uint256 expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external payable;\r\n}\r\n"
			},
			"contracts/interfaces/IMulticall.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.7.5;\r\npragma abicoder v2;\r\n\r\n/// @title Multicall interface\r\n/// @notice Enables calling multiple methods in a single call to the contract\r\ninterface IMulticall {\r\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\r\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\r\n    /// @param data The encoded function data for each of the calls to make to this contract\r\n    /// @return results The results from each of the calls passed in via data\r\n    function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\r\n}\r\n"
			},
			"contracts/libraries/PoolAddress.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\r\nlibrary PoolAddress {\r\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\r\n\r\n    /// @notice The identifying key of the pool\r\n    struct PoolKey {\r\n        address token0;\r\n        address token1;\r\n        uint24 fee;\r\n    }\r\n\r\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\r\n    /// @param tokenA The first token of a pool, unsorted\r\n    /// @param tokenB The second token of a pool, unsorted\r\n    /// @param fee The fee level of the pool\r\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\r\n    function getPoolKey(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint24 fee\r\n    ) internal pure returns (PoolKey memory) {\r\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\r\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\r\n    }\r\n\r\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\r\n    /// @param factory The Uniswap V3 factory contract address\r\n    /// @param key The PoolKey\r\n    /// @return pool The contract address of the V3 pool\r\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\r\n        require(key.token0 < key.token1);\r\n        pool = address(\r\n            uint256(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        hex'ff',\r\n                        factory,\r\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\r\n                        POOL_INIT_CODE_HASH\r\n                    )\r\n                )\r\n            )\r\n        );\r\n    }\r\n}\r\n"
			},
			"contracts/interfaces/IPeripheryImmutableState.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Immutable state\r\n/// @notice Functions that return immutable state of the router\r\ninterface IPeripheryImmutableState {\r\n    /// @return Returns the address of the Uniswap V3 factory\r\n    function factory() external view returns (address);\r\n\r\n    /// @return Returns the address of WETH9\r\n    function WETH9() external view returns (address);\r\n}\r\n"
			},
			"contracts/interfaces/IPeripheryPayments.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.7.5;\r\n\r\n/// @title Periphery Payments\r\n/// @notice Functions to ease deposits and withdrawals of ETH\r\ninterface IPeripheryPayments {\r\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\r\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\r\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\r\n    /// @param recipient The address receiving ETH\r\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\r\n\r\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\r\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\r\n    /// that use ether for the input amount\r\n    function refundETH() external payable;\r\n\r\n    /// @notice Transfers the full amount of a token held by this contract to recipient\r\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\r\n    /// @param token The contract address of the token which will be transferred to `recipient`\r\n    /// @param amountMinimum The minimum amount of token required for a transfer\r\n    /// @param recipient The destination address of the token\r\n    function sweepToken(\r\n        address token,\r\n        uint256 amountMinimum,\r\n        address recipient\r\n    ) external payable;\r\n}\r\n"
			},
			"contracts/interfaces/IERC721Permit.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.7.5;\r\n\r\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\r\n\r\n/// @title ERC721 with permit\r\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\r\ninterface IERC721Permit is IERC721 {\r\n    /// @notice The permit typehash used in the permit signature\r\n    /// @return The typehash for the permit\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    /// @notice The domain separator used in the permit signature\r\n    /// @return The domain seperator used in encoding of permit signature\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    /// @notice Approve of a specific token ID for spending by spender via signature\r\n    /// @param spender The account that is being approved\r\n    /// @param tokenId The ID of the token that is being approved for spending\r\n    /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\r\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\r\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\r\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\r\n    function permit(\r\n        address spender,\r\n        uint256 tokenId,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external payable;\r\n}\r\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
			},
			"contracts/interfaces/external/IERC20PermitAllowed.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Interface for permit\r\n/// @notice Interface used by DAI/CHAI for permit\r\ninterface IERC20PermitAllowed {\r\n    /// @notice Approve the spender to spend some tokens via the holder signature\r\n    /// @dev This is the permit interface used by DAI and CHAI\r\n    /// @param holder The address of the token holder, the token owner\r\n    /// @param spender The address of the token spender\r\n    /// @param nonce The holder's nonce, increases at each call to permit\r\n    /// @param expiry The timestamp at which the permit is no longer valid\r\n    /// @param allowed Boolean that sets approval amount, true for type(uint256).max and false for 0\r\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\r\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\r\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\r\n    function permit(\r\n        address holder,\r\n        address spender,\r\n        uint256 nonce,\r\n        uint256 expiry,\r\n        bool allowed,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n}\r\n"
			},
			"@openzeppelin/contracts/drafts/IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\n     * given `owner`'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './pool/IUniswapV3PoolImmutables.sol';\nimport './pool/IUniswapV3PoolState.sol';\nimport './pool/IUniswapV3PoolDerivedState.sol';\nimport './pool/IUniswapV3PoolActions.sol';\nimport './pool/IUniswapV3PoolOwnerActions.sol';\nimport './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolEvents\n{\n\n}\n"
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/IUniswapV3Factory.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title The interface for the Uniswap V3 Factory\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\ninterface IUniswapV3Factory {\n    /// @notice Emitted when the owner of the factory is changed\n    /// @param oldOwner The owner before the owner was changed\n    /// @param newOwner The owner after the owner was changed\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n\n    /// @notice Emitted when a pool is created\n    /// @param token0 The first token of the pool by address sort order\n    /// @param token1 The second token of the pool by address sort order\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\n    /// @param pool The address of the created pool\n    event PoolCreated(\n        address indexed token0,\n        address indexed token1,\n        uint24 indexed fee,\n        int24 tickSpacing,\n        address pool\n    );\n\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\n    /// @param fee The enabled fee, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\n\n    /// @notice Returns the current owner of the factory\n    /// @dev Can be changed by the current owner via setOwner\n    /// @return The address of the factory owner\n    function owner() external view returns (address);\n\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n    /// @return The tick spacing\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\n\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The pool address\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external view returns (address pool);\n\n    /// @notice Creates a pool for the given two tokens and fee\n    /// @param tokenA One of the two tokens in the desired pool\n    /// @param tokenB The other of the two tokens in the desired pool\n    /// @param fee The desired fee for the pool\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n    /// are invalid.\n    /// @return pool The address of the newly created pool\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external returns (address pool);\n\n    /// @notice Updates the owner of the factory\n    /// @dev Must be called by the current owner\n    /// @param _owner The new owner of the factory\n    function setOwner(address _owner) external;\n\n    /// @notice Enables a fee amount with the given tickSpacing\n    /// @dev Fee amounts may never be removed once enabled\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"../../introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\n      *\n      * Requirements:\n      *\n      * - `from` cannot be the zero address.\n      * - `to` cannot be the zero address.\n      * - `tokenId` token must exist and be owned by `from`.\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n      *\n      * Emits a {Transfer} event.\n      */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n"
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
			},
			"@openzeppelin/contracts/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/drafts/IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over `owner`'s tokens, given `owner`'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over `owner`'s tokens, given `owner`'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/drafts/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/drafts/IERC20Permit.sol\":{\"keccak256\":\"0x1aab7754719ba764a8a05bec47e975001400f62986474945eb3dbee6d871259f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8c14e8ff1b384bdb68f262669364b1e79fbbd82b85938b7ce788a1395c40c6a2\",\"dweb:/ipfs/QmUKLXfSeEuRUXkeWLBhjHTKeSFoNBCS1RaMXv1AmHXYzn\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"keccak256\":\"0xd2f30fad5b24c4120f96dbac83aacdb7993ee610a9092bc23c44463da292bf8d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3d4e72409e392c7694b6405a0136cf073d8da016df33ef8f9ad195f724ebfea\",\"dweb:/ipfs/QmPGcddKq6CgsiKnxUUif2q76wRqP3dmdQ6bKuHCLmb8Wa\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2d0913dfbfce90d170df0d496ad7596c0778518e5fa7aba6c32562522546f66b\",\"dweb:/ipfs/QmR6B8nLj2PJf5e1JWD9Nk7ErkAwkqUwadCnvE82FJr1RU\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"IERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required interface of an ERC721 compliant contract.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"keccak256\":\"0xd2f30fad5b24c4120f96dbac83aacdb7993ee610a9092bc23c44463da292bf8d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3d4e72409e392c7694b6405a0136cf073d8da016df33ef8f9ad195f724ebfea\",\"dweb:/ipfs/QmPGcddKq6CgsiKnxUUif2q76wRqP3dmdQ6bKuHCLmb8Wa\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xb11597841d47f7a773bca63ca323c76f804cb5d944788de0327db5526319dc82\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://930d2da1934886a1098753be4173dd89c45ca0b306a1930accd37e00b1af4aaf\",\"dweb:/ipfs/QmVSXnvEV41d43k8cfpANHoTYMKgBDBL8iCbxkLfEtQZBe\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol": {
				"IERC721Enumerable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenOfOwnerByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721",
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"tokenByIndex(uint256)": {
								"details": "Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."
							},
							"tokenOfOwnerByIndex(address,uint256)": {
								"details": "Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
							},
							"totalSupply()": {
								"details": "Returns the total amount of tokens stored by the contract."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional enumeration extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"tokenByIndex(uint256)": "4f6ccce7",
							"tokenOfOwnerByIndex(address,uint256)": "2f745c59",
							"totalSupply()": "18160ddd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional enumeration extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":\"IERC721Enumerable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"keccak256\":\"0xd2f30fad5b24c4120f96dbac83aacdb7993ee610a9092bc23c44463da292bf8d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3d4e72409e392c7694b6405a0136cf073d8da016df33ef8f9ad195f724ebfea\",\"dweb:/ipfs/QmPGcddKq6CgsiKnxUUif2q76wRqP3dmdQ6bKuHCLmb8Wa\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xb11597841d47f7a773bca63ca323c76f804cb5d944788de0327db5526319dc82\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://930d2da1934886a1098753be4173dd89c45ca0b306a1930accd37e00b1af4aaf\",\"dweb:/ipfs/QmVSXnvEV41d43k8cfpANHoTYMKgBDBL8iCbxkLfEtQZBe\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"keccak256\":\"0x2789dfea2d73182683d637db5729201f6730dae6113030a94c828f8688f38f2f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://36374eaa68c0737bf7e1ae13d55327b4868fb0825e971ee729f4b8d355ededb4\",\"dweb:/ipfs/QmYN9yuzz4P5SumiT6rgYgTEY8MhnPQapMwx2LHxRKju7r\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol": {
				"IERC721Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721",
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional metadata extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"keccak256\":\"0xd2f30fad5b24c4120f96dbac83aacdb7993ee610a9092bc23c44463da292bf8d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3d4e72409e392c7694b6405a0136cf073d8da016df33ef8f9ad195f724ebfea\",\"dweb:/ipfs/QmPGcddKq6CgsiKnxUUif2q76wRqP3dmdQ6bKuHCLmb8Wa\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xb11597841d47f7a773bca63ca323c76f804cb5d944788de0327db5526319dc82\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://930d2da1934886a1098753be4173dd89c45ca0b306a1930accd37e00b1af4aaf\",\"dweb:/ipfs/QmVSXnvEV41d43k8cfpANHoTYMKgBDBL8iCbxkLfEtQZBe\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"keccak256\":\"0xc82c7d1d732081d9bd23f1555ebdf8f3bc1738bc42c2bfc4b9aa7564d9fa3573\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5cb07e4ff3352161510a0d1536fe93f3c62526358e073a8bab2a8abbb27d0da1\",\"dweb:/ipfs/QmX7K1JjnWKT1JzZT92Qx5zNJQYbssE533TLFHP88hj2fb\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@thinkincoin-libs/uniswap-v2-core/contracts/interfaces/IUniswapV2Pair.sol": {
				"IUniswapV2Pair": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "Burn",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Mint",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0In",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1In",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0Out",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1Out",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "Swap",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint112",
									"name": "reserve0",
									"type": "uint112"
								},
								{
									"indexed": false,
									"internalType": "uint112",
									"name": "reserve1",
									"type": "uint112"
								}
							],
							"name": "Sync",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "MINIMUM_LIQUIDITY",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "PERMIT_TYPEHASH",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "burn",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getReserves",
							"outputs": [
								{
									"internalType": "uint112",
									"name": "reserve0",
									"type": "uint112"
								},
								{
									"internalType": "uint112",
									"name": "reserve1",
									"type": "uint112"
								},
								{
									"internalType": "uint32",
									"name": "blockTimestampLast",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "kLast",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "liquidity",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "price0CumulativeLast",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "price1CumulativeLast",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "skim",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount0Out",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1Out",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "swap",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "sync",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token0",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token1",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"MINIMUM_LIQUIDITY()": "ba9a7a56",
							"PERMIT_TYPEHASH()": "30adf81f",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(address)": "89afcb44",
							"decimals()": "313ce567",
							"factory()": "c45a0155",
							"getReserves()": "0902f1ac",
							"initialize(address,address)": "485cc955",
							"kLast()": "7464fc3d",
							"mint(address)": "6a627842",
							"name()": "06fdde03",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
							"price0CumulativeLast()": "5909c0d5",
							"price1CumulativeLast()": "5a3d5493",
							"skim(address)": "bc25cf77",
							"swap(uint256,uint256,address,bytes)": "022c0d9f",
							"symbol()": "95d89b41",
							"sync()": "fff6cae9",
							"token0()": "0dfe1681",
							"token1()": "d21220a7",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"}],\"name\":\"Sync\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_LIQUIDITY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestampLast\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price0CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@thinkincoin-libs/uniswap-v2-core/contracts/interfaces/IUniswapV2Pair.sol\":\"IUniswapV2Pair\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@thinkincoin-libs/uniswap-v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\",\"urls\":[\"bzz-raw://85d5ad2dd23ee127f40907a12865a1e8cb5828814f6f2480285e1827dd72dedf\",\"dweb:/ipfs/QmayKQWJgWmr46DqWseADyUanmqxh662hPNdAkdHRjiQQH\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/IUniswapV3Factory.sol": {
				"IUniswapV3Factory": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								}
							],
							"name": "FeeAmountEnabled",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "oldOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnerChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"name": "PoolCreated",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenB",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								}
							],
							"name": "createPool",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								}
							],
							"name": "enableFeeAmount",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								}
							],
							"name": "feeAmountTickSpacing",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenB",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								}
							],
							"name": "getPool",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_owner",
									"type": "address"
								}
							],
							"name": "setOwner",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"FeeAmountEnabled(uint24,int24)": {
								"params": {
									"fee": "The enabled fee, denominated in hundredths of a bip",
									"tickSpacing": "The minimum number of ticks between initialized ticks for pools created with the given fee"
								}
							},
							"OwnerChanged(address,address)": {
								"params": {
									"newOwner": "The owner after the owner was changed",
									"oldOwner": "The owner before the owner was changed"
								}
							},
							"PoolCreated(address,address,uint24,int24,address)": {
								"params": {
									"fee": "The fee collected upon every swap in the pool, denominated in hundredths of a bip",
									"pool": "The address of the created pool",
									"tickSpacing": "The minimum number of ticks between initialized ticks",
									"token0": "The first token of the pool by address sort order",
									"token1": "The second token of the pool by address sort order"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"createPool(address,address,uint24)": {
								"details": "tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments are invalid.",
								"params": {
									"fee": "The desired fee for the pool",
									"tokenA": "One of the two tokens in the desired pool",
									"tokenB": "The other of the two tokens in the desired pool"
								},
								"returns": {
									"pool": "The address of the newly created pool"
								}
							},
							"enableFeeAmount(uint24,int24)": {
								"details": "Fee amounts may never be removed once enabled",
								"params": {
									"fee": "The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)",
									"tickSpacing": "The spacing between ticks to be enforced for all pools created with the given fee amount"
								}
							},
							"feeAmountTickSpacing(uint24)": {
								"details": "A fee amount can never be removed, so this value should be hard coded or cached in the calling context",
								"params": {
									"fee": "The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee"
								},
								"returns": {
									"_0": "The tick spacing"
								}
							},
							"getPool(address,address,uint24)": {
								"details": "tokenA and tokenB may be passed in either token0/token1 or token1/token0 order",
								"params": {
									"fee": "The fee collected upon every swap in the pool, denominated in hundredths of a bip",
									"tokenA": "The contract address of either token0 or token1",
									"tokenB": "The contract address of the other token"
								},
								"returns": {
									"pool": "The pool address"
								}
							},
							"owner()": {
								"details": "Can be changed by the current owner via setOwner",
								"returns": {
									"_0": "The address of the factory owner"
								}
							},
							"setOwner(address)": {
								"details": "Must be called by the current owner",
								"params": {
									"_owner": "The new owner of the factory"
								}
							}
						},
						"title": "The interface for the Uniswap V3 Factory",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"createPool(address,address,uint24)": "a1671295",
							"enableFeeAmount(uint24,int24)": "8a7c195f",
							"feeAmountTickSpacing(uint24)": "22afcccb",
							"getPool(address,address,uint24)": "1698ee82",
							"owner()": "8da5cb5b",
							"setOwner(address)": "13af4035"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"}],\"name\":\"FeeAmountEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"}],\"name\":\"enableFeeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"feeAmountTickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"FeeAmountEnabled(uint24,int24)\":{\"params\":{\"fee\":\"The enabled fee, denominated in hundredths of a bip\",\"tickSpacing\":\"The minimum number of ticks between initialized ticks for pools created with the given fee\"}},\"OwnerChanged(address,address)\":{\"params\":{\"newOwner\":\"The owner after the owner was changed\",\"oldOwner\":\"The owner before the owner was changed\"}},\"PoolCreated(address,address,uint24,int24,address)\":{\"params\":{\"fee\":\"The fee collected upon every swap in the pool, denominated in hundredths of a bip\",\"pool\":\"The address of the created pool\",\"tickSpacing\":\"The minimum number of ticks between initialized ticks\",\"token0\":\"The first token of the pool by address sort order\",\"token1\":\"The second token of the pool by address sort order\"}}},\"kind\":\"dev\",\"methods\":{\"createPool(address,address,uint24)\":{\"details\":\"tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments are invalid.\",\"params\":{\"fee\":\"The desired fee for the pool\",\"tokenA\":\"One of the two tokens in the desired pool\",\"tokenB\":\"The other of the two tokens in the desired pool\"},\"returns\":{\"pool\":\"The address of the newly created pool\"}},\"enableFeeAmount(uint24,int24)\":{\"details\":\"Fee amounts may never be removed once enabled\",\"params\":{\"fee\":\"The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\",\"tickSpacing\":\"The spacing between ticks to be enforced for all pools created with the given fee amount\"}},\"feeAmountTickSpacing(uint24)\":{\"details\":\"A fee amount can never be removed, so this value should be hard coded or cached in the calling context\",\"params\":{\"fee\":\"The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\"},\"returns\":{\"_0\":\"The tick spacing\"}},\"getPool(address,address,uint24)\":{\"details\":\"tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\",\"params\":{\"fee\":\"The fee collected upon every swap in the pool, denominated in hundredths of a bip\",\"tokenA\":\"The contract address of either token0 or token1\",\"tokenB\":\"The contract address of the other token\"},\"returns\":{\"pool\":\"The pool address\"}},\"owner()\":{\"details\":\"Can be changed by the current owner via setOwner\",\"returns\":{\"_0\":\"The address of the factory owner\"}},\"setOwner(address)\":{\"details\":\"Must be called by the current owner\",\"params\":{\"_owner\":\"The new owner of the factory\"}}},\"title\":\"The interface for the Uniswap V3 Factory\",\"version\":1},\"userdoc\":{\"events\":{\"FeeAmountEnabled(uint24,int24)\":{\"notice\":\"Emitted when a new fee amount is enabled for pool creation via the factory\"},\"OwnerChanged(address,address)\":{\"notice\":\"Emitted when the owner of the factory is changed\"},\"PoolCreated(address,address,uint24,int24,address)\":{\"notice\":\"Emitted when a pool is created\"}},\"kind\":\"user\",\"methods\":{\"createPool(address,address,uint24)\":{\"notice\":\"Creates a pool for the given two tokens and fee\"},\"enableFeeAmount(uint24,int24)\":{\"notice\":\"Enables a fee amount with the given tickSpacing\"},\"feeAmountTickSpacing(uint24)\":{\"notice\":\"Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\"},\"getPool(address,address,uint24)\":{\"notice\":\"Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\"},\"owner()\":{\"notice\":\"Returns the current owner of the factory\"},\"setOwner(address)\":{\"notice\":\"Updates the owner of the factory\"}},\"notice\":\"The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/IUniswapV3Factory.sol\":\"IUniswapV3Factory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/IUniswapV3Factory.sol\":{\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b9379ad954680c44a0bc523b314ae4c4da735f9fe1d02aa56ea5bdba6f1136f2\",\"dweb:/ipfs/QmZXdgQNXKAckrXWz9R3mc47F1fvDvr28a2ewJrwNAw71B\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"FeeAmountEnabled(uint24,int24)": {
								"notice": "Emitted when a new fee amount is enabled for pool creation via the factory"
							},
							"OwnerChanged(address,address)": {
								"notice": "Emitted when the owner of the factory is changed"
							},
							"PoolCreated(address,address,uint24,int24,address)": {
								"notice": "Emitted when a pool is created"
							}
						},
						"kind": "user",
						"methods": {
							"createPool(address,address,uint24)": {
								"notice": "Creates a pool for the given two tokens and fee"
							},
							"enableFeeAmount(uint24,int24)": {
								"notice": "Enables a fee amount with the given tickSpacing"
							},
							"feeAmountTickSpacing(uint24)": {
								"notice": "Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled"
							},
							"getPool(address,address,uint24)": {
								"notice": "Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist"
							},
							"owner()": {
								"notice": "Returns the current owner of the factory"
							},
							"setOwner(address)": {
								"notice": "Updates the owner of the factory"
							}
						},
						"notice": "The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees",
						"version": 1
					}
				}
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
				"IUniswapV3Pool": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Burn",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "Collect",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "CollectProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid1",
									"type": "uint256"
								}
							],
							"name": "Flash",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextOld",
									"type": "uint16"
								},
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextNew",
									"type": "uint16"
								}
							],
							"name": "IncreaseObservationCardinalityNext",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Initialize",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Mint",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0New",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1New",
									"type": "uint8"
								}
							],
							"name": "SetFeeProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Swap",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								}
							],
							"name": "burn",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collectProtocol",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "fee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal0X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal1X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "flash",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								}
							],
							"name": "increaseObservationCardinalityNext",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "liquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "maxLiquidityPerTick",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "observations",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "blockTimestamp",
									"type": "uint32"
								},
								{
									"internalType": "int56",
									"name": "tickCumulative",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityCumulativeX128",
									"type": "uint160"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint32[]",
									"name": "secondsAgos",
									"type": "uint32[]"
								}
							],
							"name": "observe",
							"outputs": [
								{
									"internalType": "int56[]",
									"name": "tickCumulatives",
									"type": "int56[]"
								},
								{
									"internalType": "uint160[]",
									"name": "secondsPerLiquidityCumulativeX128s",
									"type": "uint160[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "_liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside0LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside1LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "protocolFees",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "token0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "token1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint8",
									"name": "feeProtocol0",
									"type": "uint8"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol1",
									"type": "uint8"
								}
							],
							"name": "setFeeProtocol",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "slot0",
							"outputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								},
								{
									"internalType": "uint16",
									"name": "observationIndex",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinality",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol",
									"type": "uint8"
								},
								{
									"internalType": "bool",
									"name": "unlocked",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								}
							],
							"name": "snapshotCumulativesInside",
							"outputs": [
								{
									"internalType": "int56",
									"name": "tickCumulativeInside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityInsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsInside",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "zeroForOne",
									"type": "bool"
								},
								{
									"internalType": "int256",
									"name": "amountSpecified",
									"type": "int256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceLimitX96",
									"type": "uint160"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "swap",
							"outputs": [
								{
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int16",
									"name": "wordPosition",
									"type": "int16"
								}
							],
							"name": "tickBitmap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tickSpacing",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "ticks",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "liquidityGross",
									"type": "uint128"
								},
								{
									"internalType": "int128",
									"name": "liquidityNet",
									"type": "int128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside0X128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside1X128",
									"type": "uint256"
								},
								{
									"internalType": "int56",
									"name": "tickCumulativeOutside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityOutsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsOutside",
									"type": "uint32"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token0",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token1",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "The pool interface is broken up into many smaller pieces",
						"kind": "dev",
						"methods": {
							"burn(int24,int24,uint128)": {
								"details": "Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect",
								"params": {
									"amount": "How much liquidity to burn",
									"tickLower": "The lower tick of the position for which to burn liquidity",
									"tickUpper": "The upper tick of the position for which to burn liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 sent to the recipient",
									"amount1": "The amount of token1 sent to the recipient"
								}
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"details": "Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.",
								"params": {
									"amount0Requested": "How much token0 should be withdrawn from the fees owed",
									"amount1Requested": "How much token1 should be withdrawn from the fees owed",
									"recipient": "The address which should receive the fees collected",
									"tickLower": "The lower tick of the position for which to collect fees",
									"tickUpper": "The upper tick of the position for which to collect fees"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"collectProtocol(address,uint128,uint128)": {
								"params": {
									"amount0Requested": "The maximum amount of token0 to send, can be 0 to collect fees in only token1",
									"amount1Requested": "The maximum amount of token1 to send, can be 0 to collect fees in only token0",
									"recipient": "The address to which collected protocol fees should be sent"
								},
								"returns": {
									"amount0": "The protocol fee collected in token0",
									"amount1": "The protocol fee collected in token1"
								}
							},
							"factory()": {
								"returns": {
									"_0": "The contract address"
								}
							},
							"fee()": {
								"returns": {
									"_0": "The fee"
								}
							},
							"feeGrowthGlobal0X128()": {
								"details": "This value can overflow the uint256"
							},
							"feeGrowthGlobal1X128()": {
								"details": "This value can overflow the uint256"
							},
							"flash(address,uint256,uint256,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback",
								"params": {
									"amount0": "The amount of token0 to send",
									"amount1": "The amount of token1 to send",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address which will receive the token0 and token1 amounts"
								}
							},
							"increaseObservationCardinalityNext(uint16)": {
								"details": "This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.",
								"params": {
									"observationCardinalityNext": "The desired minimum number of observations for the pool to store"
								}
							},
							"initialize(uint160)": {
								"details": "Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value",
								"params": {
									"sqrtPriceX96": "the initial sqrt price of the pool as a Q64.96"
								}
							},
							"liquidity()": {
								"details": "This value has no relationship to the total liquidity across all ticks"
							},
							"maxLiquidityPerTick()": {
								"details": "This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool",
								"returns": {
									"_0": "The max amount of liquidity per tick"
								}
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.",
								"params": {
									"amount": "The amount of liquidity to mint",
									"data": "Any data that should be passed through to the callback",
									"recipient": "The address for which the liquidity will be created",
									"tickLower": "The lower tick of the position in which to add liquidity",
									"tickUpper": "The upper tick of the position in which to add liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback",
									"amount1": "The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
								}
							},
							"observations(uint256)": {
								"details": "You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.",
								"params": {
									"index": "The element of the observations array to fetch"
								},
								"returns": {
									"blockTimestamp": "The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use"
								}
							},
							"observe(uint32[])": {
								"details": "To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.",
								"params": {
									"secondsAgos": "From how long ago each cumulative tick and liquidity value should be returned"
								},
								"returns": {
									"secondsPerLiquidityCumulativeX128s": "Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp",
									"tickCumulatives": "Cumulative tick values as of each `secondsAgos` from the current block timestamp"
								}
							},
							"positions(bytes32)": {
								"params": {
									"key": "The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper"
								},
								"returns": {
									"_liquidity": "The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
								}
							},
							"protocolFees()": {
								"details": "Protocol fees will never exceed uint128 max in either token"
							},
							"setFeeProtocol(uint8,uint8)": {
								"params": {
									"feeProtocol0": "new protocol fee for token0 of the pool",
									"feeProtocol1": "new protocol fee for token1 of the pool"
								}
							},
							"slot0()": {
								"returns": {
									"sqrtPriceX96": "The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy"
								}
							},
							"snapshotCumulativesInside(int24,int24)": {
								"details": "Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.",
								"params": {
									"tickLower": "The lower tick of the range",
									"tickUpper": "The upper tick of the range"
								},
								"returns": {
									"secondsInside": "The snapshot of seconds per liquidity for the range",
									"secondsPerLiquidityInsideX128": "The snapshot of seconds per liquidity for the range",
									"tickCumulativeInside": "The snapshot of the tick accumulator for the range"
								}
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback",
								"params": {
									"amountSpecified": "The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address to receive the output of the swap",
									"sqrtPriceLimitX96": "The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap",
									"zeroForOne": "The direction of the swap, true for token0 to token1, false for token1 to token0"
								},
								"returns": {
									"amount0": "The delta of the balance of token0 of the pool, exact when negative, minimum when positive",
									"amount1": "The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
								}
							},
							"tickSpacing()": {
								"details": "Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.",
								"returns": {
									"_0": "The tick spacing"
								}
							},
							"ticks(int24)": {
								"params": {
									"tick": "The tick to look up"
								},
								"returns": {
									"liquidityGross": "the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position."
								}
							},
							"token0()": {
								"returns": {
									"_0": "The token contract address"
								}
							},
							"token1()": {
								"returns": {
									"_0": "The token contract address"
								}
							}
						},
						"title": "The interface for a Uniswap V3 Pool",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"burn(int24,int24,uint128)": "a34123a7",
							"collect(address,int24,int24,uint128,uint128)": "4f1eb3d8",
							"collectProtocol(address,uint128,uint128)": "85b66729",
							"factory()": "c45a0155",
							"fee()": "ddca3f43",
							"feeGrowthGlobal0X128()": "f3058399",
							"feeGrowthGlobal1X128()": "46141319",
							"flash(address,uint256,uint256,bytes)": "490e6cbc",
							"increaseObservationCardinalityNext(uint16)": "32148f67",
							"initialize(uint160)": "f637731d",
							"liquidity()": "1a686502",
							"maxLiquidityPerTick()": "70cf754a",
							"mint(address,int24,int24,uint128,bytes)": "3c8a7d8d",
							"observations(uint256)": "252c09d7",
							"observe(uint32[])": "883bdbfd",
							"positions(bytes32)": "514ea4bf",
							"protocolFees()": "1ad8b03b",
							"setFeeProtocol(uint8,uint8)": "8206a4d1",
							"slot0()": "3850c7bd",
							"snapshotCumulativesInside(int24,int24)": "a38807f2",
							"swap(address,bool,int256,uint160,bytes)": "128acb08",
							"tickBitmap(int16)": "5339c296",
							"tickSpacing()": "d0c93a7c",
							"ticks(int24)": "f30dba93",
							"token0()": "0dfe1681",
							"token1()": "d21220a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"CollectProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0New\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1New\",\"type\":\"uint8\"}],\"name\":\"SetFeeProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collectProtocol\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal0X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal1X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"token0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"token1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feeProtocol0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol1\",\"type\":\"uint8\"}],\"name\":\"setFeeProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The pool interface is broken up into many smaller pieces\",\"kind\":\"dev\",\"methods\":{\"burn(int24,int24,uint128)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"collect(address,int24,int24,uint128,uint128)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"collectProtocol(address,uint128,uint128)\":{\"params\":{\"amount0Requested\":\"The maximum amount of token0 to send, can be 0 to collect fees in only token1\",\"amount1Requested\":\"The maximum amount of token1 to send, can be 0 to collect fees in only token0\",\"recipient\":\"The address to which collected protocol fees should be sent\"},\"returns\":{\"amount0\":\"The protocol fee collected in token0\",\"amount1\":\"The protocol fee collected in token1\"}},\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"fee()\":{\"returns\":{\"_0\":\"The fee\"}},\"feeGrowthGlobal0X128()\":{\"details\":\"This value can overflow the uint256\"},\"feeGrowthGlobal1X128()\":{\"details\":\"This value can overflow the uint256\"},\"flash(address,uint256,uint256,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback\",\"params\":{\"amount0\":\"The amount of token0 to send\",\"amount1\":\"The amount of token1 to send\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address which will receive the token0 and token1 amounts\"}},\"increaseObservationCardinalityNext(uint16)\":{\"details\":\"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.\",\"params\":{\"observationCardinalityNext\":\"The desired minimum number of observations for the pool to store\"}},\"initialize(uint160)\":{\"details\":\"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\",\"params\":{\"sqrtPriceX96\":\"the initial sqrt price of the pool as a Q64.96\"}},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticks\"},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"mint(address,int24,int24,uint128,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.\",\"params\":{\"amount\":\"The amount of liquidity to mint\",\"data\":\"Any data that should be passed through to the callback\",\"recipient\":\"The address for which the liquidity will be created\",\"tickLower\":\"The lower tick of the position in which to add liquidity\",\"tickUpper\":\"The upper tick of the position in which to add liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"amount1\":\"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\"}},\"observations(uint256)\":{\"details\":\"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.\",\"params\":{\"index\":\"The element of the observations array to fetch\"},\"returns\":{\"blockTimestamp\":\"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use\"}},\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulativeX128s\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}},\"positions(bytes32)\":{\"params\":{\"key\":\"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\"},\"returns\":{\"_liquidity\":\"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\"}},\"protocolFees()\":{\"details\":\"Protocol fees will never exceed uint128 max in either token\"},\"setFeeProtocol(uint8,uint8)\":{\"params\":{\"feeProtocol0\":\"new protocol fee for token0 of the pool\",\"feeProtocol1\":\"new protocol fee for token1 of the pool\"}},\"slot0()\":{\"returns\":{\"sqrtPriceX96\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy\"}},\"snapshotCumulativesInside(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"secondsInside\":\"The snapshot of seconds per liquidity for the range\",\"secondsPerLiquidityInsideX128\":\"The snapshot of seconds per liquidity for the range\",\"tickCumulativeInside\":\"The snapshot of the tick accumulator for the range\"}},\"swap(address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\",\"params\":{\"amountSpecified\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address to receive the output of the swap\",\"sqrtPriceLimitX96\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"zeroForOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"ticks(int24)\":{\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"liquidityGross\":\"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"title\":\"The interface for a Uniswap V3 Pool\",\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when a position's liquidity is removed\"},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"notice\":\"Emitted when fees are collected by the owner of a position\"},\"CollectProtocol(address,address,uint128,uint128)\":{\"notice\":\"Emitted when the collected protocol fees are withdrawn by the factory owner\"},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted by the pool for any flashes of token0/token1\"},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"notice\":\"Emitted by the pool for increases to the number of observations that can be stored\"},\"Initialize(uint160,int24)\":{\"notice\":\"Emitted exactly once by a pool when #initialize is first called on the pool\"},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is minted for a given position\"},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"notice\":\"Emitted when the protocol fee is changed by the pool\"},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"notice\":\"Emitted by the pool for any swaps between token0 and token1\"}},\"kind\":\"user\",\"methods\":{\"burn(int24,int24,uint128)\":{\"notice\":\"Burn liquidity from the sender and account tokens owed for the liquidity to the position\"},\"collect(address,int24,int24,uint128,uint128)\":{\"notice\":\"Collects tokens owed to a position\"},\"collectProtocol(address,uint128,uint128)\":{\"notice\":\"Collect the protocol fee accrued to the pool\"},\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\"},\"fee()\":{\"notice\":\"The pool's fee in hundredths of a bip, i.e. 1e-6\"},\"feeGrowthGlobal0X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"feeGrowthGlobal1X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"},\"flash(address,uint256,uint256,bytes)\":{\"notice\":\"Receive token0 and/or token1 and pay it back, plus a fee, in the callback\"},\"increaseObservationCardinalityNext(uint16)\":{\"notice\":\"Increase the maximum number of price and liquidity observations that this pool will store\"},\"initialize(uint160)\":{\"notice\":\"Sets the initial price for the pool\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"mint(address,int24,int24,uint128,bytes)\":{\"notice\":\"Adds liquidity for the given recipient/tickLower/tickUpper position\"},\"observations(uint256)\":{\"notice\":\"Returns data about a specific observation index\"},\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"protocolFees()\":{\"notice\":\"The amounts of token0 and token1 that are owed to the protocol\"},\"setFeeProtocol(uint8,uint8)\":{\"notice\":\"Set the denominator of the protocol's % share of the fees\"},\"slot0()\":{\"notice\":\"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.\"},\"snapshotCumulativesInside(int24,int24)\":{\"notice\":\"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\"},\"swap(address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0\"},\"tickBitmap(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickBitmap for more information\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"notice\":\"A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform to the ERC20 specification\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/IUniswapV3Pool.sol\":\"IUniswapV3Pool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://1c42b9e6f5902ac38dd43e25750939baa7e0c1425dc75afd717c4412731065d5\",\"dweb:/ipfs/QmWaoacnzsucTvBME2o7YgZBZMhaHv7fkj83htHMVWJKWh\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5\",\"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7\",\"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03\",\"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047\",\"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735\",\"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f\",\"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when a position's liquidity is removed"
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"notice": "Emitted when fees are collected by the owner of a position"
							},
							"CollectProtocol(address,address,uint128,uint128)": {
								"notice": "Emitted when the collected protocol fees are withdrawn by the factory owner"
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"notice": "Emitted by the pool for any flashes of token0/token1"
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"notice": "Emitted by the pool for increases to the number of observations that can be stored"
							},
							"Initialize(uint160,int24)": {
								"notice": "Emitted exactly once by a pool when #initialize is first called on the pool"
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is minted for a given position"
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"notice": "Emitted when the protocol fee is changed by the pool"
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"notice": "Emitted by the pool for any swaps between token0 and token1"
							}
						},
						"kind": "user",
						"methods": {
							"burn(int24,int24,uint128)": {
								"notice": "Burn liquidity from the sender and account tokens owed for the liquidity to the position"
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"notice": "Collects tokens owed to a position"
							},
							"collectProtocol(address,uint128,uint128)": {
								"notice": "Collect the protocol fee accrued to the pool"
							},
							"factory()": {
								"notice": "The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface"
							},
							"fee()": {
								"notice": "The pool's fee in hundredths of a bip, i.e. 1e-6"
							},
							"feeGrowthGlobal0X128()": {
								"notice": "The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"
							},
							"feeGrowthGlobal1X128()": {
								"notice": "The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"
							},
							"flash(address,uint256,uint256,bytes)": {
								"notice": "Receive token0 and/or token1 and pay it back, plus a fee, in the callback"
							},
							"increaseObservationCardinalityNext(uint16)": {
								"notice": "Increase the maximum number of price and liquidity observations that this pool will store"
							},
							"initialize(uint160)": {
								"notice": "Sets the initial price for the pool"
							},
							"liquidity()": {
								"notice": "The currently in range liquidity available to the pool"
							},
							"maxLiquidityPerTick()": {
								"notice": "The maximum amount of position liquidity that can use any tick in the range"
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"notice": "Adds liquidity for the given recipient/tickLower/tickUpper position"
							},
							"observations(uint256)": {
								"notice": "Returns data about a specific observation index"
							},
							"observe(uint32[])": {
								"notice": "Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"
							},
							"positions(bytes32)": {
								"notice": "Returns the information about a position by the position's key"
							},
							"protocolFees()": {
								"notice": "The amounts of token0 and token1 that are owed to the protocol"
							},
							"setFeeProtocol(uint8,uint8)": {
								"notice": "Set the denominator of the protocol's % share of the fees"
							},
							"slot0()": {
								"notice": "The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally."
							},
							"snapshotCumulativesInside(int24,int24)": {
								"notice": "Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"notice": "Swap token0 for token1, or token1 for token0"
							},
							"tickBitmap(int16)": {
								"notice": "Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
							},
							"tickSpacing()": {
								"notice": "The pool tick spacing"
							},
							"ticks(int24)": {
								"notice": "Look up information about a specific tick in the pool"
							},
							"token0()": {
								"notice": "The first of the two tokens of the pool, sorted by address"
							},
							"token1()": {
								"notice": "The second of the two tokens of the pool, sorted by address"
							}
						},
						"notice": "A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform to the ERC20 specification",
						"version": 1
					}
				}
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
				"IUniswapV3PoolActions": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								}
							],
							"name": "burn",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "flash",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								}
							],
							"name": "increaseObservationCardinalityNext",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "zeroForOne",
									"type": "bool"
								},
								{
									"internalType": "int256",
									"name": "amountSpecified",
									"type": "int256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceLimitX96",
									"type": "uint160"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "swap",
							"outputs": [
								{
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"burn(int24,int24,uint128)": {
								"details": "Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect",
								"params": {
									"amount": "How much liquidity to burn",
									"tickLower": "The lower tick of the position for which to burn liquidity",
									"tickUpper": "The upper tick of the position for which to burn liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 sent to the recipient",
									"amount1": "The amount of token1 sent to the recipient"
								}
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"details": "Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.",
								"params": {
									"amount0Requested": "How much token0 should be withdrawn from the fees owed",
									"amount1Requested": "How much token1 should be withdrawn from the fees owed",
									"recipient": "The address which should receive the fees collected",
									"tickLower": "The lower tick of the position for which to collect fees",
									"tickUpper": "The upper tick of the position for which to collect fees"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"flash(address,uint256,uint256,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback",
								"params": {
									"amount0": "The amount of token0 to send",
									"amount1": "The amount of token1 to send",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address which will receive the token0 and token1 amounts"
								}
							},
							"increaseObservationCardinalityNext(uint16)": {
								"details": "This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.",
								"params": {
									"observationCardinalityNext": "The desired minimum number of observations for the pool to store"
								}
							},
							"initialize(uint160)": {
								"details": "Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value",
								"params": {
									"sqrtPriceX96": "the initial sqrt price of the pool as a Q64.96"
								}
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.",
								"params": {
									"amount": "The amount of liquidity to mint",
									"data": "Any data that should be passed through to the callback",
									"recipient": "The address for which the liquidity will be created",
									"tickLower": "The lower tick of the position in which to add liquidity",
									"tickUpper": "The upper tick of the position in which to add liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback",
									"amount1": "The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
								}
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback",
								"params": {
									"amountSpecified": "The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address to receive the output of the swap",
									"sqrtPriceLimitX96": "The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap",
									"zeroForOne": "The direction of the swap, true for token0 to token1, false for token1 to token0"
								},
								"returns": {
									"amount0": "The delta of the balance of token0 of the pool, exact when negative, minimum when positive",
									"amount1": "The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
								}
							}
						},
						"title": "Permissionless pool actions",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"burn(int24,int24,uint128)": "a34123a7",
							"collect(address,int24,int24,uint128,uint128)": "4f1eb3d8",
							"flash(address,uint256,uint256,bytes)": "490e6cbc",
							"increaseObservationCardinalityNext(uint16)": "32148f67",
							"initialize(uint160)": "f637731d",
							"mint(address,int24,int24,uint128,bytes)": "3c8a7d8d",
							"swap(address,bool,int256,uint160,bytes)": "128acb08"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(int24,int24,uint128)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"collect(address,int24,int24,uint128,uint128)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"flash(address,uint256,uint256,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback\",\"params\":{\"amount0\":\"The amount of token0 to send\",\"amount1\":\"The amount of token1 to send\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address which will receive the token0 and token1 amounts\"}},\"increaseObservationCardinalityNext(uint16)\":{\"details\":\"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.\",\"params\":{\"observationCardinalityNext\":\"The desired minimum number of observations for the pool to store\"}},\"initialize(uint160)\":{\"details\":\"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\",\"params\":{\"sqrtPriceX96\":\"the initial sqrt price of the pool as a Q64.96\"}},\"mint(address,int24,int24,uint128,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.\",\"params\":{\"amount\":\"The amount of liquidity to mint\",\"data\":\"Any data that should be passed through to the callback\",\"recipient\":\"The address for which the liquidity will be created\",\"tickLower\":\"The lower tick of the position in which to add liquidity\",\"tickUpper\":\"The upper tick of the position in which to add liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"amount1\":\"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\"}},\"swap(address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\",\"params\":{\"amountSpecified\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address to receive the output of the swap\",\"sqrtPriceLimitX96\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"zeroForOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}}},\"title\":\"Permissionless pool actions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(int24,int24,uint128)\":{\"notice\":\"Burn liquidity from the sender and account tokens owed for the liquidity to the position\"},\"collect(address,int24,int24,uint128,uint128)\":{\"notice\":\"Collects tokens owed to a position\"},\"flash(address,uint256,uint256,bytes)\":{\"notice\":\"Receive token0 and/or token1 and pay it back, plus a fee, in the callback\"},\"increaseObservationCardinalityNext(uint16)\":{\"notice\":\"Increase the maximum number of price and liquidity observations that this pool will store\"},\"initialize(uint160)\":{\"notice\":\"Sets the initial price for the pool\"},\"mint(address,int24,int24,uint128,bytes)\":{\"notice\":\"Adds liquidity for the given recipient/tickLower/tickUpper position\"},\"swap(address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0\"}},\"notice\":\"Contains pool methods that can be called by anyone\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":\"IUniswapV3PoolActions\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5\",\"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"burn(int24,int24,uint128)": {
								"notice": "Burn liquidity from the sender and account tokens owed for the liquidity to the position"
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"notice": "Collects tokens owed to a position"
							},
							"flash(address,uint256,uint256,bytes)": {
								"notice": "Receive token0 and/or token1 and pay it back, plus a fee, in the callback"
							},
							"increaseObservationCardinalityNext(uint16)": {
								"notice": "Increase the maximum number of price and liquidity observations that this pool will store"
							},
							"initialize(uint160)": {
								"notice": "Sets the initial price for the pool"
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"notice": "Adds liquidity for the given recipient/tickLower/tickUpper position"
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"notice": "Swap token0 for token1, or token1 for token0"
							}
						},
						"notice": "Contains pool methods that can be called by anyone",
						"version": 1
					}
				}
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
				"IUniswapV3PoolDerivedState": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint32[]",
									"name": "secondsAgos",
									"type": "uint32[]"
								}
							],
							"name": "observe",
							"outputs": [
								{
									"internalType": "int56[]",
									"name": "tickCumulatives",
									"type": "int56[]"
								},
								{
									"internalType": "uint160[]",
									"name": "secondsPerLiquidityCumulativeX128s",
									"type": "uint160[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								}
							],
							"name": "snapshotCumulativesInside",
							"outputs": [
								{
									"internalType": "int56",
									"name": "tickCumulativeInside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityInsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsInside",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"observe(uint32[])": {
								"details": "To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.",
								"params": {
									"secondsAgos": "From how long ago each cumulative tick and liquidity value should be returned"
								},
								"returns": {
									"secondsPerLiquidityCumulativeX128s": "Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp",
									"tickCumulatives": "Cumulative tick values as of each `secondsAgos` from the current block timestamp"
								}
							},
							"snapshotCumulativesInside(int24,int24)": {
								"details": "Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.",
								"params": {
									"tickLower": "The lower tick of the range",
									"tickUpper": "The upper tick of the range"
								},
								"returns": {
									"secondsInside": "The snapshot of seconds per liquidity for the range",
									"secondsPerLiquidityInsideX128": "The snapshot of seconds per liquidity for the range",
									"tickCumulativeInside": "The snapshot of the tick accumulator for the range"
								}
							}
						},
						"title": "Pool state that is not stored",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"observe(uint32[])": "883bdbfd",
							"snapshotCumulativesInside(int24,int24)": "a38807f2"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulativeX128s\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}},\"snapshotCumulativesInside(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"secondsInside\":\"The snapshot of seconds per liquidity for the range\",\"secondsPerLiquidityInsideX128\":\"The snapshot of seconds per liquidity for the range\",\"tickCumulativeInside\":\"The snapshot of the tick accumulator for the range\"}}},\"title\":\"Pool state that is not stored\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"snapshotCumulativesInside(int24,int24)\":{\"notice\":\"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\"}},\"notice\":\"Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":\"IUniswapV3PoolDerivedState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7\",\"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"observe(uint32[])": {
								"notice": "Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"
							},
							"snapshotCumulativesInside(int24,int24)": {
								"notice": "Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"
							}
						},
						"notice": "Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.",
						"version": 1
					}
				}
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
				"IUniswapV3PoolEvents": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Burn",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "Collect",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "CollectProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid1",
									"type": "uint256"
								}
							],
							"name": "Flash",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextOld",
									"type": "uint16"
								},
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextNew",
									"type": "uint16"
								}
							],
							"name": "IncreaseObservationCardinalityNext",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Initialize",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Mint",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0New",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1New",
									"type": "uint8"
								}
							],
							"name": "SetFeeProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Swap",
							"type": "event"
						}
					],
					"devdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"details": "Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect",
								"params": {
									"amount": "The amount of liquidity to remove",
									"amount0": "The amount of token0 withdrawn",
									"amount1": "The amount of token1 withdrawn",
									"owner": "The owner of the position for which liquidity is removed",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"details": "Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees",
								"params": {
									"amount0": "The amount of token0 fees collected",
									"amount1": "The amount of token1 fees collected",
									"owner": "The owner of the position for which fees are collected",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"CollectProtocol(address,address,uint128,uint128)": {
								"params": {
									"amount0": "The amount of token1 protocol fees that is withdrawn",
									"recipient": "The address that receives the collected protocol fees",
									"sender": "The address that collects the protocol fees"
								}
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"params": {
									"amount0": "The amount of token0 that was flashed",
									"amount1": "The amount of token1 that was flashed",
									"paid0": "The amount of token0 paid for the flash, which can exceed the amount0 plus the fee",
									"paid1": "The amount of token1 paid for the flash, which can exceed the amount1 plus the fee",
									"recipient": "The address that received the tokens from flash",
									"sender": "The address that initiated the swap call, and that received the callback"
								}
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"details": "observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.",
								"params": {
									"observationCardinalityNextNew": "The updated value of the next observation cardinality",
									"observationCardinalityNextOld": "The previous value of the next observation cardinality"
								}
							},
							"Initialize(uint160,int24)": {
								"details": "Mint/Burn/Swap cannot be emitted by the pool before Initialize",
								"params": {
									"sqrtPriceX96": "The initial sqrt price of the pool, as a Q64.96",
									"tick": "The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"
								}
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"params": {
									"amount": "The amount of liquidity minted to the position range",
									"amount0": "How much token0 was required for the minted liquidity",
									"amount1": "How much token1 was required for the minted liquidity",
									"owner": "The owner of the position and recipient of any minted liquidity",
									"sender": "The address that minted the liquidity",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"params": {
									"feeProtocol0New": "The updated value of the token0 protocol fee",
									"feeProtocol0Old": "The previous value of the token0 protocol fee",
									"feeProtocol1New": "The updated value of the token1 protocol fee",
									"feeProtocol1Old": "The previous value of the token1 protocol fee"
								}
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"params": {
									"amount0": "The delta of the token0 balance of the pool",
									"amount1": "The delta of the token1 balance of the pool",
									"liquidity": "The liquidity of the pool after the swap",
									"recipient": "The address that received the output of the swap",
									"sender": "The address that initiated the swap call, and that received the callback",
									"sqrtPriceX96": "The sqrt(price) of the pool after the swap, as a Q64.96",
									"tick": "The log base 1.0001 of price of the pool after the swap"
								}
							}
						},
						"kind": "dev",
						"methods": {},
						"title": "Events emitted by a pool",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"CollectProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0New\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1New\",\"type\":\"uint8\"}],\"name\":\"SetFeeProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"details\":\"Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\",\"params\":{\"amount\":\"The amount of liquidity to remove\",\"amount0\":\"The amount of token0 withdrawn\",\"amount1\":\"The amount of token1 withdrawn\",\"owner\":\"The owner of the position for which liquidity is removed\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"details\":\"Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\",\"params\":{\"amount0\":\"The amount of token0 fees collected\",\"amount1\":\"The amount of token1 fees collected\",\"owner\":\"The owner of the position for which fees are collected\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"CollectProtocol(address,address,uint128,uint128)\":{\"params\":{\"amount0\":\"The amount of token1 protocol fees that is withdrawn\",\"recipient\":\"The address that receives the collected protocol fees\",\"sender\":\"The address that collects the protocol fees\"}},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"amount0\":\"The amount of token0 that was flashed\",\"amount1\":\"The amount of token1 that was flashed\",\"paid0\":\"The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\",\"paid1\":\"The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\",\"recipient\":\"The address that received the tokens from flash\",\"sender\":\"The address that initiated the swap call, and that received the callback\"}},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"details\":\"observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.\",\"params\":{\"observationCardinalityNextNew\":\"The updated value of the next observation cardinality\",\"observationCardinalityNextOld\":\"The previous value of the next observation cardinality\"}},\"Initialize(uint160,int24)\":{\"details\":\"Mint/Burn/Swap cannot be emitted by the pool before Initialize\",\"params\":{\"sqrtPriceX96\":\"The initial sqrt price of the pool, as a Q64.96\",\"tick\":\"The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\"}},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of liquidity minted to the position range\",\"amount0\":\"How much token0 was required for the minted liquidity\",\"amount1\":\"How much token1 was required for the minted liquidity\",\"owner\":\"The owner of the position and recipient of any minted liquidity\",\"sender\":\"The address that minted the liquidity\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"params\":{\"feeProtocol0New\":\"The updated value of the token0 protocol fee\",\"feeProtocol0Old\":\"The previous value of the token0 protocol fee\",\"feeProtocol1New\":\"The updated value of the token1 protocol fee\",\"feeProtocol1Old\":\"The previous value of the token1 protocol fee\"}},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"params\":{\"amount0\":\"The delta of the token0 balance of the pool\",\"amount1\":\"The delta of the token1 balance of the pool\",\"liquidity\":\"The liquidity of the pool after the swap\",\"recipient\":\"The address that received the output of the swap\",\"sender\":\"The address that initiated the swap call, and that received the callback\",\"sqrtPriceX96\":\"The sqrt(price) of the pool after the swap, as a Q64.96\",\"tick\":\"The log base 1.0001 of price of the pool after the swap\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"Events emitted by a pool\",\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when a position's liquidity is removed\"},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"notice\":\"Emitted when fees are collected by the owner of a position\"},\"CollectProtocol(address,address,uint128,uint128)\":{\"notice\":\"Emitted when the collected protocol fees are withdrawn by the factory owner\"},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted by the pool for any flashes of token0/token1\"},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"notice\":\"Emitted by the pool for increases to the number of observations that can be stored\"},\"Initialize(uint160,int24)\":{\"notice\":\"Emitted exactly once by a pool when #initialize is first called on the pool\"},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is minted for a given position\"},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"notice\":\"Emitted when the protocol fee is changed by the pool\"},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"notice\":\"Emitted by the pool for any swaps between token0 and token1\"}},\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains all events emitted by the pool\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":\"IUniswapV3PoolEvents\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03\",\"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when a position's liquidity is removed"
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"notice": "Emitted when fees are collected by the owner of a position"
							},
							"CollectProtocol(address,address,uint128,uint128)": {
								"notice": "Emitted when the collected protocol fees are withdrawn by the factory owner"
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"notice": "Emitted by the pool for any flashes of token0/token1"
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"notice": "Emitted by the pool for increases to the number of observations that can be stored"
							},
							"Initialize(uint160,int24)": {
								"notice": "Emitted exactly once by a pool when #initialize is first called on the pool"
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is minted for a given position"
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"notice": "Emitted when the protocol fee is changed by the pool"
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"notice": "Emitted by the pool for any swaps between token0 and token1"
							}
						},
						"kind": "user",
						"methods": {},
						"notice": "Contains all events emitted by the pool",
						"version": 1
					}
				}
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
				"IUniswapV3PoolImmutables": {
					"abi": [
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "fee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "maxLiquidityPerTick",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tickSpacing",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token0",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token1",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"factory()": {
								"returns": {
									"_0": "The contract address"
								}
							},
							"fee()": {
								"returns": {
									"_0": "The fee"
								}
							},
							"maxLiquidityPerTick()": {
								"details": "This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool",
								"returns": {
									"_0": "The max amount of liquidity per tick"
								}
							},
							"tickSpacing()": {
								"details": "Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.",
								"returns": {
									"_0": "The tick spacing"
								}
							},
							"token0()": {
								"returns": {
									"_0": "The token contract address"
								}
							},
							"token1()": {
								"returns": {
									"_0": "The token contract address"
								}
							}
						},
						"title": "Pool state that never changes",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"factory()": "c45a0155",
							"fee()": "ddca3f43",
							"maxLiquidityPerTick()": "70cf754a",
							"tickSpacing()": "d0c93a7c",
							"token0()": "0dfe1681",
							"token1()": "d21220a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"fee()\":{\"returns\":{\"_0\":\"The fee\"}},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"title\":\"Pool state that never changes\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\"},\"fee()\":{\"notice\":\"The pool's fee in hundredths of a bip, i.e. 1e-6\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"notice\":\"These parameters are fixed for a pool forever, i.e., the methods will always return the same values\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":\"IUniswapV3PoolImmutables\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047\",\"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"factory()": {
								"notice": "The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface"
							},
							"fee()": {
								"notice": "The pool's fee in hundredths of a bip, i.e. 1e-6"
							},
							"maxLiquidityPerTick()": {
								"notice": "The maximum amount of position liquidity that can use any tick in the range"
							},
							"tickSpacing()": {
								"notice": "The pool tick spacing"
							},
							"token0()": {
								"notice": "The first of the two tokens of the pool, sorted by address"
							},
							"token1()": {
								"notice": "The second of the two tokens of the pool, sorted by address"
							}
						},
						"notice": "These parameters are fixed for a pool forever, i.e., the methods will always return the same values",
						"version": 1
					}
				}
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
				"IUniswapV3PoolOwnerActions": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collectProtocol",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint8",
									"name": "feeProtocol0",
									"type": "uint8"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol1",
									"type": "uint8"
								}
							],
							"name": "setFeeProtocol",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"collectProtocol(address,uint128,uint128)": {
								"params": {
									"amount0Requested": "The maximum amount of token0 to send, can be 0 to collect fees in only token1",
									"amount1Requested": "The maximum amount of token1 to send, can be 0 to collect fees in only token0",
									"recipient": "The address to which collected protocol fees should be sent"
								},
								"returns": {
									"amount0": "The protocol fee collected in token0",
									"amount1": "The protocol fee collected in token1"
								}
							},
							"setFeeProtocol(uint8,uint8)": {
								"params": {
									"feeProtocol0": "new protocol fee for token0 of the pool",
									"feeProtocol1": "new protocol fee for token1 of the pool"
								}
							}
						},
						"title": "Permissioned pool actions",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"collectProtocol(address,uint128,uint128)": "85b66729",
							"setFeeProtocol(uint8,uint8)": "8206a4d1"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collectProtocol\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feeProtocol0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol1\",\"type\":\"uint8\"}],\"name\":\"setFeeProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"collectProtocol(address,uint128,uint128)\":{\"params\":{\"amount0Requested\":\"The maximum amount of token0 to send, can be 0 to collect fees in only token1\",\"amount1Requested\":\"The maximum amount of token1 to send, can be 0 to collect fees in only token0\",\"recipient\":\"The address to which collected protocol fees should be sent\"},\"returns\":{\"amount0\":\"The protocol fee collected in token0\",\"amount1\":\"The protocol fee collected in token1\"}},\"setFeeProtocol(uint8,uint8)\":{\"params\":{\"feeProtocol0\":\"new protocol fee for token0 of the pool\",\"feeProtocol1\":\"new protocol fee for token1 of the pool\"}}},\"title\":\"Permissioned pool actions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"collectProtocol(address,uint128,uint128)\":{\"notice\":\"Collect the protocol fee accrued to the pool\"},\"setFeeProtocol(uint8,uint8)\":{\"notice\":\"Set the denominator of the protocol's % share of the fees\"}},\"notice\":\"Contains pool methods that may only be called by the factory owner\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":\"IUniswapV3PoolOwnerActions\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735\",\"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"collectProtocol(address,uint128,uint128)": {
								"notice": "Collect the protocol fee accrued to the pool"
							},
							"setFeeProtocol(uint8,uint8)": {
								"notice": "Set the denominator of the protocol's % share of the fees"
							}
						},
						"notice": "Contains pool methods that may only be called by the factory owner",
						"version": 1
					}
				}
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
				"IUniswapV3PoolState": {
					"abi": [
						{
							"inputs": [],
							"name": "feeGrowthGlobal0X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal1X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "liquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "observations",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "blockTimestamp",
									"type": "uint32"
								},
								{
									"internalType": "int56",
									"name": "tickCumulative",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityCumulativeX128",
									"type": "uint160"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "_liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside0LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside1LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "protocolFees",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "token0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "token1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "slot0",
							"outputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								},
								{
									"internalType": "uint16",
									"name": "observationIndex",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinality",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol",
									"type": "uint8"
								},
								{
									"internalType": "bool",
									"name": "unlocked",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int16",
									"name": "wordPosition",
									"type": "int16"
								}
							],
							"name": "tickBitmap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "ticks",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "liquidityGross",
									"type": "uint128"
								},
								{
									"internalType": "int128",
									"name": "liquidityNet",
									"type": "int128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside0X128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside1X128",
									"type": "uint256"
								},
								{
									"internalType": "int56",
									"name": "tickCumulativeOutside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityOutsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsOutside",
									"type": "uint32"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"feeGrowthGlobal0X128()": {
								"details": "This value can overflow the uint256"
							},
							"feeGrowthGlobal1X128()": {
								"details": "This value can overflow the uint256"
							},
							"liquidity()": {
								"details": "This value has no relationship to the total liquidity across all ticks"
							},
							"observations(uint256)": {
								"details": "You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.",
								"params": {
									"index": "The element of the observations array to fetch"
								},
								"returns": {
									"blockTimestamp": "The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use"
								}
							},
							"positions(bytes32)": {
								"params": {
									"key": "The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper"
								},
								"returns": {
									"_liquidity": "The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
								}
							},
							"protocolFees()": {
								"details": "Protocol fees will never exceed uint128 max in either token"
							},
							"slot0()": {
								"returns": {
									"sqrtPriceX96": "The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy"
								}
							},
							"ticks(int24)": {
								"params": {
									"tick": "The tick to look up"
								},
								"returns": {
									"liquidityGross": "the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position."
								}
							}
						},
						"title": "Pool state that can change",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"feeGrowthGlobal0X128()": "f3058399",
							"feeGrowthGlobal1X128()": "46141319",
							"liquidity()": "1a686502",
							"observations(uint256)": "252c09d7",
							"positions(bytes32)": "514ea4bf",
							"protocolFees()": "1ad8b03b",
							"slot0()": "3850c7bd",
							"tickBitmap(int16)": "5339c296",
							"ticks(int24)": "f30dba93"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"feeGrowthGlobal0X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal1X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"token0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"token1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"feeGrowthGlobal0X128()\":{\"details\":\"This value can overflow the uint256\"},\"feeGrowthGlobal1X128()\":{\"details\":\"This value can overflow the uint256\"},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticks\"},\"observations(uint256)\":{\"details\":\"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.\",\"params\":{\"index\":\"The element of the observations array to fetch\"},\"returns\":{\"blockTimestamp\":\"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use\"}},\"positions(bytes32)\":{\"params\":{\"key\":\"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\"},\"returns\":{\"_liquidity\":\"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\"}},\"protocolFees()\":{\"details\":\"Protocol fees will never exceed uint128 max in either token\"},\"slot0()\":{\"returns\":{\"sqrtPriceX96\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy\"}},\"ticks(int24)\":{\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"liquidityGross\":\"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\"}}},\"title\":\"Pool state that can change\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"feeGrowthGlobal0X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"feeGrowthGlobal1X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"observations(uint256)\":{\"notice\":\"Returns data about a specific observation index\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"protocolFees()\":{\"notice\":\"The amounts of token0 and token1 that are owed to the protocol\"},\"slot0()\":{\"notice\":\"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.\"},\"tickBitmap(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickBitmap for more information\"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"}},\"notice\":\"These methods compose the pool's state, and can change with any frequency including multiple times per transaction\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":\"IUniswapV3PoolState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f\",\"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"feeGrowthGlobal0X128()": {
								"notice": "The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"
							},
							"feeGrowthGlobal1X128()": {
								"notice": "The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"
							},
							"liquidity()": {
								"notice": "The currently in range liquidity available to the pool"
							},
							"observations(uint256)": {
								"notice": "Returns data about a specific observation index"
							},
							"positions(bytes32)": {
								"notice": "Returns the information about a position by the position's key"
							},
							"protocolFees()": {
								"notice": "The amounts of token0 and token1 that are owed to the protocol"
							},
							"slot0()": {
								"notice": "The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally."
							},
							"tickBitmap(int16)": {
								"notice": "Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
							},
							"ticks(int24)": {
								"notice": "Look up information about a specific tick in the pool"
							}
						},
						"notice": "These methods compose the pool's state, and can change with any frequency including multiple times per transaction",
						"version": 1
					}
				}
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/LowGasSafeMath.sol": {
				"LowGasSafeMath": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Optimized overflow and underflow safe math operations",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/LowGasSafeMath.sol\":249:1695  library LowGasSafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/LowGasSafeMath.sol\":249:1695  library LowGasSafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122091a1d3d8cf98d4661df3db6ed46ce35fba6243786bd138b8687b18a6f683182164736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122091a1d3d8cf98d4661df3db6ed46ce35fba6243786bd138b8687b18a6f683182164736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP2 LOG1 0xD3 0xD8 0xCF SWAP9 0xD4 PUSH7 0x1DF3DB6ED46CE3 0x5F 0xBA PUSH3 0x43786B 0xD1 CODESIZE 0xB8 PUSH9 0x7B18A6F68318216473 PUSH16 0x6C634300070600330000000000000000 ",
							"sourceMap": "249:1446:15:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122091a1d3d8cf98d4661df3db6ed46ce35fba6243786bd138b8687b18a6f683182164736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP2 LOG1 0xD3 0xD8 0xCF SWAP9 0xD4 PUSH7 0x1DF3DB6ED46CE3 0x5F 0xBA PUSH3 0x43786B 0xD1 CODESIZE 0xB8 PUSH9 0x7B18A6F68318216473 PUSH16 0x6C634300070600330000000000000000 ",
							"sourceMap": "249:1446:15:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"add(int256,int256)": "infinite",
								"add(uint256,uint256)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(int256,int256)": "infinite",
								"sub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 249,
									"end": 1695,
									"name": "PUSH #[$]",
									"source": 15,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "PUSH [$]",
									"source": 15,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "PUSH",
									"source": 15,
									"value": "B"
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "CODECOPY",
									"source": 15
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "DUP1",
									"source": 15
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "MLOAD",
									"source": 15
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "BYTE",
									"source": 15
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "PUSH",
									"source": 15,
									"value": "73"
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "EQ",
									"source": 15
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "PUSH [tag]",
									"source": 15,
									"value": "1"
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "JUMPI",
									"source": 15
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "INVALID",
									"source": 15
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "tag",
									"source": 15,
									"value": "1"
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "JUMPDEST",
									"source": 15
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "ADDRESS",
									"source": 15
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "PUSH",
									"source": 15,
									"value": "73"
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "MSTORE8",
									"source": 15
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 249,
									"end": 1695,
									"name": "RETURN",
									"source": 15
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122091a1d3d8cf98d4661df3db6ed46ce35fba6243786bd138b8687b18a6f683182164736f6c63430007060033",
									".code": [
										{
											"begin": 249,
											"end": 1695,
											"name": "PUSHDEPLOYADDRESS",
											"source": 15
										},
										{
											"begin": 249,
											"end": 1695,
											"name": "ADDRESS",
											"source": 15
										},
										{
											"begin": 249,
											"end": 1695,
											"name": "EQ",
											"source": 15
										},
										{
											"begin": 249,
											"end": 1695,
											"name": "PUSH",
											"source": 15,
											"value": "80"
										},
										{
											"begin": 249,
											"end": 1695,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 249,
											"end": 1695,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 249,
											"end": 1695,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 249,
											"end": 1695,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 249,
											"end": 1695,
											"name": "REVERT",
											"source": 15
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Optimized overflow and underflow safe math operations\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/LowGasSafeMath.sol\":\"LowGasSafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/LowGasSafeMath.sol\":{\"keccak256\":\"0x86715eb960f18e01ac94e3bba4614ed51a887fa3c5bd1c43bf80aa98e019cf2d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://bfc1d5d58e59015086b0e65a6c3a2ddad312e2350480510f6c0c8167f3d71a37\",\"dweb:/ipfs/QmQndULYjFsHKHjMAKLMfc12vWbVB5FawtioHtvwcWRJZp\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost",
						"version": 1
					}
				}
			},
			"contracts/V3Migrator.sol": {
				"V3Migrator": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_factory",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_WETH9",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_nonfungiblePositionManager",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "WETH9",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "createAndInitializePoolIfNecessary",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "pair",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "liquidityToMigrate",
											"type": "uint256"
										},
										{
											"internalType": "uint8",
											"name": "percentageToMigrate",
											"type": "uint8"
										},
										{
											"internalType": "address",
											"name": "token0",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "token1",
											"type": "address"
										},
										{
											"internalType": "uint24",
											"name": "fee",
											"type": "uint24"
										},
										{
											"internalType": "int24",
											"name": "tickLower",
											"type": "int24"
										},
										{
											"internalType": "int24",
											"name": "tickUpper",
											"type": "int24"
										},
										{
											"internalType": "uint256",
											"name": "amount0Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Min",
											"type": "uint256"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "bool",
											"name": "refundAsETH",
											"type": "bool"
										}
									],
									"internalType": "struct IV3Migrator.MigrateParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "migrate",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes[]",
									"name": "data",
									"type": "bytes[]"
								}
							],
							"name": "multicall",
							"outputs": [
								{
									"internalType": "bytes[]",
									"name": "results",
									"type": "bytes[]"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "nonfungiblePositionManager",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "nonce",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "expiry",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermitAllowed",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "nonce",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "expiry",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermitAllowedIfNecessary",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermitIfNecessary",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
								"details": "This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool",
								"params": {
									"fee": "The fee amount of the v3 pool for the specified token pair",
									"sqrtPriceX96": "The initial square root price of the pool as a Q64.96 value",
									"token0": "The contract address of token0 of the pool",
									"token1": "The contract address of token1 of the pool"
								},
								"returns": {
									"pool": "Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary"
								}
							},
							"migrate((address,uint256,uint8,address,address,uint24,int24,int24,uint256,uint256,address,uint256,bool))": {
								"details": "Slippage protection is enforced via `amount{0,1}Min`, which should be a discount of the expected values of the maximum amount of v3 liquidity that the v2 liquidity can get. For the special case of migrating to an out-of-range position, `amount{0,1}Min` may be set to 0, enforcing that the position remains out of range",
								"params": {
									"params": "The params necessary to migrate v2 liquidity, encoded as `MigrateParams` in calldata"
								}
							},
							"multicall(bytes[])": {
								"details": "The `msg.value` should not be trusted for any method callable from multicall.",
								"params": {
									"data": "The encoded function data for each of the calls to make to this contract"
								},
								"returns": {
									"results": "The results from each of the calls passed in via data"
								}
							},
							"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this).",
								"params": {
									"deadline": "A timestamp, the current blocktime must be less than or equal to this timestamp",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`",
									"value": "The amount that can be spent of token"
								}
							},
							"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this)",
								"params": {
									"expiry": "The timestamp at which the permit is no longer valid",
									"nonce": "The current nonce of the owner",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this) Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.",
								"params": {
									"expiry": "The timestamp at which the permit is no longer valid",
									"nonce": "The current nonce of the owner",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this). Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit",
								"params": {
									"deadline": "A timestamp, the current blocktime must be less than or equal to this timestamp",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`",
									"value": "The amount that can be spent of token"
								}
							}
						},
						"title": "Uniswap V3 Migrator",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/V3Migrator.sol\":600:4112  contract V3Migrator is IV3Migrator, PeripheryImmutableState, PoolInitializer, Multicall, SelfPermit {\r... */\n  mstore(0x40, 0xe0)\n    /* \"contracts/V3Migrator.sol\":808:1042  constructor(\r... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n  not(sub(shl(0x60, 0x01), 0x01))\n    /* \"contracts/base/PeripheryImmutableState.sol\":536:554  factory = _factory */\n  0x60\n  swap4\n  dup5\n  shl\n  dup2\n  and\n  0x80\n  mstore\n    /* \"contracts/base/PeripheryImmutableState.sol\":565:579  WETH9 = _WETH9 */\n  swap2\n  dup4\n  shl\n  dup3\n  and\n  0xa0\n  mstore\n    /* \"contracts/V3Migrator.sol\":978:1034  nonfungiblePositionManager = _nonfungiblePositionManager */\n  swap1\n  swap2\n  shl\n  and\n  0xc0\n  mstore\n    /* \"contracts/V3Migrator.sol\":600:4112  contract V3Migrator is IV3Migrator, PeripheryImmutableState, PoolInitializer, Multicall, SelfPermit {\r... */\n  jump(tag_9)\n    /* \"#utility.yul\":14:193   */\ntag_10:\n    /* \"#utility.yul\":95:108   */\n  dup1\n  mload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":137:168   */\n  dup2\n  and\n    /* \"#utility.yul\":127:169   */\n  dup2\n  eq\n    /* \"#utility.yul\":117:119   */\n  tag_12\n  jumpi\n    /* \"#utility.yul\":183:184   */\n  0x00\n    /* \"#utility.yul\":180:181   */\n  dup1\n    /* \"#utility.yul\":173:185   */\n  revert\n    /* \"#utility.yul\":117:119   */\ntag_12:\n    /* \"#utility.yul\":76:193   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":198:592   */\ntag_3:\n  0x00\n  dup1\n  0x00\n    /* \"#utility.yul\":355:357   */\n  0x60\n    /* \"#utility.yul\":343:352   */\n  dup5\n    /* \"#utility.yul\":334:341   */\n  dup7\n    /* \"#utility.yul\":330:353   */\n  sub\n    /* \"#utility.yul\":326:358   */\n  slt\n    /* \"#utility.yul\":323:325   */\n  iszero\n  tag_14\n  jumpi\n    /* \"#utility.yul\":376:382   */\n  dup3\n    /* \"#utility.yul\":368:374   */\n  dup4\n    /* \"#utility.yul\":361:383   */\n  revert\n    /* \"#utility.yul\":323:325   */\ntag_14:\n    /* \"#utility.yul\":404:446   */\n  tag_15\n    /* \"#utility.yul\":436:445   */\n  dup5\n    /* \"#utility.yul\":404:446   */\n  tag_10\n  jump\t// in\ntag_15:\n    /* \"#utility.yul\":394:446   */\n  swap3\n  pop\n    /* \"#utility.yul\":465:516   */\n  tag_16\n    /* \"#utility.yul\":512:514   */\n  0x20\n    /* \"#utility.yul\":501:510   */\n  dup6\n    /* \"#utility.yul\":497:515   */\n  add\n    /* \"#utility.yul\":465:516   */\n  tag_10\n  jump\t// in\ntag_16:\n    /* \"#utility.yul\":455:516   */\n  swap2\n  pop\n    /* \"#utility.yul\":535:586   */\n  tag_17\n    /* \"#utility.yul\":582:584   */\n  0x40\n    /* \"#utility.yul\":571:580   */\n  dup6\n    /* \"#utility.yul\":567:585   */\n  add\n    /* \"#utility.yul\":535:586   */\n  tag_10\n  jump\t// in\ntag_17:\n    /* \"#utility.yul\":525:586   */\n  swap1\n  pop\n    /* \"#utility.yul\":313:592   */\n  swap3\n  pop\n  swap3\n  pop\n  swap3\n  jump\t// out\ntag_9:\n    /* \"contracts/V3Migrator.sol\":600:4112  contract V3Migrator is IV3Migrator, PeripheryImmutableState, PoolInitializer, Multicall, SelfPermit {\r... */\n  shr(0x60, mload(0x80))\n  shr(0x60, mload(0xa0))\n  shr(0x60, mload(0xc0))\n  codecopy(0x00, dataOffset(sub_0), dataSize(sub_0))\n  assignImmutable(\"0x1ae990503def382b005be0ab67f63e79e5d8d76ebedbaef5e88f9b321d6d6a06\")\n  assignImmutable(\"0x894a18e75f0a8b978d87ca850b87ebdfb9565d22a7e423cfe82ac5eb107e798f\")\n  assignImmutable(\"0xa67d69bee0a3a38428b5acf8ede25efbe17bbd7b0989889fe30d9166014307b6\")\n  return(0x00, dataSize(sub_0))\nstop\n\nsub_0: assembly {\n        /* \"contracts/V3Migrator.sol\":600:4112  contract V3Migrator is IV3Migrator, PeripheryImmutableState, PoolInitializer, Multicall, SelfPermit {\r... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0xb44a2722\n      gt\n      tag_13\n      jumpi\n      dup1\n      0xb44a2722\n      eq\n      tag_8\n      jumpi\n      dup1\n      0xc2e3140a\n      eq\n      tag_9\n      jumpi\n      dup1\n      0xc45a0155\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xd44f2bf2\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xf3995c67\n      eq\n      tag_12\n      jumpi\n      jump(tag_2)\n    tag_13:\n      dup1\n      0x13ead562\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x4659a494\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x4aa4a4fc\n      eq\n      tag_5\n      jumpi\n      dup1\n      0xa4a78f0c\n      eq\n      tag_6\n      jumpi\n      dup1\n      0xac9650d8\n      eq\n      tag_7\n      jumpi\n      jump(tag_2)\n    tag_1:\n      jumpi(tag_2, calldatasize)\n        /* \"contracts/V3Migrator.sol\":1096:1106  msg.sender */\n      caller\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/V3Migrator.sol\":1110:1115  WETH9 */\n      immutable(\"0x894a18e75f0a8b978d87ca850b87ebdfb9565d22a7e423cfe82ac5eb107e798f\")\n        /* \"contracts/V3Migrator.sol\":1096:1115  msg.sender == WETH9 */\n      and\n      eq\n        /* \"contracts/V3Migrator.sol\":1088:1129  require(msg.sender == WETH9, 'Not WETH9') */\n      tag_16\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_17\n      swap1\n      tag_18\n      jump\t// in\n    tag_17:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_16:\n        /* \"contracts/V3Migrator.sol\":600:4112  contract V3Migrator is IV3Migrator, PeripheryImmutableState, PoolInitializer, Multicall, SelfPermit {\r... */\n      stop\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/base/PoolInitializer.sol\":472:1209  function createAndInitializePoolIfNecessary(\r... */\n    tag_3:\n      tag_19\n      tag_20\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_20:\n      tag_22\n      jump\t// in\n    tag_19:\n      mload(0x40)\n      tag_23\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_23:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/base/SelfPermit.sol\":1364:1662  function selfPermitAllowed(\r... */\n    tag_4:\n      tag_16\n      tag_26\n      calldatasize\n      0x04\n      tag_27\n      jump\t// in\n    tag_26:\n      tag_28\n      jump\t// in\n        /* \"contracts/base/PeripheryImmutableState.sol\":431:470  address public immutable override WETH9 */\n    tag_5:\n      callvalue\n      dup1\n      iszero\n      tag_29\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_29:\n      pop\n      tag_19\n      tag_31\n      jump\t// in\n        /* \"contracts/base/SelfPermit.sol\":1703:2061  function selfPermitAllowedIfNecessary(\r... */\n    tag_6:\n      tag_16\n      tag_34\n      calldatasize\n      0x04\n      tag_27\n      jump\t// in\n    tag_34:\n      tag_35\n      jump\t// in\n        /* \"contracts/base/Multicall.sol\":318:987  function multicall(bytes[] calldata data) public payable override returns (bytes[] memory results) {\r... */\n    tag_7:\n      tag_36\n      tag_37\n      calldatasize\n      0x04\n      tag_38\n      jump\t// in\n    tag_37:\n      tag_39\n      jump\t// in\n    tag_36:\n      mload(0x40)\n      tag_23\n      swap2\n      swap1\n      tag_41\n      jump\t// in\n        /* \"contracts/V3Migrator.sol\":748:799  address public immutable nonfungiblePositionManager */\n    tag_8:\n      callvalue\n      dup1\n      iszero\n      tag_42\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_42:\n      pop\n      tag_19\n      tag_44\n      jump\t// in\n        /* \"contracts/base/SelfPermit.sol\":1000:1323  function selfPermitIfNecessary(\r... */\n    tag_9:\n      tag_16\n      tag_47\n      calldatasize\n      0x04\n      tag_27\n      jump\t// in\n    tag_47:\n      tag_48\n      jump\t// in\n        /* \"contracts/base/PeripheryImmutableState.sol\":337:378  address public immutable override factory */\n    tag_10:\n      callvalue\n      dup1\n      iszero\n      tag_49\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_49:\n      pop\n      tag_19\n      tag_51\n      jump\t// in\n        /* \"contracts/V3Migrator.sol\":1145:4109  function migrate(MigrateParams calldata params) external override {\r... */\n    tag_11:\n      callvalue\n      dup1\n      iszero\n      tag_53\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_53:\n      pop\n      tag_16\n      tag_55\n      calldatasize\n      0x04\n      tag_56\n      jump\t// in\n    tag_55:\n      tag_57\n      jump\t// in\n        /* \"contracts/base/SelfPermit.sol\":677:959  function selfPermit(\r... */\n    tag_12:\n      tag_16\n      tag_59\n      calldatasize\n      0x04\n      tag_27\n      jump\t// in\n    tag_59:\n      tag_60\n      jump\t// in\n        /* \"contracts/base/PoolInitializer.sol\":472:1209  function createAndInitializePoolIfNecessary(\r... */\n    tag_22:\n        /* \"contracts/base/PoolInitializer.sol\":660:672  address pool */\n      0x00\n        /* \"contracts/base/PoolInitializer.sol\":702:708  token1 */\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/base/PoolInitializer.sol\":693:708  token0 < token1 */\n      and\n        /* \"contracts/base/PoolInitializer.sol\":693:699  token0 */\n      dup6\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/base/PoolInitializer.sol\":693:708  token0 < token1 */\n      and\n      lt\n        /* \"contracts/base/PoolInitializer.sol\":685:709  require(token0 < token1) */\n      tag_62\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_62:\n        /* \"contracts/base/PoolInitializer.sol\":745:752  factory */\n      immutable(\"0xa67d69bee0a3a38428b5acf8ede25efbe17bbd7b0989889fe30d9166014307b6\")\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/base/PoolInitializer.sol\":727:761  IUniswapV3Factory(factory).getPool */\n      and\n      0x1698ee82\n        /* \"contracts/base/PoolInitializer.sol\":762:768  token0 */\n      dup7\n        /* \"contracts/base/PoolInitializer.sol\":770:776  token1 */\n      dup7\n        /* \"contracts/base/PoolInitializer.sol\":778:781  fee */\n      dup7\n        /* \"contracts/base/PoolInitializer.sol\":727:782  IUniswapV3Factory(factory).getPool(token0, token1, fee) */\n      mload(0x40)\n      dup5\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      0xffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap4\n      pop\n      pop\n      pop\n      pop\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_63\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_63:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_65\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_65:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x20\n      dup2\n      lt\n      iszero\n      tag_66\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_66:\n      pop\n      mload\n      swap1\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/base/PoolInitializer.sol\":799:817  pool == address(0) */\n      dup2\n      and\n        /* \"contracts/base/PoolInitializer.sol\":795:1202  if (pool == address(0)) {\r... */\n      tag_67\n      jumpi\n        /* \"contracts/base/PoolInitializer.sol\":859:866  factory */\n      immutable(\"0xa67d69bee0a3a38428b5acf8ede25efbe17bbd7b0989889fe30d9166014307b6\")\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/base/PoolInitializer.sol\":841:878  IUniswapV3Factory(factory).createPool */\n      and\n      0xa1671295\n        /* \"contracts/base/PoolInitializer.sol\":879:885  token0 */\n      dup7\n        /* \"contracts/base/PoolInitializer.sol\":887:893  token1 */\n      dup7\n        /* \"contracts/base/PoolInitializer.sol\":895:898  fee */\n      dup7\n        /* \"contracts/base/PoolInitializer.sol\":841:899  IUniswapV3Factory(factory).createPool(token0, token1, fee) */\n      mload(0x40)\n      dup5\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      0xffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap4\n      pop\n      pop\n      pop\n      pop\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_68\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_68:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_70\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_70:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x20\n      dup2\n      lt\n      iszero\n      tag_71\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_71:\n      pop\n      mload\n        /* \"contracts/base/PoolInitializer.sol\":914:959  IUniswapV3Pool(pool).initialize(sqrtPriceX96) */\n      0x40\n      dup1\n      mload\n      shl(0xe0, 0xf637731d)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n      dup6\n      dup2\n      and\n      0x04\n      dup4\n      add\n      mstore\n      swap2\n      mload\n        /* \"contracts/base/PoolInitializer.sol\":841:899  IUniswapV3Factory(factory).createPool(token0, token1, fee) */\n      swap3\n      swap4\n      pop\n        /* \"contracts/base/PoolInitializer.sol\":914:945  IUniswapV3Pool(pool).initialize */\n      swap1\n      dup4\n      and\n      swap2\n      0xf637731d\n      swap2\n        /* \"contracts/base/PoolInitializer.sol\":914:959  IUniswapV3Pool(pool).initialize(sqrtPriceX96) */\n      0x24\n      dup1\n      dup3\n      add\n      swap3\n      0x00\n      swap3\n      swap1\n      swap2\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      dup2\n      dup4\n        /* \"contracts/base/PoolInitializer.sol\":914:945  IUniswapV3Pool(pool).initialize */\n      dup8\n        /* \"contracts/base/PoolInitializer.sol\":914:959  IUniswapV3Pool(pool).initialize(sqrtPriceX96) */\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_72\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_72:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_74\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_74:\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/base/PoolInitializer.sol\":795:1202  if (pool == address(0)) {\r... */\n      jump(tag_75)\n    tag_67:\n        /* \"contracts/base/PoolInitializer.sol\":993:1021  uint160 sqrtPriceX96Existing */\n      0x00\n        /* \"contracts/base/PoolInitializer.sol\":1052:1056  pool */\n      dup2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/base/PoolInitializer.sol\":1037:1063  IUniswapV3Pool(pool).slot0 */\n      and\n      0x3850c7bd\n        /* \"contracts/base/PoolInitializer.sol\":1037:1065  IUniswapV3Pool(pool).slot0() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0xe0\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_76\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_76:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_78\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_78:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0xe0\n      dup2\n      lt\n      iszero\n      tag_79\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_79:\n      pop\n      mload\n      swap1\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/base/PoolInitializer.sol\":1084:1109  sqrtPriceX96Existing == 0 */\n      dup2\n      and\n        /* \"contracts/base/PoolInitializer.sol\":1080:1191  if (sqrtPriceX96Existing == 0) {\r... */\n      tag_80\n      jumpi\n        /* \"contracts/base/PoolInitializer.sol\":1145:1149  pool */\n      dup2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/base/PoolInitializer.sol\":1130:1161  IUniswapV3Pool(pool).initialize */\n      and\n      0xf637731d\n        /* \"contracts/base/PoolInitializer.sol\":1162:1174  sqrtPriceX96 */\n      dup5\n        /* \"contracts/base/PoolInitializer.sol\":1130:1175  IUniswapV3Pool(pool).initialize(sqrtPriceX96) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_81\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_81:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_83\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_83:\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/base/PoolInitializer.sol\":1080:1191  if (sqrtPriceX96Existing == 0) {\r... */\n    tag_80:\n        /* \"contracts/base/PoolInitializer.sol\":795:1202  if (pool == address(0)) {\r... */\n      pop\n    tag_75:\n        /* \"contracts/base/PoolInitializer.sol\":472:1209  function createAndInitializePoolIfNecessary(\r... */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/base/SelfPermit.sol\":1364:1662  function selfPermitAllowed(\r... */\n    tag_28:\n        /* \"contracts/base/SelfPermit.sol\":1564:1654  IERC20PermitAllowed(token).permit(msg.sender, address(this), nonce, expiry, true, v, r, s) */\n      0x40\n      dup1\n      mload\n      shl(0xe2, 0x23f2ebc3)\n      dup2\n      mstore\n        /* \"contracts/base/SelfPermit.sol\":1598:1608  msg.sender */\n      caller\n        /* \"contracts/base/SelfPermit.sol\":1564:1654  IERC20PermitAllowed(token).permit(msg.sender, address(this), nonce, expiry, true, v, r, s) */\n      0x04\n      dup3\n      add\n      mstore\n        /* \"contracts/base/SelfPermit.sol\":1618:1622  this */\n      address\n        /* \"contracts/base/SelfPermit.sol\":1564:1654  IERC20PermitAllowed(token).permit(msg.sender, address(this), nonce, expiry, true, v, r, s) */\n      0x24\n      dup3\n      add\n      mstore\n      0x44\n      dup2\n      add\n      dup8\n      swap1\n      mstore\n      0x64\n      dup2\n      add\n      dup7\n      swap1\n      mstore\n        /* \"contracts/base/SelfPermit.sol\":1640:1644  true */\n      0x01\n        /* \"contracts/base/SelfPermit.sol\":1564:1654  IERC20PermitAllowed(token).permit(msg.sender, address(this), nonce, expiry, true, v, r, s) */\n      0x84\n      dup3\n      add\n      mstore\n      0xff\n      dup6\n      and\n      0xa4\n      dup3\n      add\n      mstore\n      0xc4\n      dup2\n      add\n      dup5\n      swap1\n      mstore\n      0xe4\n      dup2\n      add\n      dup4\n      swap1\n      mstore\n      swap1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/base/SelfPermit.sol\":1564:1597  IERC20PermitAllowed(token).permit */\n      dup9\n      and\n      swap2\n      0x8fcbaf0c\n      swap2\n        /* \"contracts/base/SelfPermit.sol\":1564:1654  IERC20PermitAllowed(token).permit(msg.sender, address(this), nonce, expiry, true, v, r, s) */\n      0x0104\n      dup1\n      dup4\n      add\n      swap3\n      0x00\n      swap3\n      swap2\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      dup2\n      dup4\n        /* \"contracts/base/SelfPermit.sol\":1564:1597  IERC20PermitAllowed(token).permit */\n      dup8\n        /* \"contracts/base/SelfPermit.sol\":1564:1654  IERC20PermitAllowed(token).permit(msg.sender, address(this), nonce, expiry, true, v, r, s) */\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_85\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_85:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_87\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_87:\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/base/SelfPermit.sol\":1364:1662  function selfPermitAllowed(\r... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/base/PeripheryImmutableState.sol\":431:470  address public immutable override WETH9 */\n    tag_31:\n      immutable(\"0x894a18e75f0a8b978d87ca850b87ebdfb9565d22a7e423cfe82ac5eb107e798f\")\n      dup2\n      jump\t// out\n        /* \"contracts/base/SelfPermit.sol\":1703:2061  function selfPermitAllowedIfNecessary(\r... */\n    tag_35:\n        /* \"contracts/base/SelfPermit.sol\":1920:1970  IERC20(token).allowance(msg.sender, address(this)) */\n      0x40\n      dup1\n      mload\n      shl(0xe1, 0x6eb1769f)\n      dup2\n      mstore\n        /* \"contracts/base/SelfPermit.sol\":1944:1954  msg.sender */\n      caller\n        /* \"contracts/base/SelfPermit.sol\":1920:1970  IERC20(token).allowance(msg.sender, address(this)) */\n      0x04\n      dup3\n      add\n      mstore\n        /* \"contracts/base/SelfPermit.sol\":1964:1968  this */\n      address\n        /* \"contracts/base/SelfPermit.sol\":1920:1970  IERC20(token).allowance(msg.sender, address(this)) */\n      0x24\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      not(0x00)\n        /* \"contracts/base/SelfPermit.sol\":1973:1990  type(uint256).max */\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/base/SelfPermit.sol\":1920:1943  IERC20(token).allowance */\n      dup10\n      and\n      swap2\n      0xdd62ed3e\n      swap2\n        /* \"contracts/base/SelfPermit.sol\":1920:1970  IERC20(token).allowance(msg.sender, address(this)) */\n      0x44\n      dup1\n      dup3\n      add\n      swap3\n      0x20\n      swap3\n      swap1\n      swap2\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"contracts/base/SelfPermit.sol\":1920:1943  IERC20(token).allowance */\n      dup7\n        /* \"contracts/base/SelfPermit.sol\":1920:1970  IERC20(token).allowance(msg.sender, address(this)) */\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_89\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_89:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_91\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_91:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x20\n      dup2\n      lt\n      iszero\n      tag_92\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_92:\n      pop\n      mload\n        /* \"contracts/base/SelfPermit.sol\":1920:1990  IERC20(token).allowance(msg.sender, address(this)) < type(uint256).max */\n      lt\n        /* \"contracts/base/SelfPermit.sol\":1916:2053  if (IERC20(token).allowance(msg.sender, address(this)) < type(uint256).max)\r... */\n      iszero\n      tag_94\n      jumpi\n        /* \"contracts/base/SelfPermit.sol\":2005:2053  selfPermitAllowed(token, nonce, expiry, v, r, s) */\n      tag_94\n        /* \"contracts/base/SelfPermit.sol\":2023:2028  token */\n      dup7\n        /* \"contracts/base/SelfPermit.sol\":2030:2035  nonce */\n      dup7\n        /* \"contracts/base/SelfPermit.sol\":2037:2043  expiry */\n      dup7\n        /* \"contracts/base/SelfPermit.sol\":2045:2046  v */\n      dup7\n        /* \"contracts/base/SelfPermit.sol\":2048:2049  r */\n      dup7\n        /* \"contracts/base/SelfPermit.sol\":2051:2052  s */\n      dup7\n        /* \"contracts/base/SelfPermit.sol\":2005:2022  selfPermitAllowed */\n      tag_28\n        /* \"contracts/base/SelfPermit.sol\":2005:2053  selfPermitAllowed(token, nonce, expiry, v, r, s) */\n      jump\t// in\n    tag_94:\n        /* \"contracts/base/SelfPermit.sol\":1703:2061  function selfPermitAllowedIfNecessary(\r... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/base/Multicall.sol\":318:987  function multicall(bytes[] calldata data) public payable override returns (bytes[] memory results) {\r... */\n    tag_39:\n        /* \"contracts/base/Multicall.sol\":393:415  bytes[] memory results */\n      0x60\n        /* \"contracts/base/Multicall.sol\":450:454  data */\n      dup2\n        /* \"contracts/base/Multicall.sol\":438:462  new bytes[](data.length) */\n      0xffffffffffffffff\n      dup2\n      gt\n      dup1\n      iszero\n      tag_96\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_96:\n      pop\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_97\n      jumpi\n      dup2\n      0x20\n      add\n    tag_98:\n      0x60\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      0x01\n      swap1\n      sub\n      swap1\n      dup2\n      tag_98\n      jumpi\n      swap1\n      pop\n    tag_97:\n      pop\n        /* \"contracts/base/Multicall.sol\":428:462  results = new bytes[](data.length) */\n      swap1\n      pop\n        /* \"contracts/base/Multicall.sol\":478:487  uint256 i */\n      0x00\n        /* \"contracts/base/Multicall.sol\":473:980  for (uint256 i = 0; i < data.length; i++) {\r... */\n    tag_99:\n        /* \"contracts/base/Multicall.sol\":493:508  i < data.length */\n      dup3\n      dup2\n      lt\n        /* \"contracts/base/Multicall.sol\":473:980  for (uint256 i = 0; i < data.length; i++) {\r... */\n      iszero\n      tag_100\n      jumpi\n        /* \"contracts/base/Multicall.sol\":531:543  bool success */\n      0x00\n      dup1\n        /* \"contracts/base/Multicall.sol\":576:580  this */\n      address\n        /* \"contracts/base/Multicall.sol\":595:599  data */\n      dup7\n      dup7\n        /* \"contracts/base/Multicall.sol\":600:601  i */\n      dup6\n        /* \"contracts/base/Multicall.sol\":595:602  data[i] */\n      dup2\n      dup2\n      lt\n      tag_102\n      jumpi\n      invalid\n    tag_102:\n      swap1\n      pop\n      0x20\n      mul\n      dup2\n      add\n      swap1\n      tag_103\n      swap2\n      swap1\n      tag_104\n      jump\t// in\n    tag_103:\n        /* \"contracts/base/Multicall.sol\":568:603  address(this).delegatecall(data[i]) */\n      mload(0x40)\n      tag_105\n      swap3\n      swap2\n      swap1\n      tag_106\n      jump\t// in\n    tag_105:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      gas\n      delegatecall\n      swap2\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_109\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_108)\n    tag_109:\n      0x60\n      swap2\n      pop\n    tag_108:\n      pop\n        /* \"contracts/base/Multicall.sol\":530:603  (bool success, bytes memory result) = address(this).delegatecall(data[i]) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"contracts/base/Multicall.sol\":625:632  success */\n      dup2\n        /* \"contracts/base/Multicall.sol\":620:933  if (!success) {\r... */\n      tag_110\n      jumpi\n        /* \"contracts/base/Multicall.sol\":754:756  68 */\n      0x44\n        /* \"contracts/base/Multicall.sol\":738:744  result */\n      dup2\n        /* \"contracts/base/Multicall.sol\":738:751  result.length */\n      mload\n        /* \"contracts/base/Multicall.sol\":738:756  result.length < 68 */\n      lt\n        /* \"contracts/base/Multicall.sol\":734:766  if (result.length < 68) revert() */\n      iszero\n      tag_111\n      jumpi\n        /* \"contracts/base/Multicall.sol\":758:766  revert() */\n      0x00\n      dup1\n      revert\n        /* \"contracts/base/Multicall.sol\":734:766  if (result.length < 68) revert() */\n    tag_111:\n        /* \"contracts/base/Multicall.sol\":839:843  0x04 */\n      0x04\n        /* \"contracts/base/Multicall.sol\":831:837  result */\n      dup2\n        /* \"contracts/base/Multicall.sol\":827:844  add(result, 0x04) */\n      add\n        /* \"contracts/base/Multicall.sol\":817:844  result := add(result, 0x04) */\n      swap1\n      pop\n        /* \"contracts/base/Multicall.sol\":899:905  result */\n      dup1\n        /* \"contracts/base/Multicall.sol\":888:916  abi.decode(result, (string)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      dup2\n      add\n      swap1\n      tag_112\n      swap2\n      swap1\n      tag_113\n      jump\t// in\n    tag_112:\n        /* \"contracts/base/Multicall.sol\":881:917  revert(abi.decode(result, (string))) */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_17\n      swap2\n      swap1\n      tag_115\n      jump\t// in\n        /* \"contracts/base/Multicall.sol\":620:933  if (!success) {\r... */\n    tag_110:\n        /* \"contracts/base/Multicall.sol\":962:968  result */\n      dup1\n        /* \"contracts/base/Multicall.sol\":949:956  results */\n      dup5\n        /* \"contracts/base/Multicall.sol\":957:958  i */\n      dup5\n        /* \"contracts/base/Multicall.sol\":949:959  results[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_116\n      jumpi\n      invalid\n    tag_116:\n      0x20\n      swap1\n      dup2\n      mul\n      swap2\n      swap1\n      swap2\n      add\n      add\n        /* \"contracts/base/Multicall.sol\":949:968  results[i] = result */\n      mstore\n      pop\n      pop\n        /* \"contracts/base/Multicall.sol\":510:513  i++ */\n      0x01\n      add\n        /* \"contracts/base/Multicall.sol\":473:980  for (uint256 i = 0; i < data.length; i++) {\r... */\n      jump(tag_99)\n    tag_100:\n      pop\n        /* \"contracts/base/Multicall.sol\":318:987  function multicall(bytes[] calldata data) public payable override returns (bytes[] memory results) {\r... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/V3Migrator.sol\":748:799  address public immutable nonfungiblePositionManager */\n    tag_44:\n      immutable(\"0x1ae990503def382b005be0ab67f63e79e5d8d76ebedbaef5e88f9b321d6d6a06\")\n      dup2\n      jump\t// out\n        /* \"contracts/base/SelfPermit.sol\":1000:1323  function selfPermitIfNecessary(\r... */\n    tag_48:\n        /* \"contracts/base/SelfPermit.sol\":1212:1262  IERC20(token).allowance(msg.sender, address(this)) */\n      0x40\n      dup1\n      mload\n      shl(0xe1, 0x6eb1769f)\n      dup2\n      mstore\n        /* \"contracts/base/SelfPermit.sol\":1236:1246  msg.sender */\n      caller\n        /* \"contracts/base/SelfPermit.sol\":1212:1262  IERC20(token).allowance(msg.sender, address(this)) */\n      0x04\n      dup3\n      add\n      mstore\n        /* \"contracts/base/SelfPermit.sol\":1256:1260  this */\n      address\n        /* \"contracts/base/SelfPermit.sol\":1212:1262  IERC20(token).allowance(msg.sender, address(this)) */\n      0x24\n      dup3\n      add\n      mstore\n      swap1\n      mload\n        /* \"contracts/base/SelfPermit.sol\":1265:1270  value */\n      dup7\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/base/SelfPermit.sol\":1212:1235  IERC20(token).allowance */\n      dup10\n      and\n      swap2\n      0xdd62ed3e\n      swap2\n        /* \"contracts/base/SelfPermit.sol\":1212:1262  IERC20(token).allowance(msg.sender, address(this)) */\n      0x44\n      dup1\n      dup3\n      add\n      swap3\n      0x20\n      swap3\n      swap1\n      swap2\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"contracts/base/SelfPermit.sol\":1212:1235  IERC20(token).allowance */\n      dup7\n        /* \"contracts/base/SelfPermit.sol\":1212:1262  IERC20(token).allowance(msg.sender, address(this)) */\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_118\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_118:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_120\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_120:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x20\n      dup2\n      lt\n      iszero\n      tag_121\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_121:\n      pop\n      mload\n        /* \"contracts/base/SelfPermit.sol\":1212:1270  IERC20(token).allowance(msg.sender, address(this)) < value */\n      lt\n        /* \"contracts/base/SelfPermit.sol\":1208:1315  if (IERC20(token).allowance(msg.sender, address(this)) < value) selfPermit(token, value, deadline, v, r, s) */\n      iszero\n      tag_94\n      jumpi\n        /* \"contracts/base/SelfPermit.sol\":1272:1315  selfPermit(token, value, deadline, v, r, s) */\n      tag_94\n        /* \"contracts/base/SelfPermit.sol\":1283:1288  token */\n      dup7\n        /* \"contracts/base/SelfPermit.sol\":1290:1295  value */\n      dup7\n        /* \"contracts/base/SelfPermit.sol\":1297:1305  deadline */\n      dup7\n        /* \"contracts/base/SelfPermit.sol\":1307:1308  v */\n      dup7\n        /* \"contracts/base/SelfPermit.sol\":1310:1311  r */\n      dup7\n        /* \"contracts/base/SelfPermit.sol\":1313:1314  s */\n      dup7\n        /* \"contracts/base/SelfPermit.sol\":1272:1282  selfPermit */\n      tag_60\n        /* \"contracts/base/SelfPermit.sol\":1272:1315  selfPermit(token, value, deadline, v, r, s) */\n      jump\t// in\n        /* \"contracts/base/PeripheryImmutableState.sol\":337:378  address public immutable override factory */\n    tag_51:\n      immutable(\"0xa67d69bee0a3a38428b5acf8ede25efbe17bbd7b0989889fe30d9166014307b6\")\n      dup2\n      jump\t// out\n        /* \"contracts/V3Migrator.sol\":1145:4109  function migrate(MigrateParams calldata params) external override {\r... */\n    tag_57:\n        /* \"contracts/V3Migrator.sol\":1259:1260  0 */\n      0x00\n        /* \"contracts/V3Migrator.sol\":1230:1256  params.percentageToMigrate */\n      tag_125\n      0x60\n      dup4\n      add\n      0x40\n      dup5\n      add\n      tag_126\n      jump\t// in\n    tag_125:\n        /* \"contracts/V3Migrator.sol\":1230:1260  params.percentageToMigrate > 0 */\n      0xff\n      and\n      gt\n        /* \"contracts/V3Migrator.sol\":1222:1285  require(params.percentageToMigrate > 0, 'Percentage too small') */\n      tag_127\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_17\n      swap1\n      tag_129\n      jump\t// in\n    tag_127:\n        /* \"contracts/V3Migrator.sol\":1334:1337  100 */\n      0x64\n        /* \"contracts/V3Migrator.sol\":1304:1330  params.percentageToMigrate */\n      tag_130\n      0x60\n      dup4\n      add\n      0x40\n      dup5\n      add\n      tag_126\n      jump\t// in\n    tag_130:\n        /* \"contracts/V3Migrator.sol\":1304:1337  params.percentageToMigrate <= 100 */\n      0xff\n      and\n      gt\n      iszero\n        /* \"contracts/V3Migrator.sol\":1296:1362  require(params.percentageToMigrate <= 100, 'Percentage too large') */\n      tag_131\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_17\n      swap1\n      tag_133\n      jump\t// in\n    tag_131:\n        /* \"contracts/V3Migrator.sol\":1436:1447  params.pair */\n      tag_134\n      0x20\n      dup3\n      add\n        /* \"contracts/V3Migrator.sol\":1436:1442  params */\n      dup3\n        /* \"contracts/V3Migrator.sol\":1436:1447  params.pair */\n      tag_135\n      jump\t// in\n    tag_134:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/V3Migrator.sol\":1421:1461  IUniswapV2Pair(params.pair).transferFrom */\n      and\n      0x23b872dd\n        /* \"contracts/V3Migrator.sol\":1462:1472  msg.sender */\n      caller\n        /* \"contracts/V3Migrator.sol\":1474:1485  params.pair */\n      tag_136\n      0x20\n      dup6\n      add\n        /* \"contracts/V3Migrator.sol\":1474:1480  params */\n      dup6\n        /* \"contracts/V3Migrator.sol\":1474:1485  params.pair */\n      tag_135\n      jump\t// in\n    tag_136:\n        /* \"contracts/V3Migrator.sol\":1487:1493  params */\n      dup5\n        /* \"contracts/V3Migrator.sol\":1487:1512  params.liquidityToMigrate */\n      0x20\n      add\n      calldataload\n        /* \"contracts/V3Migrator.sol\":1421:1513  IUniswapV2Pair(params.pair).transferFrom(msg.sender, params.pair, params.liquidityToMigrate) */\n      mload(0x40)\n      dup5\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_137\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_138\n      jump\t// in\n    tag_137:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_139\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_139:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_141\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_141:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_142\n      swap2\n      swap1\n      tag_143\n      jump\t// in\n    tag_142:\n      pop\n        /* \"contracts/V3Migrator.sol\":1525:1542  uint256 amount0V2 */\n      0x00\n      dup1\n        /* \"contracts/V3Migrator.sol\":1580:1591  params.pair */\n      tag_144\n      0x20\n      dup5\n      add\n        /* \"contracts/V3Migrator.sol\":1580:1586  params */\n      dup5\n        /* \"contracts/V3Migrator.sol\":1580:1591  params.pair */\n      tag_135\n      jump\t// in\n    tag_144:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/V3Migrator.sol\":1565:1597  IUniswapV2Pair(params.pair).burn */\n      and\n      0x89afcb44\n        /* \"contracts/V3Migrator.sol\":1606:1610  this */\n      address\n        /* \"contracts/V3Migrator.sol\":1565:1612  IUniswapV2Pair(params.pair).burn(address(this)) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_145\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_145:\n      0x40\n      dup1\n      mload\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_147\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_147:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_149\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_149:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_150\n      swap2\n      swap1\n      tag_151\n      jump\t// in\n    tag_150:\n        /* \"contracts/V3Migrator.sol\":1524:1612  (uint256 amount0V2, uint256 amount1V2) = IUniswapV2Pair(params.pair).burn(address(this)) */\n      swap1\n      swap3\n      pop\n      swap1\n      pop\n        /* \"contracts/V3Migrator.sol\":1676:1702  uint256 amount0V2ToMigrate */\n      0x00\n        /* \"contracts/V3Migrator.sol\":1749:1752  100 */\n      0x64\n        /* \"contracts/V3Migrator.sol\":1705:1746  amount0V2.mul(params.percentageToMigrate) */\n      tag_152\n        /* \"contracts/V3Migrator.sol\":1719:1745  params.percentageToMigrate */\n      tag_153\n      0x60\n      dup8\n      add\n      0x40\n      dup9\n      add\n      tag_126\n      jump\t// in\n    tag_153:\n        /* \"contracts/V3Migrator.sol\":1705:1714  amount0V2 */\n      dup6\n      swap1\n        /* \"contracts/V3Migrator.sol\":1705:1746  amount0V2.mul(params.percentageToMigrate) */\n      0xff\n      and\n        /* \"contracts/V3Migrator.sol\":1705:1718  amount0V2.mul */\n      tag_154\n        /* \"contracts/V3Migrator.sol\":1705:1746  amount0V2.mul(params.percentageToMigrate) */\n      jump\t// in\n    tag_152:\n        /* \"contracts/V3Migrator.sol\":1705:1752  amount0V2.mul(params.percentageToMigrate) / 100 */\n      dup2\n      tag_155\n      jumpi\n      invalid\n    tag_155:\n      div\n      swap1\n      pop\n        /* \"contracts/V3Migrator.sol\":1763:1789  uint256 amount1V2ToMigrate */\n      0x00\n        /* \"contracts/V3Migrator.sol\":1836:1839  100 */\n      0x64\n        /* \"contracts/V3Migrator.sol\":1792:1833  amount1V2.mul(params.percentageToMigrate) */\n      tag_156\n        /* \"contracts/V3Migrator.sol\":1806:1832  params.percentageToMigrate */\n      tag_153\n      0x60\n      dup9\n      add\n      0x40\n      dup10\n      add\n      tag_126\n      jump\t// in\n        /* \"contracts/V3Migrator.sol\":1792:1833  amount1V2.mul(params.percentageToMigrate) */\n    tag_156:\n        /* \"contracts/V3Migrator.sol\":1792:1839  amount1V2.mul(params.percentageToMigrate) / 100 */\n      dup2\n      tag_158\n      jumpi\n      invalid\n    tag_158:\n      div\n      swap1\n      pop\n        /* \"contracts/V3Migrator.sol\":1925:2014  TransferHelper.safeApprove(params.token0, nonfungiblePositionManager, amount0V2ToMigrate) */\n      tag_159\n        /* \"contracts/V3Migrator.sol\":1952:1965  params.token0 */\n      tag_160\n      0x80\n      dup8\n      add\n      0x60\n      dup9\n      add\n      tag_135\n      jump\t// in\n    tag_160:\n        /* \"contracts/V3Migrator.sol\":1967:1993  nonfungiblePositionManager */\n      immutable(\"0x1ae990503def382b005be0ab67f63e79e5d8d76ebedbaef5e88f9b321d6d6a06\")\n        /* \"contracts/V3Migrator.sol\":1995:2013  amount0V2ToMigrate */\n      dup5\n        /* \"contracts/V3Migrator.sol\":1925:1951  TransferHelper.safeApprove */\n      tag_161\n        /* \"contracts/V3Migrator.sol\":1925:2014  TransferHelper.safeApprove(params.token0, nonfungiblePositionManager, amount0V2ToMigrate) */\n      jump\t// in\n    tag_159:\n        /* \"contracts/V3Migrator.sol\":2025:2114  TransferHelper.safeApprove(params.token1, nonfungiblePositionManager, amount1V2ToMigrate) */\n      tag_162\n        /* \"contracts/V3Migrator.sol\":2052:2065  params.token1 */\n      tag_163\n      0xa0\n      dup8\n      add\n      0x80\n      dup9\n      add\n      tag_135\n      jump\t// in\n    tag_163:\n        /* \"contracts/V3Migrator.sol\":2067:2093  nonfungiblePositionManager */\n      immutable(\"0x1ae990503def382b005be0ab67f63e79e5d8d76ebedbaef5e88f9b321d6d6a06\")\n        /* \"contracts/V3Migrator.sol\":2095:2113  amount1V2ToMigrate */\n      dup4\n        /* \"contracts/V3Migrator.sol\":2025:2051  TransferHelper.safeApprove */\n      tag_161\n        /* \"contracts/V3Migrator.sol\":2025:2114  TransferHelper.safeApprove(params.token1, nonfungiblePositionManager, amount1V2ToMigrate) */\n      jump\t// in\n    tag_162:\n        /* \"contracts/V3Migrator.sol\":2161:2178  uint256 amount0V3 */\n      0x00\n        /* \"contracts/V3Migrator.sol\":2180:2197  uint256 amount1V3 */\n      dup1\n        /* \"contracts/V3Migrator.sol\":2242:2268  nonfungiblePositionManager */\n      immutable(\"0x1ae990503def382b005be0ab67f63e79e5d8d76ebedbaef5e88f9b321d6d6a06\")\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/V3Migrator.sol\":2214:2274  INonfungiblePositionManager(nonfungiblePositionManager).mint */\n      and\n      0x88316456\n        /* \"contracts/V3Migrator.sol\":2293:2894  INonfungiblePositionManager.MintParams({\r... */\n      mload(0x40)\n      dup1\n      0x0160\n      add\n      0x40\n      mstore\n      dup1\n        /* \"contracts/V3Migrator.sol\":2363:2369  params */\n      dup11\n        /* \"contracts/V3Migrator.sol\":2363:2376  params.token0 */\n      0x60\n      add\n      0x20\n      dup2\n      add\n      swap1\n      tag_164\n      swap2\n      swap1\n      tag_135\n      jump\t// in\n    tag_164:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/V3Migrator.sol\":2293:2894  INonfungiblePositionManager.MintParams({\r... */\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/V3Migrator.sol\":2407:2420  params.token1 */\n      tag_165\n      0xa0\n      dup13\n      add\n      0x80\n      dup14\n      add\n      tag_135\n      jump\t// in\n    tag_165:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/V3Migrator.sol\":2293:2894  INonfungiblePositionManager.MintParams({\r... */\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/V3Migrator.sol\":2448:2458  params.fee */\n      tag_166\n      0xc0\n      dup13\n      add\n      0xa0\n      dup14\n      add\n      tag_167\n      jump\t// in\n    tag_166:\n        /* \"contracts/V3Migrator.sol\":2293:2894  INonfungiblePositionManager.MintParams({\r... */\n      0xffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/V3Migrator.sol\":2492:2508  params.tickLower */\n      tag_168\n      0xe0\n      dup13\n      add\n      0xc0\n      dup14\n      add\n      tag_169\n      jump\t// in\n    tag_168:\n        /* \"contracts/V3Migrator.sol\":2293:2894  INonfungiblePositionManager.MintParams({\r... */\n      0x02\n      signextend\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/V3Migrator.sol\":2542:2558  params.tickUpper */\n      tag_170\n      0x0100\n      dup13\n      add\n      0xe0\n      dup14\n      add\n      tag_169\n      jump\t// in\n    tag_170:\n        /* \"contracts/V3Migrator.sol\":2293:2894  INonfungiblePositionManager.MintParams({\r... */\n      0x02\n      signextend\n      dup2\n      mstore\n      0x20\n      dup2\n      add\n      dup9\n      swap1\n      mstore\n      0x40\n      dup2\n      add\n      dup8\n      swap1\n      mstore\n        /* \"contracts/V3Migrator.sol\":2707:2724  params.amount0Min */\n      0x0100\n      dup12\n      add\n      calldataload\n        /* \"contracts/V3Migrator.sol\":2293:2894  INonfungiblePositionManager.MintParams({\r... */\n      0x60\n      dup3\n      add\n      mstore\n        /* \"contracts/V3Migrator.sol\":2759:2776  params.amount1Min */\n      0x0120\n      dup12\n      add\n      calldataload\n        /* \"contracts/V3Migrator.sol\":2293:2894  INonfungiblePositionManager.MintParams({\r... */\n      0x80\n      dup3\n      add\n      mstore\n      0xa0\n      add\n        /* \"contracts/V3Migrator.sol\":2810:2826  params.recipient */\n      tag_171\n      0x0160\n      dup13\n      add\n      0x0140\n      dup14\n      add\n      tag_135\n      jump\t// in\n    tag_171:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/V3Migrator.sol\":2293:2894  INonfungiblePositionManager.MintParams({\r... */\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/V3Migrator.sol\":2859:2865  params */\n      dup11\n        /* \"contracts/V3Migrator.sol\":2859:2874  params.deadline */\n      0x0160\n      add\n      calldataload\n        /* \"contracts/V3Migrator.sol\":2293:2894  INonfungiblePositionManager.MintParams({\r... */\n      dup2\n      mstore\n      pop\n        /* \"contracts/V3Migrator.sol\":2214:2909  INonfungiblePositionManager(nonfungiblePositionManager).mint(\r... */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_172\n      swap2\n      swap1\n      tag_173\n      jump\t// in\n    tag_172:\n      0x80\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_174\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_174:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_176\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_176:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_177\n      swap2\n      swap1\n      tag_178\n      jump\t// in\n    tag_177:\n        /* \"contracts/V3Migrator.sol\":2156:2909  (, , uint256 amount0V3, uint256 amount1V3) =\r... */\n      swap4\n      pop\n      swap4\n      pop\n      pop\n      pop\n        /* \"contracts/V3Migrator.sol\":2996:3005  amount0V2 */\n      dup6\n        /* \"contracts/V3Migrator.sol\":2984:2993  amount0V3 */\n      dup3\n        /* \"contracts/V3Migrator.sol\":2984:3005  amount0V3 < amount0V2 */\n      lt\n        /* \"contracts/V3Migrator.sol\":2980:3536  if (amount0V3 < amount0V2) {\r... */\n      iszero\n      tag_179\n      jumpi\n        /* \"contracts/V3Migrator.sol\":3038:3056  amount0V2ToMigrate */\n      dup4\n        /* \"contracts/V3Migrator.sol\":3026:3035  amount0V3 */\n      dup3\n        /* \"contracts/V3Migrator.sol\":3026:3056  amount0V3 < amount0V2ToMigrate */\n      lt\n        /* \"contracts/V3Migrator.sol\":3022:3165  if (amount0V3 < amount0V2ToMigrate) {\r... */\n      iszero\n      tag_181\n      jumpi\n        /* \"contracts/V3Migrator.sol\":3077:3149  TransferHelper.safeApprove(params.token0, nonfungiblePositionManager, 0) */\n      tag_181\n        /* \"contracts/V3Migrator.sol\":3104:3117  params.token0 */\n      tag_182\n      0x80\n      dup10\n      add\n      0x60\n      dup11\n      add\n      tag_135\n      jump\t// in\n    tag_182:\n        /* \"contracts/V3Migrator.sol\":3119:3145  nonfungiblePositionManager */\n      immutable(\"0x1ae990503def382b005be0ab67f63e79e5d8d76ebedbaef5e88f9b321d6d6a06\")\n        /* \"contracts/V3Migrator.sol\":3147:3148  0 */\n      0x00\n        /* \"contracts/V3Migrator.sol\":3077:3103  TransferHelper.safeApprove */\n      tag_161\n        /* \"contracts/V3Migrator.sol\":3077:3149  TransferHelper.safeApprove(params.token0, nonfungiblePositionManager, 0) */\n      jump\t// in\n    tag_181:\n        /* \"contracts/V3Migrator.sol\":3199:3220  amount0V2 - amount0V3 */\n      dup2\n      dup7\n      sub\n        /* \"contracts/V3Migrator.sol\":3239:3257  params.refundAsETH */\n      tag_183\n      0x01a0\n      dup10\n      add\n      0x0180\n      dup11\n      add\n      tag_184\n      jump\t// in\n    tag_183:\n        /* \"contracts/V3Migrator.sol\":3239:3283  params.refundAsETH && params.token0 == WETH9 */\n      dup1\n      iszero\n      tag_185\n      jumpi\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/V3Migrator.sol\":3278:3283  WETH9 */\n      immutable(\"0x894a18e75f0a8b978d87ca850b87ebdfb9565d22a7e423cfe82ac5eb107e798f\")\n        /* \"contracts/V3Migrator.sol\":3261:3283  params.token0 == WETH9 */\n      and\n        /* \"contracts/V3Migrator.sol\":3261:3274  params.token0 */\n      tag_186\n      0x80\n      dup11\n      add\n      0x60\n      dup12\n      add\n      tag_135\n      jump\t// in\n    tag_186:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/V3Migrator.sol\":3261:3283  params.token0 == WETH9 */\n      and\n      eq\n        /* \"contracts/V3Migrator.sol\":3239:3283  params.refundAsETH && params.token0 == WETH9 */\n    tag_185:\n        /* \"contracts/V3Migrator.sol\":3235:3525  if (params.refundAsETH && params.token0 == WETH9) {\r... */\n      iszero\n      tag_187\n      jumpi\n        /* \"contracts/V3Migrator.sol\":3304:3335  IWETH9(WETH9).withdraw(refund0) */\n      mload(0x40)\n      shl(0xe0, 0x2e1a7d4d)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/V3Migrator.sol\":3311:3316  WETH9 */\n      immutable(\"0x894a18e75f0a8b978d87ca850b87ebdfb9565d22a7e423cfe82ac5eb107e798f\")\n        /* \"contracts/V3Migrator.sol\":3304:3326  IWETH9(WETH9).withdraw */\n      and\n      swap1\n      0x2e1a7d4d\n      swap1\n        /* \"contracts/V3Migrator.sol\":3304:3335  IWETH9(WETH9).withdraw(refund0) */\n      tag_188\n      swap1\n        /* \"contracts/V3Migrator.sol\":3327:3334  refund0 */\n      dup5\n      swap1\n        /* \"contracts/V3Migrator.sol\":3304:3335  IWETH9(WETH9).withdraw(refund0) */\n      0x04\n      add\n      tag_189\n      jump\t// in\n    tag_188:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_190\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_190:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_192\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_192:\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/V3Migrator.sol\":3354:3405  TransferHelper.safeTransferETH(msg.sender, refund0) */\n      tag_193\n        /* \"contracts/V3Migrator.sol\":3385:3395  msg.sender */\n      caller\n        /* \"contracts/V3Migrator.sol\":3397:3404  refund0 */\n      dup3\n        /* \"contracts/V3Migrator.sol\":3354:3384  TransferHelper.safeTransferETH */\n      tag_194\n        /* \"contracts/V3Migrator.sol\":3354:3405  TransferHelper.safeTransferETH(msg.sender, refund0) */\n      jump\t// in\n    tag_193:\n        /* \"contracts/V3Migrator.sol\":3235:3525  if (params.refundAsETH && params.token0 == WETH9) {\r... */\n      jump(tag_196)\n    tag_187:\n        /* \"contracts/V3Migrator.sol\":3446:3509  TransferHelper.safeTransfer(params.token0, msg.sender, refund0) */\n      tag_196\n        /* \"contracts/V3Migrator.sol\":3474:3487  params.token0 */\n      tag_197\n      0x80\n      dup11\n      add\n      0x60\n      dup12\n      add\n      tag_135\n      jump\t// in\n    tag_197:\n        /* \"contracts/V3Migrator.sol\":3489:3499  msg.sender */\n      caller\n        /* \"contracts/V3Migrator.sol\":3501:3508  refund0 */\n      dup4\n        /* \"contracts/V3Migrator.sol\":3446:3473  TransferHelper.safeTransfer */\n      tag_198\n        /* \"contracts/V3Migrator.sol\":3446:3509  TransferHelper.safeTransfer(params.token0, msg.sender, refund0) */\n      jump\t// in\n    tag_196:\n        /* \"contracts/V3Migrator.sol\":2980:3536  if (amount0V3 < amount0V2) {\r... */\n      pop\n    tag_179:\n        /* \"contracts/V3Migrator.sol\":3562:3571  amount1V2 */\n      dup5\n        /* \"contracts/V3Migrator.sol\":3550:3559  amount1V3 */\n      dup2\n        /* \"contracts/V3Migrator.sol\":3550:3571  amount1V3 < amount1V2 */\n      lt\n        /* \"contracts/V3Migrator.sol\":3546:4102  if (amount1V3 < amount1V2) {\r... */\n      iszero\n      tag_199\n      jumpi\n        /* \"contracts/V3Migrator.sol\":3604:3622  amount1V2ToMigrate */\n      dup3\n        /* \"contracts/V3Migrator.sol\":3592:3601  amount1V3 */\n      dup2\n        /* \"contracts/V3Migrator.sol\":3592:3622  amount1V3 < amount1V2ToMigrate */\n      lt\n        /* \"contracts/V3Migrator.sol\":3588:3731  if (amount1V3 < amount1V2ToMigrate) {\r... */\n      iszero\n      tag_201\n      jumpi\n        /* \"contracts/V3Migrator.sol\":3643:3715  TransferHelper.safeApprove(params.token1, nonfungiblePositionManager, 0) */\n      tag_201\n        /* \"contracts/V3Migrator.sol\":3670:3683  params.token1 */\n      tag_182\n      0xa0\n      dup10\n      add\n      0x80\n      dup11\n      add\n      tag_135\n      jump\t// in\n        /* \"contracts/V3Migrator.sol\":3643:3715  TransferHelper.safeApprove(params.token1, nonfungiblePositionManager, 0) */\n    tag_201:\n        /* \"contracts/V3Migrator.sol\":3765:3786  amount1V2 - amount1V3 */\n      dup1\n      dup6\n      sub\n        /* \"contracts/V3Migrator.sol\":3805:3823  params.refundAsETH */\n      tag_203\n      0x01a0\n      dup10\n      add\n      0x0180\n      dup11\n      add\n      tag_184\n      jump\t// in\n    tag_203:\n        /* \"contracts/V3Migrator.sol\":3805:3849  params.refundAsETH && params.token1 == WETH9 */\n      dup1\n      iszero\n      tag_204\n      jumpi\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/V3Migrator.sol\":3844:3849  WETH9 */\n      immutable(\"0x894a18e75f0a8b978d87ca850b87ebdfb9565d22a7e423cfe82ac5eb107e798f\")\n        /* \"contracts/V3Migrator.sol\":3827:3849  params.token1 == WETH9 */\n      and\n        /* \"contracts/V3Migrator.sol\":3827:3840  params.token1 */\n      tag_205\n      0xa0\n      dup11\n      add\n      0x80\n      dup12\n      add\n      tag_135\n      jump\t// in\n    tag_205:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/V3Migrator.sol\":3827:3849  params.token1 == WETH9 */\n      and\n      eq\n        /* \"contracts/V3Migrator.sol\":3805:3849  params.refundAsETH && params.token1 == WETH9 */\n    tag_204:\n        /* \"contracts/V3Migrator.sol\":3801:4091  if (params.refundAsETH && params.token1 == WETH9) {\r... */\n      iszero\n      tag_206\n      jumpi\n        /* \"contracts/V3Migrator.sol\":3870:3901  IWETH9(WETH9).withdraw(refund1) */\n      mload(0x40)\n      shl(0xe0, 0x2e1a7d4d)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/V3Migrator.sol\":3877:3882  WETH9 */\n      immutable(\"0x894a18e75f0a8b978d87ca850b87ebdfb9565d22a7e423cfe82ac5eb107e798f\")\n        /* \"contracts/V3Migrator.sol\":3870:3892  IWETH9(WETH9).withdraw */\n      and\n      swap1\n      0x2e1a7d4d\n      swap1\n        /* \"contracts/V3Migrator.sol\":3870:3901  IWETH9(WETH9).withdraw(refund1) */\n      tag_207\n      swap1\n        /* \"contracts/V3Migrator.sol\":3893:3900  refund1 */\n      dup5\n      swap1\n        /* \"contracts/V3Migrator.sol\":3870:3901  IWETH9(WETH9).withdraw(refund1) */\n      0x04\n      add\n      tag_189\n      jump\t// in\n    tag_207:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_208\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_208:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_210\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_210:\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/V3Migrator.sol\":3920:3971  TransferHelper.safeTransferETH(msg.sender, refund1) */\n      tag_211\n        /* \"contracts/V3Migrator.sol\":3951:3961  msg.sender */\n      caller\n        /* \"contracts/V3Migrator.sol\":3963:3970  refund1 */\n      dup3\n        /* \"contracts/V3Migrator.sol\":3920:3950  TransferHelper.safeTransferETH */\n      tag_194\n        /* \"contracts/V3Migrator.sol\":3920:3971  TransferHelper.safeTransferETH(msg.sender, refund1) */\n      jump\t// in\n    tag_211:\n        /* \"contracts/V3Migrator.sol\":3801:4091  if (params.refundAsETH && params.token1 == WETH9) {\r... */\n      jump(tag_213)\n    tag_206:\n        /* \"contracts/V3Migrator.sol\":4012:4075  TransferHelper.safeTransfer(params.token1, msg.sender, refund1) */\n      tag_213\n        /* \"contracts/V3Migrator.sol\":4040:4053  params.token1 */\n      tag_197\n      0xa0\n      dup11\n      add\n      0x80\n      dup12\n      add\n      tag_135\n      jump\t// in\n        /* \"contracts/V3Migrator.sol\":4012:4075  TransferHelper.safeTransfer(params.token1, msg.sender, refund1) */\n    tag_213:\n        /* \"contracts/V3Migrator.sol\":3546:4102  if (amount1V3 < amount1V2) {\r... */\n      pop\n    tag_199:\n        /* \"contracts/V3Migrator.sol\":1145:4109  function migrate(MigrateParams calldata params) external override {\r... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/base/SelfPermit.sol\":677:959  function selfPermit(\r... */\n    tag_60:\n        /* \"contracts/base/SelfPermit.sol\":872:951  IERC20Permit(token).permit(msg.sender, address(this), value, deadline, v, r, s) */\n      0x40\n      dup1\n      mload\n      shl(0xe0, 0xd505accf)\n      dup2\n      mstore\n        /* \"contracts/base/SelfPermit.sol\":899:909  msg.sender */\n      caller\n        /* \"contracts/base/SelfPermit.sol\":872:951  IERC20Permit(token).permit(msg.sender, address(this), value, deadline, v, r, s) */\n      0x04\n      dup3\n      add\n      mstore\n        /* \"contracts/base/SelfPermit.sol\":919:923  this */\n      address\n        /* \"contracts/base/SelfPermit.sol\":872:951  IERC20Permit(token).permit(msg.sender, address(this), value, deadline, v, r, s) */\n      0x24\n      dup3\n      add\n      mstore\n      0x44\n      dup2\n      add\n      dup8\n      swap1\n      mstore\n      0x64\n      dup2\n      add\n      dup7\n      swap1\n      mstore\n      0xff\n      dup6\n      and\n      0x84\n      dup3\n      add\n      mstore\n      0xa4\n      dup2\n      add\n      dup5\n      swap1\n      mstore\n      0xc4\n      dup2\n      add\n      dup4\n      swap1\n      mstore\n      swap1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/base/SelfPermit.sol\":872:898  IERC20Permit(token).permit */\n      dup9\n      and\n      swap2\n      0xd505accf\n      swap2\n        /* \"contracts/base/SelfPermit.sol\":872:951  IERC20Permit(token).permit(msg.sender, address(this), value, deadline, v, r, s) */\n      0xe4\n      dup1\n      dup4\n      add\n      swap3\n      0x00\n      swap3\n      swap2\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      dup2\n      dup4\n        /* \"contracts/base/SelfPermit.sol\":872:898  IERC20Permit(token).permit */\n      dup8\n        /* \"contracts/base/SelfPermit.sol\":872:951  IERC20Permit(token).permit(msg.sender, address(this), value, deadline, v, r, s) */\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_85\n      jumpi\n      0x00\n      dup1\n      revert\n        /* \"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/LowGasSafeMath.sol\":986:1111  function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {... */\n    tag_154:\n        /* \"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/LowGasSafeMath.sol\":1044:1053  uint256 z */\n      0x00\n        /* \"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/LowGasSafeMath.sol\":1073:1079  x == 0 */\n      dup3\n      iszero\n      dup1\n        /* \"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/LowGasSafeMath.sol\":1073:1103  x == 0 || (z = x * y) / x == y */\n      tag_220\n      jumpi\n      pop\n      pop\n        /* \"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/LowGasSafeMath.sol\":1088:1093  x * y */\n      dup2\n      dup2\n      mul\n        /* \"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/LowGasSafeMath.sol\":1102:1103  y */\n      dup2\n        /* \"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/LowGasSafeMath.sol\":1097:1098  x */\n      dup4\n        /* \"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/LowGasSafeMath.sol\":1088:1093  x * y */\n      dup3\n        /* \"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/LowGasSafeMath.sol\":1097:1098  x */\n      dup2\n        /* \"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/LowGasSafeMath.sol\":1083:1098  (z = x * y) / x */\n      tag_221\n      jumpi\n      invalid\n    tag_221:\n      div\n        /* \"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/LowGasSafeMath.sol\":1083:1103  (z = x * y) / x == y */\n      eq\n        /* \"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/LowGasSafeMath.sol\":1073:1103  x == 0 || (z = x * y) / x == y */\n    tag_220:\n        /* \"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/LowGasSafeMath.sol\":1065:1104  require(x == 0 || (z = x * y) / x == y) */\n      tag_222\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_222:\n        /* \"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/LowGasSafeMath.sol\":986:1111  function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/libraries/TransferHelper.sol\":1915:2229  function safeApprove(\r... */\n    tag_161:\n        /* \"contracts/libraries/TransferHelper.sol\":2079:2137  abi.encodeWithSelector(IERC20.approve.selector, to, value) */\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup5\n      dup2\n      and\n      0x24\n      dup4\n      add\n      mstore\n      0x44\n      dup1\n      dup4\n      add\n      dup6\n      swap1\n      mstore\n      dup4\n      mload\n      dup1\n      dup5\n      sub\n      swap1\n      swap2\n      add\n      dup2\n      mstore\n      0x64\n      swap1\n      swap3\n      add\n      dup4\n      mstore\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      sub(shl(0xe0, 0x01), 0x01)\n      and\n      shl(0xe0, 0x095ea7b3)\n      or\n      dup2\n      mstore\n        /* \"contracts/libraries/TransferHelper.sol\":2068:2138  token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value)) */\n      swap3\n      mload\n      dup3\n      mload\n        /* \"contracts/libraries/TransferHelper.sol\":2033:2045  bool success */\n      0x00\n      swap5\n      dup6\n      swap5\n        /* \"contracts/libraries/TransferHelper.sol\":2068:2078  token.call */\n      swap4\n      dup10\n      and\n      swap4\n        /* \"contracts/libraries/TransferHelper.sol\":2079:2137  abi.encodeWithSelector(IERC20.approve.selector, to, value) */\n      swap3\n        /* \"contracts/libraries/TransferHelper.sol\":2068:2138  token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value)) */\n      swap2\n      dup3\n      swap2\n        /* \"contracts/libraries/TransferHelper.sol\":2079:2137  abi.encodeWithSelector(IERC20.approve.selector, to, value) */\n      swap1\n        /* \"contracts/libraries/TransferHelper.sol\":2068:2138  token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value)) */\n      dup1\n      dup4\n        /* \"contracts/libraries/TransferHelper.sol\":2079:2137  abi.encodeWithSelector(IERC20.approve.selector, to, value) */\n      dup4\n        /* \"contracts/libraries/TransferHelper.sol\":2068:2138  token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value)) */\n    tag_224:\n      0x20\n      dup4\n      lt\n      tag_226\n      jumpi\n      dup1\n      mload\n      dup3\n      mstore\n      not(0x1f)\n      swap1\n      swap3\n      add\n      swap2\n      0x20\n      swap2\n      dup3\n      add\n      swap2\n      add\n      jump(tag_224)\n    tag_226:\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      dup1\n      not\n      dup3\n      mload\n      and\n      dup2\n      dup5\n      mload\n      and\n      dup1\n      dup3\n      or\n      dup6\n      mstore\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      add\n      swap2\n      pop\n      pop\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup7\n      gas\n      call\n      swap2\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_229\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_228)\n    tag_229:\n      0x60\n      swap2\n      pop\n    tag_228:\n      pop\n        /* \"contracts/libraries/TransferHelper.sol\":2032:2138  (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value)) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"contracts/libraries/TransferHelper.sol\":2157:2164  success */\n      dup2\n        /* \"contracts/libraries/TransferHelper.sol\":2157:2214  success && (data.length == 0 || abi.decode(data, (bool))) */\n      dup1\n      iszero\n      tag_231\n      jumpi\n      pop\n        /* \"contracts/libraries/TransferHelper.sol\":2169:2180  data.length */\n      dup1\n      mload\n        /* \"contracts/libraries/TransferHelper.sol\":2169:2185  data.length == 0 */\n      iszero\n      dup1\n        /* \"contracts/libraries/TransferHelper.sol\":2169:2213  data.length == 0 || abi.decode(data, (bool)) */\n      tag_231\n      jumpi\n      pop\n        /* \"contracts/libraries/TransferHelper.sol\":2200:2204  data */\n      dup1\n        /* \"contracts/libraries/TransferHelper.sol\":2189:2213  abi.decode(data, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      0x20\n      dup2\n      lt\n      iszero\n      tag_232\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_232:\n      pop\n      mload\n        /* \"contracts/libraries/TransferHelper.sol\":2169:2213  data.length == 0 || abi.decode(data, (bool)) */\n    tag_231:\n        /* \"contracts/libraries/TransferHelper.sol\":2149:2221  require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA') */\n      tag_233\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x02\n      0x24\n      dup3\n      add\n      mstore\n      shl(0xf0, 0x5341)\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_233:\n        /* \"contracts/libraries/TransferHelper.sol\":1915:2229  function safeApprove(\r... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/libraries/TransferHelper.sol\":2425:2593  function safeTransferETH(address to, uint256 value) internal {\r... */\n    tag_194:\n        /* \"contracts/libraries/TransferHelper.sol\":2538:2550  new bytes(0) */\n      0x40\n      dup1\n      mload\n        /* \"contracts/libraries/TransferHelper.sol\":2498:2510  bool success */\n      0x00\n        /* \"contracts/libraries/TransferHelper.sol\":2538:2550  new bytes(0) */\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      swap1\n      swap3\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/libraries/TransferHelper.sol\":2516:2523  to.call */\n      dup5\n      and\n      swap1\n        /* \"contracts/libraries/TransferHelper.sol\":2531:2536  value */\n      dup4\n      swap1\n        /* \"contracts/libraries/TransferHelper.sol\":2516:2551  to.call{value: value}(new bytes(0)) */\n      mload(0x40)\n      dup1\n      dup3\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n    tag_237:\n      0x20\n      dup4\n      lt\n      tag_239\n      jumpi\n      dup1\n      mload\n      dup3\n      mstore\n      not(0x1f)\n      swap1\n      swap3\n      add\n      swap2\n      0x20\n      swap2\n      dup3\n      add\n      swap2\n      add\n      jump(tag_237)\n    tag_239:\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      dup1\n      not\n      dup3\n      mload\n      and\n      dup2\n      dup5\n      mload\n      and\n      dup1\n      dup3\n      or\n      dup6\n      mstore\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      add\n      swap2\n      pop\n      pop\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_242\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_241)\n    tag_242:\n      0x60\n      swap2\n      pop\n    tag_241:\n      pop\n        /* \"contracts/libraries/TransferHelper.sol\":2497:2551  (bool success, ) = to.call{value: value}(new bytes(0)) */\n      pop\n      swap1\n      pop\n        /* \"contracts/libraries/TransferHelper.sol\":2570:2577  success */\n      dup1\n        /* \"contracts/libraries/TransferHelper.sol\":2562:2585  require(success, 'STE') */\n      tag_243\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x03\n      0x24\n      dup3\n      add\n      mstore\n      shl(0xe8, 0x535445)\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_243:\n        /* \"contracts/libraries/TransferHelper.sol\":2425:2593  function safeTransferETH(address to, uint256 value) internal {\r... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/libraries/TransferHelper.sol\":1239:1555  function safeTransfer(\r... */\n    tag_198:\n        /* \"contracts/libraries/TransferHelper.sol\":1404:1463  abi.encodeWithSelector(IERC20.transfer.selector, to, value) */\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup5\n      dup2\n      and\n      0x24\n      dup4\n      add\n      mstore\n      0x44\n      dup1\n      dup4\n      add\n      dup6\n      swap1\n      mstore\n      dup4\n      mload\n      dup1\n      dup5\n      sub\n      swap1\n      swap2\n      add\n      dup2\n      mstore\n      0x64\n      swap1\n      swap3\n      add\n      dup4\n      mstore\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      sub(shl(0xe0, 0x01), 0x01)\n      and\n      shl(0xe0, 0xa9059cbb)\n      or\n      dup2\n      mstore\n        /* \"contracts/libraries/TransferHelper.sol\":1393:1464  token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value)) */\n      swap3\n      mload\n      dup3\n      mload\n        /* \"contracts/libraries/TransferHelper.sol\":1358:1370  bool success */\n      0x00\n      swap5\n      dup6\n      swap5\n        /* \"contracts/libraries/TransferHelper.sol\":1393:1403  token.call */\n      swap4\n      dup10\n      and\n      swap4\n        /* \"contracts/libraries/TransferHelper.sol\":1404:1463  abi.encodeWithSelector(IERC20.transfer.selector, to, value) */\n      swap3\n        /* \"contracts/libraries/TransferHelper.sol\":1393:1464  token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value)) */\n      swap2\n      dup3\n      swap2\n        /* \"contracts/libraries/TransferHelper.sol\":1404:1463  abi.encodeWithSelector(IERC20.transfer.selector, to, value) */\n      swap1\n        /* \"contracts/libraries/TransferHelper.sol\":1393:1464  token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value)) */\n      dup1\n      dup4\n        /* \"contracts/libraries/TransferHelper.sol\":1404:1463  abi.encodeWithSelector(IERC20.transfer.selector, to, value) */\n      dup4\n        /* \"contracts/libraries/TransferHelper.sol\":1393:1464  token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value)) */\n    tag_245:\n      0x20\n      dup4\n      lt\n      tag_247\n      jumpi\n      dup1\n      mload\n      dup3\n      mstore\n      not(0x1f)\n      swap1\n      swap3\n      add\n      swap2\n      0x20\n      swap2\n      dup3\n      add\n      swap2\n      add\n      jump(tag_245)\n    tag_247:\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      dup1\n      not\n      dup3\n      mload\n      and\n      dup2\n      dup5\n      mload\n      and\n      dup1\n      dup3\n      or\n      dup6\n      mstore\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      add\n      swap2\n      pop\n      pop\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup7\n      gas\n      call\n      swap2\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_250\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_249)\n    tag_250:\n      0x60\n      swap2\n      pop\n    tag_249:\n      pop\n        /* \"contracts/libraries/TransferHelper.sol\":1357:1464  (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value)) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"contracts/libraries/TransferHelper.sol\":1483:1490  success */\n      dup2\n        /* \"contracts/libraries/TransferHelper.sol\":1483:1540  success && (data.length == 0 || abi.decode(data, (bool))) */\n      dup1\n      iszero\n      tag_252\n      jumpi\n      pop\n        /* \"contracts/libraries/TransferHelper.sol\":1495:1506  data.length */\n      dup1\n      mload\n        /* \"contracts/libraries/TransferHelper.sol\":1495:1511  data.length == 0 */\n      iszero\n      dup1\n        /* \"contracts/libraries/TransferHelper.sol\":1495:1539  data.length == 0 || abi.decode(data, (bool)) */\n      tag_252\n      jumpi\n      pop\n        /* \"contracts/libraries/TransferHelper.sol\":1526:1530  data */\n      dup1\n        /* \"contracts/libraries/TransferHelper.sol\":1515:1539  abi.decode(data, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      0x20\n      dup2\n      lt\n      iszero\n      tag_253\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_253:\n      pop\n      mload\n        /* \"contracts/libraries/TransferHelper.sol\":1495:1539  data.length == 0 || abi.decode(data, (bool)) */\n    tag_252:\n        /* \"contracts/libraries/TransferHelper.sol\":1475:1547  require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST') */\n      tag_233\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x02\n      0x24\n      dup3\n      add\n      mstore\n      shl(0xf2, 0x14d5)\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n        /* \"#utility.yul\":14:177   */\n    tag_256:\n        /* \"#utility.yul\":83:103   */\n      dup1\n      calldataload\n        /* \"#utility.yul\":143:151   */\n      0xffffff\n        /* \"#utility.yul\":132:152   */\n      dup2\n      and\n        /* \"#utility.yul\":122:153   */\n      dup2\n      eq\n        /* \"#utility.yul\":112:114   */\n      tag_258\n      jumpi\n        /* \"#utility.yul\":167:168   */\n      0x00\n        /* \"#utility.yul\":164:165   */\n      dup1\n        /* \"#utility.yul\":157:169   */\n      revert\n        /* \"#utility.yul\":112:114   */\n    tag_258:\n        /* \"#utility.yul\":64:177   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":182:340   */\n    tag_259:\n        /* \"#utility.yul\":250:270   */\n      dup1\n      calldataload\n        /* \"#utility.yul\":310:314   */\n      0xff\n        /* \"#utility.yul\":299:315   */\n      dup2\n      and\n        /* \"#utility.yul\":289:316   */\n      dup2\n      eq\n        /* \"#utility.yul\":279:281   */\n      tag_258\n      jumpi\n        /* \"#utility.yul\":330:331   */\n      0x00\n        /* \"#utility.yul\":327:328   */\n      dup1\n        /* \"#utility.yul\":320:332   */\n      revert\n        /* \"#utility.yul\":345:604   */\n    tag_135:\n      0x00\n        /* \"#utility.yul\":457:459   */\n      0x20\n        /* \"#utility.yul\":445:454   */\n      dup3\n        /* \"#utility.yul\":436:443   */\n      dup5\n        /* \"#utility.yul\":432:455   */\n      sub\n        /* \"#utility.yul\":428:460   */\n      slt\n        /* \"#utility.yul\":425:427   */\n      iszero\n      tag_263\n      jumpi\n        /* \"#utility.yul\":478:484   */\n      dup1\n        /* \"#utility.yul\":470:476   */\n      dup2\n        /* \"#utility.yul\":463:485   */\n      revert\n        /* \"#utility.yul\":425:427   */\n    tag_263:\n        /* \"#utility.yul\":522:531   */\n      dup2\n        /* \"#utility.yul\":509:532   */\n      calldataload\n        /* \"#utility.yul\":541:574   */\n      tag_264\n        /* \"#utility.yul\":568:573   */\n      dup2\n        /* \"#utility.yul\":541:574   */\n      tag_265\n      jump\t// in\n    tag_264:\n        /* \"#utility.yul\":593:598   */\n      swap4\n        /* \"#utility.yul\":415:604   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":609:1229   */\n    tag_21:\n      0x00\n      dup1\n      0x00\n      dup1\n        /* \"#utility.yul\":771:774   */\n      0x80\n        /* \"#utility.yul\":759:768   */\n      dup6\n        /* \"#utility.yul\":750:757   */\n      dup8\n        /* \"#utility.yul\":746:769   */\n      sub\n        /* \"#utility.yul\":742:775   */\n      slt\n        /* \"#utility.yul\":739:741   */\n      iszero\n      tag_267\n      jumpi\n        /* \"#utility.yul\":793:799   */\n      dup3\n        /* \"#utility.yul\":785:791   */\n      dup4\n        /* \"#utility.yul\":778:800   */\n      revert\n        /* \"#utility.yul\":739:741   */\n    tag_267:\n        /* \"#utility.yul\":837:846   */\n      dup5\n        /* \"#utility.yul\":824:847   */\n      calldataload\n        /* \"#utility.yul\":856:889   */\n      tag_268\n        /* \"#utility.yul\":883:888   */\n      dup2\n        /* \"#utility.yul\":856:889   */\n      tag_265\n      jump\t// in\n    tag_268:\n        /* \"#utility.yul\":908:913   */\n      swap4\n      pop\n        /* \"#utility.yul\":965:967   */\n      0x20\n        /* \"#utility.yul\":950:968   */\n      dup6\n      add\n        /* \"#utility.yul\":937:969   */\n      calldataload\n        /* \"#utility.yul\":978:1013   */\n      tag_269\n        /* \"#utility.yul\":937:969   */\n      dup2\n        /* \"#utility.yul\":978:1013   */\n      tag_265\n      jump\t// in\n    tag_269:\n        /* \"#utility.yul\":1032:1039   */\n      swap3\n      pop\n        /* \"#utility.yul\":1058:1097   */\n      tag_270\n        /* \"#utility.yul\":1093:1095   */\n      0x40\n        /* \"#utility.yul\":1078:1096   */\n      dup7\n      add\n        /* \"#utility.yul\":1058:1097   */\n      tag_256\n      jump\t// in\n    tag_270:\n        /* \"#utility.yul\":1048:1097   */\n      swap2\n      pop\n        /* \"#utility.yul\":1149:1151   */\n      0x60\n        /* \"#utility.yul\":1138:1147   */\n      dup6\n        /* \"#utility.yul\":1134:1152   */\n      add\n        /* \"#utility.yul\":1121:1153   */\n      calldataload\n        /* \"#utility.yul\":1162:1197   */\n      tag_271\n        /* \"#utility.yul\":1189:1196   */\n      dup2\n        /* \"#utility.yul\":1162:1197   */\n      tag_265\n      jump\t// in\n    tag_271:\n        /* \"#utility.yul\":729:1229   */\n      swap4\n      swap7\n      swap3\n      swap6\n      pop\n      swap1\n      swap4\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1234:1840   */\n    tag_27:\n      0x00\n      dup1\n      0x00\n      dup1\n      0x00\n      dup1\n        /* \"#utility.yul\":1429:1432   */\n      0xc0\n        /* \"#utility.yul\":1417:1426   */\n      dup8\n        /* \"#utility.yul\":1408:1415   */\n      dup10\n        /* \"#utility.yul\":1404:1427   */\n      sub\n        /* \"#utility.yul\":1400:1433   */\n      slt\n        /* \"#utility.yul\":1397:1399   */\n      iszero\n      tag_273\n      jumpi\n        /* \"#utility.yul\":1451:1457   */\n      dup2\n        /* \"#utility.yul\":1443:1449   */\n      dup3\n        /* \"#utility.yul\":1436:1458   */\n      revert\n        /* \"#utility.yul\":1397:1399   */\n    tag_273:\n        /* \"#utility.yul\":1495:1504   */\n      dup7\n        /* \"#utility.yul\":1482:1505   */\n      calldataload\n        /* \"#utility.yul\":1514:1547   */\n      tag_274\n        /* \"#utility.yul\":1541:1546   */\n      dup2\n        /* \"#utility.yul\":1514:1547   */\n      tag_265\n      jump\t// in\n    tag_274:\n        /* \"#utility.yul\":1566:1571   */\n      swap6\n      pop\n        /* \"#utility.yul\":1618:1620   */\n      0x20\n        /* \"#utility.yul\":1603:1621   */\n      dup8\n      add\n        /* \"#utility.yul\":1590:1622   */\n      calldataload\n      swap5\n      pop\n        /* \"#utility.yul\":1669:1671   */\n      0x40\n        /* \"#utility.yul\":1654:1672   */\n      dup8\n      add\n        /* \"#utility.yul\":1641:1673   */\n      calldataload\n      swap4\n      pop\n        /* \"#utility.yul\":1692:1730   */\n      tag_275\n        /* \"#utility.yul\":1726:1728   */\n      0x60\n        /* \"#utility.yul\":1711:1729   */\n      dup9\n      add\n        /* \"#utility.yul\":1692:1730   */\n      tag_259\n      jump\t// in\n    tag_275:\n        /* \"#utility.yul\":1682:1730   */\n      swap3\n      pop\n        /* \"#utility.yul\":1777:1780   */\n      0x80\n        /* \"#utility.yul\":1766:1775   */\n      dup8\n        /* \"#utility.yul\":1762:1781   */\n      add\n        /* \"#utility.yul\":1749:1782   */\n      calldataload\n        /* \"#utility.yul\":1739:1782   */\n      swap2\n      pop\n        /* \"#utility.yul\":1829:1832   */\n      0xa0\n        /* \"#utility.yul\":1818:1827   */\n      dup8\n        /* \"#utility.yul\":1814:1833   */\n      add\n        /* \"#utility.yul\":1801:1834   */\n      calldataload\n        /* \"#utility.yul\":1791:1834   */\n      swap1\n      pop\n        /* \"#utility.yul\":1387:1840   */\n      swap3\n      swap6\n      pop\n      swap3\n      swap6\n      pop\n      swap3\n      swap6\n      jump\t// out\n        /* \"#utility.yul\":1845:2522   */\n    tag_38:\n      0x00\n      dup1\n        /* \"#utility.yul\":2003:2005   */\n      0x20\n        /* \"#utility.yul\":1991:2000   */\n      dup4\n        /* \"#utility.yul\":1982:1989   */\n      dup6\n        /* \"#utility.yul\":1978:2001   */\n      sub\n        /* \"#utility.yul\":1974:2006   */\n      slt\n        /* \"#utility.yul\":1971:1973   */\n      iszero\n      tag_277\n      jumpi\n        /* \"#utility.yul\":2024:2030   */\n      dup2\n        /* \"#utility.yul\":2016:2022   */\n      dup3\n        /* \"#utility.yul\":2009:2031   */\n      revert\n        /* \"#utility.yul\":1971:1973   */\n    tag_277:\n        /* \"#utility.yul\":2069:2078   */\n      dup3\n        /* \"#utility.yul\":2056:2079   */\n      calldataload\n        /* \"#utility.yul\":2098:2116   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":2139:2141   */\n      dup1\n        /* \"#utility.yul\":2131:2137   */\n      dup3\n        /* \"#utility.yul\":2128:2142   */\n      gt\n        /* \"#utility.yul\":2125:2127   */\n      iszero\n      tag_278\n      jumpi\n        /* \"#utility.yul\":2160:2166   */\n      dup4\n        /* \"#utility.yul\":2152:2158   */\n      dup5\n        /* \"#utility.yul\":2145:2167   */\n      revert\n        /* \"#utility.yul\":2125:2127   */\n    tag_278:\n        /* \"#utility.yul\":2203:2209   */\n      dup2\n        /* \"#utility.yul\":2192:2201   */\n      dup6\n        /* \"#utility.yul\":2188:2210   */\n      add\n        /* \"#utility.yul\":2178:2210   */\n      swap2\n      pop\n        /* \"#utility.yul\":2248:2255   */\n      dup6\n        /* \"#utility.yul\":2241:2245   */\n      0x1f\n        /* \"#utility.yul\":2237:2239   */\n      dup4\n        /* \"#utility.yul\":2233:2246   */\n      add\n        /* \"#utility.yul\":2229:2256   */\n      slt\n        /* \"#utility.yul\":2219:2221   */\n      tag_279\n      jumpi\n        /* \"#utility.yul\":2275:2281   */\n      dup4\n        /* \"#utility.yul\":2267:2273   */\n      dup5\n        /* \"#utility.yul\":2260:2282   */\n      revert\n        /* \"#utility.yul\":2219:2221   */\n    tag_279:\n        /* \"#utility.yul\":2320:2322   */\n      dup2\n        /* \"#utility.yul\":2307:2323   */\n      calldataload\n        /* \"#utility.yul\":2346:2348   */\n      dup2\n        /* \"#utility.yul\":2338:2344   */\n      dup2\n        /* \"#utility.yul\":2335:2349   */\n      gt\n        /* \"#utility.yul\":2332:2334   */\n      iszero\n      tag_280\n      jumpi\n        /* \"#utility.yul\":2367:2373   */\n      dup5\n        /* \"#utility.yul\":2359:2365   */\n      dup6\n        /* \"#utility.yul\":2352:2374   */\n      revert\n        /* \"#utility.yul\":2332:2334   */\n    tag_280:\n        /* \"#utility.yul\":2426:2433   */\n      dup7\n        /* \"#utility.yul\":2421:2423   */\n      0x20\n        /* \"#utility.yul\":2415:2417   */\n      dup1\n        /* \"#utility.yul\":2407:2413   */\n      dup4\n        /* \"#utility.yul\":2403:2418   */\n      mul\n        /* \"#utility.yul\":2399:2401   */\n      dup6\n        /* \"#utility.yul\":2395:2419   */\n      add\n        /* \"#utility.yul\":2391:2424   */\n      add\n        /* \"#utility.yul\":2388:2434   */\n      gt\n        /* \"#utility.yul\":2385:2387   */\n      iszero\n      tag_281\n      jumpi\n        /* \"#utility.yul\":2452:2458   */\n      dup5\n        /* \"#utility.yul\":2444:2450   */\n      dup6\n        /* \"#utility.yul\":2437:2459   */\n      revert\n        /* \"#utility.yul\":2385:2387   */\n    tag_281:\n        /* \"#utility.yul\":2488:2490   */\n      0x20\n        /* \"#utility.yul\":2480:2491   */\n      swap3\n      swap1\n      swap3\n      add\n      swap7\n        /* \"#utility.yul\":2510:2516   */\n      swap2\n      swap6\n      pop\n        /* \"#utility.yul\":1961:2522   */\n      swap1\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2527:2780   */\n    tag_184:\n      0x00\n        /* \"#utility.yul\":2636:2638   */\n      0x20\n        /* \"#utility.yul\":2624:2633   */\n      dup3\n        /* \"#utility.yul\":2615:2622   */\n      dup5\n        /* \"#utility.yul\":2611:2634   */\n      sub\n        /* \"#utility.yul\":2607:2639   */\n      slt\n        /* \"#utility.yul\":2604:2606   */\n      iszero\n      tag_283\n      jumpi\n        /* \"#utility.yul\":2657:2663   */\n      dup1\n        /* \"#utility.yul\":2649:2655   */\n      dup2\n        /* \"#utility.yul\":2642:2664   */\n      revert\n        /* \"#utility.yul\":2604:2606   */\n    tag_283:\n        /* \"#utility.yul\":2701:2710   */\n      dup2\n        /* \"#utility.yul\":2688:2711   */\n      calldataload\n        /* \"#utility.yul\":2720:2750   */\n      tag_264\n        /* \"#utility.yul\":2744:2749   */\n      dup2\n        /* \"#utility.yul\":2720:2750   */\n      tag_285\n      jump\t// in\n        /* \"#utility.yul\":2785:3042   */\n    tag_143:\n      0x00\n        /* \"#utility.yul\":2905:2907   */\n      0x20\n        /* \"#utility.yul\":2893:2902   */\n      dup3\n        /* \"#utility.yul\":2884:2891   */\n      dup5\n        /* \"#utility.yul\":2880:2903   */\n      sub\n        /* \"#utility.yul\":2876:2908   */\n      slt\n        /* \"#utility.yul\":2873:2875   */\n      iszero\n      tag_287\n      jumpi\n        /* \"#utility.yul\":2926:2932   */\n      dup1\n        /* \"#utility.yul\":2918:2924   */\n      dup2\n        /* \"#utility.yul\":2911:2933   */\n      revert\n        /* \"#utility.yul\":2873:2875   */\n    tag_287:\n        /* \"#utility.yul\":2963:2972   */\n      dup2\n        /* \"#utility.yul\":2957:2973   */\n      mload\n        /* \"#utility.yul\":2982:3012   */\n      tag_264\n        /* \"#utility.yul\":3006:3011   */\n      dup2\n        /* \"#utility.yul\":2982:3012   */\n      tag_285\n      jump\t// in\n        /* \"#utility.yul\":3047:3340   */\n    tag_169:\n      0x00\n        /* \"#utility.yul\":3157:3159   */\n      0x20\n        /* \"#utility.yul\":3145:3154   */\n      dup3\n        /* \"#utility.yul\":3136:3143   */\n      dup5\n        /* \"#utility.yul\":3132:3155   */\n      sub\n        /* \"#utility.yul\":3128:3160   */\n      slt\n        /* \"#utility.yul\":3125:3127   */\n      iszero\n      tag_290\n      jumpi\n        /* \"#utility.yul\":3178:3184   */\n      dup1\n        /* \"#utility.yul\":3170:3176   */\n      dup2\n        /* \"#utility.yul\":3163:3185   */\n      revert\n        /* \"#utility.yul\":3125:3127   */\n    tag_290:\n        /* \"#utility.yul\":3222:3231   */\n      dup2\n        /* \"#utility.yul\":3209:3232   */\n      calldataload\n        /* \"#utility.yul\":3275:3280   */\n      dup1\n        /* \"#utility.yul\":3272:3273   */\n      0x02\n        /* \"#utility.yul\":3261:3281   */\n      signextend\n        /* \"#utility.yul\":3254:3259   */\n      dup2\n        /* \"#utility.yul\":3251:3282   */\n      eq\n        /* \"#utility.yul\":3241:3243   */\n      tag_264\n      jumpi\n        /* \"#utility.yul\":3301:3307   */\n      dup2\n        /* \"#utility.yul\":3293:3299   */\n      dup3\n        /* \"#utility.yul\":3286:3308   */\n      revert\n        /* \"#utility.yul\":3345:4221   */\n    tag_113:\n      0x00\n        /* \"#utility.yul\":3478:3480   */\n      0x20\n        /* \"#utility.yul\":3466:3475   */\n      dup3\n        /* \"#utility.yul\":3457:3464   */\n      dup5\n        /* \"#utility.yul\":3453:3476   */\n      sub\n        /* \"#utility.yul\":3449:3481   */\n      slt\n        /* \"#utility.yul\":3446:3448   */\n      iszero\n      tag_293\n      jumpi\n        /* \"#utility.yul\":3499:3505   */\n      dup1\n        /* \"#utility.yul\":3491:3497   */\n      dup2\n        /* \"#utility.yul\":3484:3506   */\n      revert\n        /* \"#utility.yul\":3446:3448   */\n    tag_293:\n        /* \"#utility.yul\":3537:3546   */\n      dup2\n        /* \"#utility.yul\":3531:3547   */\n      mload\n        /* \"#utility.yul\":3566:3584   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":3607:3609   */\n      dup1\n        /* \"#utility.yul\":3599:3605   */\n      dup3\n        /* \"#utility.yul\":3596:3610   */\n      gt\n        /* \"#utility.yul\":3593:3595   */\n      iszero\n      tag_294\n      jumpi\n        /* \"#utility.yul\":3628:3634   */\n      dup3\n        /* \"#utility.yul\":3620:3626   */\n      dup4\n        /* \"#utility.yul\":3613:3635   */\n      revert\n        /* \"#utility.yul\":3593:3595   */\n    tag_294:\n        /* \"#utility.yul\":3671:3677   */\n      dup2\n        /* \"#utility.yul\":3660:3669   */\n      dup5\n        /* \"#utility.yul\":3656:3678   */\n      add\n        /* \"#utility.yul\":3646:3678   */\n      swap2\n      pop\n        /* \"#utility.yul\":3716:3723   */\n      dup5\n        /* \"#utility.yul\":3709:3713   */\n      0x1f\n        /* \"#utility.yul\":3705:3707   */\n      dup4\n        /* \"#utility.yul\":3701:3714   */\n      add\n        /* \"#utility.yul\":3697:3724   */\n      slt\n        /* \"#utility.yul\":3687:3689   */\n      tag_295\n      jumpi\n        /* \"#utility.yul\":3743:3749   */\n      dup3\n        /* \"#utility.yul\":3735:3741   */\n      dup4\n        /* \"#utility.yul\":3728:3750   */\n      revert\n        /* \"#utility.yul\":3687:3689   */\n    tag_295:\n        /* \"#utility.yul\":3777:3779   */\n      dup2\n        /* \"#utility.yul\":3771:3780   */\n      mload\n        /* \"#utility.yul\":3799:3801   */\n      dup2\n        /* \"#utility.yul\":3795:3797   */\n      dup2\n        /* \"#utility.yul\":3792:3802   */\n      gt\n        /* \"#utility.yul\":3789:3791   */\n      iszero\n      tag_296\n      jumpi\n        /* \"#utility.yul\":3805:3814   */\n      invalid\n        /* \"#utility.yul\":3789:3791   */\n    tag_296:\n        /* \"#utility.yul\":3845:3847   */\n      0x40\n        /* \"#utility.yul\":3839:3848   */\n      mload\n        /* \"#utility.yul\":3914:3916   */\n      0x1f\n        /* \"#utility.yul\":3895:3908   */\n      dup3\n      add\n      not(0x1f)\n        /* \"#utility.yul\":3891:3918   */\n      and\n        /* \"#utility.yul\":3879:3919   */\n      dup2\n      add\n        /* \"#utility.yul\":3921:3923   */\n      0x20\n        /* \"#utility.yul\":3875:3924   */\n      add\n        /* \"#utility.yul\":3939:3957   */\n      dup4\n      dup2\n      gt\n        /* \"#utility.yul\":3959:3981   */\n      dup3\n      dup3\n      lt\n        /* \"#utility.yul\":3936:3982   */\n      or\n        /* \"#utility.yul\":3933:3935   */\n      iszero\n      tag_297\n      jumpi\n        /* \"#utility.yul\":3985:3994   */\n      invalid\n        /* \"#utility.yul\":3933:3935   */\n    tag_297:\n        /* \"#utility.yul\":4012:4014   */\n      0x40\n        /* \"#utility.yul\":4005:4027   */\n      mstore\n        /* \"#utility.yul\":4036:4054   */\n      dup2\n      dup2\n      mstore\n        /* \"#utility.yul\":4073:4084   */\n      dup4\n      dup3\n      add\n        /* \"#utility.yul\":4086:4088   */\n      0x20\n        /* \"#utility.yul\":4069:4089   */\n      add\n        /* \"#utility.yul\":4066:4099   */\n      dup8\n      lt\n        /* \"#utility.yul\":4063:4065   */\n      iszero\n      tag_298\n      jumpi\n        /* \"#utility.yul\":4117:4123   */\n      dup5\n        /* \"#utility.yul\":4109:4115   */\n      dup6\n        /* \"#utility.yul\":4102:4124   */\n      revert\n        /* \"#utility.yul\":4063:4065   */\n    tag_298:\n        /* \"#utility.yul\":4135:4190   */\n      tag_299\n        /* \"#utility.yul\":4187:4189   */\n      dup3\n        /* \"#utility.yul\":4182:4184   */\n      0x20\n        /* \"#utility.yul\":4174:4180   */\n      dup4\n        /* \"#utility.yul\":4170:4185   */\n      add\n        /* \"#utility.yul\":4165:4167   */\n      0x20\n        /* \"#utility.yul\":4161:4163   */\n      dup8\n        /* \"#utility.yul\":4157:4168   */\n      add\n        /* \"#utility.yul\":4135:4190   */\n      tag_300\n      jump\t// in\n    tag_299:\n        /* \"#utility.yul\":4209:4215   */\n      swap7\n        /* \"#utility.yul\":3436:4221   */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4226:4436   */\n    tag_56:\n      0x00\n        /* \"#utility.yul\":4371:4374   */\n      0x01a0\n        /* \"#utility.yul\":4359:4368   */\n      dup3\n        /* \"#utility.yul\":4350:4357   */\n      dup5\n        /* \"#utility.yul\":4346:4369   */\n      sub\n        /* \"#utility.yul\":4342:4375   */\n      slt\n        /* \"#utility.yul\":4339:4341   */\n      iszero\n      tag_302\n      jumpi\n        /* \"#utility.yul\":4393:4399   */\n      dup1\n        /* \"#utility.yul\":4385:4391   */\n      dup2\n        /* \"#utility.yul\":4378:4400   */\n      revert\n        /* \"#utility.yul\":4339:4341   */\n    tag_302:\n      pop\n        /* \"#utility.yul\":4421:4430   */\n      swap2\n        /* \"#utility.yul\":4329:4436   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4441:4637   */\n    tag_167:\n      0x00\n        /* \"#utility.yul\":4552:4554   */\n      0x20\n        /* \"#utility.yul\":4540:4549   */\n      dup3\n        /* \"#utility.yul\":4531:4538   */\n      dup5\n        /* \"#utility.yul\":4527:4550   */\n      sub\n        /* \"#utility.yul\":4523:4555   */\n      slt\n        /* \"#utility.yul\":4520:4522   */\n      iszero\n      tag_304\n      jumpi\n        /* \"#utility.yul\":4573:4579   */\n      dup1\n        /* \"#utility.yul\":4565:4571   */\n      dup2\n        /* \"#utility.yul\":4558:4580   */\n      revert\n        /* \"#utility.yul\":4520:4522   */\n    tag_304:\n        /* \"#utility.yul\":4601:4631   */\n      tag_264\n        /* \"#utility.yul\":4621:4630   */\n      dup3\n        /* \"#utility.yul\":4601:4631   */\n      tag_256\n      jump\t// in\n        /* \"#utility.yul\":4642:5151   */\n    tag_178:\n      0x00\n      dup1\n      0x00\n      dup1\n        /* \"#utility.yul\":4816:4819   */\n      0x80\n        /* \"#utility.yul\":4804:4813   */\n      dup6\n        /* \"#utility.yul\":4795:4802   */\n      dup8\n        /* \"#utility.yul\":4791:4814   */\n      sub\n        /* \"#utility.yul\":4787:4820   */\n      slt\n        /* \"#utility.yul\":4784:4786   */\n      iszero\n      tag_307\n      jumpi\n        /* \"#utility.yul\":4838:4844   */\n      dup4\n        /* \"#utility.yul\":4830:4836   */\n      dup5\n        /* \"#utility.yul\":4823:4845   */\n      revert\n        /* \"#utility.yul\":4784:4786   */\n    tag_307:\n        /* \"#utility.yul\":4872:4881   */\n      dup5\n        /* \"#utility.yul\":4866:4882   */\n      mload\n        /* \"#utility.yul\":4856:4882   */\n      swap4\n      pop\n        /* \"#utility.yul\":4925:4927   */\n      0x20\n        /* \"#utility.yul\":4914:4923   */\n      dup6\n        /* \"#utility.yul\":4910:4928   */\n      add\n        /* \"#utility.yul\":4904:4929   */\n      mload\n        /* \"#utility.yul\":4969:5003   */\n      0xffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":4962:4967   */\n      dup2\n        /* \"#utility.yul\":4958:5004   */\n      and\n        /* \"#utility.yul\":4951:4956   */\n      dup2\n        /* \"#utility.yul\":4948:5005   */\n      eq\n        /* \"#utility.yul\":4938:4940   */\n      tag_308\n      jumpi\n        /* \"#utility.yul\":5024:5030   */\n      dup4\n        /* \"#utility.yul\":5016:5022   */\n      dup5\n        /* \"#utility.yul\":5009:5031   */\n      revert\n        /* \"#utility.yul\":4938:4940   */\n    tag_308:\n        /* \"#utility.yul\":5097:5099   */\n      0x40\n        /* \"#utility.yul\":5082:5100   */\n      dup7\n      add\n        /* \"#utility.yul\":5076:5101   */\n      mload\n        /* \"#utility.yul\":5141:5143   */\n      0x60\n        /* \"#utility.yul\":5126:5144   */\n      swap1\n      swap7\n      add\n        /* \"#utility.yul\":5120:5145   */\n      mload\n        /* \"#utility.yul\":4774:5151   */\n      swap5\n      swap8\n        /* \"#utility.yul\":5052:5057   */\n      swap1\n      swap7\n      pop\n        /* \"#utility.yul\":4774:5151   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5156:5411   */\n    tag_151:\n      0x00\n      dup1\n        /* \"#utility.yul\":5296:5298   */\n      0x40\n        /* \"#utility.yul\":5284:5293   */\n      dup4\n        /* \"#utility.yul\":5275:5282   */\n      dup6\n        /* \"#utility.yul\":5271:5294   */\n      sub\n        /* \"#utility.yul\":5267:5299   */\n      slt\n        /* \"#utility.yul\":5264:5266   */\n      iszero\n      tag_310\n      jumpi\n        /* \"#utility.yul\":5317:5323   */\n      dup2\n        /* \"#utility.yul\":5309:5315   */\n      dup3\n        /* \"#utility.yul\":5302:5324   */\n      revert\n        /* \"#utility.yul\":5264:5266   */\n    tag_310:\n      pop\n      pop\n        /* \"#utility.yul\":5345:5361   */\n      dup1\n      mload\n        /* \"#utility.yul\":5401:5403   */\n      0x20\n        /* \"#utility.yul\":5386:5404   */\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":5380:5405   */\n      mload\n        /* \"#utility.yul\":5345:5361   */\n      swap1\n      swap3\n        /* \"#utility.yul\":5380:5405   */\n      swap1\n      swap2\n      pop\n        /* \"#utility.yul\":5254:5411   */\n      jump\t// out\n        /* \"#utility.yul\":5416:5610   */\n    tag_126:\n      0x00\n        /* \"#utility.yul\":5526:5528   */\n      0x20\n        /* \"#utility.yul\":5514:5523   */\n      dup3\n        /* \"#utility.yul\":5505:5512   */\n      dup5\n        /* \"#utility.yul\":5501:5524   */\n      sub\n        /* \"#utility.yul\":5497:5529   */\n      slt\n        /* \"#utility.yul\":5494:5496   */\n      iszero\n      tag_312\n      jumpi\n        /* \"#utility.yul\":5547:5553   */\n      dup1\n        /* \"#utility.yul\":5539:5545   */\n      dup2\n        /* \"#utility.yul\":5532:5554   */\n      revert\n        /* \"#utility.yul\":5494:5496   */\n    tag_312:\n        /* \"#utility.yul\":5575:5604   */\n      tag_264\n        /* \"#utility.yul\":5594:5603   */\n      dup3\n        /* \"#utility.yul\":5575:5604   */\n      tag_259\n      jump\t// in\n        /* \"#utility.yul\":5615:5721   */\n    tag_314:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":5683:5714   */\n      and\n        /* \"#utility.yul\":5671:5715   */\n      swap1\n      mstore\n        /* \"#utility.yul\":5661:5721   */\n      jump\t// out\n        /* \"#utility.yul\":5726:5985   */\n    tag_316:\n      0x00\n        /* \"#utility.yul\":5807:5812   */\n      dup2\n        /* \"#utility.yul\":5801:5813   */\n      mload\n        /* \"#utility.yul\":5834:5840   */\n      dup1\n        /* \"#utility.yul\":5829:5832   */\n      dup5\n        /* \"#utility.yul\":5822:5841   */\n      mstore\n        /* \"#utility.yul\":5850:5913   */\n      tag_318\n        /* \"#utility.yul\":5906:5912   */\n      dup2\n        /* \"#utility.yul\":5899:5903   */\n      0x20\n        /* \"#utility.yul\":5894:5897   */\n      dup7\n        /* \"#utility.yul\":5890:5904   */\n      add\n        /* \"#utility.yul\":5883:5887   */\n      0x20\n        /* \"#utility.yul\":5876:5881   */\n      dup7\n        /* \"#utility.yul\":5872:5888   */\n      add\n        /* \"#utility.yul\":5850:5913   */\n      tag_300\n      jump\t// in\n    tag_318:\n        /* \"#utility.yul\":5967:5969   */\n      0x1f\n        /* \"#utility.yul\":5946:5961   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":5942:5971   */\n      and\n        /* \"#utility.yul\":5933:5972   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":5974:5978   */\n      0x20\n        /* \"#utility.yul\":5929:5979   */\n      add\n      swap3\n        /* \"#utility.yul\":5777:5985   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5990:6083   */\n    tag_319:\n        /* \"#utility.yul\":6067:6068   */\n      0x02\n        /* \"#utility.yul\":6056:6076   */\n      signextend\n        /* \"#utility.yul\":6044:6077   */\n      swap1\n      mstore\n        /* \"#utility.yul\":6034:6083   */\n      jump\t// out\n        /* \"#utility.yul\":6088:6182   */\n    tag_321:\n        /* \"#utility.yul\":6166:6174   */\n      0xffffff\n        /* \"#utility.yul\":6155:6175   */\n      and\n        /* \"#utility.yul\":6143:6176   */\n      swap1\n      mstore\n        /* \"#utility.yul\":6133:6182   */\n      jump\t// out\n        /* \"#utility.yul\":6187:6460   */\n    tag_106:\n      0x00\n        /* \"#utility.yul\":6370:6376   */\n      dup3\n        /* \"#utility.yul\":6362:6368   */\n      dup5\n        /* \"#utility.yul\":6357:6360   */\n      dup4\n        /* \"#utility.yul\":6344:6377   */\n      calldatacopy\n        /* \"#utility.yul\":6396:6412   */\n      swap2\n      add\n        /* \"#utility.yul\":6421:6436   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":6396:6412   */\n      swap2\n        /* \"#utility.yul\":6334:6460   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6465:6668   */\n    tag_24:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":6629:6661   */\n      swap2\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":6611:6662   */\n      dup2\n      mstore\n        /* \"#utility.yul\":6599:6601   */\n      0x20\n        /* \"#utility.yul\":6584:6602   */\n      add\n      swap1\n        /* \"#utility.yul\":6566:6668   */\n      jump\t// out\n        /* \"#utility.yul\":6889:7272   */\n    tag_138:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":7155:7170   */\n      swap4\n      dup5\n      and\n        /* \"#utility.yul\":7137:7171   */\n      dup2\n      mstore\n        /* \"#utility.yul\":7207:7222   */\n      swap2\n      swap1\n      swap3\n      and\n        /* \"#utility.yul\":7202:7204   */\n      0x20\n        /* \"#utility.yul\":7187:7205   */\n      dup3\n      add\n        /* \"#utility.yul\":7180:7223   */\n      mstore\n        /* \"#utility.yul\":7254:7256   */\n      0x40\n        /* \"#utility.yul\":7239:7257   */\n      dup2\n      add\n        /* \"#utility.yul\":7232:7266   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":7087:7089   */\n      0x60\n        /* \"#utility.yul\":7072:7090   */\n      add\n      swap1\n        /* \"#utility.yul\":7054:7272   */\n      jump\t// out\n        /* \"#utility.yul\":7277:8083   */\n    tag_41:\n      0x00\n        /* \"#utility.yul\":7466:7468   */\n      0x20\n        /* \"#utility.yul\":7506:7508   */\n      dup1\n        /* \"#utility.yul\":7495:7504   */\n      dup4\n        /* \"#utility.yul\":7491:7509   */\n      add\n        /* \"#utility.yul\":7536:7538   */\n      dup2\n        /* \"#utility.yul\":7525:7534   */\n      dup5\n        /* \"#utility.yul\":7518:7539   */\n      mstore\n        /* \"#utility.yul\":7559:7565   */\n      dup1\n        /* \"#utility.yul\":7594:7600   */\n      dup6\n        /* \"#utility.yul\":7588:7601   */\n      mload\n        /* \"#utility.yul\":7625:7631   */\n      dup1\n        /* \"#utility.yul\":7617:7623   */\n      dup4\n        /* \"#utility.yul\":7610:7632   */\n      mstore\n        /* \"#utility.yul\":7663:7665   */\n      0x40\n        /* \"#utility.yul\":7652:7661   */\n      dup7\n        /* \"#utility.yul\":7648:7666   */\n      add\n        /* \"#utility.yul\":7641:7666   */\n      swap2\n      pop\n        /* \"#utility.yul\":7726:7728   */\n      0x40\n        /* \"#utility.yul\":7720:7722   */\n      dup5\n        /* \"#utility.yul\":7712:7718   */\n      dup3\n        /* \"#utility.yul\":7708:7723   */\n      mul\n        /* \"#utility.yul\":7697:7706   */\n      dup8\n        /* \"#utility.yul\":7693:7724   */\n      add\n        /* \"#utility.yul\":7689:7729   */\n      add\n        /* \"#utility.yul\":7675:7729   */\n      swap3\n      pop\n        /* \"#utility.yul\":7764:7766   */\n      dup4\n        /* \"#utility.yul\":7756:7762   */\n      dup8\n        /* \"#utility.yul\":7752:7767   */\n      add\n        /* \"#utility.yul\":7785:7789   */\n      dup6\n        /* \"#utility.yul\":7798:8054   */\n    tag_328:\n        /* \"#utility.yul\":7812:7818   */\n      dup3\n        /* \"#utility.yul\":7809:7810   */\n      dup2\n        /* \"#utility.yul\":7806:7819   */\n      lt\n        /* \"#utility.yul\":7798:8054   */\n      iszero\n      tag_330\n      jumpi\n        /* \"#utility.yul\":7905:7907   */\n      0x3f\n        /* \"#utility.yul\":7901:7908   */\n      not\n        /* \"#utility.yul\":7889:7898   */\n      dup9\n        /* \"#utility.yul\":7881:7887   */\n      dup7\n        /* \"#utility.yul\":7877:7899   */\n      sub\n        /* \"#utility.yul\":7873:7909   */\n      add\n        /* \"#utility.yul\":7868:7871   */\n      dup5\n        /* \"#utility.yul\":7861:7910   */\n      mstore\n        /* \"#utility.yul\":7933:7974   */\n      tag_331\n        /* \"#utility.yul\":7967:7973   */\n      dup6\n        /* \"#utility.yul\":7958:7964   */\n      dup4\n        /* \"#utility.yul\":7952:7965   */\n      mload\n        /* \"#utility.yul\":7933:7974   */\n      tag_316\n      jump\t// in\n    tag_331:\n        /* \"#utility.yul\":7923:7974   */\n      swap5\n      pop\n        /* \"#utility.yul\":8032:8044   */\n      swap3\n      dup6\n      add\n      swap3\n        /* \"#utility.yul\":7997:8012   */\n      swap1\n      dup6\n      add\n      swap1\n        /* \"#utility.yul\":7834:7835   */\n      0x01\n        /* \"#utility.yul\":7827:7836   */\n      add\n        /* \"#utility.yul\":7798:8054   */\n      jump(tag_328)\n    tag_330:\n      pop\n        /* \"#utility.yul\":8071:8077   */\n      swap3\n      swap8\n        /* \"#utility.yul\":7446:8083   */\n      swap7\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8088:8309   */\n    tag_115:\n      0x00\n        /* \"#utility.yul\":8237:8239   */\n      0x20\n        /* \"#utility.yul\":8226:8235   */\n      dup3\n        /* \"#utility.yul\":8219:8240   */\n      mstore\n        /* \"#utility.yul\":8257:8303   */\n      tag_264\n        /* \"#utility.yul\":8299:8301   */\n      0x20\n        /* \"#utility.yul\":8288:8297   */\n      dup4\n        /* \"#utility.yul\":8284:8302   */\n      add\n        /* \"#utility.yul\":8276:8282   */\n      dup5\n        /* \"#utility.yul\":8257:8303   */\n      tag_316\n      jump\t// in\n        /* \"#utility.yul\":8314:8658   */\n    tag_129:\n        /* \"#utility.yul\":8516:8518   */\n      0x20\n        /* \"#utility.yul\":8498:8519   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":8555:8557   */\n      0x14\n        /* \"#utility.yul\":8535:8553   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":8528:8558   */\n      mstore\n      shl(0x62, 0x14195c98d95b9d1859d9481d1bdbc81cdb585b1b)\n        /* \"#utility.yul\":8589:8591   */\n      0x40\n        /* \"#utility.yul\":8574:8592   */\n      dup3\n      add\n        /* \"#utility.yul\":8567:8617   */\n      mstore\n        /* \"#utility.yul\":8649:8651   */\n      0x60\n        /* \"#utility.yul\":8634:8652   */\n      add\n      swap1\n        /* \"#utility.yul\":8488:8658   */\n      jump\t// out\n        /* \"#utility.yul\":8663:8995   */\n    tag_18:\n        /* \"#utility.yul\":8865:8867   */\n      0x20\n        /* \"#utility.yul\":8847:8868   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":8904:8905   */\n      0x09\n        /* \"#utility.yul\":8884:8902   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":8877:8906   */\n      mstore\n      shl(0xb8, 0x4e6f74205745544839)\n        /* \"#utility.yul\":8937:8939   */\n      0x40\n        /* \"#utility.yul\":8922:8940   */\n      dup3\n      add\n        /* \"#utility.yul\":8915:8954   */\n      mstore\n        /* \"#utility.yul\":8986:8988   */\n      0x60\n        /* \"#utility.yul\":8971:8989   */\n      add\n      swap1\n        /* \"#utility.yul\":8837:8995   */\n      jump\t// out\n        /* \"#utility.yul\":9000:9344   */\n    tag_133:\n        /* \"#utility.yul\":9202:9204   */\n      0x20\n        /* \"#utility.yul\":9184:9205   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":9241:9243   */\n      0x14\n        /* \"#utility.yul\":9221:9239   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":9214:9244   */\n      mstore\n      shl(0x60, 0x50657263656e7461676520746f6f206c61726765)\n        /* \"#utility.yul\":9275:9277   */\n      0x40\n        /* \"#utility.yul\":9260:9278   */\n      dup3\n      add\n        /* \"#utility.yul\":9253:9303   */\n      mstore\n        /* \"#utility.yul\":9335:9337   */\n      0x60\n        /* \"#utility.yul\":9320:9338   */\n      add\n      swap1\n        /* \"#utility.yul\":9174:9344   */\n      jump\t// out\n        /* \"#utility.yul\":9349:10583   */\n    tag_173:\n      0x00\n        /* \"#utility.yul\":9539:9542   */\n      0x0160\n        /* \"#utility.yul\":9528:9537   */\n      dup3\n        /* \"#utility.yul\":9524:9543   */\n      add\n        /* \"#utility.yul\":9516:9543   */\n      swap1\n      pop\n        /* \"#utility.yul\":9552:9598   */\n      tag_338\n        /* \"#utility.yul\":9588:9597   */\n      dup3\n        /* \"#utility.yul\":9579:9585   */\n      dup5\n        /* \"#utility.yul\":9573:9586   */\n      mload\n        /* \"#utility.yul\":9552:9598   */\n      tag_314\n      jump\t// in\n    tag_338:\n        /* \"#utility.yul\":9645:9649   */\n      0x20\n        /* \"#utility.yul\":9637:9643   */\n      dup4\n        /* \"#utility.yul\":9633:9650   */\n      add\n        /* \"#utility.yul\":9627:9651   */\n      mload\n        /* \"#utility.yul\":9660:9716   */\n      tag_339\n        /* \"#utility.yul\":9710:9714   */\n      0x20\n        /* \"#utility.yul\":9699:9708   */\n      dup5\n        /* \"#utility.yul\":9695:9715   */\n      add\n        /* \"#utility.yul\":9681:9693   */\n      dup3\n        /* \"#utility.yul\":9660:9716   */\n      tag_314\n      jump\t// in\n    tag_339:\n      pop\n        /* \"#utility.yul\":9765:9769   */\n      0x40\n        /* \"#utility.yul\":9757:9763   */\n      dup4\n        /* \"#utility.yul\":9753:9770   */\n      add\n        /* \"#utility.yul\":9747:9771   */\n      mload\n        /* \"#utility.yul\":9780:9837   */\n      tag_340\n        /* \"#utility.yul\":9831:9835   */\n      0x40\n        /* \"#utility.yul\":9820:9829   */\n      dup5\n        /* \"#utility.yul\":9816:9836   */\n      add\n        /* \"#utility.yul\":9800:9814   */\n      dup3\n        /* \"#utility.yul\":9780:9837   */\n      tag_321\n      jump\t// in\n    tag_340:\n      pop\n        /* \"#utility.yul\":9886:9890   */\n      0x60\n        /* \"#utility.yul\":9878:9884   */\n      dup4\n        /* \"#utility.yul\":9874:9891   */\n      add\n        /* \"#utility.yul\":9868:9892   */\n      mload\n        /* \"#utility.yul\":9901:9957   */\n      tag_341\n        /* \"#utility.yul\":9951:9955   */\n      0x60\n        /* \"#utility.yul\":9940:9949   */\n      dup5\n        /* \"#utility.yul\":9936:9956   */\n      add\n        /* \"#utility.yul\":9920:9934   */\n      dup3\n        /* \"#utility.yul\":9901:9957   */\n      tag_319\n      jump\t// in\n    tag_341:\n      pop\n        /* \"#utility.yul\":10006:10010   */\n      0x80\n        /* \"#utility.yul\":9998:10004   */\n      dup4\n        /* \"#utility.yul\":9994:10011   */\n      add\n        /* \"#utility.yul\":9988:10012   */\n      mload\n        /* \"#utility.yul\":10021:10077   */\n      tag_342\n        /* \"#utility.yul\":10071:10075   */\n      0x80\n        /* \"#utility.yul\":10060:10069   */\n      dup5\n        /* \"#utility.yul\":10056:10076   */\n      add\n        /* \"#utility.yul\":10040:10054   */\n      dup3\n        /* \"#utility.yul\":10021:10077   */\n      tag_319\n      jump\t// in\n    tag_342:\n      pop\n        /* \"#utility.yul\":10133:10137   */\n      0xa0\n        /* \"#utility.yul\":10125:10131   */\n      dup4\n        /* \"#utility.yul\":10121:10138   */\n      add\n        /* \"#utility.yul\":10115:10139   */\n      mload\n        /* \"#utility.yul\":10108:10112   */\n      0xa0\n        /* \"#utility.yul\":10097:10106   */\n      dup4\n        /* \"#utility.yul\":10093:10113   */\n      add\n        /* \"#utility.yul\":10086:10140   */\n      mstore\n        /* \"#utility.yul\":10196:10200   */\n      0xc0\n        /* \"#utility.yul\":10188:10194   */\n      dup4\n        /* \"#utility.yul\":10184:10201   */\n      add\n        /* \"#utility.yul\":10178:10202   */\n      mload\n        /* \"#utility.yul\":10171:10175   */\n      0xc0\n        /* \"#utility.yul\":10160:10169   */\n      dup4\n        /* \"#utility.yul\":10156:10176   */\n      add\n        /* \"#utility.yul\":10149:10203   */\n      mstore\n        /* \"#utility.yul\":10259:10263   */\n      0xe0\n        /* \"#utility.yul\":10251:10257   */\n      dup4\n        /* \"#utility.yul\":10247:10264   */\n      add\n        /* \"#utility.yul\":10241:10265   */\n      mload\n        /* \"#utility.yul\":10234:10238   */\n      0xe0\n        /* \"#utility.yul\":10223:10232   */\n      dup4\n        /* \"#utility.yul\":10219:10239   */\n      add\n        /* \"#utility.yul\":10212:10266   */\n      mstore\n        /* \"#utility.yul\":10285:10291   */\n      0x0100\n        /* \"#utility.yul\":10345:10347   */\n      dup1\n        /* \"#utility.yul\":10337:10343   */\n      dup5\n        /* \"#utility.yul\":10333:10348   */\n      add\n        /* \"#utility.yul\":10327:10349   */\n      mload\n        /* \"#utility.yul\":10322:10324   */\n      dup2\n        /* \"#utility.yul\":10311:10320   */\n      dup5\n        /* \"#utility.yul\":10307:10325   */\n      add\n        /* \"#utility.yul\":10300:10350   */\n      mstore\n      pop\n        /* \"#utility.yul\":10369:10375   */\n      0x0120\n        /* \"#utility.yul\":10424:10426   */\n      dup1\n        /* \"#utility.yul\":10416:10422   */\n      dup5\n        /* \"#utility.yul\":10412:10427   */\n      add\n        /* \"#utility.yul\":10406:10428   */\n      mload\n        /* \"#utility.yul\":10437:10493   */\n      tag_343\n        /* \"#utility.yul\":10489:10491   */\n      dup3\n        /* \"#utility.yul\":10478:10487   */\n      dup6\n        /* \"#utility.yul\":10474:10492   */\n      add\n        /* \"#utility.yul\":10458:10472   */\n      dup3\n        /* \"#utility.yul\":10437:10493   */\n      tag_314\n      jump\t// in\n    tag_343:\n      pop\n      pop\n        /* \"#utility.yul\":10512:10518   */\n      0x0140\n        /* \"#utility.yul\":10560:10575   */\n      swap3\n      dup4\n      add\n        /* \"#utility.yul\":10554:10576   */\n      mload\n        /* \"#utility.yul\":10534:10552   */\n      swap2\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":10527:10577   */\n      mstore\n        /* \"#utility.yul\":9506:10583   */\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":10588:10765   */\n    tag_189:\n        /* \"#utility.yul\":10734:10759   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":10722:10724   */\n      0x20\n        /* \"#utility.yul\":10707:10725   */\n      add\n      swap1\n        /* \"#utility.yul\":10689:10765   */\n      jump\t// out\n        /* \"#utility.yul\":10770:11303   */\n    tag_104:\n      0x00\n      dup1\n        /* \"#utility.yul\":10913:10924   */\n      dup4\n        /* \"#utility.yul\":10900:10925   */\n      calldataload\n        /* \"#utility.yul\":11007:11009   */\n      0x1e\n        /* \"#utility.yul\":11003:11010   */\n      not\n        /* \"#utility.yul\":10992:11000   */\n      dup5\n        /* \"#utility.yul\":10976:10990   */\n      calldatasize\n        /* \"#utility.yul\":10972:11001   */\n      sub\n        /* \"#utility.yul\":10968:11011   */\n      add\n        /* \"#utility.yul\":10948:10966   */\n      dup2\n        /* \"#utility.yul\":10944:11012   */\n      slt\n        /* \"#utility.yul\":10934:10936   */\n      tag_346\n      jumpi\n        /* \"#utility.yul\":11029:11033   */\n      dup3\n        /* \"#utility.yul\":11023:11027   */\n      dup4\n        /* \"#utility.yul\":11016:11034   */\n      revert\n        /* \"#utility.yul\":10934:10936   */\n    tag_346:\n        /* \"#utility.yul\":11059:11092   */\n      dup4\n      add\n        /* \"#utility.yul\":11111:11131   */\n      dup1\n      calldataload\n      swap2\n      pop\n        /* \"#utility.yul\":11154:11172   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":11143:11173   */\n      dup3\n      gt\n        /* \"#utility.yul\":11140:11142   */\n      iszero\n      tag_347\n      jumpi\n        /* \"#utility.yul\":11189:11193   */\n      dup3\n        /* \"#utility.yul\":11183:11187   */\n      dup4\n        /* \"#utility.yul\":11176:11194   */\n      revert\n        /* \"#utility.yul\":11140:11142   */\n    tag_347:\n        /* \"#utility.yul\":11225:11229   */\n      0x20\n        /* \"#utility.yul\":11213:11230   */\n      add\n      swap2\n      pop\n        /* \"#utility.yul\":11256:11270   */\n      calldatasize\n        /* \"#utility.yul\":11252:11279   */\n      dup2\n      swap1\n      sub\n        /* \"#utility.yul\":11242:11280   */\n      dup3\n      sgt\n        /* \"#utility.yul\":11239:11241   */\n      iszero\n      tag_348\n      jumpi\n        /* \"#utility.yul\":11293:11294   */\n      0x00\n        /* \"#utility.yul\":11290:11291   */\n      dup1\n        /* \"#utility.yul\":11283:11295   */\n      revert\n        /* \"#utility.yul\":11239:11241   */\n    tag_348:\n        /* \"#utility.yul\":10864:11303   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11308:11566   */\n    tag_300:\n        /* \"#utility.yul\":11380:11381   */\n      0x00\n        /* \"#utility.yul\":11390:11503   */\n    tag_350:\n        /* \"#utility.yul\":11404:11410   */\n      dup4\n        /* \"#utility.yul\":11401:11402   */\n      dup2\n        /* \"#utility.yul\":11398:11411   */\n      lt\n        /* \"#utility.yul\":11390:11503   */\n      iszero\n      tag_352\n      jumpi\n        /* \"#utility.yul\":11480:11491   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":11474:11492   */\n      mload\n        /* \"#utility.yul\":11461:11472   */\n      dup4\n      dup3\n      add\n        /* \"#utility.yul\":11454:11493   */\n      mstore\n        /* \"#utility.yul\":11426:11428   */\n      0x20\n        /* \"#utility.yul\":11419:11429   */\n      add\n        /* \"#utility.yul\":11390:11503   */\n      jump(tag_350)\n    tag_352:\n        /* \"#utility.yul\":11521:11527   */\n      dup4\n        /* \"#utility.yul\":11518:11519   */\n      dup2\n        /* \"#utility.yul\":11515:11528   */\n      gt\n        /* \"#utility.yul\":11512:11514   */\n      iszero\n      tag_353\n      jumpi\n        /* \"#utility.yul\":11556:11557   */\n      0x00\n        /* \"#utility.yul\":11547:11553   */\n      dup5\n        /* \"#utility.yul\":11542:11545   */\n      dup5\n        /* \"#utility.yul\":11538:11554   */\n      add\n        /* \"#utility.yul\":11531:11558   */\n      mstore\n        /* \"#utility.yul\":11512:11514   */\n    tag_353:\n      pop\n        /* \"#utility.yul\":11361:11566   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11571:11704   */\n    tag_265:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":11648:11679   */\n      dup2\n      and\n        /* \"#utility.yul\":11638:11680   */\n      dup2\n      eq\n        /* \"#utility.yul\":11628:11630   */\n      tag_355\n      jumpi\n        /* \"#utility.yul\":11694:11695   */\n      0x00\n        /* \"#utility.yul\":11691:11692   */\n      dup1\n        /* \"#utility.yul\":11684:11696   */\n      revert\n        /* \"#utility.yul\":11628:11630   */\n    tag_355:\n        /* \"#utility.yul\":11618:11704   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11709:11829   */\n    tag_285:\n        /* \"#utility.yul\":11797:11802   */\n      dup1\n        /* \"#utility.yul\":11790:11803   */\n      iszero\n        /* \"#utility.yul\":11783:11804   */\n      iszero\n        /* \"#utility.yul\":11776:11781   */\n      dup2\n        /* \"#utility.yul\":11773:11805   */\n      eq\n        /* \"#utility.yul\":11763:11765   */\n      tag_355\n      jumpi\n        /* \"#utility.yul\":11819:11820   */\n      0x00\n        /* \"#utility.yul\":11816:11817   */\n      dup1\n        /* \"#utility.yul\":11809:11821   */\n      revert\n\n    auxdata: 0xa26469706673582212201c260f6f70a63a04a232027171a233408e109d7a8f199e811deab94ad3a7246064736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:594:33",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:33",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "76:117:33",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "86:22:33",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "101:6:33"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "95:5:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "95:13:33"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "86:5:33"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "171:16:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "180:1:33",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "183:1:33",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "173:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "173:12:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "173:12:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "130:5:33"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "141:5:33"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "156:3:33",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "161:1:33",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "152:3:33"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "152:11:33"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "165:1:33",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "148:3:33"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "148:19:33"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "137:3:33"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "137:31:33"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "127:2:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "127:42:33"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "120:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "120:50:33"
															},
															"nodeType": "YulIf",
															"src": "117:2:33"
														}
													]
												},
												"name": "abi_decode_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "55:6:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "66:5:33",
														"type": ""
													}
												],
												"src": "14:179:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "313:279:33",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "359:26:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "368:6:33"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "376:6:33"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "361:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "361:22:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "361:22:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "334:7:33"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "343:9:33"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "330:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "330:23:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "355:2:33",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "326:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "326:32:33"
															},
															"nodeType": "YulIf",
															"src": "323:2:33"
														},
														{
															"nodeType": "YulAssignment",
															"src": "394:52:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "436:9:33"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "404:31:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "404:42:33"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "394:6:33"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "455:61:33",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "501:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "512:2:33",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "497:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "497:18:33"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "465:31:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "465:51:33"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "455:6:33"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "525:61:33",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "571:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "582:2:33",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "567:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "567:18:33"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "535:31:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "535:51:33"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "525:6:33"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "263:9:33",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "274:7:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "286:6:33",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "294:6:33",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "302:6:33",
														"type": ""
													}
												],
												"src": "198:394:33"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_t_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value0, value0) }\n        value0 := abi_decode_t_address_fromMemory(headStart)\n        value1 := abi_decode_t_address_fromMemory(add(headStart, 32))\n        value2 := abi_decode_t_address_fromMemory(add(headStart, 64))\n    }\n}",
									"id": 33,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60e06040523480156200001157600080fd5b5060405162001a3638038062001a36833981016040819052620000349162000079565b6001600160601b0319606093841b811660805291831b821660a05290911b1660c052620000c2565b80516001600160a01b03811681146200007457600080fd5b919050565b6000806000606084860312156200008e578283fd5b62000099846200005c565b9250620000a9602085016200005c565b9150620000b9604085016200005c565b90509250925092565b60805160601c60a05160601c60c05160601c6119086200012e600039806107735280610a3e5280610a785280610aa25280610c4b52508060a552806105765280610c975280610cee5280610dc95280610e2052508061020852806102cf528061082652506119086000f3fe6080604052600436106100955760003560e01c8063b44a272211610059578063b44a272214610176578063c2e3140a1461018b578063c45a01551461019e578063d44f2bf2146101b3578063f3995c67146101d3576100ed565b806313ead562146100f25780634659a4941461011b5780634aa4a4fc1461012e578063a4a78f0c14610143578063ac9650d814610156576100ed565b366100ed57336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146100eb5760405162461bcd60e51b81526004016100e290611728565b60405180910390fd5b005b600080fd5b610105610100366004611325565b6101e6565b604051610112919061164f565b60405180910390f35b6100eb61012936600461137e565b6104da565b34801561013a57600080fd5b50610105610574565b6100eb61015136600461137e565b610598565b6101696101643660046113d7565b610631565b6040516101129190611687565b34801561018257600080fd5b50610105610771565b6100eb61019936600461137e565b610795565b3480156101aa57600080fd5b50610105610824565b3480156101bf57600080fd5b506100eb6101ce366004611536565b610848565b6100eb6101e136600461137e565b610eb4565b6000836001600160a01b0316856001600160a01b03161061020657600080fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631698ee828686866040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018262ffffff168152602001935050505060206040518083038186803b15801561029157600080fd5b505afa1580156102a5573d6000803e3d6000fd5b505050506040513d60208110156102bb57600080fd5b505190506001600160a01b0381166103f1577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a16712958686866040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018262ffffff1681526020019350505050602060405180830381600087803b15801561035a57600080fd5b505af115801561036e573d6000803e3d6000fd5b505050506040513d602081101561038457600080fd5b50516040805163f637731d60e01b81526001600160a01b03858116600483015291519293509083169163f637731d9160248082019260009290919082900301818387803b1580156103d457600080fd5b505af11580156103e8573d6000803e3d6000fd5b505050506104d2565b6000816001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b15801561042c57600080fd5b505afa158015610440573d6000803e3d6000fd5b505050506040513d60e081101561045657600080fd5b505190506001600160a01b0381166104d057816001600160a01b031663f637731d846040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b1580156104b757600080fd5b505af11580156104cb573d6000803e3d6000fd5b505050505b505b949350505050565b604080516323f2ebc360e21b815233600482015230602482015260448101879052606481018690526001608482015260ff851660a482015260c4810184905260e4810183905290516001600160a01b03881691638fcbaf0c9161010480830192600092919082900301818387803b15801561055457600080fd5b505af1158015610568573d6000803e3d6000fd5b50505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60408051636eb1769f60e11b81523360048201523060248201529051600019916001600160a01b0389169163dd62ed3e91604480820192602092909190829003018186803b1580156105e957600080fd5b505afa1580156105fd573d6000803e3d6000fd5b505050506040513d602081101561061357600080fd5b50511015610629576106298686868686866104da565b505050505050565b60608167ffffffffffffffff8111801561064a57600080fd5b5060405190808252806020026020018201604052801561067e57816020015b60608152602001906001900390816106695790505b50905060005b8281101561076a576000803086868581811061069c57fe5b90506020028101906106ae9190611830565b6040516106bc92919061163f565b600060405180830381855af49150503d80600081146106f7576040519150601f19603f3d011682016040523d82523d6000602084013e6106fc565b606091505b5091509150816107485760448151101561071557600080fd5b6004810190508080602001905181019061072f919061149f565b60405162461bcd60e51b81526004016100e291906116e7565b8084848151811061075557fe5b60209081029190910101525050600101610684565b5092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60408051636eb1769f60e11b8152336004820152306024820152905186916001600160a01b0389169163dd62ed3e91604480820192602092909190829003018186803b1580156107e457600080fd5b505afa1580156107f8573d6000803e3d6000fd5b505050506040513d602081101561080e57600080fd5b5051101561062957610629868686868686610eb4565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061085a60608301604084016115dc565b60ff161161087a5760405162461bcd60e51b81526004016100e2906116fa565b606461088c60608301604084016115dc565b60ff1611156108ad5760405162461bcd60e51b81526004016100e29061174b565b6108ba6020820182611302565b6001600160a01b03166323b872dd336108d66020850185611302565b84602001356040518463ffffffff1660e01b81526004016108f993929190611663565b602060405180830381600087803b15801561091357600080fd5b505af1158015610927573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094b9190611462565b5060008061095c6020840184611302565b6001600160a01b03166389afcb44306040518263ffffffff1660e01b8152600401610987919061164f565b6040805180830381600087803b1580156109a057600080fd5b505af11580156109b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d891906115b9565b9092509050600060646109fe6109f460608701604088016115dc565b859060ff16610f26565b81610a0557fe5b04905060006064610a1f6109f460608801604089016115dc565b81610a2657fe5b049050610a63610a3c6080870160608801611302565b7f000000000000000000000000000000000000000000000000000000000000000084610f50565b610a9d610a7660a0870160808801611302565b7f000000000000000000000000000000000000000000000000000000000000000083610f50565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663883164566040518061016001604052808a6060016020810190610aee9190611302565b6001600160a01b03168152602001610b0c60a08c0160808d01611302565b6001600160a01b03168152602001610b2a60c08c0160a08d0161154e565b62ffffff168152602001610b4460e08c0160c08d0161147e565b60020b8152602001610b5d6101008c0160e08d0161147e565b60020b815260208101889052604081018790526101008b013560608201526101208b0135608082015260a001610b9b6101608c016101408d01611302565b6001600160a01b031681526020018a61016001358152506040518263ffffffff1660e01b8152600401610bce9190611779565b608060405180830381600087803b158015610be857600080fd5b505af1158015610bfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c209190611568565b93509350505085821015610d805783821015610c7157610c71610c496080890160608a01611302565b7f00000000000000000000000000000000000000000000000000000000000000006000610f50565b818603610c866101a089016101808a01611446565b8015610cd257506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016610cc760808a0160608b01611302565b6001600160a01b0316145b15610d6457604051632e1a7d4d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d90610d23908490600401611827565b600060405180830381600087803b158015610d3d57600080fd5b505af1158015610d51573d6000803e3d6000fd5b50505050610d5f338261109e565b610d7e565b610d7e610d7760808a0160608b01611302565b3383611192565b505b84811015610eab5782811015610da357610da3610c4960a0890160808a01611302565b808503610db86101a089016101808a01611446565b8015610e0457506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016610df960a08a0160808b01611302565b6001600160a01b0316145b15610e9657604051632e1a7d4d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d90610e55908490600401611827565b600060405180830381600087803b158015610e6f57600080fd5b505af1158015610e83573d6000803e3d6000fd5b50505050610e91338261109e565b610ea9565b610ea9610d7760a08a0160808b01611302565b505b50505050505050565b6040805163d505accf60e01b8152336004820152306024820152604481018790526064810186905260ff8516608482015260a4810184905260c4810183905290516001600160a01b0388169163d505accf9160e480830192600092919082900301818387803b15801561055457600080fd5b6000821580610f4157505081810281838281610f3e57fe5b04145b610f4a57600080fd5b92915050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1781529251825160009485949389169392918291908083835b60208310610fcc5780518252601f199092019160209182019101610fad565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461102e576040519150601f19603f3d011682016040523d82523d6000602084013e611033565b606091505b5091509150818015611061575080511580611061575080806020019051602081101561105e57600080fd5b50515b611097576040805162461bcd60e51b8152602060048201526002602482015261534160f01b604482015290519081900360640190fd5b5050505050565b604080516000808252602082019092526001600160a01b0384169083906040518082805190602001908083835b602083106110ea5780518252601f1990920191602091820191016110cb565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461114c576040519150601f19603f3d011682016040523d82523d6000602084013e611151565b606091505b505090508061118d576040805162461bcd60e51b815260206004820152600360248201526253544560e81b604482015290519081900360640190fd5b505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1781529251825160009485949389169392918291908083835b6020831061120e5780518252601f1990920191602091820191016111ef565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611270576040519150601f19603f3d011682016040523d82523d6000602084013e611275565b606091505b50915091508180156112a35750805115806112a357508080602001905160208110156112a057600080fd5b50515b611097576040805162461bcd60e51b815260206004820152600260248201526114d560f21b604482015290519081900360640190fd5b803562ffffff811681146112ec57600080fd5b919050565b803560ff811681146112ec57600080fd5b600060208284031215611313578081fd5b813561131e816118ac565b9392505050565b6000806000806080858703121561133a578283fd5b8435611345816118ac565b93506020850135611355816118ac565b9250611363604086016112d9565b91506060850135611373816118ac565b939692955090935050565b60008060008060008060c08789031215611396578182fd5b86356113a1816118ac565b955060208701359450604087013593506113bd606088016112f1565b92506080870135915060a087013590509295509295509295565b600080602083850312156113e9578182fd5b823567ffffffffffffffff80821115611400578384fd5b818501915085601f830112611413578384fd5b813581811115611421578485fd5b8660208083028501011115611434578485fd5b60209290920196919550909350505050565b600060208284031215611457578081fd5b813561131e816118c4565b600060208284031215611473578081fd5b815161131e816118c4565b60006020828403121561148f578081fd5b81358060020b811461131e578182fd5b6000602082840312156114b0578081fd5b815167ffffffffffffffff808211156114c7578283fd5b818401915084601f8301126114da578283fd5b8151818111156114e657fe5b604051601f8201601f19168101602001838111828210171561150457fe5b60405281815283820160200187101561151b578485fd5b61152c82602083016020870161187c565b9695505050505050565b60006101a08284031215611548578081fd5b50919050565b60006020828403121561155f578081fd5b61131e826112d9565b6000806000806080858703121561157d578384fd5b8451935060208501516fffffffffffffffffffffffffffffffff811681146115a3578384fd5b6040860151606090960151949790965092505050565b600080604083850312156115cb578182fd5b505080516020909101519092909150565b6000602082840312156115ed578081fd5b61131e826112f1565b6001600160a01b03169052565b6000815180845261161b81602086016020860161187c565b601f01601f19169290920160200192915050565b60020b9052565b62ffffff169052565b6000828483379101908152919050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000602080830181845280855180835260408601915060408482028701019250838701855b828110156116da57603f198886030184526116c8858351611603565b945092850192908501906001016116ac565b5092979650505050505050565b60006020825261131e6020830184611603565b60208082526014908201527314195c98d95b9d1859d9481d1bdbc81cdb585b1b60621b604082015260600190565b6020808252600990820152684e6f7420574554483960b81b604082015260600190565b60208082526014908201527350657263656e7461676520746f6f206c6172676560601b604082015260600190565b60006101608201905061178d8284516115f6565b602083015161179f60208401826115f6565b5060408301516117b26040840182611636565b5060608301516117c5606084018261162f565b5060808301516117d8608084018261162f565b5060a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151611816828501826115f6565b505061014092830151919092015290565b90815260200190565b6000808335601e19843603018112611846578283fd5b83018035915067ffffffffffffffff821115611860578283fd5b60200191503681900382131561187557600080fd5b9250929050565b60005b8381101561189757818101518382015260200161187f565b838111156118a6576000848401525b50505050565b6001600160a01b03811681146118c157600080fd5b50565b80151581146118c157600080fdfea26469706673582212201c260f6f70a63a04a232027171a233408e109d7a8f199e811deab94ad3a7246064736f6c63430007060033",
							"opcodes": "PUSH1 0xE0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1A36 CODESIZE SUB DUP1 PUSH3 0x1A36 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x79 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT PUSH1 0x60 SWAP4 DUP5 SHL DUP2 AND PUSH1 0x80 MSTORE SWAP2 DUP4 SHL DUP3 AND PUSH1 0xA0 MSTORE SWAP1 SWAP2 SHL AND PUSH1 0xC0 MSTORE PUSH3 0xC2 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x8E JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH3 0x99 DUP5 PUSH3 0x5C JUMP JUMPDEST SWAP3 POP PUSH3 0xA9 PUSH1 0x20 DUP6 ADD PUSH3 0x5C JUMP JUMPDEST SWAP2 POP PUSH3 0xB9 PUSH1 0x40 DUP6 ADD PUSH3 0x5C JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0x60 SHR PUSH1 0xC0 MLOAD PUSH1 0x60 SHR PUSH2 0x1908 PUSH3 0x12E PUSH1 0x0 CODECOPY DUP1 PUSH2 0x773 MSTORE DUP1 PUSH2 0xA3E MSTORE DUP1 PUSH2 0xA78 MSTORE DUP1 PUSH2 0xAA2 MSTORE DUP1 PUSH2 0xC4B MSTORE POP DUP1 PUSH1 0xA5 MSTORE DUP1 PUSH2 0x576 MSTORE DUP1 PUSH2 0xC97 MSTORE DUP1 PUSH2 0xCEE MSTORE DUP1 PUSH2 0xDC9 MSTORE DUP1 PUSH2 0xE20 MSTORE POP DUP1 PUSH2 0x208 MSTORE DUP1 PUSH2 0x2CF MSTORE DUP1 PUSH2 0x826 MSTORE POP PUSH2 0x1908 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x95 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xB44A2722 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xB44A2722 EQ PUSH2 0x176 JUMPI DUP1 PUSH4 0xC2E3140A EQ PUSH2 0x18B JUMPI DUP1 PUSH4 0xC45A0155 EQ PUSH2 0x19E JUMPI DUP1 PUSH4 0xD44F2BF2 EQ PUSH2 0x1B3 JUMPI DUP1 PUSH4 0xF3995C67 EQ PUSH2 0x1D3 JUMPI PUSH2 0xED JUMP JUMPDEST DUP1 PUSH4 0x13EAD562 EQ PUSH2 0xF2 JUMPI DUP1 PUSH4 0x4659A494 EQ PUSH2 0x11B JUMPI DUP1 PUSH4 0x4AA4A4FC EQ PUSH2 0x12E JUMPI DUP1 PUSH4 0xA4A78F0C EQ PUSH2 0x143 JUMPI DUP1 PUSH4 0xAC9650D8 EQ PUSH2 0x156 JUMPI PUSH2 0xED JUMP JUMPDEST CALLDATASIZE PUSH2 0xED JUMPI CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0xEB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE2 SWAP1 PUSH2 0x1728 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x105 PUSH2 0x100 CALLDATASIZE PUSH1 0x4 PUSH2 0x1325 JUMP JUMPDEST PUSH2 0x1E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x112 SWAP2 SWAP1 PUSH2 0x164F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xEB PUSH2 0x129 CALLDATASIZE PUSH1 0x4 PUSH2 0x137E JUMP JUMPDEST PUSH2 0x4DA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x105 PUSH2 0x574 JUMP JUMPDEST PUSH2 0xEB PUSH2 0x151 CALLDATASIZE PUSH1 0x4 PUSH2 0x137E JUMP JUMPDEST PUSH2 0x598 JUMP JUMPDEST PUSH2 0x169 PUSH2 0x164 CALLDATASIZE PUSH1 0x4 PUSH2 0x13D7 JUMP JUMPDEST PUSH2 0x631 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x112 SWAP2 SWAP1 PUSH2 0x1687 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x182 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x105 PUSH2 0x771 JUMP JUMPDEST PUSH2 0xEB PUSH2 0x199 CALLDATASIZE PUSH1 0x4 PUSH2 0x137E JUMP JUMPDEST PUSH2 0x795 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x105 PUSH2 0x824 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEB PUSH2 0x1CE CALLDATASIZE PUSH1 0x4 PUSH2 0x1536 JUMP JUMPDEST PUSH2 0x848 JUMP JUMPDEST PUSH2 0xEB PUSH2 0x1E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x137E JUMP JUMPDEST PUSH2 0xEB4 JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT PUSH2 0x206 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1698EE82 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH3 0xFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x291 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2A5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x3F1 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA1671295 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH3 0xFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x35A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x36E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x384 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xF637731D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 MLOAD SWAP3 SWAP4 POP SWAP1 DUP4 AND SWAP2 PUSH4 0xF637731D SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3E8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x4D2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xE0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x42C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x440 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0xE0 DUP2 LT ISZERO PUSH2 0x456 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x4D0 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF637731D DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4CB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x23F2EBC3 PUSH1 0xE2 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xFF DUP6 AND PUSH1 0xA4 DUP3 ADD MSTORE PUSH1 0xC4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xE4 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP2 PUSH4 0x8FCBAF0C SWAP2 PUSH2 0x104 DUP1 DUP4 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x554 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x568 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x0 NOT SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP2 PUSH4 0xDD62ED3E SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5FD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x613 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD LT ISZERO PUSH2 0x629 JUMPI PUSH2 0x629 DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0x4DA JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x64A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x67E JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x669 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x76A JUMPI PUSH1 0x0 DUP1 ADDRESS DUP7 DUP7 DUP6 DUP2 DUP2 LT PUSH2 0x69C JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x6AE SWAP2 SWAP1 PUSH2 0x1830 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x6BC SWAP3 SWAP2 SWAP1 PUSH2 0x163F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6F7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6FC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x748 JUMPI PUSH1 0x44 DUP2 MLOAD LT ISZERO PUSH2 0x715 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 DUP2 ADD SWAP1 POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x72F SWAP2 SWAP1 PUSH2 0x149F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE2 SWAP2 SWAP1 PUSH2 0x16E7 JUMP JUMPDEST DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x755 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0x684 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE SWAP1 MLOAD DUP7 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP2 PUSH4 0xDD62ED3E SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7F8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x80E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD LT ISZERO PUSH2 0x629 JUMPI PUSH2 0x629 DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0xEB4 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x85A PUSH1 0x60 DUP4 ADD PUSH1 0x40 DUP5 ADD PUSH2 0x15DC JUMP JUMPDEST PUSH1 0xFF AND GT PUSH2 0x87A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE2 SWAP1 PUSH2 0x16FA JUMP JUMPDEST PUSH1 0x64 PUSH2 0x88C PUSH1 0x60 DUP4 ADD PUSH1 0x40 DUP5 ADD PUSH2 0x15DC JUMP JUMPDEST PUSH1 0xFF AND GT ISZERO PUSH2 0x8AD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE2 SWAP1 PUSH2 0x174B JUMP JUMPDEST PUSH2 0x8BA PUSH1 0x20 DUP3 ADD DUP3 PUSH2 0x1302 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x23B872DD CALLER PUSH2 0x8D6 PUSH1 0x20 DUP6 ADD DUP6 PUSH2 0x1302 JUMP JUMPDEST DUP5 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8F9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1663 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x913 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x927 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x94B SWAP2 SWAP1 PUSH2 0x1462 JUMP JUMPDEST POP PUSH1 0x0 DUP1 PUSH2 0x95C PUSH1 0x20 DUP5 ADD DUP5 PUSH2 0x1302 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x89AFCB44 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x987 SWAP2 SWAP1 PUSH2 0x164F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x9B4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9D8 SWAP2 SWAP1 PUSH2 0x15B9 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 PUSH1 0x64 PUSH2 0x9FE PUSH2 0x9F4 PUSH1 0x60 DUP8 ADD PUSH1 0x40 DUP9 ADD PUSH2 0x15DC JUMP JUMPDEST DUP6 SWAP1 PUSH1 0xFF AND PUSH2 0xF26 JUMP JUMPDEST DUP2 PUSH2 0xA05 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x0 PUSH1 0x64 PUSH2 0xA1F PUSH2 0x9F4 PUSH1 0x60 DUP9 ADD PUSH1 0x40 DUP10 ADD PUSH2 0x15DC JUMP JUMPDEST DUP2 PUSH2 0xA26 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH2 0xA63 PUSH2 0xA3C PUSH1 0x80 DUP8 ADD PUSH1 0x60 DUP9 ADD PUSH2 0x1302 JUMP JUMPDEST PUSH32 0x0 DUP5 PUSH2 0xF50 JUMP JUMPDEST PUSH2 0xA9D PUSH2 0xA76 PUSH1 0xA0 DUP8 ADD PUSH1 0x80 DUP9 ADD PUSH2 0x1302 JUMP JUMPDEST PUSH32 0x0 DUP4 PUSH2 0xF50 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x88316456 PUSH1 0x40 MLOAD DUP1 PUSH2 0x160 ADD PUSH1 0x40 MSTORE DUP1 DUP11 PUSH1 0x60 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xAEE SWAP2 SWAP1 PUSH2 0x1302 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB0C PUSH1 0xA0 DUP13 ADD PUSH1 0x80 DUP14 ADD PUSH2 0x1302 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB2A PUSH1 0xC0 DUP13 ADD PUSH1 0xA0 DUP14 ADD PUSH2 0x154E JUMP JUMPDEST PUSH3 0xFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB44 PUSH1 0xE0 DUP13 ADD PUSH1 0xC0 DUP14 ADD PUSH2 0x147E JUMP JUMPDEST PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB5D PUSH2 0x100 DUP13 ADD PUSH1 0xE0 DUP14 ADD PUSH2 0x147E JUMP JUMPDEST PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x40 DUP2 ADD DUP8 SWAP1 MSTORE PUSH2 0x100 DUP12 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x120 DUP12 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD PUSH2 0xB9B PUSH2 0x160 DUP13 ADD PUSH2 0x140 DUP14 ADD PUSH2 0x1302 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH2 0x160 ADD CALLDATALOAD DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBCE SWAP2 SWAP1 PUSH2 0x1779 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBE8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xBFC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC20 SWAP2 SWAP1 PUSH2 0x1568 JUMP JUMPDEST SWAP4 POP SWAP4 POP POP POP DUP6 DUP3 LT ISZERO PUSH2 0xD80 JUMPI DUP4 DUP3 LT ISZERO PUSH2 0xC71 JUMPI PUSH2 0xC71 PUSH2 0xC49 PUSH1 0x80 DUP10 ADD PUSH1 0x60 DUP11 ADD PUSH2 0x1302 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x0 PUSH2 0xF50 JUMP JUMPDEST DUP2 DUP7 SUB PUSH2 0xC86 PUSH2 0x1A0 DUP10 ADD PUSH2 0x180 DUP11 ADD PUSH2 0x1446 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xCD2 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND PUSH2 0xCC7 PUSH1 0x80 DUP11 ADD PUSH1 0x60 DUP12 ADD PUSH2 0x1302 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST ISZERO PUSH2 0xD64 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0xD23 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x1827 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD51 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0xD5F CALLER DUP3 PUSH2 0x109E JUMP JUMPDEST PUSH2 0xD7E JUMP JUMPDEST PUSH2 0xD7E PUSH2 0xD77 PUSH1 0x80 DUP11 ADD PUSH1 0x60 DUP12 ADD PUSH2 0x1302 JUMP JUMPDEST CALLER DUP4 PUSH2 0x1192 JUMP JUMPDEST POP JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xEAB JUMPI DUP3 DUP2 LT ISZERO PUSH2 0xDA3 JUMPI PUSH2 0xDA3 PUSH2 0xC49 PUSH1 0xA0 DUP10 ADD PUSH1 0x80 DUP11 ADD PUSH2 0x1302 JUMP JUMPDEST DUP1 DUP6 SUB PUSH2 0xDB8 PUSH2 0x1A0 DUP10 ADD PUSH2 0x180 DUP11 ADD PUSH2 0x1446 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xE04 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND PUSH2 0xDF9 PUSH1 0xA0 DUP11 ADD PUSH1 0x80 DUP12 ADD PUSH2 0x1302 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST ISZERO PUSH2 0xE96 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0xE55 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x1827 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE6F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xE83 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0xE91 CALLER DUP3 PUSH2 0x109E JUMP JUMPDEST PUSH2 0xEA9 JUMP JUMPDEST PUSH2 0xEA9 PUSH2 0xD77 PUSH1 0xA0 DUP11 ADD PUSH1 0x80 DUP12 ADD PUSH2 0x1302 JUMP JUMPDEST POP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0xD505ACCF PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xFF DUP6 AND PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xC4 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP2 PUSH4 0xD505ACCF SWAP2 PUSH1 0xE4 DUP1 DUP4 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x554 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0xF41 JUMPI POP POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0xF3E JUMPI INVALID JUMPDEST DIV EQ JUMPDEST PUSH2 0xF4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP3 ADD DUP4 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x95EA7B3 PUSH1 0xE0 SHL OR DUP2 MSTORE SWAP3 MLOAD DUP3 MLOAD PUSH1 0x0 SWAP5 DUP6 SWAP5 SWAP4 DUP10 AND SWAP4 SWAP3 SWAP2 DUP3 SWAP2 SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0xFCC JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0xFAD JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x102E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1033 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x1061 JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0x1061 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x105E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD JUMPDEST PUSH2 0x1097 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x5341 PUSH1 0xF0 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP4 SWAP1 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x10EA JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x10CB JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x114C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1151 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x118D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH3 0x535445 PUSH1 0xE8 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP3 ADD DUP4 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xA9059CBB PUSH1 0xE0 SHL OR DUP2 MSTORE SWAP3 MLOAD DUP3 MLOAD PUSH1 0x0 SWAP5 DUP6 SWAP5 SWAP4 DUP10 AND SWAP4 SWAP3 SWAP2 DUP3 SWAP2 SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x120E JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x11EF JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1270 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1275 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x12A3 JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0x12A3 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x12A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD JUMPDEST PUSH2 0x1097 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x14D5 PUSH1 0xF2 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x12EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x12EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1313 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x131E DUP2 PUSH2 0x18AC JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x133A JUMPI DUP3 DUP4 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x1345 DUP2 PUSH2 0x18AC JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x1355 DUP2 PUSH2 0x18AC JUMP JUMPDEST SWAP3 POP PUSH2 0x1363 PUSH1 0x40 DUP7 ADD PUSH2 0x12D9 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x1373 DUP2 PUSH2 0x18AC JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1396 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x13A1 DUP2 PUSH2 0x18AC JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH2 0x13BD PUSH1 0x60 DUP9 ADD PUSH2 0x12F1 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x13E9 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1400 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1413 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1421 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x1434 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1457 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x131E DUP2 PUSH2 0x18C4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1473 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x131E DUP2 PUSH2 0x18C4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x148F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD DUP1 PUSH1 0x2 SIGNEXTEND DUP2 EQ PUSH2 0x131E JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x14B0 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x14C7 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP5 ADD SWAP2 POP DUP5 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x14DA JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x14E6 JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x20 ADD DUP4 DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1504 JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE DUP2 DUP2 MSTORE DUP4 DUP3 ADD PUSH1 0x20 ADD DUP8 LT ISZERO PUSH2 0x151B JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x152C DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x187C JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1548 JUMPI DUP1 DUP2 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x155F JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x131E DUP3 PUSH2 0x12D9 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x157D JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 MLOAD SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x15A3 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD PUSH1 0x60 SWAP1 SWAP7 ADD MLOAD SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x15CB JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x15ED JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x131E DUP3 PUSH2 0x12F1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x161B DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x187C JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 SIGNEXTEND SWAP1 MSTORE JUMP JUMPDEST PUSH3 0xFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP5 DUP3 MUL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x16DA JUMPI PUSH1 0x3F NOT DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x16C8 DUP6 DUP4 MLOAD PUSH2 0x1603 JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x16AC JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x131E PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1603 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH20 0x14195C98D95B9D1859D9481D1BDBC81CDB585B1B PUSH1 0x62 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x9 SWAP1 DUP3 ADD MSTORE PUSH9 0x4E6F74205745544839 PUSH1 0xB8 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH20 0x50657263656E7461676520746F6F206C61726765 PUSH1 0x60 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x160 DUP3 ADD SWAP1 POP PUSH2 0x178D DUP3 DUP5 MLOAD PUSH2 0x15F6 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x179F PUSH1 0x20 DUP5 ADD DUP3 PUSH2 0x15F6 JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x17B2 PUSH1 0x40 DUP5 ADD DUP3 PUSH2 0x1636 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x17C5 PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x162F JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0x17D8 PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x162F JUMP JUMPDEST POP PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x100 DUP1 DUP5 ADD MLOAD DUP2 DUP5 ADD MSTORE POP PUSH2 0x120 DUP1 DUP5 ADD MLOAD PUSH2 0x1816 DUP3 DUP6 ADD DUP3 PUSH2 0x15F6 JUMP JUMPDEST POP POP PUSH2 0x140 SWAP3 DUP4 ADD MLOAD SWAP2 SWAP1 SWAP3 ADD MSTORE SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x1846 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1860 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x1875 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1897 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x187F JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x18A6 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x18C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x18C1 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SHR 0x26 0xF PUSH16 0x70A63A04A232027171A233408E109D7A DUP16 NOT SWAP15 DUP2 SAR 0xEA 0xB9 0x4A 0xD3 0xA7 0x24 PUSH1 0x64 PUSH20 0x6F6C634300070600330000000000000000000000 ",
							"sourceMap": "600:3512:16:-:0;;;808:234;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;536:18:18;;;;;;;;565:14;;;;;;;978:56:16;;;;::::1;::::0;600:3512;;14:179:33;95:13;;-1:-1:-1;;;;;137:31:33;;127:42;;117:2;;183:1;180;173:12;117:2;76:117;;;:::o;198:394::-;;;;355:2;343:9;334:7;330:23;326:32;323:2;;;376:6;368;361:22;323:2;404:42;436:9;404:42;:::i;:::-;394:52;;465:51;512:2;501:9;497:18;465:51;:::i;:::-;455:61;;535:51;582:2;571:9;567:18;535:51;:::i;:::-;525:61;;313:279;;;;;:::o;:::-;600:3512:16;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:11831:33",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:33",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "64:113:33",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "74:29:33",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "96:6:33"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "83:12:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "83:20:33"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "74:5:33"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "155:16:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "164:1:33",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "167:1:33",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "157:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "157:12:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "157:12:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "125:5:33"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "136:5:33"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "143:8:33",
																						"type": "",
																						"value": "0xffffff"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "132:3:33"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "132:20:33"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "122:2:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "122:31:33"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "115:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "115:39:33"
															},
															"nodeType": "YulIf",
															"src": "112:2:33"
														}
													]
												},
												"name": "abi_decode_t_uint24",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "43:6:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "54:5:33",
														"type": ""
													}
												],
												"src": "14:163:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "231:109:33",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "241:29:33",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "263:6:33"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "250:12:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "250:20:33"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "241:5:33"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "318:16:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "327:1:33",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "330:1:33",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "320:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "320:12:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "320:12:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "292:5:33"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "303:5:33"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "310:4:33",
																						"type": "",
																						"value": "0xff"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "299:3:33"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "299:16:33"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "289:2:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "289:27:33"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "282:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "282:35:33"
															},
															"nodeType": "YulIf",
															"src": "279:2:33"
														}
													]
												},
												"name": "abi_decode_t_uint8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "210:6:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "221:5:33",
														"type": ""
													}
												],
												"src": "182:158:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "415:189:33",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "461:26:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "470:6:33"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "478:6:33"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "463:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "463:22:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "463:22:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "436:7:33"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "445:9:33"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "432:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "432:23:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "457:2:33",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "428:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "428:32:33"
															},
															"nodeType": "YulIf",
															"src": "425:2:33"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "496:36:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "522:9:33"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "509:12:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "509:23:33"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "500:5:33",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "568:5:33"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "541:26:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "541:33:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "541:33:33"
														},
														{
															"nodeType": "YulAssignment",
															"src": "583:15:33",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "593:5:33"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "583:6:33"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "381:9:33",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "392:7:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "404:6:33",
														"type": ""
													}
												],
												"src": "345:259:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "729:500:33",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "776:26:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "785:6:33"
																				},
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "793:6:33"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "778:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "778:22:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "778:22:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "750:7:33"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "759:9:33"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "746:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "746:23:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "771:3:33",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "742:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "742:33:33"
															},
															"nodeType": "YulIf",
															"src": "739:2:33"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "811:36:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "837:9:33"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "824:12:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "824:23:33"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "815:5:33",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "883:5:33"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "856:26:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "856:33:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "856:33:33"
														},
														{
															"nodeType": "YulAssignment",
															"src": "898:15:33",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "908:5:33"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "898:6:33"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "922:47:33",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "954:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "965:2:33",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "950:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "950:18:33"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "937:12:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "937:32:33"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nodeType": "YulTypedName",
																	"src": "926:7:33",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value_1",
																		"nodeType": "YulIdentifier",
																		"src": "1005:7:33"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "978:26:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "978:35:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "978:35:33"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1022:17:33",
															"value": {
																"name": "value_1",
																"nodeType": "YulIdentifier",
																"src": "1032:7:33"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1022:6:33"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1048:49:33",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1082:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1093:2:33",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1078:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1078:18:33"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_uint24",
																	"nodeType": "YulIdentifier",
																	"src": "1058:19:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "1058:39:33"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "1048:6:33"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1106:47:33",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1138:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1149:2:33",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1134:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1134:18:33"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1121:12:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "1121:32:33"
															},
															"variables": [
																{
																	"name": "value_2",
																	"nodeType": "YulTypedName",
																	"src": "1110:7:33",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value_2",
																		"nodeType": "YulIdentifier",
																		"src": "1189:7:33"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "1162:26:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "1162:35:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1162:35:33"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1206:17:33",
															"value": {
																"name": "value_2",
																"nodeType": "YulIdentifier",
																"src": "1216:7:33"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "1206:6:33"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint24t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "671:9:33",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "682:7:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "694:6:33",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "702:6:33",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "710:6:33",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "718:6:33",
														"type": ""
													}
												],
												"src": "609:620:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1387:453:33",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1434:26:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "1443:6:33"
																				},
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "1451:6:33"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1436:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1436:22:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1436:22:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1408:7:33"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1417:9:33"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1404:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1404:23:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1429:3:33",
																		"type": "",
																		"value": "192"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1400:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "1400:33:33"
															},
															"nodeType": "YulIf",
															"src": "1397:2:33"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1469:36:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1495:9:33"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1482:12:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "1482:23:33"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "1473:5:33",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1541:5:33"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "1514:26:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "1514:33:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1514:33:33"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1556:15:33",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1566:5:33"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1556:6:33"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1580:42:33",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1607:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1618:2:33",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1603:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1603:18:33"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1590:12:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "1590:32:33"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1580:6:33"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1631:42:33",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1658:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1669:2:33",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1654:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1654:18:33"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1641:12:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "1641:32:33"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "1631:6:33"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1682:48:33",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1715:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1726:2:33",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1711:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1711:18:33"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_uint8",
																	"nodeType": "YulIdentifier",
																	"src": "1692:18:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "1692:38:33"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "1682:6:33"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1739:43:33",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1766:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1777:3:33",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1762:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1762:19:33"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1749:12:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "1749:33:33"
															},
															"variableNames": [
																{
																	"name": "value4",
																	"nodeType": "YulIdentifier",
																	"src": "1739:6:33"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1791:43:33",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1818:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1829:3:33",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1814:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1814:19:33"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1801:12:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "1801:33:33"
															},
															"variableNames": [
																{
																	"name": "value5",
																	"nodeType": "YulIdentifier",
																	"src": "1791:6:33"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1313:9:33",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1324:7:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1336:6:33",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1344:6:33",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1352:6:33",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "1360:6:33",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "1368:6:33",
														"type": ""
													},
													{
														"name": "value5",
														"nodeType": "YulTypedName",
														"src": "1376:6:33",
														"type": ""
													}
												],
												"src": "1234:606:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1961:561:33",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2007:26:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2016:6:33"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2024:6:33"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2009:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2009:22:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2009:22:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1982:7:33"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1991:9:33"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1978:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1978:23:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2003:2:33",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1974:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "1974:32:33"
															},
															"nodeType": "YulIf",
															"src": "1971:2:33"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2042:37:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2069:9:33"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2056:12:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "2056:23:33"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "2046:6:33",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2088:28:33",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "2098:18:33",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "2092:2:33",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2143:26:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2152:6:33"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2160:6:33"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2145:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2145:22:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2145:22:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "2131:6:33"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "2139:2:33"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2128:2:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "2128:14:33"
															},
															"nodeType": "YulIf",
															"src": "2125:2:33"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2178:32:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2192:9:33"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "2203:6:33"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2188:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "2188:22:33"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "2182:2:33",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2258:26:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2267:6:33"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2275:6:33"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2260:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2260:22:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2260:22:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "2237:2:33"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2241:4:33",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2233:3:33"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2233:13:33"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2248:7:33"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "2229:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2229:27:33"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2222:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "2222:35:33"
															},
															"nodeType": "YulIf",
															"src": "2219:2:33"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2293:30:33",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "2320:2:33"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2307:12:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "2307:16:33"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "2297:6:33",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2350:26:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2359:6:33"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2367:6:33"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2352:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2352:22:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2352:22:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2338:6:33"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "2346:2:33"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2335:2:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "2335:14:33"
															},
															"nodeType": "YulIf",
															"src": "2332:2:33"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2435:26:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2444:6:33"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2452:6:33"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2437:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2437:22:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2437:22:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "2399:2:33"
																					},
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "2407:6:33"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2415:2:33",
																								"type": "",
																								"value": "32"
																							}
																						],
																						"functionName": {
																							"name": "mul",
																							"nodeType": "YulIdentifier",
																							"src": "2403:3:33"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2403:15:33"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2395:3:33"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2395:24:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2421:2:33",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2391:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2391:33:33"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "2426:7:33"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2388:2:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "2388:46:33"
															},
															"nodeType": "YulIf",
															"src": "2385:2:33"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2470:21:33",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "2484:2:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2488:2:33",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2480:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "2480:11:33"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2470:6:33"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2500:16:33",
															"value": {
																"name": "length",
																"nodeType": "YulIdentifier",
																"src": "2510:6:33"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2500:6:33"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1919:9:33",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1930:7:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1942:6:33",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1950:6:33",
														"type": ""
													}
												],
												"src": "1845:677:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2594:186:33",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2640:26:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2649:6:33"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2657:6:33"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2642:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2642:22:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2642:22:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2615:7:33"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2624:9:33"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2611:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2611:23:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2636:2:33",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2607:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "2607:32:33"
															},
															"nodeType": "YulIf",
															"src": "2604:2:33"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2675:36:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2701:9:33"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2688:12:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "2688:23:33"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "2679:5:33",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2744:5:33"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bool",
																	"nodeType": "YulIdentifier",
																	"src": "2720:23:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "2720:30:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2720:30:33"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2759:15:33",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "2769:5:33"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2759:6:33"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2560:9:33",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2571:7:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2583:6:33",
														"type": ""
													}
												],
												"src": "2527:253:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2863:179:33",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2909:26:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2918:6:33"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2926:6:33"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2911:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2911:22:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2911:22:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2884:7:33"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2893:9:33"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2880:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2880:23:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2905:2:33",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2876:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "2876:32:33"
															},
															"nodeType": "YulIf",
															"src": "2873:2:33"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2944:29:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2963:9:33"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "2957:5:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "2957:16:33"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "2948:5:33",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3006:5:33"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bool",
																	"nodeType": "YulIdentifier",
																	"src": "2982:23:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "2982:30:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2982:30:33"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3021:15:33",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "3031:5:33"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3021:6:33"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2829:9:33",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2840:7:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2852:6:33",
														"type": ""
													}
												],
												"src": "2785:257:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3115:225:33",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3161:26:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3170:6:33"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3178:6:33"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3163:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3163:22:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3163:22:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3136:7:33"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3145:9:33"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3132:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3132:23:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3157:2:33",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3128:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "3128:32:33"
															},
															"nodeType": "YulIf",
															"src": "3125:2:33"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3196:36:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3222:9:33"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3209:12:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "3209:23:33"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "3200:5:33",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3284:26:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3293:6:33"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3301:6:33"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3286:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3286:22:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3286:22:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3254:5:33"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3272:1:33",
																						"type": "",
																						"value": "2"
																					},
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "3275:5:33"
																					}
																				],
																				"functionName": {
																					"name": "signextend",
																					"nodeType": "YulIdentifier",
																					"src": "3261:10:33"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3261:20:33"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "3251:2:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3251:31:33"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3244:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "3244:39:33"
															},
															"nodeType": "YulIf",
															"src": "3241:2:33"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3319:15:33",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "3329:5:33"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3319:6:33"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_int24",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3081:9:33",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3092:7:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3104:6:33",
														"type": ""
													}
												],
												"src": "3047:293:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3436:785:33",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3482:26:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3491:6:33"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3499:6:33"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3484:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3484:22:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3484:22:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3457:7:33"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3466:9:33"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3453:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3453:23:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3478:2:33",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3449:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "3449:32:33"
															},
															"nodeType": "YulIf",
															"src": "3446:2:33"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3517:30:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3537:9:33"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3531:5:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "3531:16:33"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "3521:6:33",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3556:28:33",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3566:18:33",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "3560:2:33",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3611:26:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3620:6:33"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3628:6:33"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3613:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3613:22:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3613:22:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3599:6:33"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "3607:2:33"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3596:2:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "3596:14:33"
															},
															"nodeType": "YulIf",
															"src": "3593:2:33"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3646:32:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3660:9:33"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3671:6:33"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3656:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "3656:22:33"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "3650:2:33",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3726:26:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3735:6:33"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3743:6:33"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3728:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3728:22:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3728:22:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "3705:2:33"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3709:4:33",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3701:3:33"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3701:13:33"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3716:7:33"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "3697:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3697:27:33"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3690:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "3690:35:33"
															},
															"nodeType": "YulIf",
															"src": "3687:2:33"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3761:19:33",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "3777:2:33"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3771:5:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "3771:9:33"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "3765:2:33",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3803:13:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "invalid",
																				"nodeType": "YulIdentifier",
																				"src": "3805:7:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3805:9:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3805:9:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "3795:2:33"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "3799:2:33"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3792:2:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "3792:10:33"
															},
															"nodeType": "YulIf",
															"src": "3789:2:33"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3825:23:33",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3845:2:33",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3839:5:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "3839:9:33"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "3829:6:33",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3857:67:33",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "3883:6:33"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "_3",
																								"nodeType": "YulIdentifier",
																								"src": "3899:2:33"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3903:4:33",
																								"type": "",
																								"value": "0x1f"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "3895:3:33"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3895:13:33"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3914:2:33",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "3910:3:33"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3910:7:33"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "3891:3:33"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3891:27:33"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3879:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3879:40:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3921:2:33",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3875:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "3875:49:33"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "3861:10:33",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3983:13:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "invalid",
																				"nodeType": "YulIdentifier",
																				"src": "3985:7:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3985:9:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3985:9:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "3942:10:33"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "3954:2:33"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "3939:2:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3939:18:33"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "3962:10:33"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "3974:6:33"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "3959:2:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3959:22:33"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "3936:2:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "3936:46:33"
															},
															"nodeType": "YulIf",
															"src": "3933:2:33"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4012:2:33",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "4016:10:33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4005:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "4005:22:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4005:22:33"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "4043:6:33"
																	},
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "4051:2:33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4036:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "4036:18:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4036:18:33"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4100:26:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "4109:6:33"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "4117:6:33"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4102:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4102:22:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4102:22:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "4077:2:33"
																					},
																					{
																						"name": "_3",
																						"nodeType": "YulIdentifier",
																						"src": "4081:2:33"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4073:3:33"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4073:11:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4086:2:33",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4069:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4069:20:33"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "4091:7:33"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4066:2:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "4066:33:33"
															},
															"nodeType": "YulIf",
															"src": "4063:2:33"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "4161:2:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4165:2:33",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4157:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4157:11:33"
																	},
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "4174:6:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4182:2:33",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4170:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4170:15:33"
																	},
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "4187:2:33"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "4135:21:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "4135:55:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4135:55:33"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4199:16:33",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "4209:6:33"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "4199:6:33"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_string_memory_ptr_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3402:9:33",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3413:7:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3425:6:33",
														"type": ""
													}
												],
												"src": "3345:876:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4329:107:33",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4376:26:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "4385:6:33"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "4393:6:33"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4378:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4378:22:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4378:22:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4350:7:33"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4359:9:33"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4346:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4346:23:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4371:3:33",
																		"type": "",
																		"value": "416"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4342:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "4342:33:33"
															},
															"nodeType": "YulIf",
															"src": "4339:2:33"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4411:19:33",
															"value": {
																"name": "headStart",
																"nodeType": "YulIdentifier",
																"src": "4421:9:33"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "4411:6:33"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_struct$_MigrateParams_$2287_calldata_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4295:9:33",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4306:7:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4318:6:33",
														"type": ""
													}
												],
												"src": "4226:210:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4510:127:33",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4556:26:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "4565:6:33"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "4573:6:33"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4558:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4558:22:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4558:22:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4531:7:33"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4540:9:33"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4527:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4527:23:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4552:2:33",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4523:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "4523:32:33"
															},
															"nodeType": "YulIf",
															"src": "4520:2:33"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4591:40:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4621:9:33"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_uint24",
																	"nodeType": "YulIdentifier",
																	"src": "4601:19:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "4601:30:33"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "4591:6:33"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint24",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4476:9:33",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4487:7:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4499:6:33",
														"type": ""
													}
												],
												"src": "4441:196:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4774:377:33",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4821:26:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "4830:6:33"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "4838:6:33"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4823:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4823:22:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4823:22:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4795:7:33"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4804:9:33"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4791:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4791:23:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4816:3:33",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4787:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "4787:33:33"
															},
															"nodeType": "YulIf",
															"src": "4784:2:33"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4856:26:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4872:9:33"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4866:5:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "4866:16:33"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "4856:6:33"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4891:38:33",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4914:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4925:2:33",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4910:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4910:18:33"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4904:5:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "4904:25:33"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "4895:5:33",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5007:26:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "5016:6:33"
																				},
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "5024:6:33"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5009:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5009:22:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5009:22:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "4951:5:33"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "4962:5:33"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4969:34:33",
																						"type": "",
																						"value": "0xffffffffffffffffffffffffffffffff"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "4958:3:33"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4958:46:33"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "4948:2:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4948:57:33"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4941:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "4941:65:33"
															},
															"nodeType": "YulIf",
															"src": "4938:2:33"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5042:15:33",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "5052:5:33"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "5042:6:33"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5066:35:33",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5086:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5097:2:33",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5082:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5082:18:33"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5076:5:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "5076:25:33"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "5066:6:33"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5110:35:33",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5130:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5141:2:33",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5126:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5126:18:33"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5120:5:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "5120:25:33"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "5110:6:33"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_uint128t_uint256t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4716:9:33",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4727:7:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4739:6:33",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4747:6:33",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "4755:6:33",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "4763:6:33",
														"type": ""
													}
												],
												"src": "4642:509:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5254:157:33",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5300:26:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "5309:6:33"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "5317:6:33"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5302:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5302:22:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5302:22:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5275:7:33"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5284:9:33"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5271:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5271:23:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5296:2:33",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5267:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "5267:32:33"
															},
															"nodeType": "YulIf",
															"src": "5264:2:33"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5335:26:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5351:9:33"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5345:5:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "5345:16:33"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "5335:6:33"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5370:35:33",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5390:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5401:2:33",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5386:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5386:18:33"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5380:5:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "5380:25:33"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "5370:6:33"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5212:9:33",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5223:7:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5235:6:33",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5243:6:33",
														"type": ""
													}
												],
												"src": "5156:255:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5484:126:33",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5530:26:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "5539:6:33"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "5547:6:33"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5532:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5532:22:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5532:22:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5505:7:33"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5514:9:33"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5501:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5501:23:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5526:2:33",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5497:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "5497:32:33"
															},
															"nodeType": "YulIf",
															"src": "5494:2:33"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5565:39:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5594:9:33"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_uint8",
																	"nodeType": "YulIdentifier",
																	"src": "5575:18:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "5575:29:33"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "5565:6:33"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5450:9:33",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5461:7:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5473:6:33",
														"type": ""
													}
												],
												"src": "5416:194:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5661:60:33",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5678:3:33"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5687:5:33"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "5702:3:33",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "5707:1:33",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "5698:3:33"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "5698:11:33"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5711:1:33",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "5694:3:33"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5694:19:33"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5683:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5683:31:33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5671:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "5671:44:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5671:44:33"
														}
													]
												},
												"name": "abi_encode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5645:5:33",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5652:3:33",
														"type": ""
													}
												],
												"src": "5615:106:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5777:208:33",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5787:26:33",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "5807:5:33"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5801:5:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "5801:12:33"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "5791:6:33",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5829:3:33"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5834:6:33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5822:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "5822:19:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5822:19:33"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5876:5:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5883:4:33",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5872:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5872:16:33"
																	},
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "5894:3:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5899:4:33",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5890:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5890:14:33"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5906:6:33"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "5850:21:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "5850:63:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5850:63:33"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5922:57:33",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "5937:3:33"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "5950:6:33"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "5958:2:33",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "5946:3:33"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "5946:15:33"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "5967:2:33",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "5963:3:33"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "5963:7:33"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "5942:3:33"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5942:29:33"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5933:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5933:39:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5974:4:33",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5929:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "5929:50:33"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "5922:3:33"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_bytes",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5754:5:33",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5761:3:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "5769:3:33",
														"type": ""
													}
												],
												"src": "5726:259:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6034:49:33",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6051:3:33"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6067:1:33",
																				"type": "",
																				"value": "2"
																			},
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "6070:5:33"
																			}
																		],
																		"functionName": {
																			"name": "signextend",
																			"nodeType": "YulIdentifier",
																			"src": "6056:10:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6056:20:33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6044:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "6044:33:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6044:33:33"
														}
													]
												},
												"name": "abi_encode_t_int24",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6018:5:33",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6025:3:33",
														"type": ""
													}
												],
												"src": "5990:93:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6133:49:33",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6150:3:33"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "6159:5:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6166:8:33",
																				"type": "",
																				"value": "0xffffff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "6155:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6155:20:33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6143:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "6143:33:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6143:33:33"
														}
													]
												},
												"name": "abi_encode_t_uint24",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6117:5:33",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6124:3:33",
														"type": ""
													}
												],
												"src": "6088:94:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6334:126:33",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6357:3:33"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "6362:6:33"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "6370:6:33"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nodeType": "YulIdentifier",
																	"src": "6344:12:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "6344:33:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6344:33:33"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6386:26:33",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6400:3:33"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "6405:6:33"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6396:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "6396:16:33"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "6390:2:33",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "6428:2:33"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "6432:3:33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6421:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "6421:15:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6421:15:33"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6445:9:33",
															"value": {
																"name": "_1",
																"nodeType": "YulIdentifier",
																"src": "6452:2:33"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "6445:3:33"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6302:3:33",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "6307:6:33",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6315:6:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "6326:3:33",
														"type": ""
													}
												],
												"src": "6187:273:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6566:102:33",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6576:26:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6588:9:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6599:2:33",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6584:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "6584:18:33"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6576:4:33"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6618:9:33"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "6633:6:33"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "6649:3:33",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "6654:1:33",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "6645:3:33"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6645:11:33"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6658:1:33",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "6641:3:33"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6641:19:33"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "6629:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6629:32:33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6611:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "6611:51:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6611:51:33"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6535:9:33",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6546:6:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6557:4:33",
														"type": ""
													}
												],
												"src": "6465:203:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6782:102:33",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6792:26:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6804:9:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6815:2:33",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6800:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "6800:18:33"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6792:4:33"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6834:9:33"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "6849:6:33"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "6865:3:33",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "6870:1:33",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "6861:3:33"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6861:11:33"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6874:1:33",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "6857:3:33"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6857:19:33"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "6845:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6845:32:33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6827:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "6827:51:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6827:51:33"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_payable__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6751:9:33",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6762:6:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6773:4:33",
														"type": ""
													}
												],
												"src": "6673:211:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7054:218:33",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7064:26:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7076:9:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7087:2:33",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7072:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "7072:18:33"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7064:4:33"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7099:29:33",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7117:3:33",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7122:1:33",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7113:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7113:11:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7126:1:33",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "7109:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "7109:19:33"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "7103:2:33",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7144:9:33"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "7159:6:33"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "7167:2:33"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "7155:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7155:15:33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7137:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "7137:34:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7137:34:33"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7191:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7202:2:33",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7187:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7187:18:33"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "7211:6:33"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "7219:2:33"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "7207:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7207:15:33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7180:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "7180:43:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7180:43:33"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7243:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7254:2:33",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7239:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7239:18:33"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "7259:6:33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7232:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "7232:34:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7232:34:33"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_payable_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7007:9:33",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "7018:6:33",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "7026:6:33",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7034:6:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7045:4:33",
														"type": ""
													}
												],
												"src": "6889:383:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7446:637:33",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7456:12:33",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "7466:2:33",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "7460:2:33",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7477:32:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7495:9:33"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "7506:2:33"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7491:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "7491:18:33"
															},
															"variables": [
																{
																	"name": "tail_1",
																	"nodeType": "YulTypedName",
																	"src": "7481:6:33",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7525:9:33"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "7536:2:33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7518:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "7518:21:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7518:21:33"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7548:17:33",
															"value": {
																"name": "tail_1",
																"nodeType": "YulIdentifier",
																"src": "7559:6:33"
															},
															"variables": [
																{
																	"name": "pos",
																	"nodeType": "YulTypedName",
																	"src": "7552:3:33",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7574:27:33",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "7594:6:33"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "7588:5:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "7588:13:33"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "7578:6:33",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "tail_1",
																		"nodeType": "YulIdentifier",
																		"src": "7617:6:33"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7625:6:33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7610:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "7610:22:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7610:22:33"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7641:25:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7652:9:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7663:2:33",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7648:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "7648:18:33"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "7641:3:33"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7675:54:33",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7697:9:33"
																			},
																			{
																				"arguments": [
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "7712:6:33"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "7720:2:33"
																					}
																				],
																				"functionName": {
																					"name": "mul",
																					"nodeType": "YulIdentifier",
																					"src": "7708:3:33"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7708:15:33"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7693:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7693:31:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7726:2:33",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7689:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "7689:40:33"
															},
															"variables": [
																{
																	"name": "tail_2",
																	"nodeType": "YulTypedName",
																	"src": "7679:6:33",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7738:29:33",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "7756:6:33"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "7764:2:33"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7752:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "7752:15:33"
															},
															"variables": [
																{
																	"name": "srcPtr",
																	"nodeType": "YulTypedName",
																	"src": "7742:6:33",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7776:13:33",
															"value": {
																"name": "tail",
																"nodeType": "YulIdentifier",
																"src": "7785:4:33"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "7780:1:33",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7847:207:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "pos",
																					"nodeType": "YulIdentifier",
																					"src": "7868:3:33"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "tail_2",
																									"nodeType": "YulIdentifier",
																									"src": "7881:6:33"
																								},
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "7889:9:33"
																								}
																							],
																							"functionName": {
																								"name": "sub",
																								"nodeType": "YulIdentifier",
																								"src": "7877:3:33"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "7877:22:33"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "7905:2:33",
																									"type": "",
																									"value": "63"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nodeType": "YulIdentifier",
																								"src": "7901:3:33"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "7901:7:33"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "7873:3:33"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "7873:36:33"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "7861:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7861:49:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7861:49:33"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "7923:51:33",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "srcPtr",
																							"nodeType": "YulIdentifier",
																							"src": "7958:6:33"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "7952:5:33"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "7952:13:33"
																				},
																				{
																					"name": "tail_2",
																					"nodeType": "YulIdentifier",
																					"src": "7967:6:33"
																				}
																			],
																			"functionName": {
																				"name": "abi_encode_t_bytes",
																				"nodeType": "YulIdentifier",
																				"src": "7933:18:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7933:41:33"
																		},
																		"variableNames": [
																			{
																				"name": "tail_2",
																				"nodeType": "YulIdentifier",
																				"src": "7923:6:33"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "7987:25:33",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcPtr",
																					"nodeType": "YulIdentifier",
																					"src": "8001:6:33"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "8009:2:33"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "7997:3:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7997:15:33"
																		},
																		"variableNames": [
																			{
																				"name": "srcPtr",
																				"nodeType": "YulIdentifier",
																				"src": "7987:6:33"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "8025:19:33",
																		"value": {
																			"arguments": [
																				{
																					"name": "pos",
																					"nodeType": "YulIdentifier",
																					"src": "8036:3:33"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "8041:2:33"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "8032:3:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8032:12:33"
																		},
																		"variableNames": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "8025:3:33"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "7809:1:33"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7812:6:33"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "7806:2:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "7806:13:33"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "7820:18:33",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "7822:14:33",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "7831:1:33"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7834:1:33",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "7827:3:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7827:9:33"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "7822:1:33"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "7802:3:33",
																"statements": []
															},
															"src": "7798:256:33"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8063:14:33",
															"value": {
																"name": "tail_2",
																"nodeType": "YulIdentifier",
																"src": "8071:6:33"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8063:4:33"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7415:9:33",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7426:6:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7437:4:33",
														"type": ""
													}
												],
												"src": "7277:806:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8209:100:33",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8226:9:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8237:2:33",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8219:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "8219:21:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8219:21:33"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8249:54:33",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "8276:6:33"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8288:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8299:2:33",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8284:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8284:18:33"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes",
																	"nodeType": "YulIdentifier",
																	"src": "8257:18:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "8257:46:33"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8249:4:33"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8178:9:33",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "8189:6:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8200:4:33",
														"type": ""
													}
												],
												"src": "8088:221:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8488:170:33",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8505:9:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8516:2:33",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8498:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "8498:21:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8498:21:33"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8539:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8550:2:33",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8535:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8535:18:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8555:2:33",
																		"type": "",
																		"value": "20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8528:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "8528:30:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8528:30:33"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8578:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8589:2:33",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8574:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8574:18:33"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8594:22:33",
																		"type": "",
																		"value": "Percentage too small"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8567:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "8567:50:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8567:50:33"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8626:26:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8638:9:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8649:2:33",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8634:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "8634:18:33"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8626:4:33"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_441c69a76c2d33fd9de54332033d9c05337cb9707baa639e0118d8dc01b47be7__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8465:9:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8479:4:33",
														"type": ""
													}
												],
												"src": "8314:344:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8837:158:33",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8854:9:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8865:2:33",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8847:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "8847:21:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8847:21:33"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8888:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8899:2:33",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8884:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8884:18:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8904:1:33",
																		"type": "",
																		"value": "9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8877:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "8877:29:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8877:29:33"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8926:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8937:2:33",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8922:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8922:18:33"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8942:11:33",
																		"type": "",
																		"value": "Not WETH9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8915:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "8915:39:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8915:39:33"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8963:26:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8975:9:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8986:2:33",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8971:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "8971:18:33"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8963:4:33"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9a5f12903ee10b20c1ea1ca8d6f6723d553112d744fe8db2bc5453efb990e6b1__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8814:9:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8828:4:33",
														"type": ""
													}
												],
												"src": "8663:332:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9174:170:33",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9191:9:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9202:2:33",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9184:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "9184:21:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9184:21:33"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9225:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9236:2:33",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9221:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9221:18:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9241:2:33",
																		"type": "",
																		"value": "20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9214:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "9214:30:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9214:30:33"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9264:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9275:2:33",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9260:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9260:18:33"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9280:22:33",
																		"type": "",
																		"value": "Percentage too large"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9253:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "9253:50:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9253:50:33"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9312:26:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9324:9:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9335:2:33",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9320:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "9320:18:33"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9312:4:33"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9a769b63cd4026b5e7e44da6e571c3cde616fe3a40029eab2d6b59e7b569424b__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9151:9:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9165:4:33",
														"type": ""
													}
												],
												"src": "9000:344:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9506:1077:33",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9516:27:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9528:9:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9539:3:33",
																		"type": "",
																		"value": "352"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9524:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "9524:19:33"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9516:4:33"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "9579:6:33"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "9573:5:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9573:13:33"
																	},
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9588:9:33"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "9552:20:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "9552:46:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9552:46:33"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9607:44:33",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "9637:6:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9645:4:33",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9633:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9633:17:33"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "9627:5:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "9627:24:33"
															},
															"variables": [
																{
																	"name": "memberValue0",
																	"nodeType": "YulTypedName",
																	"src": "9611:12:33",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memberValue0",
																		"nodeType": "YulIdentifier",
																		"src": "9681:12:33"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9699:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9710:4:33",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9695:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9695:20:33"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "9660:20:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "9660:56:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9660:56:33"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9725:46:33",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "9757:6:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9765:4:33",
																				"type": "",
																				"value": "0x40"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9753:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9753:17:33"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "9747:5:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "9747:24:33"
															},
															"variables": [
																{
																	"name": "memberValue0_1",
																	"nodeType": "YulTypedName",
																	"src": "9729:14:33",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memberValue0_1",
																		"nodeType": "YulIdentifier",
																		"src": "9800:14:33"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9820:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9831:4:33",
																				"type": "",
																				"value": "0x40"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9816:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9816:20:33"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint24",
																	"nodeType": "YulIdentifier",
																	"src": "9780:19:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "9780:57:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9780:57:33"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9846:46:33",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "9878:6:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9886:4:33",
																				"type": "",
																				"value": "0x60"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9874:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9874:17:33"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "9868:5:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "9868:24:33"
															},
															"variables": [
																{
																	"name": "memberValue0_2",
																	"nodeType": "YulTypedName",
																	"src": "9850:14:33",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memberValue0_2",
																		"nodeType": "YulIdentifier",
																		"src": "9920:14:33"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9940:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9951:4:33",
																				"type": "",
																				"value": "0x60"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9936:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9936:20:33"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_int24",
																	"nodeType": "YulIdentifier",
																	"src": "9901:18:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "9901:56:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9901:56:33"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9966:46:33",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "9998:6:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10006:4:33",
																				"type": "",
																				"value": "0x80"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9994:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9994:17:33"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "9988:5:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "9988:24:33"
															},
															"variables": [
																{
																	"name": "memberValue0_3",
																	"nodeType": "YulTypedName",
																	"src": "9970:14:33",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memberValue0_3",
																		"nodeType": "YulIdentifier",
																		"src": "10040:14:33"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10060:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10071:4:33",
																				"type": "",
																				"value": "0x80"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10056:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10056:20:33"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_int24",
																	"nodeType": "YulIdentifier",
																	"src": "10021:18:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "10021:56:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10021:56:33"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10097:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10108:4:33",
																				"type": "",
																				"value": "0xa0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10093:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10093:20:33"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "10125:6:33"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "10133:4:33",
																						"type": "",
																						"value": "0xa0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "10121:3:33"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10121:17:33"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "10115:5:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10115:24:33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10086:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "10086:54:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10086:54:33"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10160:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10171:4:33",
																				"type": "",
																				"value": "0xc0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10156:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10156:20:33"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "10188:6:33"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "10196:4:33",
																						"type": "",
																						"value": "0xc0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "10184:3:33"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10184:17:33"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "10178:5:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10178:24:33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10149:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "10149:54:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10149:54:33"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10223:9:33"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10234:4:33",
																				"type": "",
																				"value": "0xe0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10219:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10219:20:33"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "10251:6:33"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "10259:4:33",
																						"type": "",
																						"value": "0xe0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "10247:3:33"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10247:17:33"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "10241:5:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10241:24:33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10212:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "10212:54:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10212:54:33"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10275:16:33",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "10285:6:33",
																"type": "",
																"value": "0x0100"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "10279:2:33",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10311:9:33"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "10322:2:33"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10307:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10307:18:33"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "10337:6:33"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "10345:2:33"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "10333:3:33"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10333:15:33"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "10327:5:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10327:22:33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10300:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "10300:50:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10300:50:33"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10359:16:33",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "10369:6:33",
																"type": "",
																"value": "0x0120"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "10363:2:33",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10384:44:33",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "10416:6:33"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "10424:2:33"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10412:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10412:15:33"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "10406:5:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "10406:22:33"
															},
															"variables": [
																{
																	"name": "memberValue0_4",
																	"nodeType": "YulTypedName",
																	"src": "10388:14:33",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memberValue0_4",
																		"nodeType": "YulIdentifier",
																		"src": "10458:14:33"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10478:9:33"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "10489:2:33"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10474:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10474:18:33"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "10437:20:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "10437:56:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10437:56:33"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10502:16:33",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "10512:6:33",
																"type": "",
																"value": "0x0140"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "10506:2:33",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10538:9:33"
																			},
																			{
																				"name": "_3",
																				"nodeType": "YulIdentifier",
																				"src": "10549:2:33"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10534:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10534:18:33"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "10564:6:33"
																					},
																					{
																						"name": "_3",
																						"nodeType": "YulIdentifier",
																						"src": "10572:2:33"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "10560:3:33"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10560:15:33"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "10554:5:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10554:22:33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10527:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "10527:50:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10527:50:33"
														}
													]
												},
												"name": "abi_encode_tuple_t_struct$_MintParams_$2032_memory_ptr__to_t_struct$_MintParams_$2032_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9475:9:33",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9486:6:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9497:4:33",
														"type": ""
													}
												],
												"src": "9349:1234:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10689:76:33",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10699:26:33",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10711:9:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10722:2:33",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10707:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "10707:18:33"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10699:4:33"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10741:9:33"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "10752:6:33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10734:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "10734:25:33"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10734:25:33"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10658:9:33",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10669:6:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10680:4:33",
														"type": ""
													}
												],
												"src": "10588:177:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10864:439:33",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10874:51:33",
															"value": {
																"arguments": [
																	{
																		"name": "ptr_to_tail",
																		"nodeType": "YulIdentifier",
																		"src": "10913:11:33"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "10900:12:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "10900:25:33"
															},
															"variables": [
																{
																	"name": "rel_offset_of_tail",
																	"nodeType": "YulTypedName",
																	"src": "10878:18:33",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11014:22:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "addr",
																					"nodeType": "YulIdentifier",
																					"src": "11023:4:33"
																				},
																				{
																					"name": "addr",
																					"nodeType": "YulIdentifier",
																					"src": "11029:4:33"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "11016:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11016:18:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11016:18:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "rel_offset_of_tail",
																				"nodeType": "YulIdentifier",
																				"src": "10948:18:33"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [],
																								"functionName": {
																									"name": "calldatasize",
																									"nodeType": "YulIdentifier",
																									"src": "10976:12:33"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "10976:14:33"
																							},
																							{
																								"name": "base_ref",
																								"nodeType": "YulIdentifier",
																								"src": "10992:8:33"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "10972:3:33"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "10972:29:33"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "11007:2:33",
																								"type": "",
																								"value": "30"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "11003:3:33"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "11003:7:33"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "10968:3:33"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10968:43:33"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "10944:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10944:68:33"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "10937:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "10937:76:33"
															},
															"nodeType": "YulIf",
															"src": "10934:2:33"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "11045:47:33",
															"value": {
																"arguments": [
																	{
																		"name": "base_ref",
																		"nodeType": "YulIdentifier",
																		"src": "11063:8:33"
																	},
																	{
																		"name": "rel_offset_of_tail",
																		"nodeType": "YulIdentifier",
																		"src": "11073:18:33"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11059:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "11059:33:33"
															},
															"variables": [
																{
																	"name": "addr_1",
																	"nodeType": "YulTypedName",
																	"src": "11049:6:33",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "11101:30:33",
															"value": {
																"arguments": [
																	{
																		"name": "addr_1",
																		"nodeType": "YulIdentifier",
																		"src": "11124:6:33"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "11111:12:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "11111:20:33"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "11101:6:33"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11174:22:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "addr",
																					"nodeType": "YulIdentifier",
																					"src": "11183:4:33"
																				},
																				{
																					"name": "addr",
																					"nodeType": "YulIdentifier",
																					"src": "11189:4:33"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "11176:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11176:18:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11176:18:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "11146:6:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11154:18:33",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "11143:2:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "11143:30:33"
															},
															"nodeType": "YulIf",
															"src": "11140:2:33"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11205:25:33",
															"value": {
																"arguments": [
																	{
																		"name": "addr_1",
																		"nodeType": "YulIdentifier",
																		"src": "11217:6:33"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11225:4:33",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11213:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "11213:17:33"
															},
															"variableNames": [
																{
																	"name": "addr",
																	"nodeType": "YulIdentifier",
																	"src": "11205:4:33"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11281:16:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11290:1:33",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11293:1:33",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "11283:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11283:12:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11283:12:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "addr",
																		"nodeType": "YulIdentifier",
																		"src": "11246:4:33"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [],
																				"functionName": {
																					"name": "calldatasize",
																					"nodeType": "YulIdentifier",
																					"src": "11256:12:33"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11256:14:33"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "11272:6:33"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "11252:3:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11252:27:33"
																	}
																],
																"functionName": {
																	"name": "sgt",
																	"nodeType": "YulIdentifier",
																	"src": "11242:3:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "11242:38:33"
															},
															"nodeType": "YulIf",
															"src": "11239:2:33"
														}
													]
												},
												"name": "access_calldata_tail_t_bytes_calldata_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base_ref",
														"nodeType": "YulTypedName",
														"src": "10821:8:33",
														"type": ""
													},
													{
														"name": "ptr_to_tail",
														"nodeType": "YulTypedName",
														"src": "10831:11:33",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "addr",
														"nodeType": "YulTypedName",
														"src": "10847:4:33",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "10853:6:33",
														"type": ""
													}
												],
												"src": "10770:533:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11361:205:33",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "11371:10:33",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "11380:1:33",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "11375:1:33",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11440:63:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "11465:3:33"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "11470:1:33"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "11461:3:33"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "11461:11:33"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "11484:3:33"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "11489:1:33"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "11480:3:33"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "11480:11:33"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "11474:5:33"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "11474:18:33"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "11454:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11454:39:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11454:39:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "11401:1:33"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "11404:6:33"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "11398:2:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "11398:13:33"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "11412:19:33",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "11414:15:33",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "11423:1:33"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11426:2:33",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "11419:3:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11419:10:33"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "11414:1:33"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "11394:3:33",
																"statements": []
															},
															"src": "11390:113:33"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11529:31:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "11542:3:33"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "11547:6:33"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "11538:3:33"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "11538:16:33"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11556:1:33",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "11531:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11531:27:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11531:27:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "11518:1:33"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "11521:6:33"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "11515:2:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "11515:13:33"
															},
															"nodeType": "YulIf",
															"src": "11512:2:33"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "11339:3:33",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "11344:3:33",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "11349:6:33",
														"type": ""
													}
												],
												"src": "11308:258:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11618:86:33",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11682:16:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11691:1:33",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11694:1:33",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "11684:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11684:12:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11684:12:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "11641:5:33"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "11652:5:33"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "11667:3:33",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "11672:1:33",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "11663:3:33"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "11663:11:33"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "11676:1:33",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "11659:3:33"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "11659:19:33"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "11648:3:33"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11648:31:33"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "11638:2:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11638:42:33"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "11631:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "11631:50:33"
															},
															"nodeType": "YulIf",
															"src": "11628:2:33"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "11607:5:33",
														"type": ""
													}
												],
												"src": "11571:133:33"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11753:76:33",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11807:16:33",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11816:1:33",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11819:1:33",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "11809:6:33"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11809:12:33"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11809:12:33"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "11776:5:33"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "11797:5:33"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "11790:6:33"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "11790:13:33"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "11783:6:33"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11783:21:33"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "11773:2:33"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11773:32:33"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "11766:6:33"
																},
																"nodeType": "YulFunctionCall",
																"src": "11766:40:33"
															},
															"nodeType": "YulIf",
															"src": "11763:2:33"
														}
													]
												},
												"name": "validator_revert_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "11742:5:33",
														"type": ""
													}
												],
												"src": "11709:120:33"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_t_uint24(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffff))) { revert(0, 0) }\n    }\n    function abi_decode_t_uint8(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint24t_uint160(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(value1, value1) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_t_address(value_1)\n        value1 := value_1\n        value2 := abi_decode_t_uint24(add(headStart, 64))\n        let value_2 := calldataload(add(headStart, 96))\n        validator_revert_t_address(value_2)\n        value3 := value_2\n    }\n    function abi_decode_tuple_t_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(value4, value4) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := abi_decode_t_uint8(add(headStart, 96))\n        value4 := calldataload(add(headStart, 128))\n        value5 := calldataload(add(headStart, 160))\n    }\n    function abi_decode_tuple_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value0, value0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(value0, value0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(value0, value0) }\n        if gt(add(add(_2, mul(length, 32)), 32), dataEnd) { revert(value0, value0) }\n        value0 := add(_2, 32)\n        value1 := length\n    }\n    function abi_decode_tuple_t_bool(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_t_bool(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        validator_revert_t_bool(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_int24(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, signextend(2, value))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let offset := mload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value0, value0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(value0, value0) }\n        let _3 := mload(_2)\n        if gt(_3, _1) { invalid() }\n        let memPtr := mload(64)\n        let newFreePtr := add(add(memPtr, and(add(_3, 0x1f), not(31))), 32)\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { invalid() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(value0, value0) }\n        copy_memory_to_memory(add(_2, 32), add(memPtr, 32), _3)\n        value0 := memPtr\n    }\n    function abi_decode_tuple_t_struct$_MigrateParams_$2287_calldata_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 416) { revert(value0, value0) }\n        value0 := headStart\n    }\n    function abi_decode_tuple_t_uint24(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_t_uint24(headStart)\n    }\n    function abi_decode_tuple_t_uint256t_uint128t_uint256t_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(value0, value0) }\n        value0 := mload(headStart)\n        let value := mload(add(headStart, 32))\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffff))) { revert(value1, value1) }\n        value1 := value\n        value2 := mload(add(headStart, 64))\n        value3 := mload(add(headStart, 96))\n    }\n    function abi_decode_tuple_t_uint256t_uint256_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := mload(headStart)\n        value1 := mload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint8(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_t_uint8(headStart)\n    }\n    function abi_encode_t_address(value, pos)\n    {\n        mstore(pos, and(value, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_t_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_t_int24(value, pos)\n    {\n        mstore(pos, signextend(2, value))\n    }\n    function abi_encode_t_uint24(value, pos)\n    {\n        mstore(pos, and(value, 0xffffff))\n    }\n    function abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        calldatacopy(pos, value0, value1)\n        let _1 := add(pos, value1)\n        mstore(_1, end)\n        end := _1\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_payable__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_payable_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let tail_2 := add(add(headStart, mul(length, _1)), 64)\n        let srcPtr := add(value0, _1)\n        let i := tail\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, add(sub(tail_2, headStart), not(63)))\n            tail_2 := abi_encode_t_bytes(mload(srcPtr), tail_2)\n            srcPtr := add(srcPtr, _1)\n            pos := add(pos, _1)\n        }\n        tail := tail_2\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_t_bytes(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_stringliteral_441c69a76c2d33fd9de54332033d9c05337cb9707baa639e0118d8dc01b47be7__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Percentage too small\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_9a5f12903ee10b20c1ea1ca8d6f6723d553112d744fe8db2bc5453efb990e6b1__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 9)\n        mstore(add(headStart, 64), \"Not WETH9\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_9a769b63cd4026b5e7e44da6e571c3cde616fe3a40029eab2d6b59e7b569424b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Percentage too large\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_struct$_MintParams_$2032_memory_ptr__to_t_struct$_MintParams_$2032_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 352)\n        abi_encode_t_address(mload(value0), headStart)\n        let memberValue0 := mload(add(value0, 0x20))\n        abi_encode_t_address(memberValue0, add(headStart, 0x20))\n        let memberValue0_1 := mload(add(value0, 0x40))\n        abi_encode_t_uint24(memberValue0_1, add(headStart, 0x40))\n        let memberValue0_2 := mload(add(value0, 0x60))\n        abi_encode_t_int24(memberValue0_2, add(headStart, 0x60))\n        let memberValue0_3 := mload(add(value0, 0x80))\n        abi_encode_t_int24(memberValue0_3, add(headStart, 0x80))\n        mstore(add(headStart, 0xa0), mload(add(value0, 0xa0)))\n        mstore(add(headStart, 0xc0), mload(add(value0, 0xc0)))\n        mstore(add(headStart, 0xe0), mload(add(value0, 0xe0)))\n        let _1 := 0x0100\n        mstore(add(headStart, _1), mload(add(value0, _1)))\n        let _2 := 0x0120\n        let memberValue0_4 := mload(add(value0, _2))\n        abi_encode_t_address(memberValue0_4, add(headStart, _2))\n        let _3 := 0x0140\n        mstore(add(headStart, _3), mload(add(value0, _3)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function access_calldata_tail_t_bytes_calldata_ptr(base_ref, ptr_to_tail) -> addr, length\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(30)))) { revert(addr, addr) }\n        let addr_1 := add(base_ref, rel_offset_of_tail)\n        length := calldataload(addr_1)\n        if gt(length, 0xffffffffffffffff) { revert(addr, addr) }\n        addr := add(addr_1, 0x20)\n        if sgt(addr, sub(calldatasize(), length)) { revert(0, 0) }\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function validator_revert_t_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function validator_revert_t_bool(value)\n    {\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n}",
									"id": 33,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {
								"1225": [
									{
										"length": 32,
										"start": 1907
									},
									{
										"length": 32,
										"start": 2622
									},
									{
										"length": 32,
										"start": 2680
									},
									{
										"length": 32,
										"start": 2722
									},
									{
										"length": 32,
										"start": 3147
									}
								],
								"1593": [
									{
										"length": 32,
										"start": 520
									},
									{
										"length": 32,
										"start": 719
									},
									{
										"length": 32,
										"start": 2086
									}
								],
								"1597": [
									{
										"length": 32,
										"start": 165
									},
									{
										"length": 32,
										"start": 1398
									},
									{
										"length": 32,
										"start": 3223
									},
									{
										"length": 32,
										"start": 3310
									},
									{
										"length": 32,
										"start": 3529
									},
									{
										"length": 32,
										"start": 3616
									}
								]
							},
							"linkReferences": {},
							"object": "6080604052600436106100955760003560e01c8063b44a272211610059578063b44a272214610176578063c2e3140a1461018b578063c45a01551461019e578063d44f2bf2146101b3578063f3995c67146101d3576100ed565b806313ead562146100f25780634659a4941461011b5780634aa4a4fc1461012e578063a4a78f0c14610143578063ac9650d814610156576100ed565b366100ed57336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146100eb5760405162461bcd60e51b81526004016100e290611728565b60405180910390fd5b005b600080fd5b610105610100366004611325565b6101e6565b604051610112919061164f565b60405180910390f35b6100eb61012936600461137e565b6104da565b34801561013a57600080fd5b50610105610574565b6100eb61015136600461137e565b610598565b6101696101643660046113d7565b610631565b6040516101129190611687565b34801561018257600080fd5b50610105610771565b6100eb61019936600461137e565b610795565b3480156101aa57600080fd5b50610105610824565b3480156101bf57600080fd5b506100eb6101ce366004611536565b610848565b6100eb6101e136600461137e565b610eb4565b6000836001600160a01b0316856001600160a01b03161061020657600080fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631698ee828686866040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018262ffffff168152602001935050505060206040518083038186803b15801561029157600080fd5b505afa1580156102a5573d6000803e3d6000fd5b505050506040513d60208110156102bb57600080fd5b505190506001600160a01b0381166103f1577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a16712958686866040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018262ffffff1681526020019350505050602060405180830381600087803b15801561035a57600080fd5b505af115801561036e573d6000803e3d6000fd5b505050506040513d602081101561038457600080fd5b50516040805163f637731d60e01b81526001600160a01b03858116600483015291519293509083169163f637731d9160248082019260009290919082900301818387803b1580156103d457600080fd5b505af11580156103e8573d6000803e3d6000fd5b505050506104d2565b6000816001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b15801561042c57600080fd5b505afa158015610440573d6000803e3d6000fd5b505050506040513d60e081101561045657600080fd5b505190506001600160a01b0381166104d057816001600160a01b031663f637731d846040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b1580156104b757600080fd5b505af11580156104cb573d6000803e3d6000fd5b505050505b505b949350505050565b604080516323f2ebc360e21b815233600482015230602482015260448101879052606481018690526001608482015260ff851660a482015260c4810184905260e4810183905290516001600160a01b03881691638fcbaf0c9161010480830192600092919082900301818387803b15801561055457600080fd5b505af1158015610568573d6000803e3d6000fd5b50505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60408051636eb1769f60e11b81523360048201523060248201529051600019916001600160a01b0389169163dd62ed3e91604480820192602092909190829003018186803b1580156105e957600080fd5b505afa1580156105fd573d6000803e3d6000fd5b505050506040513d602081101561061357600080fd5b50511015610629576106298686868686866104da565b505050505050565b60608167ffffffffffffffff8111801561064a57600080fd5b5060405190808252806020026020018201604052801561067e57816020015b60608152602001906001900390816106695790505b50905060005b8281101561076a576000803086868581811061069c57fe5b90506020028101906106ae9190611830565b6040516106bc92919061163f565b600060405180830381855af49150503d80600081146106f7576040519150601f19603f3d011682016040523d82523d6000602084013e6106fc565b606091505b5091509150816107485760448151101561071557600080fd5b6004810190508080602001905181019061072f919061149f565b60405162461bcd60e51b81526004016100e291906116e7565b8084848151811061075557fe5b60209081029190910101525050600101610684565b5092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60408051636eb1769f60e11b8152336004820152306024820152905186916001600160a01b0389169163dd62ed3e91604480820192602092909190829003018186803b1580156107e457600080fd5b505afa1580156107f8573d6000803e3d6000fd5b505050506040513d602081101561080e57600080fd5b5051101561062957610629868686868686610eb4565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061085a60608301604084016115dc565b60ff161161087a5760405162461bcd60e51b81526004016100e2906116fa565b606461088c60608301604084016115dc565b60ff1611156108ad5760405162461bcd60e51b81526004016100e29061174b565b6108ba6020820182611302565b6001600160a01b03166323b872dd336108d66020850185611302565b84602001356040518463ffffffff1660e01b81526004016108f993929190611663565b602060405180830381600087803b15801561091357600080fd5b505af1158015610927573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094b9190611462565b5060008061095c6020840184611302565b6001600160a01b03166389afcb44306040518263ffffffff1660e01b8152600401610987919061164f565b6040805180830381600087803b1580156109a057600080fd5b505af11580156109b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d891906115b9565b9092509050600060646109fe6109f460608701604088016115dc565b859060ff16610f26565b81610a0557fe5b04905060006064610a1f6109f460608801604089016115dc565b81610a2657fe5b049050610a63610a3c6080870160608801611302565b7f000000000000000000000000000000000000000000000000000000000000000084610f50565b610a9d610a7660a0870160808801611302565b7f000000000000000000000000000000000000000000000000000000000000000083610f50565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663883164566040518061016001604052808a6060016020810190610aee9190611302565b6001600160a01b03168152602001610b0c60a08c0160808d01611302565b6001600160a01b03168152602001610b2a60c08c0160a08d0161154e565b62ffffff168152602001610b4460e08c0160c08d0161147e565b60020b8152602001610b5d6101008c0160e08d0161147e565b60020b815260208101889052604081018790526101008b013560608201526101208b0135608082015260a001610b9b6101608c016101408d01611302565b6001600160a01b031681526020018a61016001358152506040518263ffffffff1660e01b8152600401610bce9190611779565b608060405180830381600087803b158015610be857600080fd5b505af1158015610bfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c209190611568565b93509350505085821015610d805783821015610c7157610c71610c496080890160608a01611302565b7f00000000000000000000000000000000000000000000000000000000000000006000610f50565b818603610c866101a089016101808a01611446565b8015610cd257506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016610cc760808a0160608b01611302565b6001600160a01b0316145b15610d6457604051632e1a7d4d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d90610d23908490600401611827565b600060405180830381600087803b158015610d3d57600080fd5b505af1158015610d51573d6000803e3d6000fd5b50505050610d5f338261109e565b610d7e565b610d7e610d7760808a0160608b01611302565b3383611192565b505b84811015610eab5782811015610da357610da3610c4960a0890160808a01611302565b808503610db86101a089016101808a01611446565b8015610e0457506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016610df960a08a0160808b01611302565b6001600160a01b0316145b15610e9657604051632e1a7d4d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d90610e55908490600401611827565b600060405180830381600087803b158015610e6f57600080fd5b505af1158015610e83573d6000803e3d6000fd5b50505050610e91338261109e565b610ea9565b610ea9610d7760a08a0160808b01611302565b505b50505050505050565b6040805163d505accf60e01b8152336004820152306024820152604481018790526064810186905260ff8516608482015260a4810184905260c4810183905290516001600160a01b0388169163d505accf9160e480830192600092919082900301818387803b15801561055457600080fd5b6000821580610f4157505081810281838281610f3e57fe5b04145b610f4a57600080fd5b92915050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1781529251825160009485949389169392918291908083835b60208310610fcc5780518252601f199092019160209182019101610fad565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461102e576040519150601f19603f3d011682016040523d82523d6000602084013e611033565b606091505b5091509150818015611061575080511580611061575080806020019051602081101561105e57600080fd5b50515b611097576040805162461bcd60e51b8152602060048201526002602482015261534160f01b604482015290519081900360640190fd5b5050505050565b604080516000808252602082019092526001600160a01b0384169083906040518082805190602001908083835b602083106110ea5780518252601f1990920191602091820191016110cb565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461114c576040519150601f19603f3d011682016040523d82523d6000602084013e611151565b606091505b505090508061118d576040805162461bcd60e51b815260206004820152600360248201526253544560e81b604482015290519081900360640190fd5b505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1781529251825160009485949389169392918291908083835b6020831061120e5780518252601f1990920191602091820191016111ef565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611270576040519150601f19603f3d011682016040523d82523d6000602084013e611275565b606091505b50915091508180156112a35750805115806112a357508080602001905160208110156112a057600080fd5b50515b611097576040805162461bcd60e51b815260206004820152600260248201526114d560f21b604482015290519081900360640190fd5b803562ffffff811681146112ec57600080fd5b919050565b803560ff811681146112ec57600080fd5b600060208284031215611313578081fd5b813561131e816118ac565b9392505050565b6000806000806080858703121561133a578283fd5b8435611345816118ac565b93506020850135611355816118ac565b9250611363604086016112d9565b91506060850135611373816118ac565b939692955090935050565b60008060008060008060c08789031215611396578182fd5b86356113a1816118ac565b955060208701359450604087013593506113bd606088016112f1565b92506080870135915060a087013590509295509295509295565b600080602083850312156113e9578182fd5b823567ffffffffffffffff80821115611400578384fd5b818501915085601f830112611413578384fd5b813581811115611421578485fd5b8660208083028501011115611434578485fd5b60209290920196919550909350505050565b600060208284031215611457578081fd5b813561131e816118c4565b600060208284031215611473578081fd5b815161131e816118c4565b60006020828403121561148f578081fd5b81358060020b811461131e578182fd5b6000602082840312156114b0578081fd5b815167ffffffffffffffff808211156114c7578283fd5b818401915084601f8301126114da578283fd5b8151818111156114e657fe5b604051601f8201601f19168101602001838111828210171561150457fe5b60405281815283820160200187101561151b578485fd5b61152c82602083016020870161187c565b9695505050505050565b60006101a08284031215611548578081fd5b50919050565b60006020828403121561155f578081fd5b61131e826112d9565b6000806000806080858703121561157d578384fd5b8451935060208501516fffffffffffffffffffffffffffffffff811681146115a3578384fd5b6040860151606090960151949790965092505050565b600080604083850312156115cb578182fd5b505080516020909101519092909150565b6000602082840312156115ed578081fd5b61131e826112f1565b6001600160a01b03169052565b6000815180845261161b81602086016020860161187c565b601f01601f19169290920160200192915050565b60020b9052565b62ffffff169052565b6000828483379101908152919050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000602080830181845280855180835260408601915060408482028701019250838701855b828110156116da57603f198886030184526116c8858351611603565b945092850192908501906001016116ac565b5092979650505050505050565b60006020825261131e6020830184611603565b60208082526014908201527314195c98d95b9d1859d9481d1bdbc81cdb585b1b60621b604082015260600190565b6020808252600990820152684e6f7420574554483960b81b604082015260600190565b60208082526014908201527350657263656e7461676520746f6f206c6172676560601b604082015260600190565b60006101608201905061178d8284516115f6565b602083015161179f60208401826115f6565b5060408301516117b26040840182611636565b5060608301516117c5606084018261162f565b5060808301516117d8608084018261162f565b5060a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151611816828501826115f6565b505061014092830151919092015290565b90815260200190565b6000808335601e19843603018112611846578283fd5b83018035915067ffffffffffffffff821115611860578283fd5b60200191503681900382131561187557600080fd5b9250929050565b60005b8381101561189757818101518382015260200161187f565b838111156118a6576000848401525b50505050565b6001600160a01b03811681146118c157600080fd5b50565b80151581146118c157600080fdfea26469706673582212201c260f6f70a63a04a232027171a233408e109d7a8f199e811deab94ad3a7246064736f6c63430007060033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x95 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xB44A2722 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xB44A2722 EQ PUSH2 0x176 JUMPI DUP1 PUSH4 0xC2E3140A EQ PUSH2 0x18B JUMPI DUP1 PUSH4 0xC45A0155 EQ PUSH2 0x19E JUMPI DUP1 PUSH4 0xD44F2BF2 EQ PUSH2 0x1B3 JUMPI DUP1 PUSH4 0xF3995C67 EQ PUSH2 0x1D3 JUMPI PUSH2 0xED JUMP JUMPDEST DUP1 PUSH4 0x13EAD562 EQ PUSH2 0xF2 JUMPI DUP1 PUSH4 0x4659A494 EQ PUSH2 0x11B JUMPI DUP1 PUSH4 0x4AA4A4FC EQ PUSH2 0x12E JUMPI DUP1 PUSH4 0xA4A78F0C EQ PUSH2 0x143 JUMPI DUP1 PUSH4 0xAC9650D8 EQ PUSH2 0x156 JUMPI PUSH2 0xED JUMP JUMPDEST CALLDATASIZE PUSH2 0xED JUMPI CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0xEB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE2 SWAP1 PUSH2 0x1728 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x105 PUSH2 0x100 CALLDATASIZE PUSH1 0x4 PUSH2 0x1325 JUMP JUMPDEST PUSH2 0x1E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x112 SWAP2 SWAP1 PUSH2 0x164F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xEB PUSH2 0x129 CALLDATASIZE PUSH1 0x4 PUSH2 0x137E JUMP JUMPDEST PUSH2 0x4DA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x105 PUSH2 0x574 JUMP JUMPDEST PUSH2 0xEB PUSH2 0x151 CALLDATASIZE PUSH1 0x4 PUSH2 0x137E JUMP JUMPDEST PUSH2 0x598 JUMP JUMPDEST PUSH2 0x169 PUSH2 0x164 CALLDATASIZE PUSH1 0x4 PUSH2 0x13D7 JUMP JUMPDEST PUSH2 0x631 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x112 SWAP2 SWAP1 PUSH2 0x1687 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x182 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x105 PUSH2 0x771 JUMP JUMPDEST PUSH2 0xEB PUSH2 0x199 CALLDATASIZE PUSH1 0x4 PUSH2 0x137E JUMP JUMPDEST PUSH2 0x795 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x105 PUSH2 0x824 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEB PUSH2 0x1CE CALLDATASIZE PUSH1 0x4 PUSH2 0x1536 JUMP JUMPDEST PUSH2 0x848 JUMP JUMPDEST PUSH2 0xEB PUSH2 0x1E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x137E JUMP JUMPDEST PUSH2 0xEB4 JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT PUSH2 0x206 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1698EE82 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH3 0xFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x291 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2A5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x3F1 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA1671295 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH3 0xFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x35A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x36E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x384 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xF637731D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 MLOAD SWAP3 SWAP4 POP SWAP1 DUP4 AND SWAP2 PUSH4 0xF637731D SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3E8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x4D2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xE0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x42C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x440 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0xE0 DUP2 LT ISZERO PUSH2 0x456 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x4D0 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF637731D DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4CB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x23F2EBC3 PUSH1 0xE2 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xFF DUP6 AND PUSH1 0xA4 DUP3 ADD MSTORE PUSH1 0xC4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xE4 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP2 PUSH4 0x8FCBAF0C SWAP2 PUSH2 0x104 DUP1 DUP4 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x554 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x568 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x0 NOT SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP2 PUSH4 0xDD62ED3E SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5FD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x613 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD LT ISZERO PUSH2 0x629 JUMPI PUSH2 0x629 DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0x4DA JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x64A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x67E JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x669 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x76A JUMPI PUSH1 0x0 DUP1 ADDRESS DUP7 DUP7 DUP6 DUP2 DUP2 LT PUSH2 0x69C JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x6AE SWAP2 SWAP1 PUSH2 0x1830 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x6BC SWAP3 SWAP2 SWAP1 PUSH2 0x163F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6F7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6FC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x748 JUMPI PUSH1 0x44 DUP2 MLOAD LT ISZERO PUSH2 0x715 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 DUP2 ADD SWAP1 POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x72F SWAP2 SWAP1 PUSH2 0x149F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE2 SWAP2 SWAP1 PUSH2 0x16E7 JUMP JUMPDEST DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x755 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0x684 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE SWAP1 MLOAD DUP7 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP2 PUSH4 0xDD62ED3E SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7F8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x80E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD LT ISZERO PUSH2 0x629 JUMPI PUSH2 0x629 DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0xEB4 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x85A PUSH1 0x60 DUP4 ADD PUSH1 0x40 DUP5 ADD PUSH2 0x15DC JUMP JUMPDEST PUSH1 0xFF AND GT PUSH2 0x87A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE2 SWAP1 PUSH2 0x16FA JUMP JUMPDEST PUSH1 0x64 PUSH2 0x88C PUSH1 0x60 DUP4 ADD PUSH1 0x40 DUP5 ADD PUSH2 0x15DC JUMP JUMPDEST PUSH1 0xFF AND GT ISZERO PUSH2 0x8AD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE2 SWAP1 PUSH2 0x174B JUMP JUMPDEST PUSH2 0x8BA PUSH1 0x20 DUP3 ADD DUP3 PUSH2 0x1302 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x23B872DD CALLER PUSH2 0x8D6 PUSH1 0x20 DUP6 ADD DUP6 PUSH2 0x1302 JUMP JUMPDEST DUP5 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8F9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1663 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x913 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x927 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x94B SWAP2 SWAP1 PUSH2 0x1462 JUMP JUMPDEST POP PUSH1 0x0 DUP1 PUSH2 0x95C PUSH1 0x20 DUP5 ADD DUP5 PUSH2 0x1302 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x89AFCB44 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x987 SWAP2 SWAP1 PUSH2 0x164F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x9B4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9D8 SWAP2 SWAP1 PUSH2 0x15B9 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 PUSH1 0x64 PUSH2 0x9FE PUSH2 0x9F4 PUSH1 0x60 DUP8 ADD PUSH1 0x40 DUP9 ADD PUSH2 0x15DC JUMP JUMPDEST DUP6 SWAP1 PUSH1 0xFF AND PUSH2 0xF26 JUMP JUMPDEST DUP2 PUSH2 0xA05 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x0 PUSH1 0x64 PUSH2 0xA1F PUSH2 0x9F4 PUSH1 0x60 DUP9 ADD PUSH1 0x40 DUP10 ADD PUSH2 0x15DC JUMP JUMPDEST DUP2 PUSH2 0xA26 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH2 0xA63 PUSH2 0xA3C PUSH1 0x80 DUP8 ADD PUSH1 0x60 DUP9 ADD PUSH2 0x1302 JUMP JUMPDEST PUSH32 0x0 DUP5 PUSH2 0xF50 JUMP JUMPDEST PUSH2 0xA9D PUSH2 0xA76 PUSH1 0xA0 DUP8 ADD PUSH1 0x80 DUP9 ADD PUSH2 0x1302 JUMP JUMPDEST PUSH32 0x0 DUP4 PUSH2 0xF50 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x88316456 PUSH1 0x40 MLOAD DUP1 PUSH2 0x160 ADD PUSH1 0x40 MSTORE DUP1 DUP11 PUSH1 0x60 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xAEE SWAP2 SWAP1 PUSH2 0x1302 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB0C PUSH1 0xA0 DUP13 ADD PUSH1 0x80 DUP14 ADD PUSH2 0x1302 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB2A PUSH1 0xC0 DUP13 ADD PUSH1 0xA0 DUP14 ADD PUSH2 0x154E JUMP JUMPDEST PUSH3 0xFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB44 PUSH1 0xE0 DUP13 ADD PUSH1 0xC0 DUP14 ADD PUSH2 0x147E JUMP JUMPDEST PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB5D PUSH2 0x100 DUP13 ADD PUSH1 0xE0 DUP14 ADD PUSH2 0x147E JUMP JUMPDEST PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x40 DUP2 ADD DUP8 SWAP1 MSTORE PUSH2 0x100 DUP12 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x120 DUP12 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD PUSH2 0xB9B PUSH2 0x160 DUP13 ADD PUSH2 0x140 DUP14 ADD PUSH2 0x1302 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH2 0x160 ADD CALLDATALOAD DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBCE SWAP2 SWAP1 PUSH2 0x1779 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBE8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xBFC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC20 SWAP2 SWAP1 PUSH2 0x1568 JUMP JUMPDEST SWAP4 POP SWAP4 POP POP POP DUP6 DUP3 LT ISZERO PUSH2 0xD80 JUMPI DUP4 DUP3 LT ISZERO PUSH2 0xC71 JUMPI PUSH2 0xC71 PUSH2 0xC49 PUSH1 0x80 DUP10 ADD PUSH1 0x60 DUP11 ADD PUSH2 0x1302 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x0 PUSH2 0xF50 JUMP JUMPDEST DUP2 DUP7 SUB PUSH2 0xC86 PUSH2 0x1A0 DUP10 ADD PUSH2 0x180 DUP11 ADD PUSH2 0x1446 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xCD2 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND PUSH2 0xCC7 PUSH1 0x80 DUP11 ADD PUSH1 0x60 DUP12 ADD PUSH2 0x1302 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST ISZERO PUSH2 0xD64 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0xD23 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x1827 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD51 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0xD5F CALLER DUP3 PUSH2 0x109E JUMP JUMPDEST PUSH2 0xD7E JUMP JUMPDEST PUSH2 0xD7E PUSH2 0xD77 PUSH1 0x80 DUP11 ADD PUSH1 0x60 DUP12 ADD PUSH2 0x1302 JUMP JUMPDEST CALLER DUP4 PUSH2 0x1192 JUMP JUMPDEST POP JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xEAB JUMPI DUP3 DUP2 LT ISZERO PUSH2 0xDA3 JUMPI PUSH2 0xDA3 PUSH2 0xC49 PUSH1 0xA0 DUP10 ADD PUSH1 0x80 DUP11 ADD PUSH2 0x1302 JUMP JUMPDEST DUP1 DUP6 SUB PUSH2 0xDB8 PUSH2 0x1A0 DUP10 ADD PUSH2 0x180 DUP11 ADD PUSH2 0x1446 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xE04 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND PUSH2 0xDF9 PUSH1 0xA0 DUP11 ADD PUSH1 0x80 DUP12 ADD PUSH2 0x1302 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST ISZERO PUSH2 0xE96 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0xE55 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x1827 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE6F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xE83 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0xE91 CALLER DUP3 PUSH2 0x109E JUMP JUMPDEST PUSH2 0xEA9 JUMP JUMPDEST PUSH2 0xEA9 PUSH2 0xD77 PUSH1 0xA0 DUP11 ADD PUSH1 0x80 DUP12 ADD PUSH2 0x1302 JUMP JUMPDEST POP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0xD505ACCF PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xFF DUP6 AND PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xC4 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP2 PUSH4 0xD505ACCF SWAP2 PUSH1 0xE4 DUP1 DUP4 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x554 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0xF41 JUMPI POP POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0xF3E JUMPI INVALID JUMPDEST DIV EQ JUMPDEST PUSH2 0xF4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP3 ADD DUP4 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x95EA7B3 PUSH1 0xE0 SHL OR DUP2 MSTORE SWAP3 MLOAD DUP3 MLOAD PUSH1 0x0 SWAP5 DUP6 SWAP5 SWAP4 DUP10 AND SWAP4 SWAP3 SWAP2 DUP3 SWAP2 SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0xFCC JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0xFAD JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x102E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1033 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x1061 JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0x1061 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x105E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD JUMPDEST PUSH2 0x1097 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x5341 PUSH1 0xF0 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP4 SWAP1 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x10EA JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x10CB JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x114C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1151 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x118D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x24 DUP3 ADD MSTORE PUSH3 0x535445 PUSH1 0xE8 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP3 ADD DUP4 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xA9059CBB PUSH1 0xE0 SHL OR DUP2 MSTORE SWAP3 MLOAD DUP3 MLOAD PUSH1 0x0 SWAP5 DUP6 SWAP5 SWAP4 DUP10 AND SWAP4 SWAP3 SWAP2 DUP3 SWAP2 SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x120E JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x11EF JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1270 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1275 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x12A3 JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0x12A3 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x12A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD JUMPDEST PUSH2 0x1097 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x14D5 PUSH1 0xF2 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x12EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x12EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1313 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x131E DUP2 PUSH2 0x18AC JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x133A JUMPI DUP3 DUP4 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x1345 DUP2 PUSH2 0x18AC JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x1355 DUP2 PUSH2 0x18AC JUMP JUMPDEST SWAP3 POP PUSH2 0x1363 PUSH1 0x40 DUP7 ADD PUSH2 0x12D9 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x1373 DUP2 PUSH2 0x18AC JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1396 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x13A1 DUP2 PUSH2 0x18AC JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH2 0x13BD PUSH1 0x60 DUP9 ADD PUSH2 0x12F1 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x13E9 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1400 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1413 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1421 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x1434 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1457 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x131E DUP2 PUSH2 0x18C4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1473 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x131E DUP2 PUSH2 0x18C4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x148F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD DUP1 PUSH1 0x2 SIGNEXTEND DUP2 EQ PUSH2 0x131E JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x14B0 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x14C7 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP5 ADD SWAP2 POP DUP5 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x14DA JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x14E6 JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x20 ADD DUP4 DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1504 JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE DUP2 DUP2 MSTORE DUP4 DUP3 ADD PUSH1 0x20 ADD DUP8 LT ISZERO PUSH2 0x151B JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x152C DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x187C JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1548 JUMPI DUP1 DUP2 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x155F JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x131E DUP3 PUSH2 0x12D9 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x157D JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 MLOAD SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x15A3 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD PUSH1 0x60 SWAP1 SWAP7 ADD MLOAD SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x15CB JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x15ED JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x131E DUP3 PUSH2 0x12F1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x161B DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x187C JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 SIGNEXTEND SWAP1 MSTORE JUMP JUMPDEST PUSH3 0xFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP5 DUP3 MUL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x16DA JUMPI PUSH1 0x3F NOT DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x16C8 DUP6 DUP4 MLOAD PUSH2 0x1603 JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x16AC JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x131E PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1603 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH20 0x14195C98D95B9D1859D9481D1BDBC81CDB585B1B PUSH1 0x62 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x9 SWAP1 DUP3 ADD MSTORE PUSH9 0x4E6F74205745544839 PUSH1 0xB8 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH20 0x50657263656E7461676520746F6F206C61726765 PUSH1 0x60 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x160 DUP3 ADD SWAP1 POP PUSH2 0x178D DUP3 DUP5 MLOAD PUSH2 0x15F6 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x179F PUSH1 0x20 DUP5 ADD DUP3 PUSH2 0x15F6 JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x17B2 PUSH1 0x40 DUP5 ADD DUP3 PUSH2 0x1636 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x17C5 PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x162F JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0x17D8 PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x162F JUMP JUMPDEST POP PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x100 DUP1 DUP5 ADD MLOAD DUP2 DUP5 ADD MSTORE POP PUSH2 0x120 DUP1 DUP5 ADD MLOAD PUSH2 0x1816 DUP3 DUP6 ADD DUP3 PUSH2 0x15F6 JUMP JUMPDEST POP POP PUSH2 0x140 SWAP3 DUP4 ADD MLOAD SWAP2 SWAP1 SWAP3 ADD MSTORE SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x1846 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1860 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x1875 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1897 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x187F JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x18A6 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x18C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x18C1 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SHR 0x26 0xF PUSH16 0x70A63A04A232027171A233408E109D7A DUP16 NOT SWAP15 DUP2 SAR 0xEA 0xB9 0x4A 0xD3 0xA7 0x24 PUSH1 0x64 PUSH20 0x6F6C634300070600330000000000000000000000 ",
							"sourceMap": "600:3512:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1096:10;-1:-1:-1;;;;;1110:5:16;1096:19;;1088:41;;;;-1:-1:-1;;;1088:41:16;;;;;;;:::i;:::-;;;;;;;;;600:3512;;;;;472:737:19;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1364:298:20;;;;;;:::i;:::-;;:::i;431:39:18:-;;;;;;;;;;;;;:::i;1703:358:20:-;;;;;;:::i;:::-;;:::i;318:669:17:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;748:51:16:-;;;;;;;;;;;;;:::i;1000:323:20:-;;;;;;:::i;:::-;;:::i;337:41:18:-;;;;;;;;;;;;;:::i;1145:2964:16:-;;;;;;;;;;-1:-1:-1;1145:2964:16;;;;;:::i;:::-;;:::i;677:282:20:-;;;;;;:::i;:::-;;:::i;472:737:19:-;660:12;702:6;-1:-1:-1;;;;;693:15:19;:6;-1:-1:-1;;;;;693:15:19;;685:24;;;;;;745:7;-1:-1:-1;;;;;727:34:19;;762:6;770;778:3;727:55;;;;;;;;;;;;;-1:-1:-1;;;;;727:55:19;;;;;;-1:-1:-1;;;;;727:55:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;727:55:19;;-1:-1:-1;;;;;;799:18:19;;795:407;;859:7;-1:-1:-1;;;;;841:37:19;;879:6;887;895:3;841:58;;;;;;;;;;;;;-1:-1:-1;;;;;841:58:19;;;;;;-1:-1:-1;;;;;841:58:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;841:58:19;914:45;;;-1:-1:-1;;;914:45:19;;-1:-1:-1;;;;;914:45:19;;;;;;;;;841:58;;-1:-1:-1;914:31:19;;;;;;:45;;;;;-1:-1:-1;;914:45:19;;;;;;;;-1:-1:-1;914:31:19;:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;795:407;;;993:28;1052:4;-1:-1:-1;;;;;1037:26:19;;:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1037:28:19;;-1:-1:-1;;;;;;1084:25:19;;1080:111;;1145:4;-1:-1:-1;;;;;1130:31:19;;1162:12;1130:45;;;;;;;;;;;;;-1:-1:-1;;;;;1130:45:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1080:111;795:407;;472:737;;;;;;:::o;1364:298:20:-;1564:90;;;-1:-1:-1;;;1564:90:20;;1598:10;1564:90;;;;1618:4;1564:90;;;;;;;;;;;;;;;;1640:4;1564:90;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1564:33:20;;;;;:90;;;;;-1:-1:-1;;1564:90:20;;;;;;;-1:-1:-1;1564:33:20;:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1364:298;;;;;;:::o;431:39:18:-;;;:::o;1703:358:20:-;1920:50;;;-1:-1:-1;;;1920:50:20;;1944:10;1920:50;;;;1964:4;1920:50;;;;;;-1:-1:-1;;1973:17:20;-1:-1:-1;;;;;1920:23:20;;;;;:50;;;;;;;;;;;;;;;:23;:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1920:50:20;:70;1916:137;;;2005:48;2023:5;2030;2037:6;2045:1;2048;2051;2005:17;:48::i;:::-;1703:358;;;;;;:::o;318:669:17:-;393:22;450:4;438:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;428:34;;478:9;473:507;493:15;;;473:507;;;531:12;;576:4;595;;600:1;595:7;;;;;;;;;;;;;;;;;;:::i;:::-;568:35;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;530:73;;;;625:7;620:313;;754:2;738:6;:13;:18;734:32;;;758:8;;;734:32;839:4;831:6;827:17;817:27;;899:6;888:28;;;;;;;;;;;;:::i;:::-;881:36;;-1:-1:-1;;;881:36:17;;;;;;;;:::i;620:313::-;962:6;949:7;957:1;949:10;;;;;;;;;;;;;;;;;:19;-1:-1:-1;;510:3:17;;473:507;;;;318:669;;;;:::o;748:51:16:-;;;:::o;1000:323:20:-;1212:50;;;-1:-1:-1;;;1212:50:20;;1236:10;1212:50;;;;1256:4;1212:50;;;;;;1265:5;;-1:-1:-1;;;;;1212:23:20;;;;;:50;;;;;;;;;;;;;;;:23;:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1212:50:20;:58;1208:107;;;1272:43;1283:5;1290;1297:8;1307:1;1310;1313;1272:10;:43::i;337:41:18:-;;;:::o;1145:2964:16:-;1259:1;1230:26;;;;;;;;:::i;:::-;:30;;;1222:63;;;;-1:-1:-1;;;1222:63:16;;;;;;;:::i;:::-;1334:3;1304:26;;;;;;;;:::i;:::-;:33;;;;1296:66;;;;-1:-1:-1;;;1296:66:16;;;;;;;:::i;:::-;1436:11;;;;:6;:11;:::i;:::-;-1:-1:-1;;;;;1421:40:16;;1462:10;1474:11;;;;:6;:11;:::i;:::-;1487:6;:25;;;1421:92;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;1525:17:16;;1580:11;;;;:6;:11;:::i;:::-;-1:-1:-1;;;;;1565:32:16;;1606:4;1565:47;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1524:88;;-1:-1:-1;1524:88:16;-1:-1:-1;1676:26:16;1749:3;1705:41;1719:26;;;;;;;;:::i;:::-;1705:9;;:41;;:13;:41::i;:::-;:47;;;;;;;-1:-1:-1;1763:26:16;1836:3;1792:41;1806:26;;;;;;;;:::i;1792:41::-;:47;;;;;;;-1:-1:-1;1925:89:16;1952:13;;;;;;;;:::i;:::-;1967:26;1995:18;1925:26;:89::i;:::-;2025;2052:13;;;;;;;;:::i;:::-;2067:26;2095:18;2025:26;:89::i;:::-;2161:17;2180;2242:26;-1:-1:-1;;;;;2214:60:16;;2293:601;;;;;;;;2363:6;:13;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;2293:601:16;;;;;2407:13;;;;;;;;:::i;:::-;-1:-1:-1;;;;;2293:601:16;;;;;2448:10;;;;;;;;:::i;:::-;2293:601;;;;;;2492:16;;;;;;;;:::i;:::-;2293:601;;;;;;2542:16;;;;;;;;:::i;:::-;2293:601;;;;;;;;;;;;;;;;2707:17;;;;2293:601;;;;2759:17;;;;2293:601;;;;;;2810:16;;;;;;;;:::i;:::-;-1:-1:-1;;;;;2293:601:16;;;;;2859:6;:15;;;2293:601;;;2214:695;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2156:753;;;;;;2996:9;2984;:21;2980:556;;;3038:18;3026:9;:30;3022:143;;;3077:72;3104:13;;;;;;;;:::i;:::-;3119:26;3147:1;3077:26;:72::i;:::-;3199:21;;;3239:18;;;;;;;;:::i;:::-;:44;;;;-1:-1:-1;;;;;;3278:5:16;3261:22;:13;;;;;;;;:::i;:::-;-1:-1:-1;;;;;3261:22:16;;3239:44;3235:290;;;3304:31;;-1:-1:-1;;;3304:31:16;;-1:-1:-1;;;;;3311:5:16;3304:22;;;;:31;;3327:7;;3304:31;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3354:51;3385:10;3397:7;3354:30;:51::i;:::-;3235:290;;;3446:63;3474:13;;;;;;;;:::i;:::-;3489:10;3501:7;3446:27;:63::i;:::-;2980:556;;3562:9;3550;:21;3546:556;;;3604:18;3592:9;:30;3588:143;;;3643:72;3670:13;;;;;;;;:::i;3643:72::-;3765:21;;;3805:18;;;;;;;;:::i;:::-;:44;;;;-1:-1:-1;;;;;;3844:5:16;3827:22;:13;;;;;;;;:::i;:::-;-1:-1:-1;;;;;3827:22:16;;3805:44;3801:290;;;3870:31;;-1:-1:-1;;;3870:31:16;;-1:-1:-1;;;;;3877:5:16;3870:22;;;;:31;;3893:7;;3870:31;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3920:51;3951:10;3963:7;3920:30;:51::i;:::-;3801:290;;;4012:63;4040:13;;;;;;;;:::i;4012:63::-;3546:556;;1145:2964;;;;;;;:::o;677:282:20:-;872:79;;;-1:-1:-1;;;872:79:20;;899:10;872:79;;;;919:4;872:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;872:26:20;;;;;:79;;;;;-1:-1:-1;;872:79:20;;;;;;;-1:-1:-1;872:26:20;:79;;;;;;;;;;986:125:15;1044:9;1073:6;;;:30;;-1:-1:-1;;1088:5:15;;;1102:1;1097;1088:5;1097:1;1083:15;;;;;:20;1073:30;1065:39;;;;;;986:125;;;;:::o;1915:314:32:-;2079:58;;;-1:-1:-1;;;;;2079:58:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2079:58:32;-1:-1:-1;;;2079:58:32;;;2068:70;;;;2033:12;;;;2068:10;;;;2079:58;2068:70;;;2079:58;2068:70;;2079:58;2068:70;;;;;;;;;;-1:-1:-1;;2068:70:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2032:106;;;;2157:7;:57;;;;-1:-1:-1;2169:11:32;;:16;;:44;;;2200:4;2189:24;;;;;;;;;;;;;;;-1:-1:-1;2189:24:32;2169:44;2149:72;;;;;-1:-1:-1;;;2149:72:32;;;;;;;;;;;;-1:-1:-1;;;2149:72:32;;;;;;;;;;;;;;;1915:314;;;;;:::o;2425:168::-;2538:12;;;2498;2538;;;;;;;;;-1:-1:-1;;;;;2516:7:32;;;2531:5;;2516:35;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2516:35:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2497:54;;;2570:7;2562:23;;;;;-1:-1:-1;;;2562:23:32;;;;;;;;;;;;-1:-1:-1;;;2562:23:32;;;;;;;;;;;;;;;2425:168;;;:::o;1239:316::-;1404:59;;;-1:-1:-1;;;;;1404:59:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1404:59:32;-1:-1:-1;;;1404:59:32;;;1393:71;;;;1358:12;;;;1393:10;;;;1404:59;1393:71;;;1404:59;1393:71;;1404:59;1393:71;;;;;;;;;;-1:-1:-1;;1393:71:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1357:107;;;;1483:7;:57;;;;-1:-1:-1;1495:11:32;;:16;;:44;;;1526:4;1515:24;;;;;;;;;;;;;;;-1:-1:-1;1515:24:32;1495:44;1475:72;;;;;-1:-1:-1;;;1475:72:32;;;;;;;;;;;;-1:-1:-1;;;1475:72:32;;;;;;;;;;;;;;14:163:33;83:20;;143:8;132:20;;122:31;;112:2;;167:1;164;157:12;112:2;64:113;;;:::o;182:158::-;250:20;;310:4;299:16;;289:27;;279:2;;330:1;327;320:12;345:259;;457:2;445:9;436:7;432:23;428:32;425:2;;;478:6;470;463:22;425:2;522:9;509:23;541:33;568:5;541:33;:::i;:::-;593:5;415:189;-1:-1:-1;;;415:189:33:o;609:620::-;;;;;771:3;759:9;750:7;746:23;742:33;739:2;;;793:6;785;778:22;739:2;837:9;824:23;856:33;883:5;856:33;:::i;:::-;908:5;-1:-1:-1;965:2:33;950:18;;937:32;978:35;937:32;978:35;:::i;:::-;1032:7;-1:-1:-1;1058:39:33;1093:2;1078:18;;1058:39;:::i;:::-;1048:49;;1149:2;1138:9;1134:18;1121:32;1162:35;1189:7;1162:35;:::i;:::-;729:500;;;;-1:-1:-1;729:500:33;;-1:-1:-1;;729:500:33:o;1234:606::-;;;;;;;1429:3;1417:9;1408:7;1404:23;1400:33;1397:2;;;1451:6;1443;1436:22;1397:2;1495:9;1482:23;1514:33;1541:5;1514:33;:::i;:::-;1566:5;-1:-1:-1;1618:2:33;1603:18;;1590:32;;-1:-1:-1;1669:2:33;1654:18;;1641:32;;-1:-1:-1;1692:38:33;1726:2;1711:18;;1692:38;:::i;:::-;1682:48;;1777:3;1766:9;1762:19;1749:33;1739:43;;1829:3;1818:9;1814:19;1801:33;1791:43;;1387:453;;;;;;;;:::o;1845:677::-;;;2003:2;1991:9;1982:7;1978:23;1974:32;1971:2;;;2024:6;2016;2009:22;1971:2;2069:9;2056:23;2098:18;2139:2;2131:6;2128:14;2125:2;;;2160:6;2152;2145:22;2125:2;2203:6;2192:9;2188:22;2178:32;;2248:7;2241:4;2237:2;2233:13;2229:27;2219:2;;2275:6;2267;2260:22;2219:2;2320;2307:16;2346:2;2338:6;2335:14;2332:2;;;2367:6;2359;2352:22;2332:2;2426:7;2421:2;2415;2407:6;2403:15;2399:2;2395:24;2391:33;2388:46;2385:2;;;2452:6;2444;2437:22;2385:2;2488;2480:11;;;;;2510:6;;-1:-1:-1;1961:561:33;;-1:-1:-1;;;;1961:561:33:o;2527:253::-;;2636:2;2624:9;2615:7;2611:23;2607:32;2604:2;;;2657:6;2649;2642:22;2604:2;2701:9;2688:23;2720:30;2744:5;2720:30;:::i;2785:257::-;;2905:2;2893:9;2884:7;2880:23;2876:32;2873:2;;;2926:6;2918;2911:22;2873:2;2963:9;2957:16;2982:30;3006:5;2982:30;:::i;3047:293::-;;3157:2;3145:9;3136:7;3132:23;3128:32;3125:2;;;3178:6;3170;3163:22;3125:2;3222:9;3209:23;3275:5;3272:1;3261:20;3254:5;3251:31;3241:2;;3301:6;3293;3286:22;3345:876;;3478:2;3466:9;3457:7;3453:23;3449:32;3446:2;;;3499:6;3491;3484:22;3446:2;3537:9;3531:16;3566:18;3607:2;3599:6;3596:14;3593:2;;;3628:6;3620;3613:22;3593:2;3671:6;3660:9;3656:22;3646:32;;3716:7;3709:4;3705:2;3701:13;3697:27;3687:2;;3743:6;3735;3728:22;3687:2;3777;3771:9;3799:2;3795;3792:10;3789:2;;;3805:9;3789:2;3845;3839:9;3914:2;3895:13;;-1:-1:-1;;3891:27:33;3879:40;;3921:2;3875:49;3939:18;;;3959:22;;;3936:46;3933:2;;;3985:9;3933:2;4012;4005:22;4036:18;;;4073:11;;;4086:2;4069:20;4066:33;-1:-1:-1;4063:2:33;;;4117:6;4109;4102:22;4063:2;4135:55;4187:2;4182;4174:6;4170:15;4165:2;4161;4157:11;4135:55;:::i;:::-;4209:6;3436:785;-1:-1:-1;;;;;;3436:785:33:o;4226:210::-;;4371:3;4359:9;4350:7;4346:23;4342:33;4339:2;;;4393:6;4385;4378:22;4339:2;-1:-1:-1;4421:9:33;4329:107;-1:-1:-1;4329:107:33:o;4441:196::-;;4552:2;4540:9;4531:7;4527:23;4523:32;4520:2;;;4573:6;4565;4558:22;4520:2;4601:30;4621:9;4601:30;:::i;4642:509::-;;;;;4816:3;4804:9;4795:7;4791:23;4787:33;4784:2;;;4838:6;4830;4823:22;4784:2;4872:9;4866:16;4856:26;;4925:2;4914:9;4910:18;4904:25;4969:34;4962:5;4958:46;4951:5;4948:57;4938:2;;5024:6;5016;5009:22;4938:2;5097;5082:18;;5076:25;5141:2;5126:18;;;5120:25;4774:377;;5052:5;;-1:-1:-1;4774:377:33;-1:-1:-1;;;4774:377:33:o;5156:255::-;;;5296:2;5284:9;5275:7;5271:23;5267:32;5264:2;;;5317:6;5309;5302:22;5264:2;-1:-1:-1;;5345:16:33;;5401:2;5386:18;;;5380:25;5345:16;;5380:25;;-1:-1:-1;5254:157:33:o;5416:194::-;;5526:2;5514:9;5505:7;5501:23;5497:32;5494:2;;;5547:6;5539;5532:22;5494:2;5575:29;5594:9;5575:29;:::i;5615:106::-;-1:-1:-1;;;;;5683:31:33;5671:44;;5661:60::o;5726:259::-;;5807:5;5801:12;5834:6;5829:3;5822:19;5850:63;5906:6;5899:4;5894:3;5890:14;5883:4;5876:5;5872:16;5850:63;:::i;:::-;5967:2;5946:15;-1:-1:-1;;5942:29:33;5933:39;;;;5974:4;5929:50;;5777:208;-1:-1:-1;;5777:208:33:o;5990:93::-;6067:1;6056:20;6044:33;;6034:49::o;6088:94::-;6166:8;6155:20;6143:33;;6133:49::o;6187:273::-;;6370:6;6362;6357:3;6344:33;6396:16;;6421:15;;;6396:16;6334:126;-1:-1:-1;6334:126:33:o;6465:203::-;-1:-1:-1;;;;;6629:32:33;;;;6611:51;;6599:2;6584:18;;6566:102::o;6889:383::-;-1:-1:-1;;;;;7155:15:33;;;7137:34;;7207:15;;;;7202:2;7187:18;;7180:43;7254:2;7239:18;;7232:34;;;;7087:2;7072:18;;7054:218::o;7277:806::-;;7466:2;7506;7495:9;7491:18;7536:2;7525:9;7518:21;7559:6;7594;7588:13;7625:6;7617;7610:22;7663:2;7652:9;7648:18;7641:25;;7726:2;7720;7712:6;7708:15;7697:9;7693:31;7689:40;7675:54;;7764:2;7756:6;7752:15;7785:4;7798:256;7812:6;7809:1;7806:13;7798:256;;;7905:2;7901:7;7889:9;7881:6;7877:22;7873:36;7868:3;7861:49;7933:41;7967:6;7958;7952:13;7933:41;:::i;:::-;7923:51;-1:-1:-1;8032:12:33;;;;7997:15;;;;7834:1;7827:9;7798:256;;;-1:-1:-1;8071:6:33;;7446:637;-1:-1:-1;;;;;;;7446:637:33:o;8088:221::-;;8237:2;8226:9;8219:21;8257:46;8299:2;8288:9;8284:18;8276:6;8257:46;:::i;8314:344::-;8516:2;8498:21;;;8555:2;8535:18;;;8528:30;-1:-1:-1;;;8589:2:33;8574:18;;8567:50;8649:2;8634:18;;8488:170::o;8663:332::-;8865:2;8847:21;;;8904:1;8884:18;;;8877:29;-1:-1:-1;;;8937:2:33;8922:18;;8915:39;8986:2;8971:18;;8837:158::o;9000:344::-;9202:2;9184:21;;;9241:2;9221:18;;;9214:30;-1:-1:-1;;;9275:2:33;9260:18;;9253:50;9335:2;9320:18;;9174:170::o;9349:1234::-;;9539:3;9528:9;9524:19;9516:27;;9552:46;9588:9;9579:6;9573:13;9552:46;:::i;:::-;9645:4;9637:6;9633:17;9627:24;9660:56;9710:4;9699:9;9695:20;9681:12;9660:56;:::i;:::-;;9765:4;9757:6;9753:17;9747:24;9780:57;9831:4;9820:9;9816:20;9800:14;9780:57;:::i;:::-;;9886:4;9878:6;9874:17;9868:24;9901:56;9951:4;9940:9;9936:20;9920:14;9901:56;:::i;:::-;;10006:4;9998:6;9994:17;9988:24;10021:56;10071:4;10060:9;10056:20;10040:14;10021:56;:::i;:::-;;10133:4;10125:6;10121:17;10115:24;10108:4;10097:9;10093:20;10086:54;10196:4;10188:6;10184:17;10178:24;10171:4;10160:9;10156:20;10149:54;10259:4;10251:6;10247:17;10241:24;10234:4;10223:9;10219:20;10212:54;10285:6;10345:2;10337:6;10333:15;10327:22;10322:2;10311:9;10307:18;10300:50;;10369:6;10424:2;10416:6;10412:15;10406:22;10437:56;10489:2;10478:9;10474:18;10458:14;10437:56;:::i;:::-;-1:-1:-1;;10512:6:33;10560:15;;;10554:22;10534:18;;;;10527:50;9506:1077;:::o;10588:177::-;10734:25;;;10722:2;10707:18;;10689:76::o;10770:533::-;;;10913:11;10900:25;11007:2;11003:7;10992:8;10976:14;10972:29;10968:43;10948:18;10944:68;10934:2;;11029:4;11023;11016:18;10934:2;11059:33;;11111:20;;;-1:-1:-1;11154:18:33;11143:30;;11140:2;;;11189:4;11183;11176:18;11140:2;11225:4;11213:17;;-1:-1:-1;11256:14:33;11252:27;;;11242:38;;11239:2;;;11293:1;11290;11283:12;11239:2;10864:439;;;;;:::o;11308:258::-;11380:1;11390:113;11404:6;11401:1;11398:13;11390:113;;;11480:11;;;11474:18;11461:11;;;11454:39;11426:2;11419:10;11390:113;;;11521:6;11518:1;11515:13;11512:2;;;11556:1;11547:6;11542:3;11538:16;11531:27;11512:2;;11361:205;;;:::o;11571:133::-;-1:-1:-1;;;;;11648:31:33;;11638:42;;11628:2;;11694:1;11691;11684:12;11628:2;11618:86;:::o;11709:120::-;11797:5;11790:13;11783:21;11776:5;11773:32;11763:2;;11819:1;11816;11809:12"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1281600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"WETH9()": "infinite",
								"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": "infinite",
								"factory()": "infinite",
								"migrate((address,uint256,uint8,address,address,uint24,int24,int24,uint256,uint256,address,uint256,bool))": "infinite",
								"multicall(bytes[])": "infinite",
								"nonfungiblePositionManager()": "infinite",
								"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 600,
									"end": 4112,
									"name": "PUSH",
									"source": 16,
									"value": "E0"
								},
								{
									"begin": 600,
									"end": 4112,
									"name": "PUSH",
									"source": 16,
									"value": "40"
								},
								{
									"begin": 600,
									"end": 4112,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 808,
									"end": 1042,
									"name": "CALLVALUE",
									"source": 16
								},
								{
									"begin": 808,
									"end": 1042,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 808,
									"end": 1042,
									"name": "ISZERO",
									"source": 16
								},
								{
									"begin": 808,
									"end": 1042,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 808,
									"end": 1042,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 808,
									"end": 1042,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 808,
									"end": 1042,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 808,
									"end": 1042,
									"name": "REVERT",
									"source": 16
								},
								{
									"begin": 808,
									"end": 1042,
									"name": "tag",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 808,
									"end": 1042,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 808,
									"end": 1042,
									"name": "POP",
									"source": 16
								},
								{
									"begin": 808,
									"end": 1042,
									"name": "PUSH",
									"source": 16,
									"value": "40"
								},
								{
									"begin": 808,
									"end": 1042,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 808,
									"end": 1042,
									"name": "PUSHSIZE",
									"source": 16
								},
								{
									"begin": 808,
									"end": 1042,
									"name": "CODESIZE",
									"source": 16
								},
								{
									"begin": 808,
									"end": 1042,
									"name": "SUB",
									"source": 16
								},
								{
									"begin": 808,
									"end": 1042,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 808,
									"end": 1042,
									"name": "PUSHSIZE",
									"source": 16
								},
								{
									"begin": 808,
									"end": 1042,
									"name": "DUP4",
									"source": 16
								},
								{
									"begin": 808,
									"end": 1042,
									"name": "CODECOPY",
									"source": 16
								},
								{
									"begin": 808,
									"end": 1042,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 808,
									"end": 1042,
									"name": "ADD",
									"source": 16
								},
								{
									"begin": 808,
									"end": 1042,
									"name": "PUSH",
									"source": 16,
									"value": "40"
								},
								{
									"begin": 808,
									"end": 1042,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 808,
									"end": 1042,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 808,
									"end": 1042,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 808,
									"end": 1042,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "2"
								},
								{
									"begin": 808,
									"end": 1042,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 808,
									"end": 1042,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "3"
								},
								{
									"begin": 808,
									"end": 1042,
									"name": "JUMP",
									"source": 16,
									"value": "[in]"
								},
								{
									"begin": 808,
									"end": 1042,
									"name": "tag",
									"source": 16,
									"value": "2"
								},
								{
									"begin": 808,
									"end": 1042,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "60"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 536,
									"end": 554,
									"name": "PUSH",
									"source": 18,
									"value": "60"
								},
								{
									"begin": 536,
									"end": 554,
									"name": "SWAP4",
									"source": 18
								},
								{
									"begin": 536,
									"end": 554,
									"name": "DUP5",
									"source": 18
								},
								{
									"begin": 536,
									"end": 554,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 536,
									"end": 554,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 536,
									"end": 554,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 536,
									"end": 554,
									"name": "PUSH",
									"source": 18,
									"value": "80"
								},
								{
									"begin": 536,
									"end": 554,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 565,
									"end": 579,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 565,
									"end": 579,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 565,
									"end": 579,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 565,
									"end": 579,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 565,
									"end": 579,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 565,
									"end": 579,
									"name": "PUSH",
									"source": 18,
									"value": "A0"
								},
								{
									"begin": 565,
									"end": 579,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 978,
									"end": 1034,
									"name": "SWAP1",
									"source": 16
								},
								{
									"begin": 978,
									"end": 1034,
									"name": "SWAP2",
									"source": 16
								},
								{
									"begin": 978,
									"end": 1034,
									"name": "SHL",
									"source": 16
								},
								{
									"begin": 978,
									"end": 1034,
									"name": "AND",
									"source": 16
								},
								{
									"begin": 978,
									"end": 1034,
									"name": "PUSH",
									"source": 16,
									"value": "C0"
								},
								{
									"begin": 978,
									"end": 1034,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 600,
									"end": 4112,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "9"
								},
								{
									"begin": 600,
									"end": 4112,
									"name": "JUMP",
									"source": 16
								},
								{
									"begin": 14,
									"end": 193,
									"name": "tag",
									"source": 33,
									"value": "10"
								},
								{
									"begin": 14,
									"end": 193,
									"name": "JUMPDEST",
									"source": 33
								},
								{
									"begin": 95,
									"end": 108,
									"name": "DUP1",
									"source": 33
								},
								{
									"begin": 95,
									"end": 108,
									"name": "MLOAD",
									"source": 33
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 137,
									"end": 168,
									"name": "DUP2",
									"source": 33
								},
								{
									"begin": 137,
									"end": 168,
									"name": "AND",
									"source": 33
								},
								{
									"begin": 127,
									"end": 169,
									"name": "DUP2",
									"source": 33
								},
								{
									"begin": 127,
									"end": 169,
									"name": "EQ",
									"source": 33
								},
								{
									"begin": 117,
									"end": 119,
									"name": "PUSH [tag]",
									"source": 33,
									"value": "12"
								},
								{
									"begin": 117,
									"end": 119,
									"name": "JUMPI",
									"source": 33
								},
								{
									"begin": 183,
									"end": 184,
									"name": "PUSH",
									"source": 33,
									"value": "0"
								},
								{
									"begin": 180,
									"end": 181,
									"name": "DUP1",
									"source": 33
								},
								{
									"begin": 173,
									"end": 185,
									"name": "REVERT",
									"source": 33
								},
								{
									"begin": 117,
									"end": 119,
									"name": "tag",
									"source": 33,
									"value": "12"
								},
								{
									"begin": 117,
									"end": 119,
									"name": "JUMPDEST",
									"source": 33
								},
								{
									"begin": 76,
									"end": 193,
									"name": "SWAP2",
									"source": 33
								},
								{
									"begin": 76,
									"end": 193,
									"name": "SWAP1",
									"source": 33
								},
								{
									"begin": 76,
									"end": 193,
									"name": "POP",
									"source": 33
								},
								{
									"begin": 76,
									"end": 193,
									"name": "JUMP",
									"source": 33,
									"value": "[out]"
								},
								{
									"begin": 198,
									"end": 592,
									"name": "tag",
									"source": 33,
									"value": "3"
								},
								{
									"begin": 198,
									"end": 592,
									"name": "JUMPDEST",
									"source": 33
								},
								{
									"begin": 198,
									"end": 592,
									"name": "PUSH",
									"source": 33,
									"value": "0"
								},
								{
									"begin": 198,
									"end": 592,
									"name": "DUP1",
									"source": 33
								},
								{
									"begin": 198,
									"end": 592,
									"name": "PUSH",
									"source": 33,
									"value": "0"
								},
								{
									"begin": 355,
									"end": 357,
									"name": "PUSH",
									"source": 33,
									"value": "60"
								},
								{
									"begin": 343,
									"end": 352,
									"name": "DUP5",
									"source": 33
								},
								{
									"begin": 334,
									"end": 341,
									"name": "DUP7",
									"source": 33
								},
								{
									"begin": 330,
									"end": 353,
									"name": "SUB",
									"source": 33
								},
								{
									"begin": 326,
									"end": 358,
									"name": "SLT",
									"source": 33
								},
								{
									"begin": 323,
									"end": 325,
									"name": "ISZERO",
									"source": 33
								},
								{
									"begin": 323,
									"end": 325,
									"name": "PUSH [tag]",
									"source": 33,
									"value": "14"
								},
								{
									"begin": 323,
									"end": 325,
									"name": "JUMPI",
									"source": 33
								},
								{
									"begin": 376,
									"end": 382,
									"name": "DUP3",
									"source": 33
								},
								{
									"begin": 368,
									"end": 374,
									"name": "DUP4",
									"source": 33
								},
								{
									"begin": 361,
									"end": 383,
									"name": "REVERT",
									"source": 33
								},
								{
									"begin": 323,
									"end": 325,
									"name": "tag",
									"source": 33,
									"value": "14"
								},
								{
									"begin": 323,
									"end": 325,
									"name": "JUMPDEST",
									"source": 33
								},
								{
									"begin": 404,
									"end": 446,
									"name": "PUSH [tag]",
									"source": 33,
									"value": "15"
								},
								{
									"begin": 436,
									"end": 445,
									"name": "DUP5",
									"source": 33
								},
								{
									"begin": 404,
									"end": 446,
									"name": "PUSH [tag]",
									"source": 33,
									"value": "10"
								},
								{
									"begin": 404,
									"end": 446,
									"name": "JUMP",
									"source": 33,
									"value": "[in]"
								},
								{
									"begin": 404,
									"end": 446,
									"name": "tag",
									"source": 33,
									"value": "15"
								},
								{
									"begin": 404,
									"end": 446,
									"name": "JUMPDEST",
									"source": 33
								},
								{
									"begin": 394,
									"end": 446,
									"name": "SWAP3",
									"source": 33
								},
								{
									"begin": 394,
									"end": 446,
									"name": "POP",
									"source": 33
								},
								{
									"begin": 465,
									"end": 516,
									"name": "PUSH [tag]",
									"source": 33,
									"value": "16"
								},
								{
									"begin": 512,
									"end": 514,
									"name": "PUSH",
									"source": 33,
									"value": "20"
								},
								{
									"begin": 501,
									"end": 510,
									"name": "DUP6",
									"source": 33
								},
								{
									"begin": 497,
									"end": 515,
									"name": "ADD",
									"source": 33
								},
								{
									"begin": 465,
									"end": 516,
									"name": "PUSH [tag]",
									"source": 33,
									"value": "10"
								},
								{
									"begin": 465,
									"end": 516,
									"name": "JUMP",
									"source": 33,
									"value": "[in]"
								},
								{
									"begin": 465,
									"end": 516,
									"name": "tag",
									"source": 33,
									"value": "16"
								},
								{
									"begin": 465,
									"end": 516,
									"name": "JUMPDEST",
									"source": 33
								},
								{
									"begin": 455,
									"end": 516,
									"name": "SWAP2",
									"source": 33
								},
								{
									"begin": 455,
									"end": 516,
									"name": "POP",
									"source": 33
								},
								{
									"begin": 535,
									"end": 586,
									"name": "PUSH [tag]",
									"source": 33,
									"value": "17"
								},
								{
									"begin": 582,
									"end": 584,
									"name": "PUSH",
									"source": 33,
									"value": "40"
								},
								{
									"begin": 571,
									"end": 580,
									"name": "DUP6",
									"source": 33
								},
								{
									"begin": 567,
									"end": 585,
									"name": "ADD",
									"source": 33
								},
								{
									"begin": 535,
									"end": 586,
									"name": "PUSH [tag]",
									"source": 33,
									"value": "10"
								},
								{
									"begin": 535,
									"end": 586,
									"name": "JUMP",
									"source": 33,
									"value": "[in]"
								},
								{
									"begin": 535,
									"end": 586,
									"name": "tag",
									"source": 33,
									"value": "17"
								},
								{
									"begin": 535,
									"end": 586,
									"name": "JUMPDEST",
									"source": 33
								},
								{
									"begin": 525,
									"end": 586,
									"name": "SWAP1",
									"source": 33
								},
								{
									"begin": 525,
									"end": 586,
									"name": "POP",
									"source": 33
								},
								{
									"begin": 313,
									"end": 592,
									"name": "SWAP3",
									"source": 33
								},
								{
									"begin": 313,
									"end": 592,
									"name": "POP",
									"source": 33
								},
								{
									"begin": 313,
									"end": 592,
									"name": "SWAP3",
									"source": 33
								},
								{
									"begin": 313,
									"end": 592,
									"name": "POP",
									"source": 33
								},
								{
									"begin": 313,
									"end": 592,
									"name": "SWAP3",
									"source": 33
								},
								{
									"begin": 313,
									"end": 592,
									"name": "JUMP",
									"source": 33,
									"value": "[out]"
								},
								{
									"begin": 313,
									"end": 592,
									"name": "tag",
									"source": 33,
									"value": "9"
								},
								{
									"begin": 313,
									"end": 592,
									"name": "JUMPDEST",
									"source": 33
								},
								{
									"begin": 600,
									"end": 4112,
									"name": "PUSH",
									"source": 16,
									"value": "80"
								},
								{
									"begin": 600,
									"end": 4112,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 600,
									"end": 4112,
									"name": "PUSH",
									"source": 16,
									"value": "60"
								},
								{
									"begin": 600,
									"end": 4112,
									"name": "SHR",
									"source": 16
								},
								{
									"begin": 600,
									"end": 4112,
									"name": "PUSH",
									"source": 16,
									"value": "A0"
								},
								{
									"begin": 600,
									"end": 4112,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 600,
									"end": 4112,
									"name": "PUSH",
									"source": 16,
									"value": "60"
								},
								{
									"begin": 600,
									"end": 4112,
									"name": "SHR",
									"source": 16
								},
								{
									"begin": 600,
									"end": 4112,
									"name": "PUSH",
									"source": 16,
									"value": "C0"
								},
								{
									"begin": 600,
									"end": 4112,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 600,
									"end": 4112,
									"name": "PUSH",
									"source": 16,
									"value": "60"
								},
								{
									"begin": 600,
									"end": 4112,
									"name": "SHR",
									"source": 16
								},
								{
									"begin": 600,
									"end": 4112,
									"name": "PUSH #[$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 600,
									"end": 4112,
									"name": "PUSH [$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 600,
									"end": 4112,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 600,
									"end": 4112,
									"name": "CODECOPY",
									"source": 16
								},
								{
									"begin": 600,
									"end": 4112,
									"name": "ASSIGNIMMUTABLE",
									"source": 16,
									"value": "1225"
								},
								{
									"begin": 600,
									"end": 4112,
									"name": "ASSIGNIMMUTABLE",
									"source": 16,
									"value": "1597"
								},
								{
									"begin": 600,
									"end": 4112,
									"name": "ASSIGNIMMUTABLE",
									"source": 16,
									"value": "1593"
								},
								{
									"begin": 600,
									"end": 4112,
									"name": "PUSH #[$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 600,
									"end": 4112,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 600,
									"end": 4112,
									"name": "RETURN",
									"source": 16
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212201c260f6f70a63a04a232027171a233408e109d7a8f199e811deab94ad3a7246064736f6c63430007060033",
									".code": [
										{
											"begin": 600,
											"end": 4112,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "PUSH",
											"source": 16,
											"value": "E0"
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "SHR",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "PUSH",
											"source": 16,
											"value": "B44A2722"
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "13"
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "PUSH",
											"source": 16,
											"value": "B44A2722"
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "8"
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "PUSH",
											"source": 16,
											"value": "C2E3140A"
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "9"
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "PUSH",
											"source": 16,
											"value": "C45A0155"
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "10"
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "PUSH",
											"source": 16,
											"value": "D44F2BF2"
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "11"
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "PUSH",
											"source": 16,
											"value": "F3995C67"
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "12"
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "tag",
											"source": 16,
											"value": "13"
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "PUSH",
											"source": 16,
											"value": "13EAD562"
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "PUSH",
											"source": 16,
											"value": "4659A494"
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "PUSH",
											"source": 16,
											"value": "4AA4A4FC"
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "5"
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "PUSH",
											"source": 16,
											"value": "A4A78F0C"
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "6"
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "PUSH",
											"source": 16,
											"value": "AC9650D8"
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "7"
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "tag",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 1096,
											"end": 1106,
											"name": "CALLER",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1110,
											"end": 1115,
											"name": "PUSHIMMUTABLE",
											"source": 16,
											"value": "1597"
										},
										{
											"begin": 1096,
											"end": 1115,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 1096,
											"end": 1115,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 1088,
											"end": 1129,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "16"
										},
										{
											"begin": 1088,
											"end": 1129,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 1088,
											"end": 1129,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 1088,
											"end": 1129,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1088,
											"end": 1129,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 1088,
											"end": 1129,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 1088,
											"end": 1129,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 1088,
											"end": 1129,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1088,
											"end": 1129,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "17"
										},
										{
											"begin": 1088,
											"end": 1129,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1088,
											"end": 1129,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "18"
										},
										{
											"begin": 1088,
											"end": 1129,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 1088,
											"end": 1129,
											"name": "tag",
											"source": 16,
											"value": "17"
										},
										{
											"begin": 1088,
											"end": 1129,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1088,
											"end": 1129,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 1088,
											"end": 1129,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 1088,
											"end": 1129,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1088,
											"end": 1129,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 1088,
											"end": 1129,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 1088,
											"end": 1129,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1088,
											"end": 1129,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 1088,
											"end": 1129,
											"name": "tag",
											"source": 16,
											"value": "16"
										},
										{
											"begin": 1088,
											"end": 1129,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "STOP",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "tag",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 600,
											"end": 4112,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 472,
											"end": 1209,
											"name": "tag",
											"source": 19,
											"value": "3"
										},
										{
											"begin": 472,
											"end": 1209,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 472,
											"end": 1209,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "19"
										},
										{
											"begin": 472,
											"end": 1209,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 472,
											"end": 1209,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": 472,
											"end": 1209,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 472,
											"end": 1209,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "21"
										},
										{
											"begin": 472,
											"end": 1209,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 472,
											"end": 1209,
											"name": "tag",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 472,
											"end": 1209,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 472,
											"end": 1209,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "22"
										},
										{
											"begin": 472,
											"end": 1209,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 472,
											"end": 1209,
											"name": "tag",
											"source": 19,
											"value": "19"
										},
										{
											"begin": 472,
											"end": 1209,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 472,
											"end": 1209,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 472,
											"end": 1209,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 472,
											"end": 1209,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "23"
										},
										{
											"begin": 472,
											"end": 1209,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 472,
											"end": 1209,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 472,
											"end": 1209,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 472,
											"end": 1209,
											"name": "JUMP",
											"source": 19,
											"value": "[in]"
										},
										{
											"begin": 472,
											"end": 1209,
											"name": "tag",
											"source": 19,
											"value": "23"
										},
										{
											"begin": 472,
											"end": 1209,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 472,
											"end": 1209,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 472,
											"end": 1209,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 472,
											"end": 1209,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 472,
											"end": 1209,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 472,
											"end": 1209,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 472,
											"end": 1209,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 472,
											"end": 1209,
											"name": "RETURN",
											"source": 19
										},
										{
											"begin": 1364,
											"end": 1662,
											"name": "tag",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 1364,
											"end": 1662,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1364,
											"end": 1662,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "16"
										},
										{
											"begin": 1364,
											"end": 1662,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "26"
										},
										{
											"begin": 1364,
											"end": 1662,
											"name": "CALLDATASIZE",
											"source": 20
										},
										{
											"begin": 1364,
											"end": 1662,
											"name": "PUSH",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 1364,
											"end": 1662,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "27"
										},
										{
											"begin": 1364,
											"end": 1662,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 1364,
											"end": 1662,
											"name": "tag",
											"source": 20,
											"value": "26"
										},
										{
											"begin": 1364,
											"end": 1662,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1364,
											"end": 1662,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "28"
										},
										{
											"begin": 1364,
											"end": 1662,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 431,
											"end": 470,
											"name": "tag",
											"source": 18,
											"value": "5"
										},
										{
											"begin": 431,
											"end": 470,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 431,
											"end": 470,
											"name": "CALLVALUE",
											"source": 18
										},
										{
											"begin": 431,
											"end": 470,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 431,
											"end": 470,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 431,
											"end": 470,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "29"
										},
										{
											"begin": 431,
											"end": 470,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 431,
											"end": 470,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 431,
											"end": 470,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 431,
											"end": 470,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 431,
											"end": 470,
											"name": "tag",
											"source": 18,
											"value": "29"
										},
										{
											"begin": 431,
											"end": 470,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 431,
											"end": 470,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 431,
											"end": 470,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "19"
										},
										{
											"begin": 431,
											"end": 470,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "31"
										},
										{
											"begin": 431,
											"end": 470,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 1703,
											"end": 2061,
											"name": "tag",
											"source": 20,
											"value": "6"
										},
										{
											"begin": 1703,
											"end": 2061,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1703,
											"end": 2061,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "16"
										},
										{
											"begin": 1703,
											"end": 2061,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "34"
										},
										{
											"begin": 1703,
											"end": 2061,
											"name": "CALLDATASIZE",
											"source": 20
										},
										{
											"begin": 1703,
											"end": 2061,
											"name": "PUSH",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 1703,
											"end": 2061,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "27"
										},
										{
											"begin": 1703,
											"end": 2061,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 1703,
											"end": 2061,
											"name": "tag",
											"source": 20,
											"value": "34"
										},
										{
											"begin": 1703,
											"end": 2061,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1703,
											"end": 2061,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "35"
										},
										{
											"begin": 1703,
											"end": 2061,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 318,
											"end": 987,
											"name": "tag",
											"source": 17,
											"value": "7"
										},
										{
											"begin": 318,
											"end": 987,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 318,
											"end": 987,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "36"
										},
										{
											"begin": 318,
											"end": 987,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "37"
										},
										{
											"begin": 318,
											"end": 987,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": 318,
											"end": 987,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 318,
											"end": 987,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "38"
										},
										{
											"begin": 318,
											"end": 987,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 318,
											"end": 987,
											"name": "tag",
											"source": 17,
											"value": "37"
										},
										{
											"begin": 318,
											"end": 987,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 318,
											"end": 987,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "39"
										},
										{
											"begin": 318,
											"end": 987,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 318,
											"end": 987,
											"name": "tag",
											"source": 17,
											"value": "36"
										},
										{
											"begin": 318,
											"end": 987,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 318,
											"end": 987,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 318,
											"end": 987,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 318,
											"end": 987,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "23"
										},
										{
											"begin": 318,
											"end": 987,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 318,
											"end": 987,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 318,
											"end": 987,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "41"
										},
										{
											"begin": 318,
											"end": 987,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 748,
											"end": 799,
											"name": "tag",
											"source": 16,
											"value": "8"
										},
										{
											"begin": 748,
											"end": 799,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 748,
											"end": 799,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 748,
											"end": 799,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 748,
											"end": 799,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 748,
											"end": 799,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "42"
										},
										{
											"begin": 748,
											"end": 799,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 748,
											"end": 799,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 748,
											"end": 799,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 748,
											"end": 799,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 748,
											"end": 799,
											"name": "tag",
											"source": 16,
											"value": "42"
										},
										{
											"begin": 748,
											"end": 799,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 748,
											"end": 799,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 748,
											"end": 799,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "19"
										},
										{
											"begin": 748,
											"end": 799,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 748,
											"end": 799,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 1000,
											"end": 1323,
											"name": "tag",
											"source": 20,
											"value": "9"
										},
										{
											"begin": 1000,
											"end": 1323,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1000,
											"end": 1323,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "16"
										},
										{
											"begin": 1000,
											"end": 1323,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "47"
										},
										{
											"begin": 1000,
											"end": 1323,
											"name": "CALLDATASIZE",
											"source": 20
										},
										{
											"begin": 1000,
											"end": 1323,
											"name": "PUSH",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 1000,
											"end": 1323,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "27"
										},
										{
											"begin": 1000,
											"end": 1323,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 1000,
											"end": 1323,
											"name": "tag",
											"source": 20,
											"value": "47"
										},
										{
											"begin": 1000,
											"end": 1323,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1000,
											"end": 1323,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "48"
										},
										{
											"begin": 1000,
											"end": 1323,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 337,
											"end": 378,
											"name": "tag",
											"source": 18,
											"value": "10"
										},
										{
											"begin": 337,
											"end": 378,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 337,
											"end": 378,
											"name": "CALLVALUE",
											"source": 18
										},
										{
											"begin": 337,
											"end": 378,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 337,
											"end": 378,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 337,
											"end": 378,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "49"
										},
										{
											"begin": 337,
											"end": 378,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 337,
											"end": 378,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 337,
											"end": 378,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 337,
											"end": 378,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 337,
											"end": 378,
											"name": "tag",
											"source": 18,
											"value": "49"
										},
										{
											"begin": 337,
											"end": 378,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 337,
											"end": 378,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 337,
											"end": 378,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "19"
										},
										{
											"begin": 337,
											"end": 378,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "51"
										},
										{
											"begin": 337,
											"end": 378,
											"name": "JUMP",
											"source": 18,
											"value": "[in]"
										},
										{
											"begin": 1145,
											"end": 4109,
											"name": "tag",
											"source": 16,
											"value": "11"
										},
										{
											"begin": 1145,
											"end": 4109,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1145,
											"end": 4109,
											"name": "CALLVALUE",
											"source": 16
										},
										{
											"begin": 1145,
											"end": 4109,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1145,
											"end": 4109,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 1145,
											"end": 4109,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "53"
										},
										{
											"begin": 1145,
											"end": 4109,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 1145,
											"end": 4109,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 1145,
											"end": 4109,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1145,
											"end": 4109,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 1145,
											"end": 4109,
											"name": "tag",
											"source": 16,
											"value": "53"
										},
										{
											"begin": 1145,
											"end": 4109,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1145,
											"end": 4109,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "16"
										},
										{
											"begin": 1145,
											"end": 4109,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "55"
										},
										{
											"begin": 1145,
											"end": 4109,
											"name": "CALLDATASIZE",
											"source": 16
										},
										{
											"begin": 1145,
											"end": 4109,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 1145,
											"end": 4109,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "56"
										},
										{
											"begin": 1145,
											"end": 4109,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 1145,
											"end": 4109,
											"name": "tag",
											"source": 16,
											"value": "55"
										},
										{
											"begin": 1145,
											"end": 4109,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1145,
											"end": 4109,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "57"
										},
										{
											"begin": 1145,
											"end": 4109,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 677,
											"end": 959,
											"name": "tag",
											"source": 20,
											"value": "12"
										},
										{
											"begin": 677,
											"end": 959,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 677,
											"end": 959,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "16"
										},
										{
											"begin": 677,
											"end": 959,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "59"
										},
										{
											"begin": 677,
											"end": 959,
											"name": "CALLDATASIZE",
											"source": 20
										},
										{
											"begin": 677,
											"end": 959,
											"name": "PUSH",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 677,
											"end": 959,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "27"
										},
										{
											"begin": 677,
											"end": 959,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 677,
											"end": 959,
											"name": "tag",
											"source": 20,
											"value": "59"
										},
										{
											"begin": 677,
											"end": 959,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 677,
											"end": 959,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "60"
										},
										{
											"begin": 677,
											"end": 959,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 472,
											"end": 1209,
											"name": "tag",
											"source": 19,
											"value": "22"
										},
										{
											"begin": 472,
											"end": 1209,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 660,
											"end": 672,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 702,
											"end": 708,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 693,
											"end": 708,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 693,
											"end": 699,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 693,
											"end": 708,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 693,
											"end": 708,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 685,
											"end": 709,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "62"
										},
										{
											"begin": 685,
											"end": 709,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 685,
											"end": 709,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 685,
											"end": 709,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 685,
											"end": 709,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 685,
											"end": 709,
											"name": "tag",
											"source": 19,
											"value": "62"
										},
										{
											"begin": 685,
											"end": 709,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 745,
											"end": 752,
											"name": "PUSHIMMUTABLE",
											"source": 19,
											"value": "1593"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 727,
											"end": 761,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 727,
											"end": 761,
											"name": "PUSH",
											"source": 19,
											"value": "1698EE82"
										},
										{
											"begin": 762,
											"end": 768,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 770,
											"end": 776,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 778,
											"end": 781,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 727,
											"end": 782,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "PUSH",
											"source": 19,
											"value": "FFFFFFFF"
										},
										{
											"begin": 727,
											"end": 782,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "PUSH",
											"source": 19,
											"value": "E0"
										},
										{
											"begin": 727,
											"end": 782,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 727,
											"end": 782,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 727,
											"end": 782,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 727,
											"end": 782,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 727,
											"end": 782,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 727,
											"end": 782,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "PUSH",
											"source": 19,
											"value": "FFFFFF"
										},
										{
											"begin": 727,
											"end": 782,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 727,
											"end": 782,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 727,
											"end": 782,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 727,
											"end": 782,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "EXTCODESIZE",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "63"
										},
										{
											"begin": 727,
											"end": 782,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 727,
											"end": 782,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "tag",
											"source": 19,
											"value": "63"
										},
										{
											"begin": 727,
											"end": 782,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "GAS",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "STATICCALL",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "65"
										},
										{
											"begin": 727,
											"end": 782,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "RETURNDATASIZE",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 727,
											"end": 782,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "RETURNDATACOPY",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "RETURNDATASIZE",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 727,
											"end": 782,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "tag",
											"source": 19,
											"value": "65"
										},
										{
											"begin": 727,
											"end": 782,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 727,
											"end": 782,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "RETURNDATASIZE",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 727,
											"end": 782,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "66"
										},
										{
											"begin": 727,
											"end": 782,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 727,
											"end": 782,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "tag",
											"source": 19,
											"value": "66"
										},
										{
											"begin": 727,
											"end": 782,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 727,
											"end": 782,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 727,
											"end": 782,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 799,
											"end": 817,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 799,
											"end": 817,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 795,
											"end": 1202,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "67"
										},
										{
											"begin": 795,
											"end": 1202,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 859,
											"end": 866,
											"name": "PUSHIMMUTABLE",
											"source": 19,
											"value": "1593"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 841,
											"end": 878,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 841,
											"end": 878,
											"name": "PUSH",
											"source": 19,
											"value": "A1671295"
										},
										{
											"begin": 879,
											"end": 885,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 887,
											"end": 893,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 895,
											"end": 898,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 841,
											"end": 899,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "PUSH",
											"source": 19,
											"value": "FFFFFFFF"
										},
										{
											"begin": 841,
											"end": 899,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "PUSH",
											"source": 19,
											"value": "E0"
										},
										{
											"begin": 841,
											"end": 899,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 841,
											"end": 899,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 841,
											"end": 899,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 841,
											"end": 899,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 841,
											"end": 899,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 841,
											"end": 899,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "PUSH",
											"source": 19,
											"value": "FFFFFF"
										},
										{
											"begin": 841,
											"end": 899,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 841,
											"end": 899,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 841,
											"end": 899,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 841,
											"end": 899,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 841,
											"end": 899,
											"name": "DUP8",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "EXTCODESIZE",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "68"
										},
										{
											"begin": 841,
											"end": 899,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 841,
											"end": 899,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "tag",
											"source": 19,
											"value": "68"
										},
										{
											"begin": 841,
											"end": 899,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "GAS",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "CALL",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "70"
										},
										{
											"begin": 841,
											"end": 899,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "RETURNDATASIZE",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 841,
											"end": 899,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "RETURNDATACOPY",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "RETURNDATASIZE",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 841,
											"end": 899,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "tag",
											"source": 19,
											"value": "70"
										},
										{
											"begin": 841,
											"end": 899,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 841,
											"end": 899,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "RETURNDATASIZE",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 841,
											"end": 899,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "71"
										},
										{
											"begin": 841,
											"end": 899,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 841,
											"end": 899,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "tag",
											"source": 19,
											"value": "71"
										},
										{
											"begin": 841,
											"end": 899,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 841,
											"end": 899,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 914,
											"end": 959,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F637731D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 914,
											"end": 959,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 914,
											"end": 959,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 914,
											"end": 959,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 841,
											"end": 899,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 914,
											"end": 945,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 914,
											"end": 945,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 914,
											"end": 945,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 914,
											"end": 945,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 914,
											"end": 945,
											"name": "PUSH",
											"source": 19,
											"value": "F637731D"
										},
										{
											"begin": 914,
											"end": 945,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 914,
											"end": 959,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": 914,
											"end": 959,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": 914,
											"end": 945,
											"name": "DUP8",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "EXTCODESIZE",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "72"
										},
										{
											"begin": 914,
											"end": 959,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 914,
											"end": 959,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "tag",
											"source": 19,
											"value": "72"
										},
										{
											"begin": 914,
											"end": 959,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "GAS",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "CALL",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "74"
										},
										{
											"begin": 914,
											"end": 959,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "RETURNDATASIZE",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 914,
											"end": 959,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "RETURNDATACOPY",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "RETURNDATASIZE",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 914,
											"end": 959,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "tag",
											"source": 19,
											"value": "74"
										},
										{
											"begin": 914,
											"end": 959,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 914,
											"end": 959,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 795,
											"end": 1202,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "75"
										},
										{
											"begin": 795,
											"end": 1202,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 795,
											"end": 1202,
											"name": "tag",
											"source": 19,
											"value": "67"
										},
										{
											"begin": 795,
											"end": 1202,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 993,
											"end": 1021,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1052,
											"end": 1056,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1037,
											"end": 1063,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1063,
											"name": "PUSH",
											"source": 19,
											"value": "3850C7BD"
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "PUSH",
											"source": 19,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "PUSH",
											"source": 19,
											"value": "E0"
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "PUSH",
											"source": 19,
											"value": "E0"
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "EXTCODESIZE",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "76"
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "tag",
											"source": 19,
											"value": "76"
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "GAS",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "STATICCALL",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "78"
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "RETURNDATASIZE",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "RETURNDATACOPY",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "RETURNDATASIZE",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "tag",
											"source": 19,
											"value": "78"
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "RETURNDATASIZE",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "PUSH",
											"source": 19,
											"value": "E0"
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "79"
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "tag",
											"source": 19,
											"value": "79"
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 1037,
											"end": 1065,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1084,
											"end": 1109,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 1084,
											"end": 1109,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 1080,
											"end": 1191,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "80"
										},
										{
											"begin": 1080,
											"end": 1191,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 1145,
											"end": 1149,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1130,
											"end": 1161,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1161,
											"name": "PUSH",
											"source": 19,
											"value": "F637731D"
										},
										{
											"begin": 1162,
											"end": 1174,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "PUSH",
											"source": 19,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "PUSH",
											"source": 19,
											"value": "E0"
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "DUP8",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "EXTCODESIZE",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "81"
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "tag",
											"source": 19,
											"value": "81"
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "GAS",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "CALL",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "83"
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "RETURNDATASIZE",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "RETURNDATACOPY",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "RETURNDATASIZE",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "tag",
											"source": 19,
											"value": "83"
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1130,
											"end": 1175,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1080,
											"end": 1191,
											"name": "tag",
											"source": 19,
											"value": "80"
										},
										{
											"begin": 1080,
											"end": 1191,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 795,
											"end": 1202,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 795,
											"end": 1202,
											"name": "tag",
											"source": 19,
											"value": "75"
										},
										{
											"begin": 795,
											"end": 1202,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 472,
											"end": 1209,
											"name": "SWAP5",
											"source": 19
										},
										{
											"begin": 472,
											"end": 1209,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 472,
											"end": 1209,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 472,
											"end": 1209,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 472,
											"end": 1209,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 472,
											"end": 1209,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 472,
											"end": 1209,
											"name": "JUMP",
											"source": 19,
											"value": "[out]"
										},
										{
											"begin": 1364,
											"end": 1662,
											"name": "tag",
											"source": 20,
											"value": "28"
										},
										{
											"begin": 1364,
											"end": 1662,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23F2EBC3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1598,
											"end": 1608,
											"name": "CALLER",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "PUSH",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1618,
											"end": 1622,
											"name": "ADDRESS",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "PUSH",
											"source": 20,
											"value": "44"
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "DUP8",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "PUSH",
											"source": 20,
											"value": "64"
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1640,
											"end": 1644,
											"name": "PUSH",
											"source": 20,
											"value": "1"
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "PUSH",
											"source": 20,
											"value": "84"
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "PUSH",
											"source": 20,
											"value": "FF"
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "PUSH",
											"source": 20,
											"value": "A4"
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "PUSH",
											"source": 20,
											"value": "C4"
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "PUSH",
											"source": 20,
											"value": "E4"
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1564,
											"end": 1597,
											"name": "DUP9",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1597,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1597,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1597,
											"name": "PUSH",
											"source": 20,
											"value": "8FCBAF0C"
										},
										{
											"begin": 1564,
											"end": 1597,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "PUSH",
											"source": 20,
											"value": "104"
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": 1564,
											"end": 1597,
											"name": "DUP8",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "EXTCODESIZE",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "85"
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "tag",
											"source": 20,
											"value": "85"
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "GAS",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "CALL",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "87"
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "RETURNDATASIZE",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "RETURNDATACOPY",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "RETURNDATASIZE",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "tag",
											"source": 20,
											"value": "87"
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1564,
											"end": 1654,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1364,
											"end": 1662,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1364,
											"end": 1662,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1364,
											"end": 1662,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1364,
											"end": 1662,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1364,
											"end": 1662,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1364,
											"end": 1662,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1364,
											"end": 1662,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 431,
											"end": 470,
											"name": "tag",
											"source": 18,
											"value": "31"
										},
										{
											"begin": 431,
											"end": 470,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 431,
											"end": 470,
											"name": "PUSHIMMUTABLE",
											"source": 18,
											"value": "1597"
										},
										{
											"begin": 431,
											"end": 470,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 431,
											"end": 470,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 1703,
											"end": 2061,
											"name": "tag",
											"source": 20,
											"value": "35"
										},
										{
											"begin": 1703,
											"end": 2061,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6EB1769F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1944,
											"end": 1954,
											"name": "CALLER",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "PUSH",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1964,
											"end": 1968,
											"name": "ADDRESS",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1973,
											"end": 1990,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1920,
											"end": 1943,
											"name": "DUP10",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1943,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1943,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1943,
											"name": "PUSH",
											"source": 20,
											"value": "DD62ED3E"
										},
										{
											"begin": 1920,
											"end": 1943,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "PUSH",
											"source": 20,
											"value": "44"
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1943,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "EXTCODESIZE",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "89"
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "tag",
											"source": 20,
											"value": "89"
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "GAS",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "STATICCALL",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "91"
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "RETURNDATASIZE",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "RETURNDATACOPY",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "RETURNDATASIZE",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "tag",
											"source": 20,
											"value": "91"
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "RETURNDATASIZE",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "LT",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "92"
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "tag",
											"source": 20,
											"value": "92"
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1920,
											"end": 1970,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": 1920,
											"end": 1990,
											"name": "LT",
											"source": 20
										},
										{
											"begin": 1916,
											"end": 2053,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1916,
											"end": 2053,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "94"
										},
										{
											"begin": 1916,
											"end": 2053,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 2005,
											"end": 2053,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "94"
										},
										{
											"begin": 2023,
											"end": 2028,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 2030,
											"end": 2035,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 2037,
											"end": 2043,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 2045,
											"end": 2046,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 2048,
											"end": 2049,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 2051,
											"end": 2052,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 2005,
											"end": 2022,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "28"
										},
										{
											"begin": 2005,
											"end": 2053,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 2005,
											"end": 2053,
											"name": "tag",
											"source": 20,
											"value": "94"
										},
										{
											"begin": 2005,
											"end": 2053,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1703,
											"end": 2061,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1703,
											"end": 2061,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1703,
											"end": 2061,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1703,
											"end": 2061,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1703,
											"end": 2061,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1703,
											"end": 2061,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1703,
											"end": 2061,
											"name": "JUMP",
											"source": 20,
											"value": "[out]"
										},
										{
											"begin": 318,
											"end": 987,
											"name": "tag",
											"source": 17,
											"value": "39"
										},
										{
											"begin": 318,
											"end": 987,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 393,
											"end": 415,
											"name": "PUSH",
											"source": 17,
											"value": "60"
										},
										{
											"begin": 450,
											"end": 454,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 438,
											"end": 462,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 438,
											"end": 462,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 438,
											"end": 462,
											"name": "GT",
											"source": 17
										},
										{
											"begin": 438,
											"end": 462,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 438,
											"end": 462,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 438,
											"end": 462,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "96"
										},
										{
											"begin": 438,
											"end": 462,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 438,
											"end": 462,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 438,
											"end": 462,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 438,
											"end": 462,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 438,
											"end": 462,
											"name": "tag",
											"source": 17,
											"value": "96"
										},
										{
											"begin": 438,
											"end": 462,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 438,
											"end": 462,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 438,
											"end": 462,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 438,
											"end": 462,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 438,
											"end": 462,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 438,
											"end": 462,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 438,
											"end": 462,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 438,
											"end": 462,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 438,
											"end": 462,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 438,
											"end": 462,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 438,
											"end": 462,
											"name": "MUL",
											"source": 17
										},
										{
											"begin": 438,
											"end": 462,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 438,
											"end": 462,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 438,
											"end": 462,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 438,
											"end": 462,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 438,
											"end": 462,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 438,
											"end": 462,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 438,
											"end": 462,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 438,
											"end": 462,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 438,
											"end": 462,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "97"
										},
										{
											"begin": 438,
											"end": 462,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 438,
											"end": 462,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 438,
											"end": 462,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 438,
											"end": 462,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 438,
											"end": 462,
											"name": "tag",
											"source": 17,
											"value": "98"
										},
										{
											"begin": 438,
											"end": 462,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 438,
											"end": 462,
											"name": "PUSH",
											"source": 17,
											"value": "60"
										},
										{
											"begin": 438,
											"end": 462,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 438,
											"end": 462,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 438,
											"end": 462,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 438,
											"end": 462,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 438,
											"end": 462,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 438,
											"end": 462,
											"name": "PUSH",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 438,
											"end": 462,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 438,
											"end": 462,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 438,
											"end": 462,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 438,
											"end": 462,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 438,
											"end": 462,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "98"
										},
										{
											"begin": 438,
											"end": 462,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 438,
											"end": 462,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 438,
											"end": 462,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 438,
											"end": 462,
											"name": "tag",
											"source": 17,
											"value": "97"
										},
										{
											"begin": 438,
											"end": 462,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 438,
											"end": 462,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 428,
											"end": 462,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 428,
											"end": 462,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 478,
											"end": 487,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 473,
											"end": 980,
											"name": "tag",
											"source": 17,
											"value": "99"
										},
										{
											"begin": 473,
											"end": 980,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 493,
											"end": 508,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 493,
											"end": 508,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 493,
											"end": 508,
											"name": "LT",
											"source": 17
										},
										{
											"begin": 473,
											"end": 980,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 473,
											"end": 980,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "100"
										},
										{
											"begin": 473,
											"end": 980,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 531,
											"end": 543,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 531,
											"end": 543,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 576,
											"end": 580,
											"name": "ADDRESS",
											"source": 17
										},
										{
											"begin": 595,
											"end": 599,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 595,
											"end": 599,
											"name": "DUP7",
											"source": 17
										},
										{
											"begin": 600,
											"end": 601,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 595,
											"end": 602,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 595,
											"end": 602,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 595,
											"end": 602,
											"name": "LT",
											"source": 17
										},
										{
											"begin": 595,
											"end": 602,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "102"
										},
										{
											"begin": 595,
											"end": 602,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 595,
											"end": 602,
											"name": "INVALID",
											"source": 17
										},
										{
											"begin": 595,
											"end": 602,
											"name": "tag",
											"source": 17,
											"value": "102"
										},
										{
											"begin": 595,
											"end": 602,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 595,
											"end": 602,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 595,
											"end": 602,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 595,
											"end": 602,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 595,
											"end": 602,
											"name": "MUL",
											"source": 17
										},
										{
											"begin": 595,
											"end": 602,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 595,
											"end": 602,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 595,
											"end": 602,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 595,
											"end": 602,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "103"
										},
										{
											"begin": 595,
											"end": 602,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 595,
											"end": 602,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 595,
											"end": 602,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "104"
										},
										{
											"begin": 595,
											"end": 602,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 595,
											"end": 602,
											"name": "tag",
											"source": 17,
											"value": "103"
										},
										{
											"begin": 595,
											"end": 602,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 568,
											"end": 603,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "105"
										},
										{
											"begin": 568,
											"end": 603,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "106"
										},
										{
											"begin": 568,
											"end": 603,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 568,
											"end": 603,
											"name": "tag",
											"source": 17,
											"value": "105"
										},
										{
											"begin": 568,
											"end": 603,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 568,
											"end": 603,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 568,
											"end": 603,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "GAS",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "DELEGATECALL",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "RETURNDATASIZE",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 568,
											"end": 603,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "109"
										},
										{
											"begin": 568,
											"end": 603,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 568,
											"end": 603,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "PUSH",
											"source": 17,
											"value": "1F"
										},
										{
											"begin": 568,
											"end": 603,
											"name": "NOT",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "PUSH",
											"source": 17,
											"value": "3F"
										},
										{
											"begin": 568,
											"end": 603,
											"name": "RETURNDATASIZE",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 568,
											"end": 603,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "RETURNDATASIZE",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "RETURNDATASIZE",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 568,
											"end": 603,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 568,
											"end": 603,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "RETURNDATACOPY",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "108"
										},
										{
											"begin": 568,
											"end": 603,
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "tag",
											"source": 17,
											"value": "109"
										},
										{
											"begin": 568,
											"end": 603,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "PUSH",
											"source": 17,
											"value": "60"
										},
										{
											"begin": 568,
											"end": 603,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "tag",
											"source": 17,
											"value": "108"
										},
										{
											"begin": 568,
											"end": 603,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 568,
											"end": 603,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 530,
											"end": 603,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 530,
											"end": 603,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 530,
											"end": 603,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 530,
											"end": 603,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 625,
											"end": 632,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 620,
											"end": 933,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "110"
										},
										{
											"begin": 620,
											"end": 933,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 754,
											"end": 756,
											"name": "PUSH",
											"source": 17,
											"value": "44"
										},
										{
											"begin": 738,
											"end": 744,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 738,
											"end": 751,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 738,
											"end": 756,
											"name": "LT",
											"source": 17
										},
										{
											"begin": 734,
											"end": 766,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 734,
											"end": 766,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "111"
										},
										{
											"begin": 734,
											"end": 766,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 758,
											"end": 766,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 758,
											"end": 766,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 758,
											"end": 766,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 734,
											"end": 766,
											"name": "tag",
											"source": 17,
											"value": "111"
										},
										{
											"begin": 734,
											"end": 766,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 839,
											"end": 843,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 831,
											"end": 837,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 827,
											"end": 844,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 817,
											"end": 844,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 817,
											"end": 844,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 899,
											"end": 905,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 888,
											"end": 916,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 888,
											"end": 916,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 888,
											"end": 916,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 888,
											"end": 916,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 888,
											"end": 916,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 888,
											"end": 916,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 888,
											"end": 916,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 888,
											"end": 916,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 888,
											"end": 916,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "112"
										},
										{
											"begin": 888,
											"end": 916,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 888,
											"end": 916,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 888,
											"end": 916,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "113"
										},
										{
											"begin": 888,
											"end": 916,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 888,
											"end": 916,
											"name": "tag",
											"source": 17,
											"value": "112"
										},
										{
											"begin": 888,
											"end": 916,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 881,
											"end": 917,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 881,
											"end": 917,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 881,
											"end": 917,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 881,
											"end": 917,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 881,
											"end": 917,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 881,
											"end": 917,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 881,
											"end": 917,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "17"
										},
										{
											"begin": 881,
											"end": 917,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 881,
											"end": 917,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 881,
											"end": 917,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "115"
										},
										{
											"begin": 881,
											"end": 917,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 620,
											"end": 933,
											"name": "tag",
											"source": 17,
											"value": "110"
										},
										{
											"begin": 620,
											"end": 933,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 962,
											"end": 968,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 949,
											"end": 956,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 957,
											"end": 958,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 949,
											"end": 959,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 949,
											"end": 959,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 949,
											"end": 959,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 949,
											"end": 959,
											"name": "LT",
											"source": 17
										},
										{
											"begin": 949,
											"end": 959,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "116"
										},
										{
											"begin": 949,
											"end": 959,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 949,
											"end": 959,
											"name": "INVALID",
											"source": 17
										},
										{
											"begin": 949,
											"end": 959,
											"name": "tag",
											"source": 17,
											"value": "116"
										},
										{
											"begin": 949,
											"end": 959,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 949,
											"end": 959,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 949,
											"end": 959,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 949,
											"end": 959,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 949,
											"end": 959,
											"name": "MUL",
											"source": 17
										},
										{
											"begin": 949,
											"end": 959,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 949,
											"end": 959,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 949,
											"end": 959,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 949,
											"end": 959,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 949,
											"end": 959,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 949,
											"end": 968,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 510,
											"end": 513,
											"name": "PUSH",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 510,
											"end": 513,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 473,
											"end": 980,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "99"
										},
										{
											"begin": 473,
											"end": 980,
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 473,
											"end": 980,
											"name": "tag",
											"source": 17,
											"value": "100"
										},
										{
											"begin": 473,
											"end": 980,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 473,
											"end": 980,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 318,
											"end": 987,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 318,
											"end": 987,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 318,
											"end": 987,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 318,
											"end": 987,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 318,
											"end": 987,
											"name": "JUMP",
											"source": 17,
											"value": "[out]"
										},
										{
											"begin": 748,
											"end": 799,
											"name": "tag",
											"source": 16,
											"value": "44"
										},
										{
											"begin": 748,
											"end": 799,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 748,
											"end": 799,
											"name": "PUSHIMMUTABLE",
											"source": 16,
											"value": "1225"
										},
										{
											"begin": 748,
											"end": 799,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 748,
											"end": 799,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 1000,
											"end": 1323,
											"name": "tag",
											"source": 20,
											"value": "48"
										},
										{
											"begin": 1000,
											"end": 1323,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6EB1769F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1236,
											"end": 1246,
											"name": "CALLER",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "PUSH",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1256,
											"end": 1260,
											"name": "ADDRESS",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": 1265,
											"end": 1270,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 1265,
											"end": 1270,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1212,
											"end": 1235,
											"name": "DUP10",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1235,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1235,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1235,
											"name": "PUSH",
											"source": 20,
											"value": "DD62ED3E"
										},
										{
											"begin": 1212,
											"end": 1235,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "PUSH",
											"source": 20,
											"value": "44"
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1235,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "EXTCODESIZE",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "118"
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "tag",
											"source": 20,
											"value": "118"
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "GAS",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "STATICCALL",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "120"
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "RETURNDATASIZE",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "RETURNDATACOPY",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "RETURNDATASIZE",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "tag",
											"source": 20,
											"value": "120"
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "RETURNDATASIZE",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "LT",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "121"
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "tag",
											"source": 20,
											"value": "121"
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1212,
											"end": 1262,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1270,
											"name": "LT",
											"source": 20
										},
										{
											"begin": 1208,
											"end": 1315,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1208,
											"end": 1315,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "94"
										},
										{
											"begin": 1208,
											"end": 1315,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 1272,
											"end": 1315,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "94"
										},
										{
											"begin": 1283,
											"end": 1288,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 1290,
											"end": 1295,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 1297,
											"end": 1305,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 1307,
											"end": 1308,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 1310,
											"end": 1311,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 1313,
											"end": 1314,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 1272,
											"end": 1282,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "60"
										},
										{
											"begin": 1272,
											"end": 1315,
											"name": "JUMP",
											"source": 20,
											"value": "[in]"
										},
										{
											"begin": 337,
											"end": 378,
											"name": "tag",
											"source": 18,
											"value": "51"
										},
										{
											"begin": 337,
											"end": 378,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 337,
											"end": 378,
											"name": "PUSHIMMUTABLE",
											"source": 18,
											"value": "1593"
										},
										{
											"begin": 337,
											"end": 378,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 337,
											"end": 378,
											"name": "JUMP",
											"source": 18,
											"value": "[out]"
										},
										{
											"begin": 1145,
											"end": 4109,
											"name": "tag",
											"source": 16,
											"value": "57"
										},
										{
											"begin": 1145,
											"end": 4109,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1259,
											"end": 1260,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 1230,
											"end": 1256,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "125"
										},
										{
											"begin": 1230,
											"end": 1256,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 1230,
											"end": 1256,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 1230,
											"end": 1256,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1230,
											"end": 1256,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 1230,
											"end": 1256,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 1230,
											"end": 1256,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1230,
											"end": 1256,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "126"
										},
										{
											"begin": 1230,
											"end": 1256,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 1230,
											"end": 1256,
											"name": "tag",
											"source": 16,
											"value": "125"
										},
										{
											"begin": 1230,
											"end": 1256,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1230,
											"end": 1260,
											"name": "PUSH",
											"source": 16,
											"value": "FF"
										},
										{
											"begin": 1230,
											"end": 1260,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 1230,
											"end": 1260,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 1222,
											"end": 1285,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "127"
										},
										{
											"begin": 1222,
											"end": 1285,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 1222,
											"end": 1285,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 1222,
											"end": 1285,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1222,
											"end": 1285,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 1222,
											"end": 1285,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 1222,
											"end": 1285,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 1222,
											"end": 1285,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1222,
											"end": 1285,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "17"
										},
										{
											"begin": 1222,
											"end": 1285,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1222,
											"end": 1285,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "129"
										},
										{
											"begin": 1222,
											"end": 1285,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 1222,
											"end": 1285,
											"name": "tag",
											"source": 16,
											"value": "127"
										},
										{
											"begin": 1222,
											"end": 1285,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1334,
											"end": 1337,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 1304,
											"end": 1330,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "130"
										},
										{
											"begin": 1304,
											"end": 1330,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 1304,
											"end": 1330,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 1304,
											"end": 1330,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1304,
											"end": 1330,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 1304,
											"end": 1330,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 1304,
											"end": 1330,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1304,
											"end": 1330,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "126"
										},
										{
											"begin": 1304,
											"end": 1330,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 1304,
											"end": 1330,
											"name": "tag",
											"source": 16,
											"value": "130"
										},
										{
											"begin": 1304,
											"end": 1330,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1304,
											"end": 1337,
											"name": "PUSH",
											"source": 16,
											"value": "FF"
										},
										{
											"begin": 1304,
											"end": 1337,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 1304,
											"end": 1337,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 1304,
											"end": 1337,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 1296,
											"end": 1362,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "131"
										},
										{
											"begin": 1296,
											"end": 1362,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 1296,
											"end": 1362,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 1296,
											"end": 1362,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1296,
											"end": 1362,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 1296,
											"end": 1362,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 1296,
											"end": 1362,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 1296,
											"end": 1362,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1296,
											"end": 1362,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "17"
										},
										{
											"begin": 1296,
											"end": 1362,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1296,
											"end": 1362,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "133"
										},
										{
											"begin": 1296,
											"end": 1362,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 1296,
											"end": 1362,
											"name": "tag",
											"source": 16,
											"value": "131"
										},
										{
											"begin": 1296,
											"end": 1362,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1436,
											"end": 1447,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "134"
										},
										{
											"begin": 1436,
											"end": 1447,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 1436,
											"end": 1447,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 1436,
											"end": 1447,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1436,
											"end": 1442,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 1436,
											"end": 1447,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "135"
										},
										{
											"begin": 1436,
											"end": 1447,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 1436,
											"end": 1447,
											"name": "tag",
											"source": 16,
											"value": "134"
										},
										{
											"begin": 1436,
											"end": 1447,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1421,
											"end": 1461,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1461,
											"name": "PUSH",
											"source": 16,
											"value": "23B872DD"
										},
										{
											"begin": 1462,
											"end": 1472,
											"name": "CALLER",
											"source": 16
										},
										{
											"begin": 1474,
											"end": 1485,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "136"
										},
										{
											"begin": 1474,
											"end": 1485,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 1474,
											"end": 1485,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 1474,
											"end": 1485,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1474,
											"end": 1480,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 1474,
											"end": 1485,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "135"
										},
										{
											"begin": 1474,
											"end": 1485,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 1474,
											"end": 1485,
											"name": "tag",
											"source": 16,
											"value": "136"
										},
										{
											"begin": 1474,
											"end": 1485,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1487,
											"end": 1493,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 1487,
											"end": 1512,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 1487,
											"end": 1512,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1487,
											"end": 1512,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "PUSH",
											"source": 16,
											"value": "E0"
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "137"
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "138"
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "tag",
											"source": 16,
											"value": "137"
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "EXTCODESIZE",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "139"
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "tag",
											"source": 16,
											"value": "139"
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "GAS",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "CALL",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "141"
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "RETURNDATACOPY",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "tag",
											"source": 16,
											"value": "141"
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "PUSH",
											"source": 16,
											"value": "1F"
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "PUSH",
											"source": 16,
											"value": "1F"
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "142"
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "143"
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "tag",
											"source": 16,
											"value": "142"
										},
										{
											"begin": 1421,
											"end": 1513,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1525,
											"end": 1542,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 1525,
											"end": 1542,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1580,
											"end": 1591,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "144"
										},
										{
											"begin": 1580,
											"end": 1591,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 1580,
											"end": 1591,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 1580,
											"end": 1591,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1580,
											"end": 1586,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 1580,
											"end": 1591,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "135"
										},
										{
											"begin": 1580,
											"end": 1591,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 1580,
											"end": 1591,
											"name": "tag",
											"source": 16,
											"value": "144"
										},
										{
											"begin": 1580,
											"end": 1591,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1565,
											"end": 1597,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1597,
											"name": "PUSH",
											"source": 16,
											"value": "89AFCB44"
										},
										{
											"begin": 1606,
											"end": 1610,
											"name": "ADDRESS",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "PUSH",
											"source": 16,
											"value": "E0"
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "145"
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "24"
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "tag",
											"source": 16,
											"value": "145"
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "EXTCODESIZE",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "147"
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "tag",
											"source": 16,
											"value": "147"
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "GAS",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "CALL",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "149"
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "RETURNDATACOPY",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "tag",
											"source": 16,
											"value": "149"
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "PUSH",
											"source": 16,
											"value": "1F"
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "PUSH",
											"source": 16,
											"value": "1F"
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "150"
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "151"
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "tag",
											"source": 16,
											"value": "150"
										},
										{
											"begin": 1565,
											"end": 1612,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1524,
											"end": 1612,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1524,
											"end": 1612,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1524,
											"end": 1612,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1676,
											"end": 1702,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 1749,
											"end": 1752,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 1705,
											"end": 1746,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "152"
										},
										{
											"begin": 1719,
											"end": 1745,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "153"
										},
										{
											"begin": 1719,
											"end": 1745,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 1719,
											"end": 1745,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 1719,
											"end": 1745,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1719,
											"end": 1745,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 1719,
											"end": 1745,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 1719,
											"end": 1745,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1719,
											"end": 1745,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "126"
										},
										{
											"begin": 1719,
											"end": 1745,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 1719,
											"end": 1745,
											"name": "tag",
											"source": 16,
											"value": "153"
										},
										{
											"begin": 1719,
											"end": 1745,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1705,
											"end": 1714,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 1705,
											"end": 1714,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1705,
											"end": 1746,
											"name": "PUSH",
											"source": 16,
											"value": "FF"
										},
										{
											"begin": 1705,
											"end": 1746,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 1705,
											"end": 1718,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "154"
										},
										{
											"begin": 1705,
											"end": 1746,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 1705,
											"end": 1746,
											"name": "tag",
											"source": 16,
											"value": "152"
										},
										{
											"begin": 1705,
											"end": 1746,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1705,
											"end": 1752,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 1705,
											"end": 1752,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "155"
										},
										{
											"begin": 1705,
											"end": 1752,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 1705,
											"end": 1752,
											"name": "INVALID",
											"source": 16
										},
										{
											"begin": 1705,
											"end": 1752,
											"name": "tag",
											"source": 16,
											"value": "155"
										},
										{
											"begin": 1705,
											"end": 1752,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1705,
											"end": 1752,
											"name": "DIV",
											"source": 16
										},
										{
											"begin": 1705,
											"end": 1752,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1763,
											"end": 1789,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 1836,
											"end": 1839,
											"name": "PUSH",
											"source": 16,
											"value": "64"
										},
										{
											"begin": 1792,
											"end": 1833,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "156"
										},
										{
											"begin": 1806,
											"end": 1832,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "153"
										},
										{
											"begin": 1806,
											"end": 1832,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 1806,
											"end": 1832,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 1806,
											"end": 1832,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1806,
											"end": 1832,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 1806,
											"end": 1832,
											"name": "DUP10",
											"source": 16
										},
										{
											"begin": 1806,
											"end": 1832,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1806,
											"end": 1832,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "126"
										},
										{
											"begin": 1806,
											"end": 1832,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 1792,
											"end": 1833,
											"name": "tag",
											"source": 16,
											"value": "156"
										},
										{
											"begin": 1792,
											"end": 1833,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1792,
											"end": 1839,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 1792,
											"end": 1839,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "158"
										},
										{
											"begin": 1792,
											"end": 1839,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 1792,
											"end": 1839,
											"name": "INVALID",
											"source": 16
										},
										{
											"begin": 1792,
											"end": 1839,
											"name": "tag",
											"source": 16,
											"value": "158"
										},
										{
											"begin": 1792,
											"end": 1839,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1792,
											"end": 1839,
											"name": "DIV",
											"source": 16
										},
										{
											"begin": 1792,
											"end": 1839,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1925,
											"end": 2014,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "159"
										},
										{
											"begin": 1952,
											"end": 1965,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "160"
										},
										{
											"begin": 1952,
											"end": 1965,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 1952,
											"end": 1965,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 1952,
											"end": 1965,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1952,
											"end": 1965,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 1952,
											"end": 1965,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 1952,
											"end": 1965,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 1952,
											"end": 1965,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "135"
										},
										{
											"begin": 1952,
											"end": 1965,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 1952,
											"end": 1965,
											"name": "tag",
											"source": 16,
											"value": "160"
										},
										{
											"begin": 1952,
											"end": 1965,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1967,
											"end": 1993,
											"name": "PUSHIMMUTABLE",
											"source": 16,
											"value": "1225"
										},
										{
											"begin": 1995,
											"end": 2013,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 1925,
											"end": 1951,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "161"
										},
										{
											"begin": 1925,
											"end": 2014,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 1925,
											"end": 2014,
											"name": "tag",
											"source": 16,
											"value": "159"
										},
										{
											"begin": 1925,
											"end": 2014,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2025,
											"end": 2114,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "162"
										},
										{
											"begin": 2052,
											"end": 2065,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "163"
										},
										{
											"begin": 2052,
											"end": 2065,
											"name": "PUSH",
											"source": 16,
											"value": "A0"
										},
										{
											"begin": 2052,
											"end": 2065,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 2052,
											"end": 2065,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2052,
											"end": 2065,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 2052,
											"end": 2065,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 2052,
											"end": 2065,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2052,
											"end": 2065,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "135"
										},
										{
											"begin": 2052,
											"end": 2065,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 2052,
											"end": 2065,
											"name": "tag",
											"source": 16,
											"value": "163"
										},
										{
											"begin": 2052,
											"end": 2065,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2067,
											"end": 2093,
											"name": "PUSHIMMUTABLE",
											"source": 16,
											"value": "1225"
										},
										{
											"begin": 2095,
											"end": 2113,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 2025,
											"end": 2051,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "161"
										},
										{
											"begin": 2025,
											"end": 2114,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 2025,
											"end": 2114,
											"name": "tag",
											"source": 16,
											"value": "162"
										},
										{
											"begin": 2025,
											"end": 2114,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2161,
											"end": 2178,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 2180,
											"end": 2197,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2242,
											"end": 2268,
											"name": "PUSHIMMUTABLE",
											"source": 16,
											"value": "1225"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2214,
											"end": 2274,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2274,
											"name": "PUSH",
											"source": 16,
											"value": "88316456"
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "PUSH",
											"source": 16,
											"value": "160"
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2363,
											"end": 2369,
											"name": "DUP11",
											"source": 16
										},
										{
											"begin": 2363,
											"end": 2376,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 2363,
											"end": 2376,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2363,
											"end": 2376,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 2363,
											"end": 2376,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2363,
											"end": 2376,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2363,
											"end": 2376,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2363,
											"end": 2376,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "164"
										},
										{
											"begin": 2363,
											"end": 2376,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 2363,
											"end": 2376,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2363,
											"end": 2376,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "135"
										},
										{
											"begin": 2363,
											"end": 2376,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 2363,
											"end": 2376,
											"name": "tag",
											"source": 16,
											"value": "164"
										},
										{
											"begin": 2363,
											"end": 2376,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2407,
											"end": 2420,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "165"
										},
										{
											"begin": 2407,
											"end": 2420,
											"name": "PUSH",
											"source": 16,
											"value": "A0"
										},
										{
											"begin": 2407,
											"end": 2420,
											"name": "DUP13",
											"source": 16
										},
										{
											"begin": 2407,
											"end": 2420,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2407,
											"end": 2420,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 2407,
											"end": 2420,
											"name": "DUP14",
											"source": 16
										},
										{
											"begin": 2407,
											"end": 2420,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2407,
											"end": 2420,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "135"
										},
										{
											"begin": 2407,
											"end": 2420,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 2407,
											"end": 2420,
											"name": "tag",
											"source": 16,
											"value": "165"
										},
										{
											"begin": 2407,
											"end": 2420,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2448,
											"end": 2458,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "166"
										},
										{
											"begin": 2448,
											"end": 2458,
											"name": "PUSH",
											"source": 16,
											"value": "C0"
										},
										{
											"begin": 2448,
											"end": 2458,
											"name": "DUP13",
											"source": 16
										},
										{
											"begin": 2448,
											"end": 2458,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2448,
											"end": 2458,
											"name": "PUSH",
											"source": 16,
											"value": "A0"
										},
										{
											"begin": 2448,
											"end": 2458,
											"name": "DUP14",
											"source": 16
										},
										{
											"begin": 2448,
											"end": 2458,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2448,
											"end": 2458,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "167"
										},
										{
											"begin": 2448,
											"end": 2458,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 2448,
											"end": 2458,
											"name": "tag",
											"source": 16,
											"value": "166"
										},
										{
											"begin": 2448,
											"end": 2458,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFF"
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2492,
											"end": 2508,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "168"
										},
										{
											"begin": 2492,
											"end": 2508,
											"name": "PUSH",
											"source": 16,
											"value": "E0"
										},
										{
											"begin": 2492,
											"end": 2508,
											"name": "DUP13",
											"source": 16
										},
										{
											"begin": 2492,
											"end": 2508,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2492,
											"end": 2508,
											"name": "PUSH",
											"source": 16,
											"value": "C0"
										},
										{
											"begin": 2492,
											"end": 2508,
											"name": "DUP14",
											"source": 16
										},
										{
											"begin": 2492,
											"end": 2508,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2492,
											"end": 2508,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "169"
										},
										{
											"begin": 2492,
											"end": 2508,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 2492,
											"end": 2508,
											"name": "tag",
											"source": 16,
											"value": "168"
										},
										{
											"begin": 2492,
											"end": 2508,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "PUSH",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "SIGNEXTEND",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2542,
											"end": 2558,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "170"
										},
										{
											"begin": 2542,
											"end": 2558,
											"name": "PUSH",
											"source": 16,
											"value": "100"
										},
										{
											"begin": 2542,
											"end": 2558,
											"name": "DUP13",
											"source": 16
										},
										{
											"begin": 2542,
											"end": 2558,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2542,
											"end": 2558,
											"name": "PUSH",
											"source": 16,
											"value": "E0"
										},
										{
											"begin": 2542,
											"end": 2558,
											"name": "DUP14",
											"source": 16
										},
										{
											"begin": 2542,
											"end": 2558,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2542,
											"end": 2558,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "169"
										},
										{
											"begin": 2542,
											"end": 2558,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 2542,
											"end": 2558,
											"name": "tag",
											"source": 16,
											"value": "170"
										},
										{
											"begin": 2542,
											"end": 2558,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "PUSH",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "SIGNEXTEND",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2707,
											"end": 2724,
											"name": "PUSH",
											"source": 16,
											"value": "100"
										},
										{
											"begin": 2707,
											"end": 2724,
											"name": "DUP12",
											"source": 16
										},
										{
											"begin": 2707,
											"end": 2724,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2707,
											"end": 2724,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2759,
											"end": 2776,
											"name": "PUSH",
											"source": 16,
											"value": "120"
										},
										{
											"begin": 2759,
											"end": 2776,
											"name": "DUP12",
											"source": 16
										},
										{
											"begin": 2759,
											"end": 2776,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2759,
											"end": 2776,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "PUSH",
											"source": 16,
											"value": "A0"
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2810,
											"end": 2826,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "171"
										},
										{
											"begin": 2810,
											"end": 2826,
											"name": "PUSH",
											"source": 16,
											"value": "160"
										},
										{
											"begin": 2810,
											"end": 2826,
											"name": "DUP13",
											"source": 16
										},
										{
											"begin": 2810,
											"end": 2826,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2810,
											"end": 2826,
											"name": "PUSH",
											"source": 16,
											"value": "140"
										},
										{
											"begin": 2810,
											"end": 2826,
											"name": "DUP14",
											"source": 16
										},
										{
											"begin": 2810,
											"end": 2826,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2810,
											"end": 2826,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "135"
										},
										{
											"begin": 2810,
											"end": 2826,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 2810,
											"end": 2826,
											"name": "tag",
											"source": 16,
											"value": "171"
										},
										{
											"begin": 2810,
											"end": 2826,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2859,
											"end": 2865,
											"name": "DUP11",
											"source": 16
										},
										{
											"begin": 2859,
											"end": 2874,
											"name": "PUSH",
											"source": 16,
											"value": "160"
										},
										{
											"begin": 2859,
											"end": 2874,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2859,
											"end": 2874,
											"name": "CALLDATALOAD",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2293,
											"end": 2894,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFF"
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "PUSH",
											"source": 16,
											"value": "E0"
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "172"
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "173"
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "tag",
											"source": 16,
											"value": "172"
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "EXTCODESIZE",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "174"
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "tag",
											"source": 16,
											"value": "174"
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "GAS",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "CALL",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "176"
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "RETURNDATACOPY",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "tag",
											"source": 16,
											"value": "176"
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "PUSH",
											"source": 16,
											"value": "1F"
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "NOT",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "PUSH",
											"source": 16,
											"value": "1F"
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "177"
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "178"
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "tag",
											"source": 16,
											"value": "177"
										},
										{
											"begin": 2214,
											"end": 2909,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2156,
											"end": 2909,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 2156,
											"end": 2909,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2156,
											"end": 2909,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 2156,
											"end": 2909,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2156,
											"end": 2909,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2156,
											"end": 2909,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2996,
											"end": 3005,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 2984,
											"end": 2993,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 2984,
											"end": 3005,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 2980,
											"end": 3536,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 2980,
											"end": 3536,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "179"
										},
										{
											"begin": 2980,
											"end": 3536,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 3038,
											"end": 3056,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 3026,
											"end": 3035,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 3026,
											"end": 3056,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 3022,
											"end": 3165,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 3022,
											"end": 3165,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "181"
										},
										{
											"begin": 3022,
											"end": 3165,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 3077,
											"end": 3149,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "181"
										},
										{
											"begin": 3104,
											"end": 3117,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "182"
										},
										{
											"begin": 3104,
											"end": 3117,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 3104,
											"end": 3117,
											"name": "DUP10",
											"source": 16
										},
										{
											"begin": 3104,
											"end": 3117,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3104,
											"end": 3117,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 3104,
											"end": 3117,
											"name": "DUP11",
											"source": 16
										},
										{
											"begin": 3104,
											"end": 3117,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3104,
											"end": 3117,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "135"
										},
										{
											"begin": 3104,
											"end": 3117,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 3104,
											"end": 3117,
											"name": "tag",
											"source": 16,
											"value": "182"
										},
										{
											"begin": 3104,
											"end": 3117,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 3119,
											"end": 3145,
											"name": "PUSHIMMUTABLE",
											"source": 16,
											"value": "1225"
										},
										{
											"begin": 3147,
											"end": 3148,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 3077,
											"end": 3103,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "161"
										},
										{
											"begin": 3077,
											"end": 3149,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 3077,
											"end": 3149,
											"name": "tag",
											"source": 16,
											"value": "181"
										},
										{
											"begin": 3077,
											"end": 3149,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 3199,
											"end": 3220,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 3199,
											"end": 3220,
											"name": "DUP7",
											"source": 16
										},
										{
											"begin": 3199,
											"end": 3220,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 3239,
											"end": 3257,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "183"
										},
										{
											"begin": 3239,
											"end": 3257,
											"name": "PUSH",
											"source": 16,
											"value": "1A0"
										},
										{
											"begin": 3239,
											"end": 3257,
											"name": "DUP10",
											"source": 16
										},
										{
											"begin": 3239,
											"end": 3257,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3239,
											"end": 3257,
											"name": "PUSH",
											"source": 16,
											"value": "180"
										},
										{
											"begin": 3239,
											"end": 3257,
											"name": "DUP11",
											"source": 16
										},
										{
											"begin": 3239,
											"end": 3257,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3239,
											"end": 3257,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "184"
										},
										{
											"begin": 3239,
											"end": 3257,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 3239,
											"end": 3257,
											"name": "tag",
											"source": 16,
											"value": "183"
										},
										{
											"begin": 3239,
											"end": 3257,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 3239,
											"end": 3283,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 3239,
											"end": 3283,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 3239,
											"end": 3283,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "185"
										},
										{
											"begin": 3239,
											"end": 3283,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3278,
											"end": 3283,
											"name": "PUSHIMMUTABLE",
											"source": 16,
											"value": "1597"
										},
										{
											"begin": 3261,
											"end": 3283,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 3261,
											"end": 3274,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "186"
										},
										{
											"begin": 3261,
											"end": 3274,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 3261,
											"end": 3274,
											"name": "DUP11",
											"source": 16
										},
										{
											"begin": 3261,
											"end": 3274,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3261,
											"end": 3274,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 3261,
											"end": 3274,
											"name": "DUP12",
											"source": 16
										},
										{
											"begin": 3261,
											"end": 3274,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3261,
											"end": 3274,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "135"
										},
										{
											"begin": 3261,
											"end": 3274,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 3261,
											"end": 3274,
											"name": "tag",
											"source": 16,
											"value": "186"
										},
										{
											"begin": 3261,
											"end": 3274,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3261,
											"end": 3283,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 3261,
											"end": 3283,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 3239,
											"end": 3283,
											"name": "tag",
											"source": 16,
											"value": "185"
										},
										{
											"begin": 3239,
											"end": 3283,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 3235,
											"end": 3525,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 3235,
											"end": 3525,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "187"
										},
										{
											"begin": 3235,
											"end": 3525,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2E1A7D4D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3311,
											"end": 3316,
											"name": "PUSHIMMUTABLE",
											"source": 16,
											"value": "1597"
										},
										{
											"begin": 3304,
											"end": 3326,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 3304,
											"end": 3326,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 3304,
											"end": 3326,
											"name": "PUSH",
											"source": 16,
											"value": "2E1A7D4D"
										},
										{
											"begin": 3304,
											"end": 3326,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "188"
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 3327,
											"end": 3334,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 3327,
											"end": 3334,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "189"
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "tag",
											"source": 16,
											"value": "188"
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "EXTCODESIZE",
											"source": 16
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "190"
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "tag",
											"source": 16,
											"value": "190"
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "GAS",
											"source": 16
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "CALL",
											"source": 16
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "192"
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "RETURNDATACOPY",
											"source": 16
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "tag",
											"source": 16,
											"value": "192"
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 3304,
											"end": 3335,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 3354,
											"end": 3405,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "193"
										},
										{
											"begin": 3385,
											"end": 3395,
											"name": "CALLER",
											"source": 16
										},
										{
											"begin": 3397,
											"end": 3404,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 3354,
											"end": 3384,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "194"
										},
										{
											"begin": 3354,
											"end": 3405,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 3354,
											"end": 3405,
											"name": "tag",
											"source": 16,
											"value": "193"
										},
										{
											"begin": 3354,
											"end": 3405,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 3235,
											"end": 3525,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "196"
										},
										{
											"begin": 3235,
											"end": 3525,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 3235,
											"end": 3525,
											"name": "tag",
											"source": 16,
											"value": "187"
										},
										{
											"begin": 3235,
											"end": 3525,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 3446,
											"end": 3509,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "196"
										},
										{
											"begin": 3474,
											"end": 3487,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "197"
										},
										{
											"begin": 3474,
											"end": 3487,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 3474,
											"end": 3487,
											"name": "DUP11",
											"source": 16
										},
										{
											"begin": 3474,
											"end": 3487,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3474,
											"end": 3487,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 3474,
											"end": 3487,
											"name": "DUP12",
											"source": 16
										},
										{
											"begin": 3474,
											"end": 3487,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3474,
											"end": 3487,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "135"
										},
										{
											"begin": 3474,
											"end": 3487,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 3474,
											"end": 3487,
											"name": "tag",
											"source": 16,
											"value": "197"
										},
										{
											"begin": 3474,
											"end": 3487,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 3489,
											"end": 3499,
											"name": "CALLER",
											"source": 16
										},
										{
											"begin": 3501,
											"end": 3508,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 3446,
											"end": 3473,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "198"
										},
										{
											"begin": 3446,
											"end": 3509,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 3446,
											"end": 3509,
											"name": "tag",
											"source": 16,
											"value": "196"
										},
										{
											"begin": 3446,
											"end": 3509,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2980,
											"end": 3536,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 2980,
											"end": 3536,
											"name": "tag",
											"source": 16,
											"value": "179"
										},
										{
											"begin": 2980,
											"end": 3536,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 3562,
											"end": 3571,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 3550,
											"end": 3559,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 3550,
											"end": 3571,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 3546,
											"end": 4102,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 3546,
											"end": 4102,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "199"
										},
										{
											"begin": 3546,
											"end": 4102,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 3604,
											"end": 3622,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 3592,
											"end": 3601,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 3592,
											"end": 3622,
											"name": "LT",
											"source": 16
										},
										{
											"begin": 3588,
											"end": 3731,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 3588,
											"end": 3731,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "201"
										},
										{
											"begin": 3588,
											"end": 3731,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 3643,
											"end": 3715,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "201"
										},
										{
											"begin": 3670,
											"end": 3683,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "182"
										},
										{
											"begin": 3670,
											"end": 3683,
											"name": "PUSH",
											"source": 16,
											"value": "A0"
										},
										{
											"begin": 3670,
											"end": 3683,
											"name": "DUP10",
											"source": 16
										},
										{
											"begin": 3670,
											"end": 3683,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3670,
											"end": 3683,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 3670,
											"end": 3683,
											"name": "DUP11",
											"source": 16
										},
										{
											"begin": 3670,
											"end": 3683,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3670,
											"end": 3683,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "135"
										},
										{
											"begin": 3670,
											"end": 3683,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 3643,
											"end": 3715,
											"name": "tag",
											"source": 16,
											"value": "201"
										},
										{
											"begin": 3643,
											"end": 3715,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 3765,
											"end": 3786,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 3765,
											"end": 3786,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 3765,
											"end": 3786,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 3805,
											"end": 3823,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "203"
										},
										{
											"begin": 3805,
											"end": 3823,
											"name": "PUSH",
											"source": 16,
											"value": "1A0"
										},
										{
											"begin": 3805,
											"end": 3823,
											"name": "DUP10",
											"source": 16
										},
										{
											"begin": 3805,
											"end": 3823,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3805,
											"end": 3823,
											"name": "PUSH",
											"source": 16,
											"value": "180"
										},
										{
											"begin": 3805,
											"end": 3823,
											"name": "DUP11",
											"source": 16
										},
										{
											"begin": 3805,
											"end": 3823,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3805,
											"end": 3823,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "184"
										},
										{
											"begin": 3805,
											"end": 3823,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 3805,
											"end": 3823,
											"name": "tag",
											"source": 16,
											"value": "203"
										},
										{
											"begin": 3805,
											"end": 3823,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 3805,
											"end": 3849,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 3805,
											"end": 3849,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 3805,
											"end": 3849,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "204"
										},
										{
											"begin": 3805,
											"end": 3849,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3844,
											"end": 3849,
											"name": "PUSHIMMUTABLE",
											"source": 16,
											"value": "1597"
										},
										{
											"begin": 3827,
											"end": 3849,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 3827,
											"end": 3840,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "205"
										},
										{
											"begin": 3827,
											"end": 3840,
											"name": "PUSH",
											"source": 16,
											"value": "A0"
										},
										{
											"begin": 3827,
											"end": 3840,
											"name": "DUP11",
											"source": 16
										},
										{
											"begin": 3827,
											"end": 3840,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3827,
											"end": 3840,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 3827,
											"end": 3840,
											"name": "DUP12",
											"source": 16
										},
										{
											"begin": 3827,
											"end": 3840,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3827,
											"end": 3840,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "135"
										},
										{
											"begin": 3827,
											"end": 3840,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 3827,
											"end": 3840,
											"name": "tag",
											"source": 16,
											"value": "205"
										},
										{
											"begin": 3827,
											"end": 3840,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3827,
											"end": 3849,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 3827,
											"end": 3849,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 3805,
											"end": 3849,
											"name": "tag",
											"source": 16,
											"value": "204"
										},
										{
											"begin": 3805,
											"end": 3849,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 3801,
											"end": 4091,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 3801,
											"end": 4091,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "206"
										},
										{
											"begin": 3801,
											"end": 4091,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2E1A7D4D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3877,
											"end": 3882,
											"name": "PUSHIMMUTABLE",
											"source": 16,
											"value": "1597"
										},
										{
											"begin": 3870,
											"end": 3892,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 3870,
											"end": 3892,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 3870,
											"end": 3892,
											"name": "PUSH",
											"source": 16,
											"value": "2E1A7D4D"
										},
										{
											"begin": 3870,
											"end": 3892,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "207"
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 3893,
											"end": 3900,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 3893,
											"end": 3900,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "189"
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "tag",
											"source": 16,
											"value": "207"
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "DUP8",
											"source": 16
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "EXTCODESIZE",
											"source": 16
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "208"
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "tag",
											"source": 16,
											"value": "208"
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "GAS",
											"source": 16
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "CALL",
											"source": 16
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "210"
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "RETURNDATACOPY",
											"source": 16
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "tag",
											"source": 16,
											"value": "210"
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 3870,
											"end": 3901,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 3920,
											"end": 3971,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "211"
										},
										{
											"begin": 3951,
											"end": 3961,
											"name": "CALLER",
											"source": 16
										},
										{
											"begin": 3963,
											"end": 3970,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 3920,
											"end": 3950,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "194"
										},
										{
											"begin": 3920,
											"end": 3971,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 3920,
											"end": 3971,
											"name": "tag",
											"source": 16,
											"value": "211"
										},
										{
											"begin": 3920,
											"end": 3971,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 3801,
											"end": 4091,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "213"
										},
										{
											"begin": 3801,
											"end": 4091,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 3801,
											"end": 4091,
											"name": "tag",
											"source": 16,
											"value": "206"
										},
										{
											"begin": 3801,
											"end": 4091,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 4012,
											"end": 4075,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "213"
										},
										{
											"begin": 4040,
											"end": 4053,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "197"
										},
										{
											"begin": 4040,
											"end": 4053,
											"name": "PUSH",
											"source": 16,
											"value": "A0"
										},
										{
											"begin": 4040,
											"end": 4053,
											"name": "DUP11",
											"source": 16
										},
										{
											"begin": 4040,
											"end": 4053,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 4040,
											"end": 4053,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 4040,
											"end": 4053,
											"name": "DUP12",
											"source": 16
										},
										{
											"begin": 4040,
											"end": 4053,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 4040,
											"end": 4053,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "135"
										},
										{
											"begin": 4040,
											"end": 4053,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 4012,
											"end": 4075,
											"name": "tag",
											"source": 16,
											"value": "213"
										},
										{
											"begin": 4012,
											"end": 4075,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 3546,
											"end": 4102,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 3546,
											"end": 4102,
											"name": "tag",
											"source": 16,
											"value": "199"
										},
										{
											"begin": 3546,
											"end": 4102,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1145,
											"end": 4109,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1145,
											"end": 4109,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1145,
											"end": 4109,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1145,
											"end": 4109,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1145,
											"end": 4109,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1145,
											"end": 4109,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1145,
											"end": 4109,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1145,
											"end": 4109,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 677,
											"end": 959,
											"name": "tag",
											"source": 20,
											"value": "60"
										},
										{
											"begin": 677,
											"end": 959,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 872,
											"end": 951,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D505ACCF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 872,
											"end": 951,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 899,
											"end": 909,
											"name": "CALLER",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "PUSH",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 872,
											"end": 951,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 919,
											"end": 923,
											"name": "ADDRESS",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 872,
											"end": 951,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "PUSH",
											"source": 20,
											"value": "44"
										},
										{
											"begin": 872,
											"end": 951,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "DUP8",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "PUSH",
											"source": 20,
											"value": "64"
										},
										{
											"begin": 872,
											"end": 951,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "PUSH",
											"source": 20,
											"value": "FF"
										},
										{
											"begin": 872,
											"end": 951,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "PUSH",
											"source": 20,
											"value": "84"
										},
										{
											"begin": 872,
											"end": 951,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "PUSH",
											"source": 20,
											"value": "A4"
										},
										{
											"begin": 872,
											"end": 951,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "PUSH",
											"source": 20,
											"value": "C4"
										},
										{
											"begin": 872,
											"end": 951,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 872,
											"end": 898,
											"name": "DUP9",
											"source": 20
										},
										{
											"begin": 872,
											"end": 898,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 872,
											"end": 898,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 872,
											"end": 898,
											"name": "PUSH",
											"source": 20,
											"value": "D505ACCF"
										},
										{
											"begin": 872,
											"end": 898,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "PUSH",
											"source": 20,
											"value": "E4"
										},
										{
											"begin": 872,
											"end": 951,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": 872,
											"end": 951,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": 872,
											"end": 898,
											"name": "DUP8",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "EXTCODESIZE",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "85"
										},
										{
											"begin": 872,
											"end": 951,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 872,
											"end": 951,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 872,
											"end": 951,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 986,
											"end": 1111,
											"name": "tag",
											"source": 15,
											"value": "154"
										},
										{
											"begin": 986,
											"end": 1111,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 1044,
											"end": 1053,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 1073,
											"end": 1079,
											"name": "DUP3",
											"source": 15
										},
										{
											"begin": 1073,
											"end": 1079,
											"name": "ISZERO",
											"source": 15
										},
										{
											"begin": 1073,
											"end": 1079,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 1073,
											"end": 1103,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "220"
										},
										{
											"begin": 1073,
											"end": 1103,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1088,
											"end": 1093,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 1088,
											"end": 1093,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 1088,
											"end": 1093,
											"name": "MUL",
											"source": 15
										},
										{
											"begin": 1102,
											"end": 1103,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 1097,
											"end": 1098,
											"name": "DUP4",
											"source": 15
										},
										{
											"begin": 1088,
											"end": 1093,
											"name": "DUP3",
											"source": 15
										},
										{
											"begin": 1097,
											"end": 1098,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 1083,
											"end": 1098,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "221"
										},
										{
											"begin": 1083,
											"end": 1098,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 1083,
											"end": 1098,
											"name": "INVALID",
											"source": 15
										},
										{
											"begin": 1083,
											"end": 1098,
											"name": "tag",
											"source": 15,
											"value": "221"
										},
										{
											"begin": 1083,
											"end": 1098,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 1083,
											"end": 1098,
											"name": "DIV",
											"source": 15
										},
										{
											"begin": 1083,
											"end": 1103,
											"name": "EQ",
											"source": 15
										},
										{
											"begin": 1073,
											"end": 1103,
											"name": "tag",
											"source": 15,
											"value": "220"
										},
										{
											"begin": 1073,
											"end": 1103,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 1065,
											"end": 1104,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "222"
										},
										{
											"begin": 1065,
											"end": 1104,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 1065,
											"end": 1104,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 1065,
											"end": 1104,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 1065,
											"end": 1104,
											"name": "REVERT",
											"source": 15
										},
										{
											"begin": 1065,
											"end": 1104,
											"name": "tag",
											"source": 15,
											"value": "222"
										},
										{
											"begin": 1065,
											"end": 1104,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 986,
											"end": 1111,
											"name": "SWAP3",
											"source": 15
										},
										{
											"begin": 986,
											"end": 1111,
											"name": "SWAP2",
											"source": 15
										},
										{
											"begin": 986,
											"end": 1111,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 986,
											"end": 1111,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 986,
											"end": 1111,
											"name": "JUMP",
											"source": 15,
											"value": "[out]"
										},
										{
											"begin": 1915,
											"end": 2229,
											"name": "tag",
											"source": 32,
											"value": "161"
										},
										{
											"begin": 1915,
											"end": 2229,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "PUSH",
											"source": 32,
											"value": "40"
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "AND",
											"source": 32
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "PUSH",
											"source": 32,
											"value": "24"
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "PUSH",
											"source": 32,
											"value": "44"
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "DUP6",
											"source": 32
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "SUB",
											"source": 32
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "PUSH",
											"source": 32,
											"value": "64"
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "SWAP3",
											"source": 32
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "AND",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "95EA7B3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "OR",
											"source": 32
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "SWAP3",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 2033,
											"end": 2045,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 2033,
											"end": 2045,
											"name": "SWAP5",
											"source": 32
										},
										{
											"begin": 2033,
											"end": 2045,
											"name": "DUP6",
											"source": 32
										},
										{
											"begin": 2033,
											"end": 2045,
											"name": "SWAP5",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2078,
											"name": "SWAP4",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2078,
											"name": "DUP10",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2078,
											"name": "AND",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2078,
											"name": "SWAP4",
											"source": 32
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "SWAP3",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 2079,
											"end": 2137,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "tag",
											"source": 32,
											"value": "224"
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "LT",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "226"
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "SWAP3",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "224"
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "JUMP",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "tag",
											"source": 32,
											"value": "226"
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "PUSH",
											"source": 32,
											"value": "1"
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "SUB",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "PUSH",
											"source": 32,
											"value": "100"
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "EXP",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "SUB",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "NOT",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "AND",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "AND",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "OR",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "DUP6",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "PUSH",
											"source": 32,
											"value": "40"
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "SUB",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "DUP7",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "GAS",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "CALL",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "RETURNDATASIZE",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "EQ",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "229"
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "PUSH",
											"source": 32,
											"value": "40"
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "PUSH",
											"source": 32,
											"value": "1F"
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "NOT",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "PUSH",
											"source": 32,
											"value": "3F"
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "RETURNDATASIZE",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "AND",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "PUSH",
											"source": 32,
											"value": "40"
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "RETURNDATASIZE",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "RETURNDATASIZE",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "RETURNDATACOPY",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "228"
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "JUMP",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "tag",
											"source": 32,
											"value": "229"
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "PUSH",
											"source": 32,
											"value": "60"
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "tag",
											"source": 32,
											"value": "228"
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 2068,
											"end": 2138,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 2032,
											"end": 2138,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 2032,
											"end": 2138,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 2032,
											"end": 2138,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 2032,
											"end": 2138,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 2157,
											"end": 2164,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 2157,
											"end": 2214,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 2157,
											"end": 2214,
											"name": "ISZERO",
											"source": 32
										},
										{
											"begin": 2157,
											"end": 2214,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "231"
										},
										{
											"begin": 2157,
											"end": 2214,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2169,
											"end": 2180,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 2169,
											"end": 2180,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 2169,
											"end": 2185,
											"name": "ISZERO",
											"source": 32
										},
										{
											"begin": 2169,
											"end": 2185,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 2169,
											"end": 2213,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "231"
										},
										{
											"begin": 2169,
											"end": 2213,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": 2169,
											"end": 2213,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 2200,
											"end": 2204,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 2189,
											"end": 2213,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 2189,
											"end": 2213,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 2189,
											"end": 2213,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 2189,
											"end": 2213,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 2189,
											"end": 2213,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 2189,
											"end": 2213,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 2189,
											"end": 2213,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 2189,
											"end": 2213,
											"name": "LT",
											"source": 32
										},
										{
											"begin": 2189,
											"end": 2213,
											"name": "ISZERO",
											"source": 32
										},
										{
											"begin": 2189,
											"end": 2213,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "232"
										},
										{
											"begin": 2189,
											"end": 2213,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": 2189,
											"end": 2213,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 2189,
											"end": 2213,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 2189,
											"end": 2213,
											"name": "REVERT",
											"source": 32
										},
										{
											"begin": 2189,
											"end": 2213,
											"name": "tag",
											"source": 32,
											"value": "232"
										},
										{
											"begin": 2189,
											"end": 2213,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2189,
											"end": 2213,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 2169,
											"end": 2213,
											"name": "tag",
											"source": 32,
											"value": "231"
										},
										{
											"begin": 2169,
											"end": 2213,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 2149,
											"end": 2221,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "233"
										},
										{
											"begin": 2149,
											"end": 2221,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": 2149,
											"end": 2221,
											"name": "PUSH",
											"source": 32,
											"value": "40"
										},
										{
											"begin": 2149,
											"end": 2221,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 2149,
											"end": 2221,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2149,
											"end": 2221,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 2149,
											"end": 2221,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 2149,
											"end": 2221,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 2149,
											"end": 2221,
											"name": "PUSH",
											"source": 32,
											"value": "4"
										},
										{
											"begin": 2149,
											"end": 2221,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 2149,
											"end": 2221,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 2149,
											"end": 2221,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 2149,
											"end": 2221,
											"name": "PUSH",
											"source": 32,
											"value": "2"
										},
										{
											"begin": 2149,
											"end": 2221,
											"name": "PUSH",
											"source": 32,
											"value": "24"
										},
										{
											"begin": 2149,
											"end": 2221,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 2149,
											"end": 2221,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 2149,
											"end": 2221,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "5341"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2149,
											"end": 2221,
											"name": "PUSH",
											"source": 32,
											"value": "44"
										},
										{
											"begin": 2149,
											"end": 2221,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 2149,
											"end": 2221,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 2149,
											"end": 2221,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 2149,
											"end": 2221,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 2149,
											"end": 2221,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 2149,
											"end": 2221,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 2149,
											"end": 2221,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 2149,
											"end": 2221,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 2149,
											"end": 2221,
											"name": "SUB",
											"source": 32
										},
										{
											"begin": 2149,
											"end": 2221,
											"name": "PUSH",
											"source": 32,
											"value": "64"
										},
										{
											"begin": 2149,
											"end": 2221,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 2149,
											"end": 2221,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 2149,
											"end": 2221,
											"name": "REVERT",
											"source": 32
										},
										{
											"begin": 2149,
											"end": 2221,
											"name": "tag",
											"source": 32,
											"value": "233"
										},
										{
											"begin": 2149,
											"end": 2221,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 1915,
											"end": 2229,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 1915,
											"end": 2229,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 1915,
											"end": 2229,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 1915,
											"end": 2229,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 1915,
											"end": 2229,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 1915,
											"end": 2229,
											"name": "JUMP",
											"source": 32,
											"value": "[out]"
										},
										{
											"begin": 2425,
											"end": 2593,
											"name": "tag",
											"source": 32,
											"value": "194"
										},
										{
											"begin": 2425,
											"end": 2593,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 2538,
											"end": 2550,
											"name": "PUSH",
											"source": 32,
											"value": "40"
										},
										{
											"begin": 2538,
											"end": 2550,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 2538,
											"end": 2550,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 2498,
											"end": 2510,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 2538,
											"end": 2550,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 2538,
											"end": 2550,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 2538,
											"end": 2550,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 2538,
											"end": 2550,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 2538,
											"end": 2550,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 2538,
											"end": 2550,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 2538,
											"end": 2550,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 2538,
											"end": 2550,
											"name": "SWAP3",
											"source": 32
										},
										{
											"begin": 2538,
											"end": 2550,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2516,
											"end": 2523,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2523,
											"name": "AND",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2523,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 2531,
											"end": 2536,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 2531,
											"end": 2536,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "PUSH",
											"source": 32,
											"value": "40"
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "tag",
											"source": 32,
											"value": "237"
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "LT",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "239"
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "SWAP3",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "237"
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "JUMP",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "tag",
											"source": 32,
											"value": "239"
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "PUSH",
											"source": 32,
											"value": "1"
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "SUB",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "PUSH",
											"source": 32,
											"value": "100"
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "EXP",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "SUB",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "NOT",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "AND",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "AND",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "OR",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "DUP6",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "PUSH",
											"source": 32,
											"value": "40"
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "SUB",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "DUP6",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "DUP8",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "GAS",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "CALL",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "SWAP3",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "RETURNDATASIZE",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "EQ",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "242"
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "PUSH",
											"source": 32,
											"value": "40"
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "PUSH",
											"source": 32,
											"value": "1F"
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "NOT",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "PUSH",
											"source": 32,
											"value": "3F"
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "RETURNDATASIZE",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "AND",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "PUSH",
											"source": 32,
											"value": "40"
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "RETURNDATASIZE",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "RETURNDATASIZE",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "RETURNDATACOPY",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "241"
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "JUMP",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "tag",
											"source": 32,
											"value": "242"
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "PUSH",
											"source": 32,
											"value": "60"
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "tag",
											"source": 32,
											"value": "241"
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 2516,
											"end": 2551,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 2497,
											"end": 2551,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 2497,
											"end": 2551,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 2497,
											"end": 2551,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 2570,
											"end": 2577,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 2562,
											"end": 2585,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "243"
										},
										{
											"begin": 2562,
											"end": 2585,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": 2562,
											"end": 2585,
											"name": "PUSH",
											"source": 32,
											"value": "40"
										},
										{
											"begin": 2562,
											"end": 2585,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 2562,
											"end": 2585,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2562,
											"end": 2585,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 2562,
											"end": 2585,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 2562,
											"end": 2585,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 2562,
											"end": 2585,
											"name": "PUSH",
											"source": 32,
											"value": "4"
										},
										{
											"begin": 2562,
											"end": 2585,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 2562,
											"end": 2585,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 2562,
											"end": 2585,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 2562,
											"end": 2585,
											"name": "PUSH",
											"source": 32,
											"value": "3"
										},
										{
											"begin": 2562,
											"end": 2585,
											"name": "PUSH",
											"source": 32,
											"value": "24"
										},
										{
											"begin": 2562,
											"end": 2585,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 2562,
											"end": 2585,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 2562,
											"end": 2585,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "535445"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2562,
											"end": 2585,
											"name": "PUSH",
											"source": 32,
											"value": "44"
										},
										{
											"begin": 2562,
											"end": 2585,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 2562,
											"end": 2585,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 2562,
											"end": 2585,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 2562,
											"end": 2585,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 2562,
											"end": 2585,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 2562,
											"end": 2585,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 2562,
											"end": 2585,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 2562,
											"end": 2585,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 2562,
											"end": 2585,
											"name": "SUB",
											"source": 32
										},
										{
											"begin": 2562,
											"end": 2585,
											"name": "PUSH",
											"source": 32,
											"value": "64"
										},
										{
											"begin": 2562,
											"end": 2585,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 2562,
											"end": 2585,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 2562,
											"end": 2585,
											"name": "REVERT",
											"source": 32
										},
										{
											"begin": 2562,
											"end": 2585,
											"name": "tag",
											"source": 32,
											"value": "243"
										},
										{
											"begin": 2562,
											"end": 2585,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 2425,
											"end": 2593,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 2425,
											"end": 2593,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 2425,
											"end": 2593,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 2425,
											"end": 2593,
											"name": "JUMP",
											"source": 32,
											"value": "[out]"
										},
										{
											"begin": 1239,
											"end": 1555,
											"name": "tag",
											"source": 32,
											"value": "198"
										},
										{
											"begin": 1239,
											"end": 1555,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "PUSH",
											"source": 32,
											"value": "40"
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "AND",
											"source": 32
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "PUSH",
											"source": 32,
											"value": "24"
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "PUSH",
											"source": 32,
											"value": "44"
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "DUP6",
											"source": 32
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "SUB",
											"source": 32
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "PUSH",
											"source": 32,
											"value": "64"
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "SWAP3",
											"source": 32
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "AND",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "OR",
											"source": 32
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "SWAP3",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 1358,
											"end": 1370,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 1358,
											"end": 1370,
											"name": "SWAP5",
											"source": 32
										},
										{
											"begin": 1358,
											"end": 1370,
											"name": "DUP6",
											"source": 32
										},
										{
											"begin": 1358,
											"end": 1370,
											"name": "SWAP5",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1403,
											"name": "SWAP4",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1403,
											"name": "DUP10",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1403,
											"name": "AND",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1403,
											"name": "SWAP4",
											"source": 32
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "SWAP3",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 1404,
											"end": 1463,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "tag",
											"source": 32,
											"value": "245"
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "LT",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "247"
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "SWAP3",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "245"
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "JUMP",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "tag",
											"source": 32,
											"value": "247"
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "PUSH",
											"source": 32,
											"value": "1"
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "SUB",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "PUSH",
											"source": 32,
											"value": "100"
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "EXP",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "SUB",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "NOT",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "AND",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "AND",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "OR",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "DUP6",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "PUSH",
											"source": 32,
											"value": "40"
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "DUP4",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "SUB",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "DUP7",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "GAS",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "CALL",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "RETURNDATASIZE",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "EQ",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "250"
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "PUSH",
											"source": 32,
											"value": "40"
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "PUSH",
											"source": 32,
											"value": "1F"
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "NOT",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "PUSH",
											"source": 32,
											"value": "3F"
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "RETURNDATASIZE",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "AND",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "PUSH",
											"source": 32,
											"value": "40"
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "RETURNDATASIZE",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "RETURNDATASIZE",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "DUP5",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "RETURNDATACOPY",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "249"
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "JUMP",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "tag",
											"source": 32,
											"value": "250"
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "PUSH",
											"source": 32,
											"value": "60"
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "tag",
											"source": 32,
											"value": "249"
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 1393,
											"end": 1464,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 1357,
											"end": 1464,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 1357,
											"end": 1464,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 1357,
											"end": 1464,
											"name": "SWAP2",
											"source": 32
										},
										{
											"begin": 1357,
											"end": 1464,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 1483,
											"end": 1490,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 1483,
											"end": 1540,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 1483,
											"end": 1540,
											"name": "ISZERO",
											"source": 32
										},
										{
											"begin": 1483,
											"end": 1540,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "252"
										},
										{
											"begin": 1483,
											"end": 1540,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1495,
											"end": 1506,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 1495,
											"end": 1506,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 1495,
											"end": 1511,
											"name": "ISZERO",
											"source": 32
										},
										{
											"begin": 1495,
											"end": 1511,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 1495,
											"end": 1539,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "252"
										},
										{
											"begin": 1495,
											"end": 1539,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": 1495,
											"end": 1539,
											"name": "POP",
											"source": 32
										},
										{
											"begin": 1526,
											"end": 1530,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 1515,
											"end": 1539,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 1515,
											"end": 1539,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 1515,
											"end": 1539,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 1515,
											"end": 1539,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 1515,
											"end": 1539,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 1515,
											"end": 1539,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 1515,
											"end": 1539,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 1515,
											"end": 1539,
											"name": "LT",
											"source": 32
										},
										{
											"begin": 1515,
											"end": 1539,
											"name": "ISZERO",
											"source": 32
										},
										{
											"begin": 1515,
											"end": 1539,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "253"
										},
										{
											"begin": 1515,
											"end": 1539,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": 1515,
											"end": 1539,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 1515,
											"end": 1539,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 1515,
											"end": 1539,
											"name": "REVERT",
											"source": 32
										},
										{
											"begin": 1515,
											"end": 1539,
											"name": "tag",
											"source": 32,
											"value": "253"
										},
										{
											"begin": 1515,
											"end": 1539,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1515,
											"end": 1539,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 1495,
											"end": 1539,
											"name": "tag",
											"source": 32,
											"value": "252"
										},
										{
											"begin": 1495,
											"end": 1539,
											"name": "JUMPDEST",
											"source": 32
										},
										{
											"begin": 1475,
											"end": 1547,
											"name": "PUSH [tag]",
											"source": 32,
											"value": "233"
										},
										{
											"begin": 1475,
											"end": 1547,
											"name": "JUMPI",
											"source": 32
										},
										{
											"begin": 1475,
											"end": 1547,
											"name": "PUSH",
											"source": 32,
											"value": "40"
										},
										{
											"begin": 1475,
											"end": 1547,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 1475,
											"end": 1547,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1475,
											"end": 1547,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 1475,
											"end": 1547,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 1475,
											"end": 1547,
											"name": "PUSH",
											"source": 32,
											"value": "20"
										},
										{
											"begin": 1475,
											"end": 1547,
											"name": "PUSH",
											"source": 32,
											"value": "4"
										},
										{
											"begin": 1475,
											"end": 1547,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 1475,
											"end": 1547,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 1475,
											"end": 1547,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 1475,
											"end": 1547,
											"name": "PUSH",
											"source": 32,
											"value": "2"
										},
										{
											"begin": 1475,
											"end": 1547,
											"name": "PUSH",
											"source": 32,
											"value": "24"
										},
										{
											"begin": 1475,
											"end": 1547,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 1475,
											"end": 1547,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 1475,
											"end": 1547,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "14D5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1475,
											"end": 1547,
											"name": "PUSH",
											"source": 32,
											"value": "44"
										},
										{
											"begin": 1475,
											"end": 1547,
											"name": "DUP3",
											"source": 32
										},
										{
											"begin": 1475,
											"end": 1547,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 1475,
											"end": 1547,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 1475,
											"end": 1547,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 1475,
											"end": 1547,
											"name": "MLOAD",
											"source": 32
										},
										{
											"begin": 1475,
											"end": 1547,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 1475,
											"end": 1547,
											"name": "DUP2",
											"source": 32
										},
										{
											"begin": 1475,
											"end": 1547,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 1475,
											"end": 1547,
											"name": "SUB",
											"source": 32
										},
										{
											"begin": 1475,
											"end": 1547,
											"name": "PUSH",
											"source": 32,
											"value": "64"
										},
										{
											"begin": 1475,
											"end": 1547,
											"name": "ADD",
											"source": 32
										},
										{
											"begin": 1475,
											"end": 1547,
											"name": "SWAP1",
											"source": 32
										},
										{
											"begin": 1475,
											"end": 1547,
											"name": "REVERT",
											"source": 32
										},
										{
											"begin": 14,
											"end": 177,
											"name": "tag",
											"source": 33,
											"value": "256"
										},
										{
											"begin": 14,
											"end": 177,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 83,
											"end": 103,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 83,
											"end": 103,
											"name": "CALLDATALOAD",
											"source": 33
										},
										{
											"begin": 143,
											"end": 151,
											"name": "PUSH",
											"source": 33,
											"value": "FFFFFF"
										},
										{
											"begin": 132,
											"end": 152,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 132,
											"end": 152,
											"name": "AND",
											"source": 33
										},
										{
											"begin": 122,
											"end": 153,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 122,
											"end": 153,
											"name": "EQ",
											"source": 33
										},
										{
											"begin": 112,
											"end": 114,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "258"
										},
										{
											"begin": 112,
											"end": 114,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 167,
											"end": 168,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 164,
											"end": 165,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 157,
											"end": 169,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 112,
											"end": 114,
											"name": "tag",
											"source": 33,
											"value": "258"
										},
										{
											"begin": 112,
											"end": 114,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 64,
											"end": 177,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 64,
											"end": 177,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 64,
											"end": 177,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 64,
											"end": 177,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										},
										{
											"begin": 182,
											"end": 340,
											"name": "tag",
											"source": 33,
											"value": "259"
										},
										{
											"begin": 182,
											"end": 340,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 250,
											"end": 270,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 250,
											"end": 270,
											"name": "CALLDATALOAD",
											"source": 33
										},
										{
											"begin": 310,
											"end": 314,
											"name": "PUSH",
											"source": 33,
											"value": "FF"
										},
										{
											"begin": 299,
											"end": 315,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 299,
											"end": 315,
											"name": "AND",
											"source": 33
										},
										{
											"begin": 289,
											"end": 316,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 289,
											"end": 316,
											"name": "EQ",
											"source": 33
										},
										{
											"begin": 279,
											"end": 281,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "258"
										},
										{
											"begin": 279,
											"end": 281,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 330,
											"end": 331,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 327,
											"end": 328,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 320,
											"end": 332,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 345,
											"end": 604,
											"name": "tag",
											"source": 33,
											"value": "135"
										},
										{
											"begin": 345,
											"end": 604,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 345,
											"end": 604,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 457,
											"end": 459,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 445,
											"end": 454,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 436,
											"end": 443,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 432,
											"end": 455,
											"name": "SUB",
											"source": 33
										},
										{
											"begin": 428,
											"end": 460,
											"name": "SLT",
											"source": 33
										},
										{
											"begin": 425,
											"end": 427,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 425,
											"end": 427,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "263"
										},
										{
											"begin": 425,
											"end": 427,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 478,
											"end": 484,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 470,
											"end": 476,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 463,
											"end": 485,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 425,
											"end": 427,
											"name": "tag",
											"source": 33,
											"value": "263"
										},
										{
											"begin": 425,
											"end": 427,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 522,
											"end": 531,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 509,
											"end": 532,
											"name": "CALLDATALOAD",
											"source": 33
										},
										{
											"begin": 541,
											"end": 574,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "264"
										},
										{
											"begin": 568,
											"end": 573,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 541,
											"end": 574,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "265"
										},
										{
											"begin": 541,
											"end": 574,
											"name": "JUMP",
											"source": 33,
											"value": "[in]"
										},
										{
											"begin": 541,
											"end": 574,
											"name": "tag",
											"source": 33,
											"value": "264"
										},
										{
											"begin": 541,
											"end": 574,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 593,
											"end": 598,
											"name": "SWAP4",
											"source": 33
										},
										{
											"begin": 415,
											"end": 604,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 415,
											"end": 604,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										},
										{
											"begin": 609,
											"end": 1229,
											"name": "tag",
											"source": 33,
											"value": "21"
										},
										{
											"begin": 609,
											"end": 1229,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 609,
											"end": 1229,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 609,
											"end": 1229,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 609,
											"end": 1229,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 609,
											"end": 1229,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 771,
											"end": 774,
											"name": "PUSH",
											"source": 33,
											"value": "80"
										},
										{
											"begin": 759,
											"end": 768,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 750,
											"end": 757,
											"name": "DUP8",
											"source": 33
										},
										{
											"begin": 746,
											"end": 769,
											"name": "SUB",
											"source": 33
										},
										{
											"begin": 742,
											"end": 775,
											"name": "SLT",
											"source": 33
										},
										{
											"begin": 739,
											"end": 741,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 739,
											"end": 741,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "267"
										},
										{
											"begin": 739,
											"end": 741,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 793,
											"end": 799,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 785,
											"end": 791,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 778,
											"end": 800,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 739,
											"end": 741,
											"name": "tag",
											"source": 33,
											"value": "267"
										},
										{
											"begin": 739,
											"end": 741,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 837,
											"end": 846,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 824,
											"end": 847,
											"name": "CALLDATALOAD",
											"source": 33
										},
										{
											"begin": 856,
											"end": 889,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "268"
										},
										{
											"begin": 883,
											"end": 888,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 856,
											"end": 889,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "265"
										},
										{
											"begin": 856,
											"end": 889,
											"name": "JUMP",
											"source": 33,
											"value": "[in]"
										},
										{
											"begin": 856,
											"end": 889,
											"name": "tag",
											"source": 33,
											"value": "268"
										},
										{
											"begin": 856,
											"end": 889,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 908,
											"end": 913,
											"name": "SWAP4",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 965,
											"end": 967,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 950,
											"end": 968,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 950,
											"end": 968,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 937,
											"end": 969,
											"name": "CALLDATALOAD",
											"source": 33
										},
										{
											"begin": 978,
											"end": 1013,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "269"
										},
										{
											"begin": 937,
											"end": 969,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 978,
											"end": 1013,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "265"
										},
										{
											"begin": 978,
											"end": 1013,
											"name": "JUMP",
											"source": 33,
											"value": "[in]"
										},
										{
											"begin": 978,
											"end": 1013,
											"name": "tag",
											"source": 33,
											"value": "269"
										},
										{
											"begin": 978,
											"end": 1013,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 1032,
											"end": 1039,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1058,
											"end": 1097,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "270"
										},
										{
											"begin": 1093,
											"end": 1095,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 1078,
											"end": 1096,
											"name": "DUP7",
											"source": 33
										},
										{
											"begin": 1078,
											"end": 1096,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 1058,
											"end": 1097,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "256"
										},
										{
											"begin": 1058,
											"end": 1097,
											"name": "JUMP",
											"source": 33,
											"value": "[in]"
										},
										{
											"begin": 1058,
											"end": 1097,
											"name": "tag",
											"source": 33,
											"value": "270"
										},
										{
											"begin": 1058,
											"end": 1097,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 1048,
											"end": 1097,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 1048,
											"end": 1097,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 1149,
											"end": 1151,
											"name": "PUSH",
											"source": 33,
											"value": "60"
										},
										{
											"begin": 1138,
											"end": 1147,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 1134,
											"end": 1152,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 1121,
											"end": 1153,
											"name": "CALLDATALOAD",
											"source": 33
										},
										{
											"begin": 1162,
											"end": 1197,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "271"
										},
										{
											"begin": 1189,
											"end": 1196,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 1162,
											"end": 1197,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "265"
										},
										{
											"begin": 1162,
											"end": 1197,
											"name": "JUMP",
											"source": 33,
											"value": "[in]"
										},
										{
											"begin": 1162,
											"end": 1197,
											"name": "tag",
											"source": 33,
											"value": "271"
										},
										{
											"begin": 1162,
											"end": 1197,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 729,
											"end": 1229,
											"name": "SWAP4",
											"source": 33
										},
										{
											"begin": 729,
											"end": 1229,
											"name": "SWAP7",
											"source": 33
										},
										{
											"begin": 729,
											"end": 1229,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": 729,
											"end": 1229,
											"name": "SWAP6",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 729,
											"end": 1229,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 729,
											"end": 1229,
											"name": "SWAP4",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 729,
											"end": 1229,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										},
										{
											"begin": 1234,
											"end": 1840,
											"name": "tag",
											"source": 33,
											"value": "27"
										},
										{
											"begin": 1234,
											"end": 1840,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 1234,
											"end": 1840,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 1234,
											"end": 1840,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 1234,
											"end": 1840,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 1234,
											"end": 1840,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 1234,
											"end": 1840,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 1234,
											"end": 1840,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 1429,
											"end": 1432,
											"name": "PUSH",
											"source": 33,
											"value": "C0"
										},
										{
											"begin": 1417,
											"end": 1426,
											"name": "DUP8",
											"source": 33
										},
										{
											"begin": 1408,
											"end": 1415,
											"name": "DUP10",
											"source": 33
										},
										{
											"begin": 1404,
											"end": 1427,
											"name": "SUB",
											"source": 33
										},
										{
											"begin": 1400,
											"end": 1433,
											"name": "SLT",
											"source": 33
										},
										{
											"begin": 1397,
											"end": 1399,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 1397,
											"end": 1399,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "273"
										},
										{
											"begin": 1397,
											"end": 1399,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 1451,
											"end": 1457,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 1443,
											"end": 1449,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 1436,
											"end": 1458,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 1397,
											"end": 1399,
											"name": "tag",
											"source": 33,
											"value": "273"
										},
										{
											"begin": 1397,
											"end": 1399,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 1495,
											"end": 1504,
											"name": "DUP7",
											"source": 33
										},
										{
											"begin": 1482,
											"end": 1505,
											"name": "CALLDATALOAD",
											"source": 33
										},
										{
											"begin": 1514,
											"end": 1547,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "274"
										},
										{
											"begin": 1541,
											"end": 1546,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 1514,
											"end": 1547,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "265"
										},
										{
											"begin": 1514,
											"end": 1547,
											"name": "JUMP",
											"source": 33,
											"value": "[in]"
										},
										{
											"begin": 1514,
											"end": 1547,
											"name": "tag",
											"source": 33,
											"value": "274"
										},
										{
											"begin": 1514,
											"end": 1547,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 1566,
											"end": 1571,
											"name": "SWAP6",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1618,
											"end": 1620,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 1603,
											"end": 1621,
											"name": "DUP8",
											"source": 33
										},
										{
											"begin": 1603,
											"end": 1621,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 1590,
											"end": 1622,
											"name": "CALLDATALOAD",
											"source": 33
										},
										{
											"begin": 1590,
											"end": 1622,
											"name": "SWAP5",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1669,
											"end": 1671,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 1654,
											"end": 1672,
											"name": "DUP8",
											"source": 33
										},
										{
											"begin": 1654,
											"end": 1672,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 1641,
											"end": 1673,
											"name": "CALLDATALOAD",
											"source": 33
										},
										{
											"begin": 1641,
											"end": 1673,
											"name": "SWAP4",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1692,
											"end": 1730,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "275"
										},
										{
											"begin": 1726,
											"end": 1728,
											"name": "PUSH",
											"source": 33,
											"value": "60"
										},
										{
											"begin": 1711,
											"end": 1729,
											"name": "DUP9",
											"source": 33
										},
										{
											"begin": 1711,
											"end": 1729,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 1692,
											"end": 1730,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "259"
										},
										{
											"begin": 1692,
											"end": 1730,
											"name": "JUMP",
											"source": 33,
											"value": "[in]"
										},
										{
											"begin": 1692,
											"end": 1730,
											"name": "tag",
											"source": 33,
											"value": "275"
										},
										{
											"begin": 1692,
											"end": 1730,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 1682,
											"end": 1730,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": 1682,
											"end": 1730,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 1777,
											"end": 1780,
											"name": "PUSH",
											"source": 33,
											"value": "80"
										},
										{
											"begin": 1766,
											"end": 1775,
											"name": "DUP8",
											"source": 33
										},
										{
											"begin": 1762,
											"end": 1781,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 1749,
											"end": 1782,
											"name": "CALLDATALOAD",
											"source": 33
										},
										{
											"begin": 1739,
											"end": 1782,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 1739,
											"end": 1782,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 1829,
											"end": 1832,
											"name": "PUSH",
											"source": 33,
											"value": "A0"
										},
										{
											"begin": 1818,
											"end": 1827,
											"name": "DUP8",
											"source": 33
										},
										{
											"begin": 1814,
											"end": 1833,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 1801,
											"end": 1834,
											"name": "CALLDATALOAD",
											"source": 33
										},
										{
											"begin": 1791,
											"end": 1834,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 1791,
											"end": 1834,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 1387,
											"end": 1840,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": 1387,
											"end": 1840,
											"name": "SWAP6",
											"source": 33
										},
										{
											"begin": 1387,
											"end": 1840,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 1387,
											"end": 1840,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": 1387,
											"end": 1840,
											"name": "SWAP6",
											"source": 33
										},
										{
											"begin": 1387,
											"end": 1840,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 1387,
											"end": 1840,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": 1387,
											"end": 1840,
											"name": "SWAP6",
											"source": 33
										},
										{
											"begin": 1387,
											"end": 1840,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										},
										{
											"begin": 1845,
											"end": 2522,
											"name": "tag",
											"source": 33,
											"value": "38"
										},
										{
											"begin": 1845,
											"end": 2522,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 1845,
											"end": 2522,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 1845,
											"end": 2522,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 2003,
											"end": 2005,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 1991,
											"end": 2000,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 1982,
											"end": 1989,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 1978,
											"end": 2001,
											"name": "SUB",
											"source": 33
										},
										{
											"begin": 1974,
											"end": 2006,
											"name": "SLT",
											"source": 33
										},
										{
											"begin": 1971,
											"end": 1973,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 1971,
											"end": 1973,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "277"
										},
										{
											"begin": 1971,
											"end": 1973,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 2024,
											"end": 2030,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 2016,
											"end": 2022,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 2009,
											"end": 2031,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 1971,
											"end": 1973,
											"name": "tag",
											"source": 33,
											"value": "277"
										},
										{
											"begin": 1971,
											"end": 1973,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 2069,
											"end": 2078,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 2056,
											"end": 2079,
											"name": "CALLDATALOAD",
											"source": 33
										},
										{
											"begin": 2098,
											"end": 2116,
											"name": "PUSH",
											"source": 33,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2139,
											"end": 2141,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 2131,
											"end": 2137,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 2128,
											"end": 2142,
											"name": "GT",
											"source": 33
										},
										{
											"begin": 2125,
											"end": 2127,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 2125,
											"end": 2127,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "278"
										},
										{
											"begin": 2125,
											"end": 2127,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 2160,
											"end": 2166,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 2152,
											"end": 2158,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 2145,
											"end": 2167,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 2125,
											"end": 2127,
											"name": "tag",
											"source": 33,
											"value": "278"
										},
										{
											"begin": 2125,
											"end": 2127,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 2203,
											"end": 2209,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 2192,
											"end": 2201,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 2188,
											"end": 2210,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 2178,
											"end": 2210,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 2178,
											"end": 2210,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 2248,
											"end": 2255,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 2241,
											"end": 2245,
											"name": "PUSH",
											"source": 33,
											"value": "1F"
										},
										{
											"begin": 2237,
											"end": 2239,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 2233,
											"end": 2246,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 2229,
											"end": 2256,
											"name": "SLT",
											"source": 33
										},
										{
											"begin": 2219,
											"end": 2221,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "279"
										},
										{
											"begin": 2219,
											"end": 2221,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 2275,
											"end": 2281,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 2267,
											"end": 2273,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 2260,
											"end": 2282,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 2219,
											"end": 2221,
											"name": "tag",
											"source": 33,
											"value": "279"
										},
										{
											"begin": 2219,
											"end": 2221,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 2320,
											"end": 2322,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 2307,
											"end": 2323,
											"name": "CALLDATALOAD",
											"source": 33
										},
										{
											"begin": 2346,
											"end": 2348,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 2338,
											"end": 2344,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 2335,
											"end": 2349,
											"name": "GT",
											"source": 33
										},
										{
											"begin": 2332,
											"end": 2334,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 2332,
											"end": 2334,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "280"
										},
										{
											"begin": 2332,
											"end": 2334,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 2367,
											"end": 2373,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 2359,
											"end": 2365,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 2352,
											"end": 2374,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 2332,
											"end": 2334,
											"name": "tag",
											"source": 33,
											"value": "280"
										},
										{
											"begin": 2332,
											"end": 2334,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 2426,
											"end": 2433,
											"name": "DUP7",
											"source": 33
										},
										{
											"begin": 2421,
											"end": 2423,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 2415,
											"end": 2417,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 2407,
											"end": 2413,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 2403,
											"end": 2418,
											"name": "MUL",
											"source": 33
										},
										{
											"begin": 2399,
											"end": 2401,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 2395,
											"end": 2419,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 2391,
											"end": 2424,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 2388,
											"end": 2434,
											"name": "GT",
											"source": 33
										},
										{
											"begin": 2385,
											"end": 2387,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 2385,
											"end": 2387,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "281"
										},
										{
											"begin": 2385,
											"end": 2387,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 2452,
											"end": 2458,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 2444,
											"end": 2450,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 2437,
											"end": 2459,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 2385,
											"end": 2387,
											"name": "tag",
											"source": 33,
											"value": "281"
										},
										{
											"begin": 2385,
											"end": 2387,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 2488,
											"end": 2490,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 2480,
											"end": 2491,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": 2480,
											"end": 2491,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 2480,
											"end": 2491,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": 2480,
											"end": 2491,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 2480,
											"end": 2491,
											"name": "SWAP7",
											"source": 33
										},
										{
											"begin": 2510,
											"end": 2516,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 2510,
											"end": 2516,
											"name": "SWAP6",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1961,
											"end": 2522,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 1961,
											"end": 2522,
											"name": "SWAP4",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1961,
											"end": 2522,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										},
										{
											"begin": 2527,
											"end": 2780,
											"name": "tag",
											"source": 33,
											"value": "184"
										},
										{
											"begin": 2527,
											"end": 2780,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 2527,
											"end": 2780,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 2636,
											"end": 2638,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 2624,
											"end": 2633,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 2615,
											"end": 2622,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 2611,
											"end": 2634,
											"name": "SUB",
											"source": 33
										},
										{
											"begin": 2607,
											"end": 2639,
											"name": "SLT",
											"source": 33
										},
										{
											"begin": 2604,
											"end": 2606,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 2604,
											"end": 2606,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "283"
										},
										{
											"begin": 2604,
											"end": 2606,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 2657,
											"end": 2663,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 2649,
											"end": 2655,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 2642,
											"end": 2664,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 2604,
											"end": 2606,
											"name": "tag",
											"source": 33,
											"value": "283"
										},
										{
											"begin": 2604,
											"end": 2606,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 2701,
											"end": 2710,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 2688,
											"end": 2711,
											"name": "CALLDATALOAD",
											"source": 33
										},
										{
											"begin": 2720,
											"end": 2750,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "264"
										},
										{
											"begin": 2744,
											"end": 2749,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 2720,
											"end": 2750,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "285"
										},
										{
											"begin": 2720,
											"end": 2750,
											"name": "JUMP",
											"source": 33,
											"value": "[in]"
										},
										{
											"begin": 2785,
											"end": 3042,
											"name": "tag",
											"source": 33,
											"value": "143"
										},
										{
											"begin": 2785,
											"end": 3042,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 2785,
											"end": 3042,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 2905,
											"end": 2907,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 2893,
											"end": 2902,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 2884,
											"end": 2891,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 2880,
											"end": 2903,
											"name": "SUB",
											"source": 33
										},
										{
											"begin": 2876,
											"end": 2908,
											"name": "SLT",
											"source": 33
										},
										{
											"begin": 2873,
											"end": 2875,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 2873,
											"end": 2875,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "287"
										},
										{
											"begin": 2873,
											"end": 2875,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 2926,
											"end": 2932,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 2918,
											"end": 2924,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 2911,
											"end": 2933,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 2873,
											"end": 2875,
											"name": "tag",
											"source": 33,
											"value": "287"
										},
										{
											"begin": 2873,
											"end": 2875,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 2963,
											"end": 2972,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 2957,
											"end": 2973,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 2982,
											"end": 3012,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "264"
										},
										{
											"begin": 3006,
											"end": 3011,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 2982,
											"end": 3012,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "285"
										},
										{
											"begin": 2982,
											"end": 3012,
											"name": "JUMP",
											"source": 33,
											"value": "[in]"
										},
										{
											"begin": 3047,
											"end": 3340,
											"name": "tag",
											"source": 33,
											"value": "169"
										},
										{
											"begin": 3047,
											"end": 3340,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 3047,
											"end": 3340,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 3157,
											"end": 3159,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 3145,
											"end": 3154,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 3136,
											"end": 3143,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 3132,
											"end": 3155,
											"name": "SUB",
											"source": 33
										},
										{
											"begin": 3128,
											"end": 3160,
											"name": "SLT",
											"source": 33
										},
										{
											"begin": 3125,
											"end": 3127,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 3125,
											"end": 3127,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "290"
										},
										{
											"begin": 3125,
											"end": 3127,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 3178,
											"end": 3184,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 3170,
											"end": 3176,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 3163,
											"end": 3185,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 3125,
											"end": 3127,
											"name": "tag",
											"source": 33,
											"value": "290"
										},
										{
											"begin": 3125,
											"end": 3127,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 3222,
											"end": 3231,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 3209,
											"end": 3232,
											"name": "CALLDATALOAD",
											"source": 33
										},
										{
											"begin": 3275,
											"end": 3280,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 3272,
											"end": 3273,
											"name": "PUSH",
											"source": 33,
											"value": "2"
										},
										{
											"begin": 3261,
											"end": 3281,
											"name": "SIGNEXTEND",
											"source": 33
										},
										{
											"begin": 3254,
											"end": 3259,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 3251,
											"end": 3282,
											"name": "EQ",
											"source": 33
										},
										{
											"begin": 3241,
											"end": 3243,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "264"
										},
										{
											"begin": 3241,
											"end": 3243,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 3301,
											"end": 3307,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 3293,
											"end": 3299,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 3286,
											"end": 3308,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 3345,
											"end": 4221,
											"name": "tag",
											"source": 33,
											"value": "113"
										},
										{
											"begin": 3345,
											"end": 4221,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 3345,
											"end": 4221,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 3478,
											"end": 3480,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 3466,
											"end": 3475,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 3457,
											"end": 3464,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 3453,
											"end": 3476,
											"name": "SUB",
											"source": 33
										},
										{
											"begin": 3449,
											"end": 3481,
											"name": "SLT",
											"source": 33
										},
										{
											"begin": 3446,
											"end": 3448,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 3446,
											"end": 3448,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "293"
										},
										{
											"begin": 3446,
											"end": 3448,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 3499,
											"end": 3505,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 3491,
											"end": 3497,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 3484,
											"end": 3506,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 3446,
											"end": 3448,
											"name": "tag",
											"source": 33,
											"value": "293"
										},
										{
											"begin": 3446,
											"end": 3448,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 3537,
											"end": 3546,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 3531,
											"end": 3547,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 3566,
											"end": 3584,
											"name": "PUSH",
											"source": 33,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3607,
											"end": 3609,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 3599,
											"end": 3605,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 3596,
											"end": 3610,
											"name": "GT",
											"source": 33
										},
										{
											"begin": 3593,
											"end": 3595,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 3593,
											"end": 3595,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "294"
										},
										{
											"begin": 3593,
											"end": 3595,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 3628,
											"end": 3634,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 3620,
											"end": 3626,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 3613,
											"end": 3635,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 3593,
											"end": 3595,
											"name": "tag",
											"source": 33,
											"value": "294"
										},
										{
											"begin": 3593,
											"end": 3595,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 3671,
											"end": 3677,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 3660,
											"end": 3669,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 3656,
											"end": 3678,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 3646,
											"end": 3678,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 3646,
											"end": 3678,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 3716,
											"end": 3723,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 3709,
											"end": 3713,
											"name": "PUSH",
											"source": 33,
											"value": "1F"
										},
										{
											"begin": 3705,
											"end": 3707,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 3701,
											"end": 3714,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 3697,
											"end": 3724,
											"name": "SLT",
											"source": 33
										},
										{
											"begin": 3687,
											"end": 3689,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "295"
										},
										{
											"begin": 3687,
											"end": 3689,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 3743,
											"end": 3749,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 3735,
											"end": 3741,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 3728,
											"end": 3750,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 3687,
											"end": 3689,
											"name": "tag",
											"source": 33,
											"value": "295"
										},
										{
											"begin": 3687,
											"end": 3689,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 3777,
											"end": 3779,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 3771,
											"end": 3780,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 3799,
											"end": 3801,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 3795,
											"end": 3797,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 3792,
											"end": 3802,
											"name": "GT",
											"source": 33
										},
										{
											"begin": 3789,
											"end": 3791,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 3789,
											"end": 3791,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "296"
										},
										{
											"begin": 3789,
											"end": 3791,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 3805,
											"end": 3814,
											"name": "INVALID",
											"source": 33
										},
										{
											"begin": 3789,
											"end": 3791,
											"name": "tag",
											"source": 33,
											"value": "296"
										},
										{
											"begin": 3789,
											"end": 3791,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 3845,
											"end": 3847,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 3839,
											"end": 3848,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 3914,
											"end": 3916,
											"name": "PUSH",
											"source": 33,
											"value": "1F"
										},
										{
											"begin": 3895,
											"end": 3908,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 3895,
											"end": 3908,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3891,
											"end": 3918,
											"name": "AND",
											"source": 33
										},
										{
											"begin": 3879,
											"end": 3919,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 3879,
											"end": 3919,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 3921,
											"end": 3923,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 3875,
											"end": 3924,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 3939,
											"end": 3957,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 3939,
											"end": 3957,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 3939,
											"end": 3957,
											"name": "GT",
											"source": 33
										},
										{
											"begin": 3959,
											"end": 3981,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 3959,
											"end": 3981,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 3959,
											"end": 3981,
											"name": "LT",
											"source": 33
										},
										{
											"begin": 3936,
											"end": 3982,
											"name": "OR",
											"source": 33
										},
										{
											"begin": 3933,
											"end": 3935,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 3933,
											"end": 3935,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "297"
										},
										{
											"begin": 3933,
											"end": 3935,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 3985,
											"end": 3994,
											"name": "INVALID",
											"source": 33
										},
										{
											"begin": 3933,
											"end": 3935,
											"name": "tag",
											"source": 33,
											"value": "297"
										},
										{
											"begin": 3933,
											"end": 3935,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 4012,
											"end": 4014,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 4005,
											"end": 4027,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 4036,
											"end": 4054,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 4036,
											"end": 4054,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 4036,
											"end": 4054,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 4073,
											"end": 4084,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 4073,
											"end": 4084,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 4073,
											"end": 4084,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 4086,
											"end": 4088,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 4069,
											"end": 4089,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 4066,
											"end": 4099,
											"name": "DUP8",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "LT",
											"source": -1
										},
										{
											"begin": 4063,
											"end": 4065,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 4063,
											"end": 4065,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "298"
										},
										{
											"begin": 4063,
											"end": 4065,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 4117,
											"end": 4123,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 4109,
											"end": 4115,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 4102,
											"end": 4124,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 4063,
											"end": 4065,
											"name": "tag",
											"source": 33,
											"value": "298"
										},
										{
											"begin": 4063,
											"end": 4065,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 4135,
											"end": 4190,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "299"
										},
										{
											"begin": 4187,
											"end": 4189,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 4182,
											"end": 4184,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 4174,
											"end": 4180,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 4170,
											"end": 4185,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 4165,
											"end": 4167,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 4161,
											"end": 4163,
											"name": "DUP8",
											"source": 33
										},
										{
											"begin": 4157,
											"end": 4168,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 4135,
											"end": 4190,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "300"
										},
										{
											"begin": 4135,
											"end": 4190,
											"name": "JUMP",
											"source": 33,
											"value": "[in]"
										},
										{
											"begin": 4135,
											"end": 4190,
											"name": "tag",
											"source": 33,
											"value": "299"
										},
										{
											"begin": 4135,
											"end": 4190,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 4209,
											"end": 4215,
											"name": "SWAP7",
											"source": 33
										},
										{
											"begin": 3436,
											"end": 4221,
											"name": "SWAP6",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3436,
											"end": 4221,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										},
										{
											"begin": 4226,
											"end": 4436,
											"name": "tag",
											"source": 33,
											"value": "56"
										},
										{
											"begin": 4226,
											"end": 4436,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 4226,
											"end": 4436,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 4371,
											"end": 4374,
											"name": "PUSH",
											"source": 33,
											"value": "1A0"
										},
										{
											"begin": 4359,
											"end": 4368,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 4350,
											"end": 4357,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 4346,
											"end": 4369,
											"name": "SUB",
											"source": 33
										},
										{
											"begin": 4342,
											"end": 4375,
											"name": "SLT",
											"source": 33
										},
										{
											"begin": 4339,
											"end": 4341,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 4339,
											"end": 4341,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "302"
										},
										{
											"begin": 4339,
											"end": 4341,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 4393,
											"end": 4399,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 4385,
											"end": 4391,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 4378,
											"end": 4400,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 4339,
											"end": 4341,
											"name": "tag",
											"source": 33,
											"value": "302"
										},
										{
											"begin": 4339,
											"end": 4341,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4421,
											"end": 4430,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 4329,
											"end": 4436,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4329,
											"end": 4436,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										},
										{
											"begin": 4441,
											"end": 4637,
											"name": "tag",
											"source": 33,
											"value": "167"
										},
										{
											"begin": 4441,
											"end": 4637,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 4441,
											"end": 4637,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 4552,
											"end": 4554,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 4540,
											"end": 4549,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 4531,
											"end": 4538,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 4527,
											"end": 4550,
											"name": "SUB",
											"source": 33
										},
										{
											"begin": 4523,
											"end": 4555,
											"name": "SLT",
											"source": 33
										},
										{
											"begin": 4520,
											"end": 4522,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 4520,
											"end": 4522,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "304"
										},
										{
											"begin": 4520,
											"end": 4522,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 4573,
											"end": 4579,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 4565,
											"end": 4571,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 4558,
											"end": 4580,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 4520,
											"end": 4522,
											"name": "tag",
											"source": 33,
											"value": "304"
										},
										{
											"begin": 4520,
											"end": 4522,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 4601,
											"end": 4631,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "264"
										},
										{
											"begin": 4621,
											"end": 4630,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 4601,
											"end": 4631,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "256"
										},
										{
											"begin": 4601,
											"end": 4631,
											"name": "JUMP",
											"source": 33,
											"value": "[in]"
										},
										{
											"begin": 4642,
											"end": 5151,
											"name": "tag",
											"source": 33,
											"value": "178"
										},
										{
											"begin": 4642,
											"end": 5151,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 4642,
											"end": 5151,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 4642,
											"end": 5151,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 4642,
											"end": 5151,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 4642,
											"end": 5151,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 4816,
											"end": 4819,
											"name": "PUSH",
											"source": 33,
											"value": "80"
										},
										{
											"begin": 4804,
											"end": 4813,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 4795,
											"end": 4802,
											"name": "DUP8",
											"source": 33
										},
										{
											"begin": 4791,
											"end": 4814,
											"name": "SUB",
											"source": 33
										},
										{
											"begin": 4787,
											"end": 4820,
											"name": "SLT",
											"source": 33
										},
										{
											"begin": 4784,
											"end": 4786,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 4784,
											"end": 4786,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "307"
										},
										{
											"begin": 4784,
											"end": 4786,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 4838,
											"end": 4844,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 4830,
											"end": 4836,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 4823,
											"end": 4845,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 4784,
											"end": 4786,
											"name": "tag",
											"source": 33,
											"value": "307"
										},
										{
											"begin": 4784,
											"end": 4786,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 4872,
											"end": 4881,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 4866,
											"end": 4882,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 4856,
											"end": 4882,
											"name": "SWAP4",
											"source": 33
										},
										{
											"begin": 4856,
											"end": 4882,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 4925,
											"end": 4927,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 4914,
											"end": 4923,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 4910,
											"end": 4928,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 4904,
											"end": 4929,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 4969,
											"end": 5003,
											"name": "PUSH",
											"source": 33,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4962,
											"end": 4967,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 4958,
											"end": 5004,
											"name": "AND",
											"source": 33
										},
										{
											"begin": 4951,
											"end": 4956,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 4948,
											"end": 5005,
											"name": "EQ",
											"source": 33
										},
										{
											"begin": 4938,
											"end": 4940,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "308"
										},
										{
											"begin": 4938,
											"end": 4940,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 5024,
											"end": 5030,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 5016,
											"end": 5022,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 5009,
											"end": 5031,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 4938,
											"end": 4940,
											"name": "tag",
											"source": 33,
											"value": "308"
										},
										{
											"begin": 4938,
											"end": 4940,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 5097,
											"end": 5099,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 5082,
											"end": 5100,
											"name": "DUP7",
											"source": 33
										},
										{
											"begin": 5082,
											"end": 5100,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 5076,
											"end": 5101,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 5141,
											"end": 5143,
											"name": "PUSH",
											"source": 33,
											"value": "60"
										},
										{
											"begin": 5126,
											"end": 5144,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 5126,
											"end": 5144,
											"name": "SWAP7",
											"source": 33
										},
										{
											"begin": 5126,
											"end": 5144,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 5120,
											"end": 5145,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 4774,
											"end": 5151,
											"name": "SWAP5",
											"source": 33
										},
										{
											"begin": 4774,
											"end": 5151,
											"name": "SWAP8",
											"source": 33
										},
										{
											"begin": 5052,
											"end": 5057,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 5052,
											"end": 5057,
											"name": "SWAP7",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4774,
											"end": 5151,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4774,
											"end": 5151,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										},
										{
											"begin": 5156,
											"end": 5411,
											"name": "tag",
											"source": 33,
											"value": "151"
										},
										{
											"begin": 5156,
											"end": 5411,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 5156,
											"end": 5411,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 5156,
											"end": 5411,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 5296,
											"end": 5298,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 5284,
											"end": 5293,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 5275,
											"end": 5282,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 5271,
											"end": 5294,
											"name": "SUB",
											"source": 33
										},
										{
											"begin": 5267,
											"end": 5299,
											"name": "SLT",
											"source": 33
										},
										{
											"begin": 5264,
											"end": 5266,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 5264,
											"end": 5266,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "310"
										},
										{
											"begin": 5264,
											"end": 5266,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 5317,
											"end": 5323,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 5309,
											"end": 5315,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 5302,
											"end": 5324,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 5264,
											"end": 5266,
											"name": "tag",
											"source": 33,
											"value": "310"
										},
										{
											"begin": 5264,
											"end": 5266,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5345,
											"end": 5361,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 5345,
											"end": 5361,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 5401,
											"end": 5403,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 5386,
											"end": 5404,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 5386,
											"end": 5404,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 5386,
											"end": 5404,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 5380,
											"end": 5405,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 5345,
											"end": 5361,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 5345,
											"end": 5361,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": 5380,
											"end": 5405,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 5380,
											"end": 5405,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5254,
											"end": 5411,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										},
										{
											"begin": 5416,
											"end": 5610,
											"name": "tag",
											"source": 33,
											"value": "126"
										},
										{
											"begin": 5416,
											"end": 5610,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 5416,
											"end": 5610,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 5526,
											"end": 5528,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 5514,
											"end": 5523,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 5505,
											"end": 5512,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 5501,
											"end": 5524,
											"name": "SUB",
											"source": 33
										},
										{
											"begin": 5497,
											"end": 5529,
											"name": "SLT",
											"source": 33
										},
										{
											"begin": 5494,
											"end": 5496,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 5494,
											"end": 5496,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "312"
										},
										{
											"begin": 5494,
											"end": 5496,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 5547,
											"end": 5553,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 5539,
											"end": 5545,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 5532,
											"end": 5554,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 5494,
											"end": 5496,
											"name": "tag",
											"source": 33,
											"value": "312"
										},
										{
											"begin": 5494,
											"end": 5496,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 5575,
											"end": 5604,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "264"
										},
										{
											"begin": 5594,
											"end": 5603,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 5575,
											"end": 5604,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "259"
										},
										{
											"begin": 5575,
											"end": 5604,
											"name": "JUMP",
											"source": 33,
											"value": "[in]"
										},
										{
											"begin": 5615,
											"end": 5721,
											"name": "tag",
											"source": 33,
											"value": "314"
										},
										{
											"begin": 5615,
											"end": 5721,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5683,
											"end": 5714,
											"name": "AND",
											"source": 33
										},
										{
											"begin": 5671,
											"end": 5715,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 5671,
											"end": 5715,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 5661,
											"end": 5721,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										},
										{
											"begin": 5726,
											"end": 5985,
											"name": "tag",
											"source": 33,
											"value": "316"
										},
										{
											"begin": 5726,
											"end": 5985,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 5726,
											"end": 5985,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 5807,
											"end": 5812,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 5801,
											"end": 5813,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 5834,
											"end": 5840,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 5829,
											"end": 5832,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 5822,
											"end": 5841,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 5850,
											"end": 5913,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "318"
										},
										{
											"begin": 5906,
											"end": 5912,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 5899,
											"end": 5903,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 5894,
											"end": 5897,
											"name": "DUP7",
											"source": 33
										},
										{
											"begin": 5890,
											"end": 5904,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 5883,
											"end": 5887,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 5876,
											"end": 5881,
											"name": "DUP7",
											"source": 33
										},
										{
											"begin": 5872,
											"end": 5888,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 5850,
											"end": 5913,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "300"
										},
										{
											"begin": 5850,
											"end": 5913,
											"name": "JUMP",
											"source": 33,
											"value": "[in]"
										},
										{
											"begin": 5850,
											"end": 5913,
											"name": "tag",
											"source": 33,
											"value": "318"
										},
										{
											"begin": 5850,
											"end": 5913,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 5967,
											"end": 5969,
											"name": "PUSH",
											"source": 33,
											"value": "1F"
										},
										{
											"begin": 5946,
											"end": 5961,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 5942,
											"end": 5971,
											"name": "AND",
											"source": 33
										},
										{
											"begin": 5933,
											"end": 5972,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": 5933,
											"end": 5972,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 5933,
											"end": 5972,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": 5933,
											"end": 5972,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 5974,
											"end": 5978,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 5929,
											"end": 5979,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 5929,
											"end": 5979,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": 5777,
											"end": 5985,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5777,
											"end": 5985,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										},
										{
											"begin": 5990,
											"end": 6083,
											"name": "tag",
											"source": 33,
											"value": "319"
										},
										{
											"begin": 5990,
											"end": 6083,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 6067,
											"end": 6068,
											"name": "PUSH",
											"source": 33,
											"value": "2"
										},
										{
											"begin": 6056,
											"end": 6076,
											"name": "SIGNEXTEND",
											"source": 33
										},
										{
											"begin": 6044,
											"end": 6077,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 6044,
											"end": 6077,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 6034,
											"end": 6083,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										},
										{
											"begin": 6088,
											"end": 6182,
											"name": "tag",
											"source": 33,
											"value": "321"
										},
										{
											"begin": 6088,
											"end": 6182,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 6166,
											"end": 6174,
											"name": "PUSH",
											"source": 33,
											"value": "FFFFFF"
										},
										{
											"begin": 6155,
											"end": 6175,
											"name": "AND",
											"source": 33
										},
										{
											"begin": 6143,
											"end": 6176,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 6143,
											"end": 6176,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 6133,
											"end": 6182,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										},
										{
											"begin": 6187,
											"end": 6460,
											"name": "tag",
											"source": 33,
											"value": "106"
										},
										{
											"begin": 6187,
											"end": 6460,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 6187,
											"end": 6460,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 6370,
											"end": 6376,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 6362,
											"end": 6368,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 6357,
											"end": 6360,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 6344,
											"end": 6377,
											"name": "CALLDATACOPY",
											"source": 33
										},
										{
											"begin": 6396,
											"end": 6412,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 6396,
											"end": 6412,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 6421,
											"end": 6436,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 6421,
											"end": 6436,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 6421,
											"end": 6436,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 6396,
											"end": 6412,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 6334,
											"end": 6460,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6334,
											"end": 6460,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										},
										{
											"begin": 6465,
											"end": 6668,
											"name": "tag",
											"source": 33,
											"value": "24"
										},
										{
											"begin": 6465,
											"end": 6668,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6629,
											"end": 6661,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 6629,
											"end": 6661,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 6629,
											"end": 6661,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 6629,
											"end": 6661,
											"name": "AND",
											"source": 33
										},
										{
											"begin": 6611,
											"end": 6662,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 6611,
											"end": 6662,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 6599,
											"end": 6601,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 6584,
											"end": 6602,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 6584,
											"end": 6602,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 6566,
											"end": 6668,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										},
										{
											"begin": 6889,
											"end": 7272,
											"name": "tag",
											"source": 33,
											"value": "138"
										},
										{
											"begin": 6889,
											"end": 7272,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7155,
											"end": 7170,
											"name": "SWAP4",
											"source": 33
										},
										{
											"begin": 7155,
											"end": 7170,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 7155,
											"end": 7170,
											"name": "AND",
											"source": 33
										},
										{
											"begin": 7137,
											"end": 7171,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 7137,
											"end": 7171,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 7207,
											"end": 7222,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 7207,
											"end": 7222,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 7207,
											"end": 7222,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": 7207,
											"end": 7222,
											"name": "AND",
											"source": 33
										},
										{
											"begin": 7202,
											"end": 7204,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 7187,
											"end": 7205,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 7187,
											"end": 7205,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 7180,
											"end": 7223,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 7254,
											"end": 7256,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 7239,
											"end": 7257,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 7239,
											"end": 7257,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 7232,
											"end": 7266,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 7232,
											"end": 7266,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 7232,
											"end": 7266,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 7232,
											"end": 7266,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 7087,
											"end": 7089,
											"name": "PUSH",
											"source": 33,
											"value": "60"
										},
										{
											"begin": 7072,
											"end": 7090,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 7072,
											"end": 7090,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 7054,
											"end": 7272,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										},
										{
											"begin": 7277,
											"end": 8083,
											"name": "tag",
											"source": 33,
											"value": "41"
										},
										{
											"begin": 7277,
											"end": 8083,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 7277,
											"end": 8083,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 7466,
											"end": 7468,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 7506,
											"end": 7508,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 7495,
											"end": 7504,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 7491,
											"end": 7509,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 7536,
											"end": 7538,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 7525,
											"end": 7534,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 7518,
											"end": 7539,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 7559,
											"end": 7565,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 7594,
											"end": 7600,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 7588,
											"end": 7601,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 7625,
											"end": 7631,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 7617,
											"end": 7623,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 7610,
											"end": 7632,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 7663,
											"end": 7665,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 7652,
											"end": 7661,
											"name": "DUP7",
											"source": 33
										},
										{
											"begin": 7648,
											"end": 7666,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 7641,
											"end": 7666,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 7641,
											"end": 7666,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 7726,
											"end": 7728,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 7720,
											"end": 7722,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 7712,
											"end": 7718,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 7708,
											"end": 7723,
											"name": "MUL",
											"source": 33
										},
										{
											"begin": 7697,
											"end": 7706,
											"name": "DUP8",
											"source": 33
										},
										{
											"begin": 7693,
											"end": 7724,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 7689,
											"end": 7729,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 7675,
											"end": 7729,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": 7675,
											"end": 7729,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 7764,
											"end": 7766,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 7756,
											"end": 7762,
											"name": "DUP8",
											"source": 33
										},
										{
											"begin": 7752,
											"end": 7767,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 7785,
											"end": 7789,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 7798,
											"end": 8054,
											"name": "tag",
											"source": 33,
											"value": "328"
										},
										{
											"begin": 7798,
											"end": 8054,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 7812,
											"end": 7818,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 7809,
											"end": 7810,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 7806,
											"end": 7819,
											"name": "LT",
											"source": 33
										},
										{
											"begin": 7798,
											"end": 8054,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 7798,
											"end": 8054,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "330"
										},
										{
											"begin": 7798,
											"end": 8054,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 7905,
											"end": 7907,
											"name": "PUSH",
											"source": 33,
											"value": "3F"
										},
										{
											"begin": 7901,
											"end": 7908,
											"name": "NOT",
											"source": 33
										},
										{
											"begin": 7889,
											"end": 7898,
											"name": "DUP9",
											"source": 33
										},
										{
											"begin": 7881,
											"end": 7887,
											"name": "DUP7",
											"source": 33
										},
										{
											"begin": 7877,
											"end": 7899,
											"name": "SUB",
											"source": 33
										},
										{
											"begin": 7873,
											"end": 7909,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 7868,
											"end": 7871,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 7861,
											"end": 7910,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 7933,
											"end": 7974,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "331"
										},
										{
											"begin": 7967,
											"end": 7973,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 7958,
											"end": 7964,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 7952,
											"end": 7965,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 7933,
											"end": 7974,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "316"
										},
										{
											"begin": 7933,
											"end": 7974,
											"name": "JUMP",
											"source": 33,
											"value": "[in]"
										},
										{
											"begin": 7933,
											"end": 7974,
											"name": "tag",
											"source": 33,
											"value": "331"
										},
										{
											"begin": 7933,
											"end": 7974,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 7923,
											"end": 7974,
											"name": "SWAP5",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8032,
											"end": 8044,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": 8032,
											"end": 8044,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 8032,
											"end": 8044,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 8032,
											"end": 8044,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": 7997,
											"end": 8012,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 7997,
											"end": 8012,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 7997,
											"end": 8012,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 7997,
											"end": 8012,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 7834,
											"end": 7835,
											"name": "PUSH",
											"source": 33,
											"value": "1"
										},
										{
											"begin": 7827,
											"end": 7836,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 7798,
											"end": 8054,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "328"
										},
										{
											"begin": 7798,
											"end": 8054,
											"name": "JUMP",
											"source": 33
										},
										{
											"begin": 7798,
											"end": 8054,
											"name": "tag",
											"source": 33,
											"value": "330"
										},
										{
											"begin": 7798,
											"end": 8054,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8071,
											"end": 8077,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": 8071,
											"end": 8077,
											"name": "SWAP8",
											"source": 33
										},
										{
											"begin": 7446,
											"end": 8083,
											"name": "SWAP7",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7446,
											"end": 8083,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										},
										{
											"begin": 8088,
											"end": 8309,
											"name": "tag",
											"source": 33,
											"value": "115"
										},
										{
											"begin": 8088,
											"end": 8309,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 8088,
											"end": 8309,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 8237,
											"end": 8239,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 8226,
											"end": 8235,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 8219,
											"end": 8240,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 8257,
											"end": 8303,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "264"
										},
										{
											"begin": 8299,
											"end": 8301,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 8288,
											"end": 8297,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 8284,
											"end": 8302,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 8276,
											"end": 8282,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 8257,
											"end": 8303,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "316"
										},
										{
											"begin": 8257,
											"end": 8303,
											"name": "JUMP",
											"source": 33,
											"value": "[in]"
										},
										{
											"begin": 8314,
											"end": 8658,
											"name": "tag",
											"source": 33,
											"value": "129"
										},
										{
											"begin": 8314,
											"end": 8658,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 8516,
											"end": 8518,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 8498,
											"end": 8519,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 8498,
											"end": 8519,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 8498,
											"end": 8519,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 8555,
											"end": 8557,
											"name": "PUSH",
											"source": 33,
											"value": "14"
										},
										{
											"begin": 8535,
											"end": 8553,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 8535,
											"end": 8553,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 8535,
											"end": 8553,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 8528,
											"end": 8558,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "14195C98D95B9D1859D9481D1BDBC81CDB585B1B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "62"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8589,
											"end": 8591,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 8574,
											"end": 8592,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 8574,
											"end": 8592,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 8567,
											"end": 8617,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 8649,
											"end": 8651,
											"name": "PUSH",
											"source": 33,
											"value": "60"
										},
										{
											"begin": 8634,
											"end": 8652,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 8634,
											"end": 8652,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 8488,
											"end": 8658,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										},
										{
											"begin": 8663,
											"end": 8995,
											"name": "tag",
											"source": 33,
											"value": "18"
										},
										{
											"begin": 8663,
											"end": 8995,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 8865,
											"end": 8867,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 8847,
											"end": 8868,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 8847,
											"end": 8868,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 8847,
											"end": 8868,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 8904,
											"end": 8905,
											"name": "PUSH",
											"source": 33,
											"value": "9"
										},
										{
											"begin": 8884,
											"end": 8902,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 8884,
											"end": 8902,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 8884,
											"end": 8902,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 8877,
											"end": 8906,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E6F74205745544839"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8937,
											"end": 8939,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 8922,
											"end": 8940,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 8922,
											"end": 8940,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 8915,
											"end": 8954,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 8986,
											"end": 8988,
											"name": "PUSH",
											"source": 33,
											"value": "60"
										},
										{
											"begin": 8971,
											"end": 8989,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 8971,
											"end": 8989,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 8837,
											"end": 8995,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										},
										{
											"begin": 9000,
											"end": 9344,
											"name": "tag",
											"source": 33,
											"value": "133"
										},
										{
											"begin": 9000,
											"end": 9344,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 9202,
											"end": 9204,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 9184,
											"end": 9205,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 9184,
											"end": 9205,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 9184,
											"end": 9205,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 9241,
											"end": 9243,
											"name": "PUSH",
											"source": 33,
											"value": "14"
										},
										{
											"begin": 9221,
											"end": 9239,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 9221,
											"end": 9239,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 9221,
											"end": 9239,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 9214,
											"end": 9244,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "50657263656E7461676520746F6F206C61726765"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9275,
											"end": 9277,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 9260,
											"end": 9278,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 9260,
											"end": 9278,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 9253,
											"end": 9303,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 9335,
											"end": 9337,
											"name": "PUSH",
											"source": 33,
											"value": "60"
										},
										{
											"begin": 9320,
											"end": 9338,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 9320,
											"end": 9338,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 9174,
											"end": 9344,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										},
										{
											"begin": 9349,
											"end": 10583,
											"name": "tag",
											"source": 33,
											"value": "173"
										},
										{
											"begin": 9349,
											"end": 10583,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 9349,
											"end": 10583,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 9539,
											"end": 9542,
											"name": "PUSH",
											"source": 33,
											"value": "160"
										},
										{
											"begin": 9528,
											"end": 9537,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 9524,
											"end": 9543,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 9516,
											"end": 9543,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 9516,
											"end": 9543,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 9552,
											"end": 9598,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "338"
										},
										{
											"begin": 9588,
											"end": 9597,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 9579,
											"end": 9585,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 9573,
											"end": 9586,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 9552,
											"end": 9598,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "314"
										},
										{
											"begin": 9552,
											"end": 9598,
											"name": "JUMP",
											"source": 33,
											"value": "[in]"
										},
										{
											"begin": 9552,
											"end": 9598,
											"name": "tag",
											"source": 33,
											"value": "338"
										},
										{
											"begin": 9552,
											"end": 9598,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 9645,
											"end": 9649,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 9637,
											"end": 9643,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 9633,
											"end": 9650,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 9627,
											"end": 9651,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 9660,
											"end": 9716,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "339"
										},
										{
											"begin": 9710,
											"end": 9714,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 9699,
											"end": 9708,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 9695,
											"end": 9715,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 9681,
											"end": 9693,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 9660,
											"end": 9716,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "314"
										},
										{
											"begin": 9660,
											"end": 9716,
											"name": "JUMP",
											"source": 33,
											"value": "[in]"
										},
										{
											"begin": 9660,
											"end": 9716,
											"name": "tag",
											"source": 33,
											"value": "339"
										},
										{
											"begin": 9660,
											"end": 9716,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 9660,
											"end": 9716,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 9765,
											"end": 9769,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 9757,
											"end": 9763,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 9753,
											"end": 9770,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 9747,
											"end": 9771,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 9780,
											"end": 9837,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "340"
										},
										{
											"begin": 9831,
											"end": 9835,
											"name": "PUSH",
											"source": 33,
											"value": "40"
										},
										{
											"begin": 9820,
											"end": 9829,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 9816,
											"end": 9836,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 9800,
											"end": 9814,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 9780,
											"end": 9837,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "321"
										},
										{
											"begin": 9780,
											"end": 9837,
											"name": "JUMP",
											"source": 33,
											"value": "[in]"
										},
										{
											"begin": 9780,
											"end": 9837,
											"name": "tag",
											"source": 33,
											"value": "340"
										},
										{
											"begin": 9780,
											"end": 9837,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 9780,
											"end": 9837,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 9886,
											"end": 9890,
											"name": "PUSH",
											"source": 33,
											"value": "60"
										},
										{
											"begin": 9878,
											"end": 9884,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 9874,
											"end": 9891,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 9868,
											"end": 9892,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 9901,
											"end": 9957,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "341"
										},
										{
											"begin": 9951,
											"end": 9955,
											"name": "PUSH",
											"source": 33,
											"value": "60"
										},
										{
											"begin": 9940,
											"end": 9949,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 9936,
											"end": 9956,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 9920,
											"end": 9934,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 9901,
											"end": 9957,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "319"
										},
										{
											"begin": 9901,
											"end": 9957,
											"name": "JUMP",
											"source": 33,
											"value": "[in]"
										},
										{
											"begin": 9901,
											"end": 9957,
											"name": "tag",
											"source": 33,
											"value": "341"
										},
										{
											"begin": 9901,
											"end": 9957,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 9901,
											"end": 9957,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 10006,
											"end": 10010,
											"name": "PUSH",
											"source": 33,
											"value": "80"
										},
										{
											"begin": 9998,
											"end": 10004,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 9994,
											"end": 10011,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 9988,
											"end": 10012,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 10021,
											"end": 10077,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "342"
										},
										{
											"begin": 10071,
											"end": 10075,
											"name": "PUSH",
											"source": 33,
											"value": "80"
										},
										{
											"begin": 10060,
											"end": 10069,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 10056,
											"end": 10076,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 10040,
											"end": 10054,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 10021,
											"end": 10077,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "319"
										},
										{
											"begin": 10021,
											"end": 10077,
											"name": "JUMP",
											"source": 33,
											"value": "[in]"
										},
										{
											"begin": 10021,
											"end": 10077,
											"name": "tag",
											"source": 33,
											"value": "342"
										},
										{
											"begin": 10021,
											"end": 10077,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 10021,
											"end": 10077,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 10133,
											"end": 10137,
											"name": "PUSH",
											"source": 33,
											"value": "A0"
										},
										{
											"begin": 10125,
											"end": 10131,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 10121,
											"end": 10138,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 10115,
											"end": 10139,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 10108,
											"end": 10112,
											"name": "PUSH",
											"source": 33,
											"value": "A0"
										},
										{
											"begin": 10097,
											"end": 10106,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 10093,
											"end": 10113,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 10086,
											"end": 10140,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 10196,
											"end": 10200,
											"name": "PUSH",
											"source": 33,
											"value": "C0"
										},
										{
											"begin": 10188,
											"end": 10194,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 10184,
											"end": 10201,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 10178,
											"end": 10202,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 10171,
											"end": 10175,
											"name": "PUSH",
											"source": 33,
											"value": "C0"
										},
										{
											"begin": 10160,
											"end": 10169,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 10156,
											"end": 10176,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 10149,
											"end": 10203,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 10259,
											"end": 10263,
											"name": "PUSH",
											"source": 33,
											"value": "E0"
										},
										{
											"begin": 10251,
											"end": 10257,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 10247,
											"end": 10264,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 10241,
											"end": 10265,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 10234,
											"end": 10238,
											"name": "PUSH",
											"source": 33,
											"value": "E0"
										},
										{
											"begin": 10223,
											"end": 10232,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 10219,
											"end": 10239,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 10212,
											"end": 10266,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 10285,
											"end": 10291,
											"name": "PUSH",
											"source": 33,
											"value": "100"
										},
										{
											"begin": 10345,
											"end": 10347,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 10337,
											"end": 10343,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 10333,
											"end": 10348,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 10327,
											"end": 10349,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 10322,
											"end": 10324,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 10311,
											"end": 10320,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 10307,
											"end": 10325,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 10300,
											"end": 10350,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 10300,
											"end": 10350,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 10369,
											"end": 10375,
											"name": "PUSH",
											"source": 33,
											"value": "120"
										},
										{
											"begin": 10424,
											"end": 10426,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 10416,
											"end": 10422,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 10412,
											"end": 10427,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 10406,
											"end": 10428,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 10437,
											"end": 10493,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "343"
										},
										{
											"begin": 10489,
											"end": 10491,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 10478,
											"end": 10487,
											"name": "DUP6",
											"source": 33
										},
										{
											"begin": 10474,
											"end": 10492,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 10458,
											"end": 10472,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 10437,
											"end": 10493,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "314"
										},
										{
											"begin": 10437,
											"end": 10493,
											"name": "JUMP",
											"source": 33,
											"value": "[in]"
										},
										{
											"begin": 10437,
											"end": 10493,
											"name": "tag",
											"source": 33,
											"value": "343"
										},
										{
											"begin": 10437,
											"end": 10493,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10512,
											"end": 10518,
											"name": "PUSH",
											"source": 33,
											"value": "140"
										},
										{
											"begin": 10560,
											"end": 10575,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": 10560,
											"end": 10575,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 10560,
											"end": 10575,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 10554,
											"end": 10576,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 10534,
											"end": 10552,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": 10534,
											"end": 10552,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 10534,
											"end": 10552,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": 10534,
											"end": 10552,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 10527,
											"end": 10577,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 9506,
											"end": 10583,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 9506,
											"end": 10583,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										},
										{
											"begin": 10588,
											"end": 10765,
											"name": "tag",
											"source": 33,
											"value": "189"
										},
										{
											"begin": 10588,
											"end": 10765,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 10734,
											"end": 10759,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 10734,
											"end": 10759,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 10734,
											"end": 10759,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 10722,
											"end": 10724,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 10707,
											"end": 10725,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 10707,
											"end": 10725,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 10689,
											"end": 10765,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										},
										{
											"begin": 10770,
											"end": 11303,
											"name": "tag",
											"source": 33,
											"value": "104"
										},
										{
											"begin": 10770,
											"end": 11303,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 10770,
											"end": 11303,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 10770,
											"end": 11303,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 10913,
											"end": 10924,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 10900,
											"end": 10925,
											"name": "CALLDATALOAD",
											"source": 33
										},
										{
											"begin": 11007,
											"end": 11009,
											"name": "PUSH",
											"source": 33,
											"value": "1E"
										},
										{
											"begin": 11003,
											"end": 11010,
											"name": "NOT",
											"source": 33
										},
										{
											"begin": 10992,
											"end": 11000,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 10976,
											"end": 10990,
											"name": "CALLDATASIZE",
											"source": 33
										},
										{
											"begin": 10972,
											"end": 11001,
											"name": "SUB",
											"source": 33
										},
										{
											"begin": 10968,
											"end": 11011,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 10948,
											"end": 10966,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 10944,
											"end": 11012,
											"name": "SLT",
											"source": 33
										},
										{
											"begin": 10934,
											"end": 10936,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "346"
										},
										{
											"begin": 10934,
											"end": 10936,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 11029,
											"end": 11033,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 11023,
											"end": 11027,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 11016,
											"end": 11034,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 10934,
											"end": 10936,
											"name": "tag",
											"source": 33,
											"value": "346"
										},
										{
											"begin": 10934,
											"end": 10936,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 11059,
											"end": 11092,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 11059,
											"end": 11092,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 11111,
											"end": 11131,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 11111,
											"end": 11131,
											"name": "CALLDATALOAD",
											"source": 33
										},
										{
											"begin": 11111,
											"end": 11131,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11154,
											"end": 11172,
											"name": "PUSH",
											"source": 33,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11143,
											"end": 11173,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 11143,
											"end": 11173,
											"name": "GT",
											"source": 33
										},
										{
											"begin": 11140,
											"end": 11142,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 11140,
											"end": 11142,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "347"
										},
										{
											"begin": 11140,
											"end": 11142,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 11189,
											"end": 11193,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 11183,
											"end": 11187,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 11176,
											"end": 11194,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 11140,
											"end": 11142,
											"name": "tag",
											"source": 33,
											"value": "347"
										},
										{
											"begin": 11140,
											"end": 11142,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 11225,
											"end": 11229,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 11213,
											"end": 11230,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 11213,
											"end": 11230,
											"name": "SWAP2",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11256,
											"end": 11270,
											"name": "CALLDATASIZE",
											"source": 33
										},
										{
											"begin": 11252,
											"end": 11279,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 11252,
											"end": 11279,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 11252,
											"end": 11279,
											"name": "SUB",
											"source": 33
										},
										{
											"begin": 11242,
											"end": 11280,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 11242,
											"end": 11280,
											"name": "SGT",
											"source": 33
										},
										{
											"begin": 11239,
											"end": 11241,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 11239,
											"end": 11241,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "348"
										},
										{
											"begin": 11239,
											"end": 11241,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 11293,
											"end": 11294,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 11290,
											"end": 11291,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 11283,
											"end": 11295,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 11239,
											"end": 11241,
											"name": "tag",
											"source": 33,
											"value": "348"
										},
										{
											"begin": 11239,
											"end": 11241,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 10864,
											"end": 11303,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": 10864,
											"end": 11303,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 10864,
											"end": 11303,
											"name": "SWAP3",
											"source": 33
										},
										{
											"begin": 10864,
											"end": 11303,
											"name": "SWAP1",
											"source": 33
										},
										{
											"begin": 10864,
											"end": 11303,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 10864,
											"end": 11303,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										},
										{
											"begin": 11308,
											"end": 11566,
											"name": "tag",
											"source": 33,
											"value": "300"
										},
										{
											"begin": 11308,
											"end": 11566,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 11380,
											"end": 11381,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 11390,
											"end": 11503,
											"name": "tag",
											"source": 33,
											"value": "350"
										},
										{
											"begin": 11390,
											"end": 11503,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 11404,
											"end": 11410,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 11401,
											"end": 11402,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 11398,
											"end": 11411,
											"name": "LT",
											"source": 33
										},
										{
											"begin": 11390,
											"end": 11503,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 11390,
											"end": 11503,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "352"
										},
										{
											"begin": 11390,
											"end": 11503,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 11480,
											"end": 11491,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 11480,
											"end": 11491,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 11480,
											"end": 11491,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 11474,
											"end": 11492,
											"name": "MLOAD",
											"source": 33
										},
										{
											"begin": 11461,
											"end": 11472,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 11461,
											"end": 11472,
											"name": "DUP3",
											"source": 33
										},
										{
											"begin": 11461,
											"end": 11472,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 11454,
											"end": 11493,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 11426,
											"end": 11428,
											"name": "PUSH",
											"source": 33,
											"value": "20"
										},
										{
											"begin": 11419,
											"end": 11429,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 11390,
											"end": 11503,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "350"
										},
										{
											"begin": 11390,
											"end": 11503,
											"name": "JUMP",
											"source": 33
										},
										{
											"begin": 11390,
											"end": 11503,
											"name": "tag",
											"source": 33,
											"value": "352"
										},
										{
											"begin": 11390,
											"end": 11503,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 11521,
											"end": 11527,
											"name": "DUP4",
											"source": 33
										},
										{
											"begin": 11518,
											"end": 11519,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 11515,
											"end": 11528,
											"name": "GT",
											"source": 33
										},
										{
											"begin": 11512,
											"end": 11514,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 11512,
											"end": 11514,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "353"
										},
										{
											"begin": 11512,
											"end": 11514,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 11556,
											"end": 11557,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 11547,
											"end": 11553,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 11542,
											"end": 11545,
											"name": "DUP5",
											"source": 33
										},
										{
											"begin": 11538,
											"end": 11554,
											"name": "ADD",
											"source": 33
										},
										{
											"begin": 11531,
											"end": 11558,
											"name": "MSTORE",
											"source": 33
										},
										{
											"begin": 11512,
											"end": 11514,
											"name": "tag",
											"source": 33,
											"value": "353"
										},
										{
											"begin": 11512,
											"end": 11514,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 11512,
											"end": 11514,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 11361,
											"end": 11566,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 11361,
											"end": 11566,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 11361,
											"end": 11566,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 11361,
											"end": 11566,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										},
										{
											"begin": 11571,
											"end": 11704,
											"name": "tag",
											"source": 33,
											"value": "265"
										},
										{
											"begin": 11571,
											"end": 11704,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11648,
											"end": 11679,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 11648,
											"end": 11679,
											"name": "AND",
											"source": 33
										},
										{
											"begin": 11638,
											"end": 11680,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 11638,
											"end": 11680,
											"name": "EQ",
											"source": 33
										},
										{
											"begin": 11628,
											"end": 11630,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "355"
										},
										{
											"begin": 11628,
											"end": 11630,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 11694,
											"end": 11695,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 11691,
											"end": 11692,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 11684,
											"end": 11696,
											"name": "REVERT",
											"source": 33
										},
										{
											"begin": 11628,
											"end": 11630,
											"name": "tag",
											"source": 33,
											"value": "355"
										},
										{
											"begin": 11628,
											"end": 11630,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 11618,
											"end": 11704,
											"name": "POP",
											"source": 33
										},
										{
											"begin": 11618,
											"end": 11704,
											"name": "JUMP",
											"source": 33,
											"value": "[out]"
										},
										{
											"begin": 11709,
											"end": 11829,
											"name": "tag",
											"source": 33,
											"value": "285"
										},
										{
											"begin": 11709,
											"end": 11829,
											"name": "JUMPDEST",
											"source": 33
										},
										{
											"begin": 11797,
											"end": 11802,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 11790,
											"end": 11803,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 11783,
											"end": 11804,
											"name": "ISZERO",
											"source": 33
										},
										{
											"begin": 11776,
											"end": 11781,
											"name": "DUP2",
											"source": 33
										},
										{
											"begin": 11773,
											"end": 11805,
											"name": "EQ",
											"source": 33
										},
										{
											"begin": 11763,
											"end": 11765,
											"name": "PUSH [tag]",
											"source": 33,
											"value": "355"
										},
										{
											"begin": 11763,
											"end": 11765,
											"name": "JUMPI",
											"source": 33
										},
										{
											"begin": 11819,
											"end": 11820,
											"name": "PUSH",
											"source": 33,
											"value": "0"
										},
										{
											"begin": 11816,
											"end": 11817,
											"name": "DUP1",
											"source": 33
										},
										{
											"begin": 11809,
											"end": 11821,
											"name": "REVERT",
											"source": 33
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"WETH9()": "4aa4a4fc",
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": "13ead562",
							"factory()": "c45a0155",
							"migrate((address,uint256,uint8,address,address,uint24,int24,int24,uint256,uint256,address,uint256,bool))": "d44f2bf2",
							"multicall(bytes[])": "ac9650d8",
							"nonfungiblePositionManager()": "b44a2722",
							"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": "f3995c67",
							"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": "4659a494",
							"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": "a4a78f0c",
							"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": "c2e3140a"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH9\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nonfungiblePositionManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"createAndInitializePoolIfNecessary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityToMigrate\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"percentageToMigrate\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"refundAsETH\",\"type\":\"bool\"}],\"internalType\":\"struct IV3Migrator.MigrateParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonfungiblePositionManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitAllowed\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitAllowedIfNecessary\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitIfNecessary\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"details\":\"This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\",\"params\":{\"fee\":\"The fee amount of the v3 pool for the specified token pair\",\"sqrtPriceX96\":\"The initial square root price of the pool as a Q64.96 value\",\"token0\":\"The contract address of token0 of the pool\",\"token1\":\"The contract address of token1 of the pool\"},\"returns\":{\"pool\":\"Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\"}},\"migrate((address,uint256,uint8,address,address,uint24,int24,int24,uint256,uint256,address,uint256,bool))\":{\"details\":\"Slippage protection is enforced via `amount{0,1}Min`, which should be a discount of the expected values of the maximum amount of v3 liquidity that the v2 liquidity can get. For the special case of migrating to an out-of-range position, `amount{0,1}Min` may be set to 0, enforcing that the position remains out of range\",\"params\":{\"params\":\"The params necessary to migrate v2 liquidity, encoded as `MigrateParams` in calldata\"}},\"multicall(bytes[])\":{\"details\":\"The `msg.value` should not be trusted for any method callable from multicall.\",\"params\":{\"data\":\"The encoded function data for each of the calls to make to this contract\"},\"returns\":{\"results\":\"The results from each of the calls passed in via data\"}},\"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this).\",\"params\":{\"deadline\":\"A timestamp, the current blocktime must be less than or equal to this timestamp\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\",\"value\":\"The amount that can be spent of token\"}},\"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this)\",\"params\":{\"expiry\":\"The timestamp at which the permit is no longer valid\",\"nonce\":\"The current nonce of the owner\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this) Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.\",\"params\":{\"expiry\":\"The timestamp at which the permit is no longer valid\",\"nonce\":\"The current nonce of the owner\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this). Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit\",\"params\":{\"deadline\":\"A timestamp, the current blocktime must be less than or equal to this timestamp\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\",\"value\":\"The amount that can be spent of token\"}}},\"title\":\"Uniswap V3 Migrator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"notice\":\"Creates a new pool if it does not exist, then initializes if not initialized\"},\"migrate((address,uint256,uint8,address,address,uint24,int24,int24,uint256,uint256,address,uint256,bool))\":{\"notice\":\"Migrates liquidity to v3 by burning v2 liquidity and minting a new position for v3\"},\"multicall(bytes[])\":{\"notice\":\"Call multiple functions in the current contract and return the data from all of them if they all succeed\"},\"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend a given token from `msg.sender`\"},\"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\"},\"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\"},\"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend a given token from `msg.sender`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/V3Migrator.sol\":\"V3Migrator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/drafts/IERC20Permit.sol\":{\"keccak256\":\"0x1aab7754719ba764a8a05bec47e975001400f62986474945eb3dbee6d871259f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8c14e8ff1b384bdb68f262669364b1e79fbbd82b85938b7ce788a1395c40c6a2\",\"dweb:/ipfs/QmUKLXfSeEuRUXkeWLBhjHTKeSFoNBCS1RaMXv1AmHXYzn\"]},\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"keccak256\":\"0xd2f30fad5b24c4120f96dbac83aacdb7993ee610a9092bc23c44463da292bf8d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3d4e72409e392c7694b6405a0136cf073d8da016df33ef8f9ad195f724ebfea\",\"dweb:/ipfs/QmPGcddKq6CgsiKnxUUif2q76wRqP3dmdQ6bKuHCLmb8Wa\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2d0913dfbfce90d170df0d496ad7596c0778518e5fa7aba6c32562522546f66b\",\"dweb:/ipfs/QmR6B8nLj2PJf5e1JWD9Nk7ErkAwkqUwadCnvE82FJr1RU\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xb11597841d47f7a773bca63ca323c76f804cb5d944788de0327db5526319dc82\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://930d2da1934886a1098753be4173dd89c45ca0b306a1930accd37e00b1af4aaf\",\"dweb:/ipfs/QmVSXnvEV41d43k8cfpANHoTYMKgBDBL8iCbxkLfEtQZBe\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"keccak256\":\"0x2789dfea2d73182683d637db5729201f6730dae6113030a94c828f8688f38f2f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://36374eaa68c0737bf7e1ae13d55327b4868fb0825e971ee729f4b8d355ededb4\",\"dweb:/ipfs/QmYN9yuzz4P5SumiT6rgYgTEY8MhnPQapMwx2LHxRKju7r\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"keccak256\":\"0xc82c7d1d732081d9bd23f1555ebdf8f3bc1738bc42c2bfc4b9aa7564d9fa3573\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5cb07e4ff3352161510a0d1536fe93f3c62526358e073a8bab2a8abbb27d0da1\",\"dweb:/ipfs/QmX7K1JjnWKT1JzZT92Qx5zNJQYbssE533TLFHP88hj2fb\"]},\"@thinkincoin-libs/uniswap-v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\",\"urls\":[\"bzz-raw://85d5ad2dd23ee127f40907a12865a1e8cb5828814f6f2480285e1827dd72dedf\",\"dweb:/ipfs/QmayKQWJgWmr46DqWseADyUanmqxh662hPNdAkdHRjiQQH\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/IUniswapV3Factory.sol\":{\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b9379ad954680c44a0bc523b314ae4c4da735f9fe1d02aa56ea5bdba6f1136f2\",\"dweb:/ipfs/QmZXdgQNXKAckrXWz9R3mc47F1fvDvr28a2ewJrwNAw71B\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://1c42b9e6f5902ac38dd43e25750939baa7e0c1425dc75afd717c4412731065d5\",\"dweb:/ipfs/QmWaoacnzsucTvBME2o7YgZBZMhaHv7fkj83htHMVWJKWh\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5\",\"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7\",\"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03\",\"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047\",\"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735\",\"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f\",\"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/LowGasSafeMath.sol\":{\"keccak256\":\"0x86715eb960f18e01ac94e3bba4614ed51a887fa3c5bd1c43bf80aa98e019cf2d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://bfc1d5d58e59015086b0e65a6c3a2ddad312e2350480510f6c0c8167f3d71a37\",\"dweb:/ipfs/QmQndULYjFsHKHjMAKLMfc12vWbVB5FawtioHtvwcWRJZp\"]},\"contracts/V3Migrator.sol\":{\"keccak256\":\"0xc4bfeb7f60f36c558861af003c131941d4172100ab13600904ca952375bac0dd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://4595459fab1fa1df7d372ed0793621435db35598e1d3b38892b11a7ec1ba143b\",\"dweb:/ipfs/QmUUDWXZStqv7N1oNM8XjDEZjKPER8LLCLBKrNr8WS7smg\"]},\"contracts/base/Multicall.sol\":{\"keccak256\":\"0x3acc1acf20b9f218e68706d90f71b28d63fbca91b8a6b5445613e12d5c98aac6\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://c4414bcad1d2971596866d1dc95790954fac1ca9e772d9864785496348083839\",\"dweb:/ipfs/QmXeTSwz3446DddKoZSaY1vZ4mNsMvdF4zAeX4ANoMxhjT\"]},\"contracts/base/PeripheryImmutableState.sol\":{\"keccak256\":\"0x1d0175136fda60c5e1b6aab6dfa4a35856717413d754d0750eb75866f3f5e43f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8e19496cd2a7239e9e869bafbfb9f762691a9ab52f169b579f11d752d7df79a5\",\"dweb:/ipfs/QmTaLVPUVMGp4ZywHwpFupnz2873NPyqYs3EzbJTHpVNSA\"]},\"contracts/base/PoolInitializer.sol\":{\"keccak256\":\"0x1141fd6d820b534347ad90e0f027d1dd3378066cbaf78330d8d0072ed9aeefcc\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://67dbbcb74c0c1b8761b2656f35bd7f8b0bad3311cfe5e6fbe6ba92f60d77821a\",\"dweb:/ipfs/QmRPhL3KAzhphnba2gRBryPCn5Zth3CoA6pPqHANcw8N6G\"]},\"contracts/base/SelfPermit.sol\":{\"keccak256\":\"0x6d508a027f7a4a41ccb30a20f84bf29c52d7210d30e968142d064f9ce5c496ae\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ff72331865afd843ac65d0fd559dc92bcfe1bcd9a2db913c1bdbb9f62224d724\",\"dweb:/ipfs/Qme7YMqjHxoo3RuN9onk9Notw7h512NnVFncAjqX6HuQdV\"]},\"contracts/interfaces/IERC721Permit.sol\":{\"keccak256\":\"0x211a77d98af9c4c686f7f6365d9e545ea6253be910232c36be7758d3bc99bdff\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ce417bd13b8b7d49c7ddda765392c2117b39f5a04bd56bbf47d65cdcd1af1bac\",\"dweb:/ipfs/QmbU2vFrffABYuCB9s9vckfaLiwXu4diTRSBf6YB1LXth2\"]},\"contracts/interfaces/IMulticall.sol\":{\"keccak256\":\"0x76aeef8a8cd237f1bd8fb67f21e1734ba5c294b522c1932ce336f72fe41e5355\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://0b577b8f8e1b2767f218d0a1d78f7cc4d7b24ccd01ed7422a7129f9ae465edff\",\"dweb:/ipfs/QmVUzqSeAXf9Urwc1tseh1sW3pNz6z36vEYYYAGTNAnDWf\"]},\"contracts/interfaces/INonfungiblePositionManager.sol\":{\"keccak256\":\"0x424f2c08cab7abab5033e7c02f0e7a26437e640bccec41d7e7b077f996642d20\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://022a5f4bd78fe0d0c408be06b275f76d9a2ad67770a7d0fd8c97e66647237c7a\",\"dweb:/ipfs/QmYAWxDbRgjYqw1kSCJv5WCobQ36XnA8Ke4jfBBsmEt1HX\"]},\"contracts/interfaces/IPeripheryImmutableState.sol\":{\"keccak256\":\"0x23bb9671c6188fe826d384acb88182efc75c55ee7b6e7c5792de8f26581f0390\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb0b086015acc6d97e15e71a406e5ba393d188df878c71eaeb98b6ce4c99a353\",\"dweb:/ipfs/QmWvXDAjebKmEJcvoB7S7e981zcvLvMLT11BLZZMf7D2rL\"]},\"contracts/interfaces/IPeripheryPayments.sol\":{\"keccak256\":\"0x8e0cdb6280728619c44a8220996512b81e85f6fa7bc5373db742ea953a81eda8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f0748123e32874d0e1e405a463fafcf98f686fac0055da2e13bfdaa0db917766\",\"dweb:/ipfs/QmRZPF69X1e6T3yT2z8HTgzEtXHTVScqzoEMbfvp5Niggq\"]},\"contracts/interfaces/IPoolInitializer.sol\":{\"keccak256\":\"0x8229e43304f2c2412aaca27ea314ee78f3bcaca31124017b3bc4729c383594f1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://3beed69fd04dd1ad59e9c083914ca47fd1f3c0bf53e50a62c772597a25191d78\",\"dweb:/ipfs/QmZ7vuCn86Gg6kopXVw5hBRPemcqtWykke8zUskZArq8aP\"]},\"contracts/interfaces/ISelfPermit.sol\":{\"keccak256\":\"0xb442ad31c8fef5c47ebb82b3b3f906d0a5dbca8eb26db90b287a4825bf53d595\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://6e36e6e894083ad07e2ba62977a06db0874b8ed1f6eac705f4c9d89a410f54ea\",\"dweb:/ipfs/QmWLWTuKrcCzxZeedLpUG3c8jjFLs5gLmvt35Ysp2uc9c6\"]},\"contracts/interfaces/IV3Migrator.sol\":{\"keccak256\":\"0xcc9095af5736016d4aa775ef7ab99306c8262954a59b9829a073455c2c61c236\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://812d269fc93db8ec94d8bb7297bb4f04faf90ab90ded0364c930db20860bd1c4\",\"dweb:/ipfs/Qme9ZDXEdRF6hdNwWUYbqshgDDEKr2wd3wbCDnwq1Rm4ud\"]},\"contracts/interfaces/external/IERC20PermitAllowed.sol\":{\"keccak256\":\"0x1495f5068f2b892668447889f379d87decb18c9369f4506df9d23edba9ccb4b7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://6f322bead944abc1da0e75aba72c9e02b22f02c15712f49b212bb65869b406ca\",\"dweb:/ipfs/QmTZAqfg4EwuFAX61ZW4nA55sUbn3o2Qy3W55C3ghPUAWM\"]},\"contracts/interfaces/external/IWETH9.sol\":{\"keccak256\":\"0x04b01ec95f0d2f84238441c9aef03219f4bef075c224c5752978cd9dd0e94c72\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://6b0d33db4100951dc4d1e1c08f41869bf504c9613efc8dbda8fca6b3540e93fa\",\"dweb:/ipfs/QmZ9QU2UxKPKkS2MTvNBWXKJUim3kcfLaXZ3c5DS4K7Hx1\"]},\"contracts/libraries/PoolAddress.sol\":{\"keccak256\":\"0xd8fca2727cc0b80b46f9bef41aa958c46c075dc785bc3ad3cda3b822e31a7354\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://54877e50ab00753f73eed0a4a9f2ff735401c07e78a76603738a6b9879eb39ae\",\"dweb:/ipfs/QmXuiT99xKNdZVTZ2gQkAxa6rSVKohSxYUU9BtYB5RXX5D\"]},\"contracts/libraries/TransferHelper.sol\":{\"keccak256\":\"0xdd6bdb15d86cea91b32e431a3665fb02d89cd2e3ac364defdd4996c984f3b2ef\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ea225076bf821ab6be89f44aeb024ada5ad96dd5b0a59721b57b3634a24da67a\",\"dweb:/ipfs/QmThwpyvdpBuDGfaWQPvnNuTS2bbhr6zCaJB5pGHkxkuj7\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
								"notice": "Creates a new pool if it does not exist, then initializes if not initialized"
							},
							"migrate((address,uint256,uint8,address,address,uint24,int24,int24,uint256,uint256,address,uint256,bool))": {
								"notice": "Migrates liquidity to v3 by burning v2 liquidity and minting a new position for v3"
							},
							"multicall(bytes[])": {
								"notice": "Call multiple functions in the current contract and return the data from all of them if they all succeed"
							},
							"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend a given token from `msg.sender`"
							},
							"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter"
							},
							"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter"
							},
							"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend a given token from `msg.sender`"
							}
						},
						"version": 1
					}
				}
			},
			"contracts/base/Multicall.sol": {
				"Multicall": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes[]",
									"name": "data",
									"type": "bytes[]"
								}
							],
							"name": "multicall",
							"outputs": [
								{
									"internalType": "bytes[]",
									"name": "results",
									"type": "bytes[]"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"multicall(bytes[])": {
								"details": "The `msg.value` should not be trusted for any method callable from multicall.",
								"params": {
									"data": "The encoded function data for each of the calls to make to this contract"
								},
								"returns": {
									"results": "The results from each of the calls passed in via data"
								}
							}
						},
						"title": "Multicall",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"multicall(bytes[])": "ac9650d8"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"multicall(bytes[])\":{\"details\":\"The `msg.value` should not be trusted for any method callable from multicall.\",\"params\":{\"data\":\"The encoded function data for each of the calls to make to this contract\"},\"returns\":{\"results\":\"The results from each of the calls passed in via data\"}}},\"title\":\"Multicall\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"multicall(bytes[])\":{\"notice\":\"Call multiple functions in the current contract and return the data from all of them if they all succeed\"}},\"notice\":\"Enables calling multiple methods in a single call to the contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/Multicall.sol\":\"Multicall\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/base/Multicall.sol\":{\"keccak256\":\"0x3acc1acf20b9f218e68706d90f71b28d63fbca91b8a6b5445613e12d5c98aac6\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://c4414bcad1d2971596866d1dc95790954fac1ca9e772d9864785496348083839\",\"dweb:/ipfs/QmXeTSwz3446DddKoZSaY1vZ4mNsMvdF4zAeX4ANoMxhjT\"]},\"contracts/interfaces/IMulticall.sol\":{\"keccak256\":\"0x76aeef8a8cd237f1bd8fb67f21e1734ba5c294b522c1932ce336f72fe41e5355\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://0b577b8f8e1b2767f218d0a1d78f7cc4d7b24ccd01ed7422a7129f9ae465edff\",\"dweb:/ipfs/QmVUzqSeAXf9Urwc1tseh1sW3pNz6z36vEYYYAGTNAnDWf\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"multicall(bytes[])": {
								"notice": "Call multiple functions in the current contract and return the data from all of them if they all succeed"
							}
						},
						"notice": "Enables calling multiple methods in a single call to the contract",
						"version": 1
					}
				}
			},
			"contracts/base/PeripheryImmutableState.sol": {
				"PeripheryImmutableState": {
					"abi": [
						{
							"inputs": [],
							"name": "WETH9",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"WETH9": {
								"return": "Returns the address of WETH9"
							},
							"factory": {
								"return": "Returns the address of the Uniswap V3 factory"
							}
						},
						"title": "Immutable state",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"WETH9()": "4aa4a4fc",
							"factory()": "c45a0155"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"WETH9\":{\"return\":\"Returns the address of WETH9\"},\"factory\":{\"return\":\"Returns the address of the Uniswap V3 factory\"}},\"title\":\"Immutable state\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Immutable state used by periphery contracts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/PeripheryImmutableState.sol\":\"PeripheryImmutableState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/base/PeripheryImmutableState.sol\":{\"keccak256\":\"0x1d0175136fda60c5e1b6aab6dfa4a35856717413d754d0750eb75866f3f5e43f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8e19496cd2a7239e9e869bafbfb9f762691a9ab52f169b579f11d752d7df79a5\",\"dweb:/ipfs/QmTaLVPUVMGp4ZywHwpFupnz2873NPyqYs3EzbJTHpVNSA\"]},\"contracts/interfaces/IPeripheryImmutableState.sol\":{\"keccak256\":\"0x23bb9671c6188fe826d384acb88182efc75c55ee7b6e7c5792de8f26581f0390\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb0b086015acc6d97e15e71a406e5ba393d188df878c71eaeb98b6ce4c99a353\",\"dweb:/ipfs/QmWvXDAjebKmEJcvoB7S7e981zcvLvMLT11BLZZMf7D2rL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Immutable state used by periphery contracts",
						"version": 1
					}
				}
			},
			"contracts/base/PoolInitializer.sol": {
				"PoolInitializer": {
					"abi": [
						{
							"inputs": [],
							"name": "WETH9",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "createAndInitializePoolIfNecessary",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
								"details": "This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool",
								"params": {
									"fee": "The fee amount of the v3 pool for the specified token pair",
									"sqrtPriceX96": "The initial square root price of the pool as a Q64.96 value",
									"token0": "The contract address of token0 of the pool",
									"token1": "The contract address of token1 of the pool"
								},
								"returns": {
									"pool": "Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary"
								}
							}
						},
						"title": "Creates and initializes V3 Pools",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"WETH9()": "4aa4a4fc",
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": "13ead562",
							"factory()": "c45a0155"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"createAndInitializePoolIfNecessary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"details\":\"This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\",\"params\":{\"fee\":\"The fee amount of the v3 pool for the specified token pair\",\"sqrtPriceX96\":\"The initial square root price of the pool as a Q64.96 value\",\"token0\":\"The contract address of token0 of the pool\",\"token1\":\"The contract address of token1 of the pool\"},\"returns\":{\"pool\":\"Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\"}}},\"title\":\"Creates and initializes V3 Pools\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"notice\":\"Creates a new pool if it does not exist, then initializes if not initialized\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/PoolInitializer.sol\":\"PoolInitializer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/IUniswapV3Factory.sol\":{\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b9379ad954680c44a0bc523b314ae4c4da735f9fe1d02aa56ea5bdba6f1136f2\",\"dweb:/ipfs/QmZXdgQNXKAckrXWz9R3mc47F1fvDvr28a2ewJrwNAw71B\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://1c42b9e6f5902ac38dd43e25750939baa7e0c1425dc75afd717c4412731065d5\",\"dweb:/ipfs/QmWaoacnzsucTvBME2o7YgZBZMhaHv7fkj83htHMVWJKWh\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5\",\"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7\",\"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03\",\"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047\",\"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735\",\"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f\",\"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg\"]},\"contracts/base/PeripheryImmutableState.sol\":{\"keccak256\":\"0x1d0175136fda60c5e1b6aab6dfa4a35856717413d754d0750eb75866f3f5e43f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8e19496cd2a7239e9e869bafbfb9f762691a9ab52f169b579f11d752d7df79a5\",\"dweb:/ipfs/QmTaLVPUVMGp4ZywHwpFupnz2873NPyqYs3EzbJTHpVNSA\"]},\"contracts/base/PoolInitializer.sol\":{\"keccak256\":\"0x1141fd6d820b534347ad90e0f027d1dd3378066cbaf78330d8d0072ed9aeefcc\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://67dbbcb74c0c1b8761b2656f35bd7f8b0bad3311cfe5e6fbe6ba92f60d77821a\",\"dweb:/ipfs/QmRPhL3KAzhphnba2gRBryPCn5Zth3CoA6pPqHANcw8N6G\"]},\"contracts/interfaces/IPeripheryImmutableState.sol\":{\"keccak256\":\"0x23bb9671c6188fe826d384acb88182efc75c55ee7b6e7c5792de8f26581f0390\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb0b086015acc6d97e15e71a406e5ba393d188df878c71eaeb98b6ce4c99a353\",\"dweb:/ipfs/QmWvXDAjebKmEJcvoB7S7e981zcvLvMLT11BLZZMf7D2rL\"]},\"contracts/interfaces/IPoolInitializer.sol\":{\"keccak256\":\"0x8229e43304f2c2412aaca27ea314ee78f3bcaca31124017b3bc4729c383594f1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://3beed69fd04dd1ad59e9c083914ca47fd1f3c0bf53e50a62c772597a25191d78\",\"dweb:/ipfs/QmZ7vuCn86Gg6kopXVw5hBRPemcqtWykke8zUskZArq8aP\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
								"notice": "Creates a new pool if it does not exist, then initializes if not initialized"
							}
						},
						"version": 1
					}
				}
			},
			"contracts/base/SelfPermit.sol": {
				"SelfPermit": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "nonce",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "expiry",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermitAllowed",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "nonce",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "expiry",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermitAllowedIfNecessary",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermitIfNecessary",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "These functions are expected to be embedded in multicalls to allow EOAs to approve a contract and call a function that requires an approval in a single transaction.",
						"kind": "dev",
						"methods": {
							"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this).",
								"params": {
									"deadline": "A timestamp, the current blocktime must be less than or equal to this timestamp",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`",
									"value": "The amount that can be spent of token"
								}
							},
							"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this)",
								"params": {
									"expiry": "The timestamp at which the permit is no longer valid",
									"nonce": "The current nonce of the owner",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this) Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.",
								"params": {
									"expiry": "The timestamp at which the permit is no longer valid",
									"nonce": "The current nonce of the owner",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this). Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit",
								"params": {
									"deadline": "A timestamp, the current blocktime must be less than or equal to this timestamp",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`",
									"value": "The amount that can be spent of token"
								}
							}
						},
						"title": "Self Permit",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": "f3995c67",
							"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": "4659a494",
							"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": "a4a78f0c",
							"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": "c2e3140a"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitAllowed\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitAllowedIfNecessary\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitIfNecessary\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"These functions are expected to be embedded in multicalls to allow EOAs to approve a contract and call a function that requires an approval in a single transaction.\",\"kind\":\"dev\",\"methods\":{\"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this).\",\"params\":{\"deadline\":\"A timestamp, the current blocktime must be less than or equal to this timestamp\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\",\"value\":\"The amount that can be spent of token\"}},\"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this)\",\"params\":{\"expiry\":\"The timestamp at which the permit is no longer valid\",\"nonce\":\"The current nonce of the owner\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this) Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.\",\"params\":{\"expiry\":\"The timestamp at which the permit is no longer valid\",\"nonce\":\"The current nonce of the owner\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this). Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit\",\"params\":{\"deadline\":\"A timestamp, the current blocktime must be less than or equal to this timestamp\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\",\"value\":\"The amount that can be spent of token\"}}},\"title\":\"Self Permit\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend a given token from `msg.sender`\"},\"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\"},\"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\"},\"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend a given token from `msg.sender`\"}},\"notice\":\"Functionality to call permit on any EIP-2612-compliant token for use in the route\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/SelfPermit.sol\":\"SelfPermit\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/drafts/IERC20Permit.sol\":{\"keccak256\":\"0x1aab7754719ba764a8a05bec47e975001400f62986474945eb3dbee6d871259f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8c14e8ff1b384bdb68f262669364b1e79fbbd82b85938b7ce788a1395c40c6a2\",\"dweb:/ipfs/QmUKLXfSeEuRUXkeWLBhjHTKeSFoNBCS1RaMXv1AmHXYzn\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2d0913dfbfce90d170df0d496ad7596c0778518e5fa7aba6c32562522546f66b\",\"dweb:/ipfs/QmR6B8nLj2PJf5e1JWD9Nk7ErkAwkqUwadCnvE82FJr1RU\"]},\"contracts/base/SelfPermit.sol\":{\"keccak256\":\"0x6d508a027f7a4a41ccb30a20f84bf29c52d7210d30e968142d064f9ce5c496ae\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ff72331865afd843ac65d0fd559dc92bcfe1bcd9a2db913c1bdbb9f62224d724\",\"dweb:/ipfs/Qme7YMqjHxoo3RuN9onk9Notw7h512NnVFncAjqX6HuQdV\"]},\"contracts/interfaces/ISelfPermit.sol\":{\"keccak256\":\"0xb442ad31c8fef5c47ebb82b3b3f906d0a5dbca8eb26db90b287a4825bf53d595\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://6e36e6e894083ad07e2ba62977a06db0874b8ed1f6eac705f4c9d89a410f54ea\",\"dweb:/ipfs/QmWLWTuKrcCzxZeedLpUG3c8jjFLs5gLmvt35Ysp2uc9c6\"]},\"contracts/interfaces/external/IERC20PermitAllowed.sol\":{\"keccak256\":\"0x1495f5068f2b892668447889f379d87decb18c9369f4506df9d23edba9ccb4b7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://6f322bead944abc1da0e75aba72c9e02b22f02c15712f49b212bb65869b406ca\",\"dweb:/ipfs/QmTZAqfg4EwuFAX61ZW4nA55sUbn3o2Qy3W55C3ghPUAWM\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend a given token from `msg.sender`"
							},
							"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter"
							},
							"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter"
							},
							"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend a given token from `msg.sender`"
							}
						},
						"notice": "Functionality to call permit on any EIP-2612-compliant token for use in the route",
						"version": 1
					}
				}
			},
			"contracts/interfaces/IERC721Permit.sol": {
				"IERC721Permit": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "PERMIT_TYPEHASH",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"returns": {
									"_0": "The domain seperator used in encoding of permit signature"
								}
							},
							"PERMIT_TYPEHASH()": {
								"returns": {
									"_0": "The typehash for the permit"
								}
							},
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"params": {
									"deadline": "The deadline timestamp by which the call must be mined for the approve to work",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"spender": "The account that is being approved",
									"tokenId": "The ID of the token that is being approved for spending",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC721 with permit",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"PERMIT_TYPEHASH()": "30adf81f",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": "7ac2ff7b",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"returns\":{\"_0\":\"The domain seperator used in encoding of permit signature\"}},\"PERMIT_TYPEHASH()\":{\"returns\":{\"_0\":\"The typehash for the permit\"}},\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"permit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The deadline timestamp by which the call must be mined for the approve to work\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"spender\":\"The account that is being approved\",\"tokenId\":\"The ID of the token that is being approved for spending\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC721 with permit\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"The domain separator used in the permit signature\"},\"PERMIT_TYPEHASH()\":{\"notice\":\"The permit typehash used in the permit signature\"},\"permit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Approve of a specific token ID for spending by spender via signature\"}},\"notice\":\"Extension to ERC721 that includes a permit function for signature based approvals\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IERC721Permit.sol\":\"IERC721Permit\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"keccak256\":\"0xd2f30fad5b24c4120f96dbac83aacdb7993ee610a9092bc23c44463da292bf8d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3d4e72409e392c7694b6405a0136cf073d8da016df33ef8f9ad195f724ebfea\",\"dweb:/ipfs/QmPGcddKq6CgsiKnxUUif2q76wRqP3dmdQ6bKuHCLmb8Wa\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xb11597841d47f7a773bca63ca323c76f804cb5d944788de0327db5526319dc82\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://930d2da1934886a1098753be4173dd89c45ca0b306a1930accd37e00b1af4aaf\",\"dweb:/ipfs/QmVSXnvEV41d43k8cfpANHoTYMKgBDBL8iCbxkLfEtQZBe\"]},\"contracts/interfaces/IERC721Permit.sol\":{\"keccak256\":\"0x211a77d98af9c4c686f7f6365d9e545ea6253be910232c36be7758d3bc99bdff\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ce417bd13b8b7d49c7ddda765392c2117b39f5a04bd56bbf47d65cdcd1af1bac\",\"dweb:/ipfs/QmbU2vFrffABYuCB9s9vckfaLiwXu4diTRSBf6YB1LXth2\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"notice": "The domain separator used in the permit signature"
							},
							"PERMIT_TYPEHASH()": {
								"notice": "The permit typehash used in the permit signature"
							},
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Approve of a specific token ID for spending by spender via signature"
							}
						},
						"notice": "Extension to ERC721 that includes a permit function for signature based approvals",
						"version": 1
					}
				}
			},
			"contracts/interfaces/IMulticall.sol": {
				"IMulticall": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes[]",
									"name": "data",
									"type": "bytes[]"
								}
							],
							"name": "multicall",
							"outputs": [
								{
									"internalType": "bytes[]",
									"name": "results",
									"type": "bytes[]"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"multicall(bytes[])": {
								"details": "The `msg.value` should not be trusted for any method callable from multicall.",
								"params": {
									"data": "The encoded function data for each of the calls to make to this contract"
								},
								"returns": {
									"results": "The results from each of the calls passed in via data"
								}
							}
						},
						"title": "Multicall interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"multicall(bytes[])": "ac9650d8"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"multicall(bytes[])\":{\"details\":\"The `msg.value` should not be trusted for any method callable from multicall.\",\"params\":{\"data\":\"The encoded function data for each of the calls to make to this contract\"},\"returns\":{\"results\":\"The results from each of the calls passed in via data\"}}},\"title\":\"Multicall interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"multicall(bytes[])\":{\"notice\":\"Call multiple functions in the current contract and return the data from all of them if they all succeed\"}},\"notice\":\"Enables calling multiple methods in a single call to the contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IMulticall.sol\":\"IMulticall\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IMulticall.sol\":{\"keccak256\":\"0x76aeef8a8cd237f1bd8fb67f21e1734ba5c294b522c1932ce336f72fe41e5355\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://0b577b8f8e1b2767f218d0a1d78f7cc4d7b24ccd01ed7422a7129f9ae465edff\",\"dweb:/ipfs/QmVUzqSeAXf9Urwc1tseh1sW3pNz6z36vEYYYAGTNAnDWf\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"multicall(bytes[])": {
								"notice": "Call multiple functions in the current contract and return the data from all of them if they all succeed"
							}
						},
						"notice": "Enables calling multiple methods in a single call to the contract",
						"version": 1
					}
				}
			},
			"contracts/interfaces/INonfungiblePositionManager.sol": {
				"INonfungiblePositionManager": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Collect",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "DecreaseLiquidity",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "IncreaseLiquidity",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "PERMIT_TYPEHASH",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "WETH9",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "tokenId",
											"type": "uint256"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint128",
											"name": "amount0Max",
											"type": "uint128"
										},
										{
											"internalType": "uint128",
											"name": "amount1Max",
											"type": "uint128"
										}
									],
									"internalType": "struct INonfungiblePositionManager.CollectParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "createAndInitializePoolIfNecessary",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "tokenId",
											"type": "uint256"
										},
										{
											"internalType": "uint128",
											"name": "liquidity",
											"type": "uint128"
										},
										{
											"internalType": "uint256",
											"name": "amount0Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct INonfungiblePositionManager.DecreaseLiquidityParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "decreaseLiquidity",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "tokenId",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount0Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount0Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct INonfungiblePositionManager.IncreaseLiquidityParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "increaseLiquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "token0",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "token1",
											"type": "address"
										},
										{
											"internalType": "uint24",
											"name": "fee",
											"type": "uint24"
										},
										{
											"internalType": "int24",
											"name": "tickLower",
											"type": "int24"
										},
										{
											"internalType": "int24",
											"name": "tickUpper",
											"type": "int24"
										},
										{
											"internalType": "uint256",
											"name": "amount0Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount0Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Min",
											"type": "uint256"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct INonfungiblePositionManager.MintParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint96",
									"name": "nonce",
									"type": "uint96"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside0LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside1LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "refundETH",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "sweepToken",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenOfOwnerByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "unwrapWETH9",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Collect(uint256,address,uint256,uint256)": {
								"details": "The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior",
								"params": {
									"amount0": "The amount of token0 owed to the position that was collected",
									"amount1": "The amount of token1 owed to the position that was collected",
									"recipient": "The address of the account that received the collected tokens",
									"tokenId": "The ID of the token for which underlying tokens were collected"
								}
							},
							"DecreaseLiquidity(uint256,uint128,uint256,uint256)": {
								"params": {
									"amount0": "The amount of token0 that was accounted for the decrease in liquidity",
									"amount1": "The amount of token1 that was accounted for the decrease in liquidity",
									"liquidity": "The amount by which liquidity for the NFT position was decreased",
									"tokenId": "The ID of the token for which liquidity was decreased"
								}
							},
							"IncreaseLiquidity(uint256,uint128,uint256,uint256)": {
								"details": "Also emitted when a token is minted",
								"params": {
									"amount0": "The amount of token0 that was paid for the increase in liquidity",
									"amount1": "The amount of token1 that was paid for the increase in liquidity",
									"liquidity": "The amount by which liquidity for the NFT position was increased",
									"tokenId": "The ID of the token for which liquidity was increased"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"returns": {
									"_0": "The domain seperator used in encoding of permit signature"
								}
							},
							"PERMIT_TYPEHASH()": {
								"returns": {
									"_0": "The typehash for the permit"
								}
							},
							"WETH9()": {
								"returns": {
									"_0": "Returns the address of WETH9"
								}
							},
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"burn(uint256)": {
								"params": {
									"tokenId": "The ID of the token that is being burned"
								}
							},
							"collect((uint256,address,uint128,uint128))": {
								"params": {
									"params": "tokenId The ID of the NFT for which tokens are being collected, recipient The account that should receive the tokens, amount0Max The maximum amount of token0 to collect, amount1Max The maximum amount of token1 to collect"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
								"details": "This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool",
								"params": {
									"fee": "The fee amount of the v3 pool for the specified token pair",
									"sqrtPriceX96": "The initial square root price of the pool as a Q64.96 value",
									"token0": "The contract address of token0 of the pool",
									"token1": "The contract address of token1 of the pool"
								},
								"returns": {
									"pool": "Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary"
								}
							},
							"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))": {
								"params": {
									"params": "tokenId The ID of the token for which liquidity is being decreased, amount The amount by which liquidity will be decreased, amount0Min The minimum amount of token0 that should be accounted for the burned liquidity, amount1Min The minimum amount of token1 that should be accounted for the burned liquidity, deadline The time by which the transaction must be included to effect the change"
								},
								"returns": {
									"amount0": "The amount of token0 accounted to the position's tokens owed",
									"amount1": "The amount of token1 accounted to the position's tokens owed"
								}
							},
							"factory()": {
								"returns": {
									"_0": "Returns the address of the Uniswap V3 factory"
								}
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))": {
								"params": {
									"params": "tokenId The ID of the token for which liquidity is being increased, amount0Desired The desired amount of token0 to be spent, amount1Desired The desired amount of token1 to be spent, amount0Min The minimum amount of token0 to spend, which serves as a slippage check, amount1Min The minimum amount of token1 to spend, which serves as a slippage check, deadline The time by which the transaction must be included to effect the change"
								},
								"returns": {
									"amount0": "The amount of token0 to acheive resulting liquidity",
									"amount1": "The amount of token1 to acheive resulting liquidity",
									"liquidity": "The new liquidity amount as a result of the increase"
								}
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))": {
								"details": "Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized a method does not exist, i.e. the pool is assumed to be initialized.",
								"params": {
									"params": "The params necessary to mint a position, encoded as `MintParams` in calldata"
								},
								"returns": {
									"amount0": "The amount of token0",
									"amount1": "The amount of token1",
									"liquidity": "The amount of liquidity for this position",
									"tokenId": "The ID of the token that represents the minted position"
								}
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"params": {
									"deadline": "The deadline timestamp by which the call must be mined for the approve to work",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"spender": "The account that is being approved",
									"tokenId": "The ID of the token that is being approved for spending",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"positions(uint256)": {
								"details": "Throws if the token ID is not valid.",
								"params": {
									"tokenId": "The ID of the token that represents the position"
								},
								"returns": {
									"fee": "The fee associated with the pool",
									"feeGrowthInside0LastX128": "The fee growth of token0 as of the last action on the individual position",
									"feeGrowthInside1LastX128": "The fee growth of token1 as of the last action on the individual position",
									"liquidity": "The liquidity of the position",
									"nonce": "The nonce for permits",
									"operator": "The address that is approved for spending",
									"tickLower": "The lower end of the tick range for the position",
									"tickUpper": "The higher end of the tick range for the position",
									"token0": "The address of the token0 for a specific pool",
									"token1": "The address of the token1 for a specific pool",
									"tokensOwed0": "The uncollected amount of token0 owed to the position as of the last computation",
									"tokensOwed1": "The uncollected amount of token1 owed to the position as of the last computation"
								}
							},
							"refundETH()": {
								"details": "Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount"
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"sweepToken(address,uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing the token from users",
								"params": {
									"amountMinimum": "The minimum amount of token required for a transfer",
									"recipient": "The destination address of the token",
									"token": "The contract address of the token which will be transferred to `recipient`"
								}
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenByIndex(uint256)": {
								"details": "Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."
							},
							"tokenOfOwnerByIndex(address,uint256)": {
								"details": "Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"totalSupply()": {
								"details": "Returns the total amount of tokens stored by the contract."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							},
							"unwrapWETH9(uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.",
								"params": {
									"amountMinimum": "The minimum amount of WETH9 to unwrap",
									"recipient": "The address receiving ETH"
								}
							}
						},
						"title": "Non-fungible token for positions",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"PERMIT_TYPEHASH()": "30adf81f",
							"WETH9()": "4aa4a4fc",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"collect((uint256,address,uint128,uint128))": "fc6f7865",
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": "13ead562",
							"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))": "0c49ccbe",
							"factory()": "c45a0155",
							"getApproved(uint256)": "081812fc",
							"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))": "219f5d17",
							"isApprovedForAll(address,address)": "e985e9c5",
							"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))": "88316456",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": "7ac2ff7b",
							"positions(uint256)": "99fbab88",
							"refundETH()": "12210e8a",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"sweepToken(address,uint256,address)": "df2ab5bb",
							"symbol()": "95d89b41",
							"tokenByIndex(uint256)": "4f6ccce7",
							"tokenOfOwnerByIndex(address,uint256)": "2f745c59",
							"tokenURI(uint256)": "c87b56dd",
							"totalSupply()": "18160ddd",
							"transferFrom(address,address,uint256)": "23b872dd",
							"unwrapWETH9(uint256,address)": "49404b7c"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"DecreaseLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"IncreaseLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Max\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Max\",\"type\":\"uint128\"}],\"internalType\":\"struct INonfungiblePositionManager.CollectParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"createAndInitializePoolIfNecessary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct INonfungiblePositionManager.DecreaseLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"decreaseLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct INonfungiblePositionManager.IncreaseLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"increaseLiquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"amount0Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct INonfungiblePositionManager.MintParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"nonce\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH9\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Collect(uint256,address,uint256,uint256)\":{\"details\":\"The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\",\"params\":{\"amount0\":\"The amount of token0 owed to the position that was collected\",\"amount1\":\"The amount of token1 owed to the position that was collected\",\"recipient\":\"The address of the account that received the collected tokens\",\"tokenId\":\"The ID of the token for which underlying tokens were collected\"}},\"DecreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"params\":{\"amount0\":\"The amount of token0 that was accounted for the decrease in liquidity\",\"amount1\":\"The amount of token1 that was accounted for the decrease in liquidity\",\"liquidity\":\"The amount by which liquidity for the NFT position was decreased\",\"tokenId\":\"The ID of the token for which liquidity was decreased\"}},\"IncreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"details\":\"Also emitted when a token is minted\",\"params\":{\"amount0\":\"The amount of token0 that was paid for the increase in liquidity\",\"amount1\":\"The amount of token1 that was paid for the increase in liquidity\",\"liquidity\":\"The amount by which liquidity for the NFT position was increased\",\"tokenId\":\"The ID of the token for which liquidity was increased\"}}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"returns\":{\"_0\":\"The domain seperator used in encoding of permit signature\"}},\"PERMIT_TYPEHASH()\":{\"returns\":{\"_0\":\"The typehash for the permit\"}},\"WETH9()\":{\"returns\":{\"_0\":\"Returns the address of WETH9\"}},\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"burn(uint256)\":{\"params\":{\"tokenId\":\"The ID of the token that is being burned\"}},\"collect((uint256,address,uint128,uint128))\":{\"params\":{\"params\":\"tokenId The ID of the NFT for which tokens are being collected, recipient The account that should receive the tokens, amount0Max The maximum amount of token0 to collect, amount1Max The maximum amount of token1 to collect\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"details\":\"This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\",\"params\":{\"fee\":\"The fee amount of the v3 pool for the specified token pair\",\"sqrtPriceX96\":\"The initial square root price of the pool as a Q64.96 value\",\"token0\":\"The contract address of token0 of the pool\",\"token1\":\"The contract address of token1 of the pool\"},\"returns\":{\"pool\":\"Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\"}},\"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))\":{\"params\":{\"params\":\"tokenId The ID of the token for which liquidity is being decreased, amount The amount by which liquidity will be decreased, amount0Min The minimum amount of token0 that should be accounted for the burned liquidity, amount1Min The minimum amount of token1 that should be accounted for the burned liquidity, deadline The time by which the transaction must be included to effect the change\"},\"returns\":{\"amount0\":\"The amount of token0 accounted to the position's tokens owed\",\"amount1\":\"The amount of token1 accounted to the position's tokens owed\"}},\"factory()\":{\"returns\":{\"_0\":\"Returns the address of the Uniswap V3 factory\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))\":{\"params\":{\"params\":\"tokenId The ID of the token for which liquidity is being increased, amount0Desired The desired amount of token0 to be spent, amount1Desired The desired amount of token1 to be spent, amount0Min The minimum amount of token0 to spend, which serves as a slippage check, amount1Min The minimum amount of token1 to spend, which serves as a slippage check, deadline The time by which the transaction must be included to effect the change\"},\"returns\":{\"amount0\":\"The amount of token0 to acheive resulting liquidity\",\"amount1\":\"The amount of token1 to acheive resulting liquidity\",\"liquidity\":\"The new liquidity amount as a result of the increase\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))\":{\"details\":\"Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized a method does not exist, i.e. the pool is assumed to be initialized.\",\"params\":{\"params\":\"The params necessary to mint a position, encoded as `MintParams` in calldata\"},\"returns\":{\"amount0\":\"The amount of token0\",\"amount1\":\"The amount of token1\",\"liquidity\":\"The amount of liquidity for this position\",\"tokenId\":\"The ID of the token that represents the minted position\"}},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"permit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The deadline timestamp by which the call must be mined for the approve to work\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"spender\":\"The account that is being approved\",\"tokenId\":\"The ID of the token that is being approved for spending\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"positions(uint256)\":{\"details\":\"Throws if the token ID is not valid.\",\"params\":{\"tokenId\":\"The ID of the token that represents the position\"},\"returns\":{\"fee\":\"The fee associated with the pool\",\"feeGrowthInside0LastX128\":\"The fee growth of token0 as of the last action on the individual position\",\"feeGrowthInside1LastX128\":\"The fee growth of token1 as of the last action on the individual position\",\"liquidity\":\"The liquidity of the position\",\"nonce\":\"The nonce for permits\",\"operator\":\"The address that is approved for spending\",\"tickLower\":\"The lower end of the tick range for the position\",\"tickUpper\":\"The higher end of the tick range for the position\",\"token0\":\"The address of the token0 for a specific pool\",\"token1\":\"The address of the token1 for a specific pool\",\"tokensOwed0\":\"The uncollected amount of token0 owed to the position as of the last computation\",\"tokensOwed1\":\"The uncollected amount of token1 owed to the position as of the last computation\"}},\"refundETH()\":{\"details\":\"Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"sweepToken(address,uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing the token from users\",\"params\":{\"amountMinimum\":\"The minimum amount of token required for a transfer\",\"recipient\":\"The destination address of the token\",\"token\":\"The contract address of the token which will be transferred to `recipient`\"}},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"},\"unwrapWETH9(uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\",\"params\":{\"amountMinimum\":\"The minimum amount of WETH9 to unwrap\",\"recipient\":\"The address receiving ETH\"}}},\"title\":\"Non-fungible token for positions\",\"version\":1},\"userdoc\":{\"events\":{\"Collect(uint256,address,uint256,uint256)\":{\"notice\":\"Emitted when tokens are collected for a position NFT\"},\"DecreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is decreased for a position NFT\"},\"IncreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is increased for a position NFT\"}},\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"The domain separator used in the permit signature\"},\"PERMIT_TYPEHASH()\":{\"notice\":\"The permit typehash used in the permit signature\"},\"burn(uint256)\":{\"notice\":\"Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens must be collected first.\"},\"collect((uint256,address,uint128,uint128))\":{\"notice\":\"Collects up to a maximum amount of fees owed to a specific position to the recipient\"},\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"notice\":\"Creates a new pool if it does not exist, then initializes if not initialized\"},\"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))\":{\"notice\":\"Decreases the amount of liquidity in a position and accounts it to the position\"},\"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\"},\"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))\":{\"notice\":\"Creates a new position wrapped in a NFT\"},\"permit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Approve of a specific token ID for spending by spender via signature\"},\"positions(uint256)\":{\"notice\":\"Returns the position information associated with a given token ID.\"},\"refundETH()\":{\"notice\":\"Refunds any ETH balance held by this contract to the `msg.sender`\"},\"sweepToken(address,uint256,address)\":{\"notice\":\"Transfers the full amount of a token held by this contract to recipient\"},\"unwrapWETH9(uint256,address)\":{\"notice\":\"Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\"}},\"notice\":\"Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred and authorized.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/INonfungiblePositionManager.sol\":\"INonfungiblePositionManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"keccak256\":\"0xd2f30fad5b24c4120f96dbac83aacdb7993ee610a9092bc23c44463da292bf8d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3d4e72409e392c7694b6405a0136cf073d8da016df33ef8f9ad195f724ebfea\",\"dweb:/ipfs/QmPGcddKq6CgsiKnxUUif2q76wRqP3dmdQ6bKuHCLmb8Wa\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xb11597841d47f7a773bca63ca323c76f804cb5d944788de0327db5526319dc82\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://930d2da1934886a1098753be4173dd89c45ca0b306a1930accd37e00b1af4aaf\",\"dweb:/ipfs/QmVSXnvEV41d43k8cfpANHoTYMKgBDBL8iCbxkLfEtQZBe\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"keccak256\":\"0x2789dfea2d73182683d637db5729201f6730dae6113030a94c828f8688f38f2f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://36374eaa68c0737bf7e1ae13d55327b4868fb0825e971ee729f4b8d355ededb4\",\"dweb:/ipfs/QmYN9yuzz4P5SumiT6rgYgTEY8MhnPQapMwx2LHxRKju7r\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"keccak256\":\"0xc82c7d1d732081d9bd23f1555ebdf8f3bc1738bc42c2bfc4b9aa7564d9fa3573\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5cb07e4ff3352161510a0d1536fe93f3c62526358e073a8bab2a8abbb27d0da1\",\"dweb:/ipfs/QmX7K1JjnWKT1JzZT92Qx5zNJQYbssE533TLFHP88hj2fb\"]},\"contracts/interfaces/IERC721Permit.sol\":{\"keccak256\":\"0x211a77d98af9c4c686f7f6365d9e545ea6253be910232c36be7758d3bc99bdff\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ce417bd13b8b7d49c7ddda765392c2117b39f5a04bd56bbf47d65cdcd1af1bac\",\"dweb:/ipfs/QmbU2vFrffABYuCB9s9vckfaLiwXu4diTRSBf6YB1LXth2\"]},\"contracts/interfaces/INonfungiblePositionManager.sol\":{\"keccak256\":\"0x424f2c08cab7abab5033e7c02f0e7a26437e640bccec41d7e7b077f996642d20\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://022a5f4bd78fe0d0c408be06b275f76d9a2ad67770a7d0fd8c97e66647237c7a\",\"dweb:/ipfs/QmYAWxDbRgjYqw1kSCJv5WCobQ36XnA8Ke4jfBBsmEt1HX\"]},\"contracts/interfaces/IPeripheryImmutableState.sol\":{\"keccak256\":\"0x23bb9671c6188fe826d384acb88182efc75c55ee7b6e7c5792de8f26581f0390\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb0b086015acc6d97e15e71a406e5ba393d188df878c71eaeb98b6ce4c99a353\",\"dweb:/ipfs/QmWvXDAjebKmEJcvoB7S7e981zcvLvMLT11BLZZMf7D2rL\"]},\"contracts/interfaces/IPeripheryPayments.sol\":{\"keccak256\":\"0x8e0cdb6280728619c44a8220996512b81e85f6fa7bc5373db742ea953a81eda8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f0748123e32874d0e1e405a463fafcf98f686fac0055da2e13bfdaa0db917766\",\"dweb:/ipfs/QmRZPF69X1e6T3yT2z8HTgzEtXHTVScqzoEMbfvp5Niggq\"]},\"contracts/interfaces/IPoolInitializer.sol\":{\"keccak256\":\"0x8229e43304f2c2412aaca27ea314ee78f3bcaca31124017b3bc4729c383594f1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://3beed69fd04dd1ad59e9c083914ca47fd1f3c0bf53e50a62c772597a25191d78\",\"dweb:/ipfs/QmZ7vuCn86Gg6kopXVw5hBRPemcqtWykke8zUskZArq8aP\"]},\"contracts/libraries/PoolAddress.sol\":{\"keccak256\":\"0xd8fca2727cc0b80b46f9bef41aa958c46c075dc785bc3ad3cda3b822e31a7354\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://54877e50ab00753f73eed0a4a9f2ff735401c07e78a76603738a6b9879eb39ae\",\"dweb:/ipfs/QmXuiT99xKNdZVTZ2gQkAxa6rSVKohSxYUU9BtYB5RXX5D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Collect(uint256,address,uint256,uint256)": {
								"notice": "Emitted when tokens are collected for a position NFT"
							},
							"DecreaseLiquidity(uint256,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is decreased for a position NFT"
							},
							"IncreaseLiquidity(uint256,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is increased for a position NFT"
							}
						},
						"kind": "user",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"notice": "The domain separator used in the permit signature"
							},
							"PERMIT_TYPEHASH()": {
								"notice": "The permit typehash used in the permit signature"
							},
							"burn(uint256)": {
								"notice": "Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens must be collected first."
							},
							"collect((uint256,address,uint128,uint128))": {
								"notice": "Collects up to a maximum amount of fees owed to a specific position to the recipient"
							},
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
								"notice": "Creates a new pool if it does not exist, then initializes if not initialized"
							},
							"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))": {
								"notice": "Decreases the amount of liquidity in a position and accounts it to the position"
							},
							"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))": {
								"notice": "Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`"
							},
							"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))": {
								"notice": "Creates a new position wrapped in a NFT"
							},
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Approve of a specific token ID for spending by spender via signature"
							},
							"positions(uint256)": {
								"notice": "Returns the position information associated with a given token ID."
							},
							"refundETH()": {
								"notice": "Refunds any ETH balance held by this contract to the `msg.sender`"
							},
							"sweepToken(address,uint256,address)": {
								"notice": "Transfers the full amount of a token held by this contract to recipient"
							},
							"unwrapWETH9(uint256,address)": {
								"notice": "Unwraps the contract's WETH9 balance and sends it to recipient as ETH."
							}
						},
						"notice": "Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred and authorized.",
						"version": 1
					}
				}
			},
			"contracts/interfaces/IPeripheryImmutableState.sol": {
				"IPeripheryImmutableState": {
					"abi": [
						{
							"inputs": [],
							"name": "WETH9",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"WETH9()": {
								"returns": {
									"_0": "Returns the address of WETH9"
								}
							},
							"factory()": {
								"returns": {
									"_0": "Returns the address of the Uniswap V3 factory"
								}
							}
						},
						"title": "Immutable state",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"WETH9()": "4aa4a4fc",
							"factory()": "c45a0155"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"WETH9()\":{\"returns\":{\"_0\":\"Returns the address of WETH9\"}},\"factory()\":{\"returns\":{\"_0\":\"Returns the address of the Uniswap V3 factory\"}}},\"title\":\"Immutable state\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Functions that return immutable state of the router\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IPeripheryImmutableState.sol\":\"IPeripheryImmutableState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IPeripheryImmutableState.sol\":{\"keccak256\":\"0x23bb9671c6188fe826d384acb88182efc75c55ee7b6e7c5792de8f26581f0390\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb0b086015acc6d97e15e71a406e5ba393d188df878c71eaeb98b6ce4c99a353\",\"dweb:/ipfs/QmWvXDAjebKmEJcvoB7S7e981zcvLvMLT11BLZZMf7D2rL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Functions that return immutable state of the router",
						"version": 1
					}
				}
			},
			"contracts/interfaces/IPeripheryPayments.sol": {
				"IPeripheryPayments": {
					"abi": [
						{
							"inputs": [],
							"name": "refundETH",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "sweepToken",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "unwrapWETH9",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"refundETH()": {
								"details": "Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount"
							},
							"sweepToken(address,uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing the token from users",
								"params": {
									"amountMinimum": "The minimum amount of token required for a transfer",
									"recipient": "The destination address of the token",
									"token": "The contract address of the token which will be transferred to `recipient`"
								}
							},
							"unwrapWETH9(uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.",
								"params": {
									"amountMinimum": "The minimum amount of WETH9 to unwrap",
									"recipient": "The address receiving ETH"
								}
							}
						},
						"title": "Periphery Payments",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"refundETH()": "12210e8a",
							"sweepToken(address,uint256,address)": "df2ab5bb",
							"unwrapWETH9(uint256,address)": "49404b7c"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"refundETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH9\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"refundETH()\":{\"details\":\"Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount\"},\"sweepToken(address,uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing the token from users\",\"params\":{\"amountMinimum\":\"The minimum amount of token required for a transfer\",\"recipient\":\"The destination address of the token\",\"token\":\"The contract address of the token which will be transferred to `recipient`\"}},\"unwrapWETH9(uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\",\"params\":{\"amountMinimum\":\"The minimum amount of WETH9 to unwrap\",\"recipient\":\"The address receiving ETH\"}}},\"title\":\"Periphery Payments\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"refundETH()\":{\"notice\":\"Refunds any ETH balance held by this contract to the `msg.sender`\"},\"sweepToken(address,uint256,address)\":{\"notice\":\"Transfers the full amount of a token held by this contract to recipient\"},\"unwrapWETH9(uint256,address)\":{\"notice\":\"Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\"}},\"notice\":\"Functions to ease deposits and withdrawals of ETH\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IPeripheryPayments.sol\":\"IPeripheryPayments\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IPeripheryPayments.sol\":{\"keccak256\":\"0x8e0cdb6280728619c44a8220996512b81e85f6fa7bc5373db742ea953a81eda8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f0748123e32874d0e1e405a463fafcf98f686fac0055da2e13bfdaa0db917766\",\"dweb:/ipfs/QmRZPF69X1e6T3yT2z8HTgzEtXHTVScqzoEMbfvp5Niggq\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"refundETH()": {
								"notice": "Refunds any ETH balance held by this contract to the `msg.sender`"
							},
							"sweepToken(address,uint256,address)": {
								"notice": "Transfers the full amount of a token held by this contract to recipient"
							},
							"unwrapWETH9(uint256,address)": {
								"notice": "Unwraps the contract's WETH9 balance and sends it to recipient as ETH."
							}
						},
						"notice": "Functions to ease deposits and withdrawals of ETH",
						"version": 1
					}
				}
			},
			"contracts/interfaces/IPoolInitializer.sol": {
				"IPoolInitializer": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "createAndInitializePoolIfNecessary",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
								"details": "This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool",
								"params": {
									"fee": "The fee amount of the v3 pool for the specified token pair",
									"sqrtPriceX96": "The initial square root price of the pool as a Q64.96 value",
									"token0": "The contract address of token0 of the pool",
									"token1": "The contract address of token1 of the pool"
								},
								"returns": {
									"pool": "Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary"
								}
							}
						},
						"title": "Creates and initializes V3 Pools",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": "13ead562"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"createAndInitializePoolIfNecessary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"details\":\"This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\",\"params\":{\"fee\":\"The fee amount of the v3 pool for the specified token pair\",\"sqrtPriceX96\":\"The initial square root price of the pool as a Q64.96 value\",\"token0\":\"The contract address of token0 of the pool\",\"token1\":\"The contract address of token1 of the pool\"},\"returns\":{\"pool\":\"Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\"}}},\"title\":\"Creates and initializes V3 Pools\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"notice\":\"Creates a new pool if it does not exist, then initializes if not initialized\"}},\"notice\":\"Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that require the pool to exist.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IPoolInitializer.sol\":\"IPoolInitializer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IPoolInitializer.sol\":{\"keccak256\":\"0x8229e43304f2c2412aaca27ea314ee78f3bcaca31124017b3bc4729c383594f1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://3beed69fd04dd1ad59e9c083914ca47fd1f3c0bf53e50a62c772597a25191d78\",\"dweb:/ipfs/QmZ7vuCn86Gg6kopXVw5hBRPemcqtWykke8zUskZArq8aP\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
								"notice": "Creates a new pool if it does not exist, then initializes if not initialized"
							}
						},
						"notice": "Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that require the pool to exist.",
						"version": 1
					}
				}
			},
			"contracts/interfaces/ISelfPermit.sol": {
				"ISelfPermit": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "nonce",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "expiry",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermitAllowed",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "nonce",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "expiry",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermitAllowedIfNecessary",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermitIfNecessary",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this).",
								"params": {
									"deadline": "A timestamp, the current blocktime must be less than or equal to this timestamp",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`",
									"value": "The amount that can be spent of token"
								}
							},
							"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this)",
								"params": {
									"expiry": "The timestamp at which the permit is no longer valid",
									"nonce": "The current nonce of the owner",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this) Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.",
								"params": {
									"expiry": "The timestamp at which the permit is no longer valid",
									"nonce": "The current nonce of the owner",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this). Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit",
								"params": {
									"deadline": "A timestamp, the current blocktime must be less than or equal to this timestamp",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`",
									"value": "The amount that can be spent of token"
								}
							}
						},
						"title": "Self Permit",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": "f3995c67",
							"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": "4659a494",
							"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": "a4a78f0c",
							"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": "c2e3140a"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitAllowed\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitAllowedIfNecessary\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitIfNecessary\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this).\",\"params\":{\"deadline\":\"A timestamp, the current blocktime must be less than or equal to this timestamp\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\",\"value\":\"The amount that can be spent of token\"}},\"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this)\",\"params\":{\"expiry\":\"The timestamp at which the permit is no longer valid\",\"nonce\":\"The current nonce of the owner\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this) Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.\",\"params\":{\"expiry\":\"The timestamp at which the permit is no longer valid\",\"nonce\":\"The current nonce of the owner\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this). Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit\",\"params\":{\"deadline\":\"A timestamp, the current blocktime must be less than or equal to this timestamp\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\",\"value\":\"The amount that can be spent of token\"}}},\"title\":\"Self Permit\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend a given token from `msg.sender`\"},\"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\"},\"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\"},\"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend a given token from `msg.sender`\"}},\"notice\":\"Functionality to call permit on any EIP-2612-compliant token for use in the route\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/ISelfPermit.sol\":\"ISelfPermit\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/ISelfPermit.sol\":{\"keccak256\":\"0xb442ad31c8fef5c47ebb82b3b3f906d0a5dbca8eb26db90b287a4825bf53d595\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://6e36e6e894083ad07e2ba62977a06db0874b8ed1f6eac705f4c9d89a410f54ea\",\"dweb:/ipfs/QmWLWTuKrcCzxZeedLpUG3c8jjFLs5gLmvt35Ysp2uc9c6\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend a given token from `msg.sender`"
							},
							"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter"
							},
							"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter"
							},
							"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend a given token from `msg.sender`"
							}
						},
						"notice": "Functionality to call permit on any EIP-2612-compliant token for use in the route",
						"version": 1
					}
				}
			},
			"contracts/interfaces/IV3Migrator.sol": {
				"IV3Migrator": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "createAndInitializePoolIfNecessary",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "pair",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "liquidityToMigrate",
											"type": "uint256"
										},
										{
											"internalType": "uint8",
											"name": "percentageToMigrate",
											"type": "uint8"
										},
										{
											"internalType": "address",
											"name": "token0",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "token1",
											"type": "address"
										},
										{
											"internalType": "uint24",
											"name": "fee",
											"type": "uint24"
										},
										{
											"internalType": "int24",
											"name": "tickLower",
											"type": "int24"
										},
										{
											"internalType": "int24",
											"name": "tickUpper",
											"type": "int24"
										},
										{
											"internalType": "uint256",
											"name": "amount0Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Min",
											"type": "uint256"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "bool",
											"name": "refundAsETH",
											"type": "bool"
										}
									],
									"internalType": "struct IV3Migrator.MigrateParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "migrate",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes[]",
									"name": "data",
									"type": "bytes[]"
								}
							],
							"name": "multicall",
							"outputs": [
								{
									"internalType": "bytes[]",
									"name": "results",
									"type": "bytes[]"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "nonce",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "expiry",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermitAllowed",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "nonce",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "expiry",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermitAllowedIfNecessary",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermitIfNecessary",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
								"details": "This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool",
								"params": {
									"fee": "The fee amount of the v3 pool for the specified token pair",
									"sqrtPriceX96": "The initial square root price of the pool as a Q64.96 value",
									"token0": "The contract address of token0 of the pool",
									"token1": "The contract address of token1 of the pool"
								},
								"returns": {
									"pool": "Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary"
								}
							},
							"migrate((address,uint256,uint8,address,address,uint24,int24,int24,uint256,uint256,address,uint256,bool))": {
								"details": "Slippage protection is enforced via `amount{0,1}Min`, which should be a discount of the expected values of the maximum amount of v3 liquidity that the v2 liquidity can get. For the special case of migrating to an out-of-range position, `amount{0,1}Min` may be set to 0, enforcing that the position remains out of range",
								"params": {
									"params": "The params necessary to migrate v2 liquidity, encoded as `MigrateParams` in calldata"
								}
							},
							"multicall(bytes[])": {
								"details": "The `msg.value` should not be trusted for any method callable from multicall.",
								"params": {
									"data": "The encoded function data for each of the calls to make to this contract"
								},
								"returns": {
									"results": "The results from each of the calls passed in via data"
								}
							},
							"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this).",
								"params": {
									"deadline": "A timestamp, the current blocktime must be less than or equal to this timestamp",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`",
									"value": "The amount that can be spent of token"
								}
							},
							"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this)",
								"params": {
									"expiry": "The timestamp at which the permit is no longer valid",
									"nonce": "The current nonce of the owner",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this) Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.",
								"params": {
									"expiry": "The timestamp at which the permit is no longer valid",
									"nonce": "The current nonce of the owner",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this). Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit",
								"params": {
									"deadline": "A timestamp, the current blocktime must be less than or equal to this timestamp",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`",
									"value": "The amount that can be spent of token"
								}
							}
						},
						"title": "V3 Migrator",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": "13ead562",
							"migrate((address,uint256,uint8,address,address,uint24,int24,int24,uint256,uint256,address,uint256,bool))": "d44f2bf2",
							"multicall(bytes[])": "ac9650d8",
							"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": "f3995c67",
							"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": "4659a494",
							"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": "a4a78f0c",
							"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": "c2e3140a"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"createAndInitializePoolIfNecessary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityToMigrate\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"percentageToMigrate\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"refundAsETH\",\"type\":\"bool\"}],\"internalType\":\"struct IV3Migrator.MigrateParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitAllowed\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitAllowedIfNecessary\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitIfNecessary\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"details\":\"This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\",\"params\":{\"fee\":\"The fee amount of the v3 pool for the specified token pair\",\"sqrtPriceX96\":\"The initial square root price of the pool as a Q64.96 value\",\"token0\":\"The contract address of token0 of the pool\",\"token1\":\"The contract address of token1 of the pool\"},\"returns\":{\"pool\":\"Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\"}},\"migrate((address,uint256,uint8,address,address,uint24,int24,int24,uint256,uint256,address,uint256,bool))\":{\"details\":\"Slippage protection is enforced via `amount{0,1}Min`, which should be a discount of the expected values of the maximum amount of v3 liquidity that the v2 liquidity can get. For the special case of migrating to an out-of-range position, `amount{0,1}Min` may be set to 0, enforcing that the position remains out of range\",\"params\":{\"params\":\"The params necessary to migrate v2 liquidity, encoded as `MigrateParams` in calldata\"}},\"multicall(bytes[])\":{\"details\":\"The `msg.value` should not be trusted for any method callable from multicall.\",\"params\":{\"data\":\"The encoded function data for each of the calls to make to this contract\"},\"returns\":{\"results\":\"The results from each of the calls passed in via data\"}},\"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this).\",\"params\":{\"deadline\":\"A timestamp, the current blocktime must be less than or equal to this timestamp\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\",\"value\":\"The amount that can be spent of token\"}},\"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this)\",\"params\":{\"expiry\":\"The timestamp at which the permit is no longer valid\",\"nonce\":\"The current nonce of the owner\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this) Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.\",\"params\":{\"expiry\":\"The timestamp at which the permit is no longer valid\",\"nonce\":\"The current nonce of the owner\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this). Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit\",\"params\":{\"deadline\":\"A timestamp, the current blocktime must be less than or equal to this timestamp\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\",\"value\":\"The amount that can be spent of token\"}}},\"title\":\"V3 Migrator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"notice\":\"Creates a new pool if it does not exist, then initializes if not initialized\"},\"migrate((address,uint256,uint8,address,address,uint24,int24,int24,uint256,uint256,address,uint256,bool))\":{\"notice\":\"Migrates liquidity to v3 by burning v2 liquidity and minting a new position for v3\"},\"multicall(bytes[])\":{\"notice\":\"Call multiple functions in the current contract and return the data from all of them if they all succeed\"},\"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend a given token from `msg.sender`\"},\"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\"},\"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\"},\"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend a given token from `msg.sender`\"}},\"notice\":\"Enables migration of liqudity from Uniswap v2-compatible pairs into Uniswap v3 pools\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IV3Migrator.sol\":\"IV3Migrator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IMulticall.sol\":{\"keccak256\":\"0x76aeef8a8cd237f1bd8fb67f21e1734ba5c294b522c1932ce336f72fe41e5355\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://0b577b8f8e1b2767f218d0a1d78f7cc4d7b24ccd01ed7422a7129f9ae465edff\",\"dweb:/ipfs/QmVUzqSeAXf9Urwc1tseh1sW3pNz6z36vEYYYAGTNAnDWf\"]},\"contracts/interfaces/IPoolInitializer.sol\":{\"keccak256\":\"0x8229e43304f2c2412aaca27ea314ee78f3bcaca31124017b3bc4729c383594f1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://3beed69fd04dd1ad59e9c083914ca47fd1f3c0bf53e50a62c772597a25191d78\",\"dweb:/ipfs/QmZ7vuCn86Gg6kopXVw5hBRPemcqtWykke8zUskZArq8aP\"]},\"contracts/interfaces/ISelfPermit.sol\":{\"keccak256\":\"0xb442ad31c8fef5c47ebb82b3b3f906d0a5dbca8eb26db90b287a4825bf53d595\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://6e36e6e894083ad07e2ba62977a06db0874b8ed1f6eac705f4c9d89a410f54ea\",\"dweb:/ipfs/QmWLWTuKrcCzxZeedLpUG3c8jjFLs5gLmvt35Ysp2uc9c6\"]},\"contracts/interfaces/IV3Migrator.sol\":{\"keccak256\":\"0xcc9095af5736016d4aa775ef7ab99306c8262954a59b9829a073455c2c61c236\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://812d269fc93db8ec94d8bb7297bb4f04faf90ab90ded0364c930db20860bd1c4\",\"dweb:/ipfs/Qme9ZDXEdRF6hdNwWUYbqshgDDEKr2wd3wbCDnwq1Rm4ud\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
								"notice": "Creates a new pool if it does not exist, then initializes if not initialized"
							},
							"migrate((address,uint256,uint8,address,address,uint24,int24,int24,uint256,uint256,address,uint256,bool))": {
								"notice": "Migrates liquidity to v3 by burning v2 liquidity and minting a new position for v3"
							},
							"multicall(bytes[])": {
								"notice": "Call multiple functions in the current contract and return the data from all of them if they all succeed"
							},
							"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend a given token from `msg.sender`"
							},
							"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter"
							},
							"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter"
							},
							"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend a given token from `msg.sender`"
							}
						},
						"notice": "Enables migration of liqudity from Uniswap v2-compatible pairs into Uniswap v3 pools",
						"version": 1
					}
				}
			},
			"contracts/interfaces/external/IERC20PermitAllowed.sol": {
				"IERC20PermitAllowed": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "holder",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "nonce",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "expiry",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "allowed",
									"type": "bool"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)": {
								"details": "This is the permit interface used by DAI and CHAI",
								"params": {
									"allowed": "Boolean that sets approval amount, true for type(uint256).max and false for 0",
									"expiry": "The timestamp at which the permit is no longer valid",
									"holder": "The address of the token holder, the token owner",
									"nonce": "The holder's nonce, increases at each call to permit",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"spender": "The address of the token spender",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							}
						},
						"title": "Interface for permit",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)": "8fcbaf0c"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)\":{\"details\":\"This is the permit interface used by DAI and CHAI\",\"params\":{\"allowed\":\"Boolean that sets approval amount, true for type(uint256).max and false for 0\",\"expiry\":\"The timestamp at which the permit is no longer valid\",\"holder\":\"The address of the token holder, the token owner\",\"nonce\":\"The holder's nonce, increases at each call to permit\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"spender\":\"The address of the token spender\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}}},\"title\":\"Interface for permit\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)\":{\"notice\":\"Approve the spender to spend some tokens via the holder signature\"}},\"notice\":\"Interface used by DAI/CHAI for permit\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/external/IERC20PermitAllowed.sol\":\"IERC20PermitAllowed\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/external/IERC20PermitAllowed.sol\":{\"keccak256\":\"0x1495f5068f2b892668447889f379d87decb18c9369f4506df9d23edba9ccb4b7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://6f322bead944abc1da0e75aba72c9e02b22f02c15712f49b212bb65869b406ca\",\"dweb:/ipfs/QmTZAqfg4EwuFAX61ZW4nA55sUbn3o2Qy3W55C3ghPUAWM\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)": {
								"notice": "Approve the spender to spend some tokens via the holder signature"
							}
						},
						"notice": "Interface used by DAI/CHAI for permit",
						"version": 1
					}
				}
			},
			"contracts/interfaces/external/IWETH9.sol": {
				"IWETH9": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "deposit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "withdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"title": "Interface for WETH9",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"deposit()": "d0e30db0",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"withdraw(uint256)": "2e1a7d4d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"title\":\"Interface for WETH9\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit()\":{\"notice\":\"Deposit ether to get wrapped ether\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw wrapped ether to get ether\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/external/IWETH9.sol\":\"IWETH9\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2d0913dfbfce90d170df0d496ad7596c0778518e5fa7aba6c32562522546f66b\",\"dweb:/ipfs/QmR6B8nLj2PJf5e1JWD9Nk7ErkAwkqUwadCnvE82FJr1RU\"]},\"contracts/interfaces/external/IWETH9.sol\":{\"keccak256\":\"0x04b01ec95f0d2f84238441c9aef03219f4bef075c224c5752978cd9dd0e94c72\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://6b0d33db4100951dc4d1e1c08f41869bf504c9613efc8dbda8fca6b3540e93fa\",\"dweb:/ipfs/QmZ9QU2UxKPKkS2MTvNBWXKJUim3kcfLaXZ3c5DS4K7Hx1\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"deposit()": {
								"notice": "Deposit ether to get wrapped ether"
							},
							"withdraw(uint256)": {
								"notice": "Withdraw wrapped ether to get ether"
							}
						},
						"version": 1
					}
				}
			},
			"contracts/libraries/PoolAddress.sol": {
				"PoolAddress": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Provides functions for deriving a pool address from the factory, tokens, and the fee",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/libraries/PoolAddress.sol\":171:1866  library PoolAddress {\r... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/libraries/PoolAddress.sol\":171:1866  library PoolAddress {\r... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122029f90a86b932a1451810ba9fb55b6eccf418070cd3ec5dd99b31517ebe34b96f64736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122029f90a86b932a1451810ba9fb55b6eccf418070cd3ec5dd99b31517ebe34b96f64736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x29 0xF9 EXP DUP7 0xB9 ORIGIN LOG1 GASLIMIT XOR LT 0xBA SWAP16 0xB5 JUMPDEST PUSH15 0xCCF418070CD3EC5DD99B31517EBE34 0xB9 PUSH16 0x64736F6C634300070600330000000000 ",
							"sourceMap": "171:1695:31:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122029f90a86b932a1451810ba9fb55b6eccf418070cd3ec5dd99b31517ebe34b96f64736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x29 0xF9 EXP DUP7 0xB9 ORIGIN LOG1 GASLIMIT XOR LT 0xBA SWAP16 0xB5 JUMPDEST PUSH15 0xCCF418070CD3EC5DD99B31517EBE34 0xB9 PUSH16 0x64736F6C634300070600330000000000 ",
							"sourceMap": "171:1695:31:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"computeAddress(address,struct PoolAddress.PoolKey memory)": "infinite",
								"getPoolKey(address,address,uint24)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 171,
									"end": 1866,
									"name": "PUSH #[$]",
									"source": 31,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "PUSH [$]",
									"source": 31,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "PUSH",
									"source": 31,
									"value": "B"
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "DUP3",
									"source": 31
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "DUP3",
									"source": 31
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "DUP3",
									"source": 31
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "CODECOPY",
									"source": 31
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "DUP1",
									"source": 31
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "MLOAD",
									"source": 31
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "PUSH",
									"source": 31,
									"value": "0"
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "BYTE",
									"source": 31
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "PUSH",
									"source": 31,
									"value": "73"
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "EQ",
									"source": 31
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "PUSH [tag]",
									"source": 31,
									"value": "1"
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "JUMPI",
									"source": 31
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "INVALID",
									"source": 31
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "tag",
									"source": 31,
									"value": "1"
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "JUMPDEST",
									"source": 31
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "ADDRESS",
									"source": 31
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "PUSH",
									"source": 31,
									"value": "0"
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "MSTORE",
									"source": 31
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "PUSH",
									"source": 31,
									"value": "73"
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "DUP2",
									"source": 31
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "MSTORE8",
									"source": 31
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "DUP3",
									"source": 31
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "DUP2",
									"source": 31
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "RETURN",
									"source": 31
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122029f90a86b932a1451810ba9fb55b6eccf418070cd3ec5dd99b31517ebe34b96f64736f6c63430007060033",
									".code": [
										{
											"begin": 171,
											"end": 1866,
											"name": "PUSHDEPLOYADDRESS",
											"source": 31
										},
										{
											"begin": 171,
											"end": 1866,
											"name": "ADDRESS",
											"source": 31
										},
										{
											"begin": 171,
											"end": 1866,
											"name": "EQ",
											"source": 31
										},
										{
											"begin": 171,
											"end": 1866,
											"name": "PUSH",
											"source": 31,
											"value": "80"
										},
										{
											"begin": 171,
											"end": 1866,
											"name": "PUSH",
											"source": 31,
											"value": "40"
										},
										{
											"begin": 171,
											"end": 1866,
											"name": "MSTORE",
											"source": 31
										},
										{
											"begin": 171,
											"end": 1866,
											"name": "PUSH",
											"source": 31,
											"value": "0"
										},
										{
											"begin": 171,
											"end": 1866,
											"name": "DUP1",
											"source": 31
										},
										{
											"begin": 171,
											"end": 1866,
											"name": "REVERT",
											"source": 31
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Provides functions for deriving a pool address from the factory, tokens, and the fee\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/PoolAddress.sol\":\"PoolAddress\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/PoolAddress.sol\":{\"keccak256\":\"0xd8fca2727cc0b80b46f9bef41aa958c46c075dc785bc3ad3cda3b822e31a7354\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://54877e50ab00753f73eed0a4a9f2ff735401c07e78a76603738a6b9879eb39ae\",\"dweb:/ipfs/QmXuiT99xKNdZVTZ2gQkAxa6rSVKohSxYUU9BtYB5RXX5D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/libraries/TransferHelper.sol": {
				"TransferHelper": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/libraries/TransferHelper.sol\":134:2596  library TransferHelper {\r... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/libraries/TransferHelper.sol\":134:2596  library TransferHelper {\r... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220e2b73af61140a6a5323f9003b4b31b60dd7ea3b8a47aa14460241fefd85dde0164736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e2b73af61140a6a5323f9003b4b31b60dd7ea3b8a47aa14460241fefd85dde0164736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE2 0xB7 GASPRICE 0xF6 GT BLOCKHASH 0xA6 0xA5 ORIGIN EXTCODEHASH SWAP1 SUB 0xB4 0xB3 SHL PUSH1 0xDD PUSH31 0xA3B8A47AA14460241FEFD85DDE0164736F6C63430007060033000000000000 ",
							"sourceMap": "134:2462:32:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e2b73af61140a6a5323f9003b4b31b60dd7ea3b8a47aa14460241fefd85dde0164736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE2 0xB7 GASPRICE 0xF6 GT BLOCKHASH 0xA6 0xA5 ORIGIN EXTCODEHASH SWAP1 SUB 0xB4 0xB3 SHL PUSH1 0xDD PUSH31 0xA3B8A47AA14460241FEFD85DDE0164736F6C63430007060033000000000000 ",
							"sourceMap": "134:2462:32:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"safeApprove(address,address,uint256)": "infinite",
								"safeTransfer(address,address,uint256)": "infinite",
								"safeTransferETH(address,uint256)": "infinite",
								"safeTransferFrom(address,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 134,
									"end": 2596,
									"name": "PUSH #[$]",
									"source": 32,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 134,
									"end": 2596,
									"name": "PUSH [$]",
									"source": 32,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 134,
									"end": 2596,
									"name": "PUSH",
									"source": 32,
									"value": "B"
								},
								{
									"begin": 134,
									"end": 2596,
									"name": "DUP3",
									"source": 32
								},
								{
									"begin": 134,
									"end": 2596,
									"name": "DUP3",
									"source": 32
								},
								{
									"begin": 134,
									"end": 2596,
									"name": "DUP3",
									"source": 32
								},
								{
									"begin": 134,
									"end": 2596,
									"name": "CODECOPY",
									"source": 32
								},
								{
									"begin": 134,
									"end": 2596,
									"name": "DUP1",
									"source": 32
								},
								{
									"begin": 134,
									"end": 2596,
									"name": "MLOAD",
									"source": 32
								},
								{
									"begin": 134,
									"end": 2596,
									"name": "PUSH",
									"source": 32,
									"value": "0"
								},
								{
									"begin": 134,
									"end": 2596,
									"name": "BYTE",
									"source": 32
								},
								{
									"begin": 134,
									"end": 2596,
									"name": "PUSH",
									"source": 32,
									"value": "73"
								},
								{
									"begin": 134,
									"end": 2596,
									"name": "EQ",
									"source": 32
								},
								{
									"begin": 134,
									"end": 2596,
									"name": "PUSH [tag]",
									"source": 32,
									"value": "1"
								},
								{
									"begin": 134,
									"end": 2596,
									"name": "JUMPI",
									"source": 32
								},
								{
									"begin": 134,
									"end": 2596,
									"name": "INVALID",
									"source": 32
								},
								{
									"begin": 134,
									"end": 2596,
									"name": "tag",
									"source": 32,
									"value": "1"
								},
								{
									"begin": 134,
									"end": 2596,
									"name": "JUMPDEST",
									"source": 32
								},
								{
									"begin": 134,
									"end": 2596,
									"name": "ADDRESS",
									"source": 32
								},
								{
									"begin": 134,
									"end": 2596,
									"name": "PUSH",
									"source": 32,
									"value": "0"
								},
								{
									"begin": 134,
									"end": 2596,
									"name": "MSTORE",
									"source": 32
								},
								{
									"begin": 134,
									"end": 2596,
									"name": "PUSH",
									"source": 32,
									"value": "73"
								},
								{
									"begin": 134,
									"end": 2596,
									"name": "DUP2",
									"source": 32
								},
								{
									"begin": 134,
									"end": 2596,
									"name": "MSTORE8",
									"source": 32
								},
								{
									"begin": 134,
									"end": 2596,
									"name": "DUP3",
									"source": 32
								},
								{
									"begin": 134,
									"end": 2596,
									"name": "DUP2",
									"source": 32
								},
								{
									"begin": 134,
									"end": 2596,
									"name": "RETURN",
									"source": 32
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220e2b73af61140a6a5323f9003b4b31b60dd7ea3b8a47aa14460241fefd85dde0164736f6c63430007060033",
									".code": [
										{
											"begin": 134,
											"end": 2596,
											"name": "PUSHDEPLOYADDRESS",
											"source": 32
										},
										{
											"begin": 134,
											"end": 2596,
											"name": "ADDRESS",
											"source": 32
										},
										{
											"begin": 134,
											"end": 2596,
											"name": "EQ",
											"source": 32
										},
										{
											"begin": 134,
											"end": 2596,
											"name": "PUSH",
											"source": 32,
											"value": "80"
										},
										{
											"begin": 134,
											"end": 2596,
											"name": "PUSH",
											"source": 32,
											"value": "40"
										},
										{
											"begin": 134,
											"end": 2596,
											"name": "MSTORE",
											"source": 32
										},
										{
											"begin": 134,
											"end": 2596,
											"name": "PUSH",
											"source": 32,
											"value": "0"
										},
										{
											"begin": 134,
											"end": 2596,
											"name": "DUP1",
											"source": 32
										},
										{
											"begin": 134,
											"end": 2596,
											"name": "REVERT",
											"source": 32
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/TransferHelper.sol\":\"TransferHelper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2d0913dfbfce90d170df0d496ad7596c0778518e5fa7aba6c32562522546f66b\",\"dweb:/ipfs/QmR6B8nLj2PJf5e1JWD9Nk7ErkAwkqUwadCnvE82FJr1RU\"]},\"contracts/libraries/TransferHelper.sol\":{\"keccak256\":\"0xdd6bdb15d86cea91b32e431a3665fb02d89cd2e3ac364defdd4996c984f3b2ef\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ea225076bf821ab6be89f44aeb024ada5ad96dd5b0a59721b57b3634a24da67a\",\"dweb:/ipfs/QmThwpyvdpBuDGfaWQPvnNuTS2bbhr6zCaJB5pGHkxkuj7\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "1878",
				"formattedMessage": "@thinkincoin-libs/uniswap-v2-core/contracts/interfaces/IUniswapV2Pair.sol: Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n",
				"message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "@thinkincoin-libs/uniswap-v2-core/contracts/interfaces/IUniswapV2Pair.sol",
					"start": -1
				},
				"type": "Warning"
			}
		],
		"sources": {
			"@openzeppelin/contracts/drafts/IERC20Permit.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/drafts/IERC20Permit.sol",
					"exportedSymbols": {
						"IERC20Permit": [
							35
						]
					},
					"id": 36,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "66:482:0",
								"text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."
							},
							"fullyImplemented": false,
							"id": 35,
							"linearizedBaseContracts": [
								35
							],
							"name": "IERC20Permit",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "578:788:0",
										"text": " @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\n given `owner`'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."
									},
									"functionSelector": "d505accf",
									"id": 20,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 18,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "1387:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1387:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "1402:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 6,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1402:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 9,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "1419:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 8,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1419:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"mutability": "mutable",
												"name": "deadline",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "1434:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 10,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1434:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 13,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "1452:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 12,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1452:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 15,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "1461:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 14,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1461:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 17,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "1472:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 16,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1472:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1386:96:0"
									},
									"returnParameters": {
										"id": 19,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1491:0:0"
									},
									"scope": 35,
									"src": "1371:121:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 21,
										"nodeType": "StructuredDocumentation",
										"src": "1498:294:0",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 28,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 24,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 23,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 28,
												"src": "1813:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 22,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1813:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1812:15:0"
									},
									"returnParameters": {
										"id": 27,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 26,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 28,
												"src": "1851:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 25,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1851:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1850:9:0"
									},
									"scope": 35,
									"src": "1797:63:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 29,
										"nodeType": "StructuredDocumentation",
										"src": "1866:128:0",
										"text": " @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 34,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2077:2:0"
									},
									"returnParameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 32,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "2103:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 31,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2103:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2102:9:0"
									},
									"scope": 35,
									"src": "2052:60:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 36,
							"src": "549:1565:0"
						}
					],
					"src": "33:2082:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							47
						]
					},
					"id": 48,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 37,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 38,
								"nodeType": "StructuredDocumentation",
								"src": "58:279:1",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 47,
							"linearizedBaseContracts": [
								47
							],
							"name": "IERC165",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 39,
										"nodeType": "StructuredDocumentation",
										"src": "362:340:1",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 46,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 41,
												"mutability": "mutable",
												"name": "interfaceId",
												"nodeType": "VariableDeclaration",
												"scope": 46,
												"src": "734:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 40,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "734:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "733:20:1"
									},
									"returnParameters": {
										"id": 45,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 44,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 46,
												"src": "777:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 43,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "777:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "776:6:1"
									},
									"scope": 47,
									"src": "707:76:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 48,
							"src": "338:447:1"
						}
					],
					"src": "33:753:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							125
						]
					},
					"id": 126,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 49,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 50,
								"nodeType": "StructuredDocumentation",
								"src": "58:70:2",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 125,
							"linearizedBaseContracts": [
								125
							],
							"name": "IERC20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 51,
										"nodeType": "StructuredDocumentation",
										"src": "152:66:2",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 56,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 52,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "243:2:2"
									},
									"returnParameters": {
										"id": 55,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 54,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 56,
												"src": "269:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 53,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "269:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "268:9:2"
									},
									"scope": 125,
									"src": "223:55:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 57,
										"nodeType": "StructuredDocumentation",
										"src": "284:72:2",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 64,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 59,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "380:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 58,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "380:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "379:17:2"
									},
									"returnParameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "420:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 61,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "420:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "419:9:2"
									},
									"scope": 125,
									"src": "361:68:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 65,
										"nodeType": "StructuredDocumentation",
										"src": "435:209:2",
										"text": " @dev Moves `amount` tokens from the caller's account to `recipient`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 74,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 67,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 74,
												"src": "667:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 66,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "667:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 69,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 74,
												"src": "686:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 68,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "686:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "666:35:2"
									},
									"returnParameters": {
										"id": 73,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 72,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 74,
												"src": "720:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 71,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "720:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "719:6:2"
									},
									"scope": 125,
									"src": "649:77:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 75,
										"nodeType": "StructuredDocumentation",
										"src": "732:264:2",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 84,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 80,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 77,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 84,
												"src": "1020:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 76,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1020:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 79,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 84,
												"src": "1035:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 78,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1035:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1019:32:2"
									},
									"returnParameters": {
										"id": 83,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 82,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 84,
												"src": "1075:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 81,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1075:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1074:9:2"
									},
									"scope": 125,
									"src": "1001:83:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 85,
										"nodeType": "StructuredDocumentation",
										"src": "1090:642:2",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 94,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 90,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 87,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 94,
												"src": "1754:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 86,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1754:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 89,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 94,
												"src": "1771:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 88,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1771:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1753:33:2"
									},
									"returnParameters": {
										"id": 93,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 92,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 94,
												"src": "1805:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 91,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1805:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1804:6:2"
									},
									"scope": 125,
									"src": "1737:74:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 95,
										"nodeType": "StructuredDocumentation",
										"src": "1817:296:2",
										"text": " @dev Moves `amount` tokens from `sender` to `recipient` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 106,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 97,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 106,
												"src": "2140:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 96,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2140:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 99,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 106,
												"src": "2156:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 98,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2156:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 101,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 106,
												"src": "2175:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 100,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2175:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2139:51:2"
									},
									"returnParameters": {
										"id": 105,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 104,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 106,
												"src": "2209:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 103,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2209:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2208:6:2"
									},
									"scope": 125,
									"src": "2118:97:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 107,
										"nodeType": "StructuredDocumentation",
										"src": "2221:158:2",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 115,
									"name": "Transfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 114,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 109,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 115,
												"src": "2399:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 108,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2399:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 111,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 115,
												"src": "2421:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 110,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2421:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 113,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 115,
												"src": "2441:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 112,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2441:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2398:57:2"
									},
									"src": "2384:72:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 116,
										"nodeType": "StructuredDocumentation",
										"src": "2462:148:2",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 124,
									"name": "Approval",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 123,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 118,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "2630:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 117,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2630:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 120,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "2653:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 119,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2653:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 122,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "2678:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 121,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2678:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2629:63:2"
									},
									"src": "2615:78:2"
								}
							],
							"scope": 126,
							"src": "129:2566:2"
						}
					],
					"src": "33:2663:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
					"exportedSymbols": {
						"IERC165": [
							47
						],
						"IERC721": [
							241
						]
					},
					"id": 242,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 127,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/introspection/IERC165.sol",
							"file": "../../introspection/IERC165.sol",
							"id": 128,
							"nodeType": "ImportDirective",
							"scope": 242,
							"sourceUnit": 48,
							"src": "58:41:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 130,
										"name": "IERC165",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 47,
										"src": "190:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC165_$47",
											"typeString": "contract IERC165"
										}
									},
									"id": 131,
									"nodeType": "InheritanceSpecifier",
									"src": "190:7:3"
								}
							],
							"contractDependencies": [
								47
							],
							"contractKind": "interface",
							"documentation": {
								"id": 129,
								"nodeType": "StructuredDocumentation",
								"src": "101:67:3",
								"text": " @dev Required interface of an ERC721 compliant contract."
							},
							"fullyImplemented": false,
							"id": 241,
							"linearizedBaseContracts": [
								241,
								47
							],
							"name": "IERC721",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 132,
										"nodeType": "StructuredDocumentation",
										"src": "204:88:3",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"id": 140,
									"name": "Transfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 139,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 134,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 140,
												"src": "312:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 133,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "312:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 136,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 140,
												"src": "334:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 135,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "334:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 138,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 140,
												"src": "354:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 137,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "354:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "311:67:3"
									},
									"src": "297:82:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 141,
										"nodeType": "StructuredDocumentation",
										"src": "385:94:3",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"id": 149,
									"name": "Approval",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 148,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 143,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "499:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 142,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "499:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 145,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "522:24:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 144,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "522:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 147,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "548:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 146,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "548:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "498:74:3"
									},
									"src": "484:89:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 150,
										"nodeType": "StructuredDocumentation",
										"src": "579:117:3",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"id": 158,
									"name": "ApprovalForAll",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 152,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 158,
												"src": "722:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 151,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "722:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 154,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 158,
												"src": "745:24:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 153,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "745:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 156,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nodeType": "VariableDeclaration",
												"scope": 158,
												"src": "771:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 155,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "771:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "721:64:3"
									},
									"src": "701:85:3"
								},
								{
									"documentation": {
										"id": 159,
										"nodeType": "StructuredDocumentation",
										"src": "792:76:3",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 166,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 162,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 161,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "892:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 160,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "892:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "891:15:3"
									},
									"returnParameters": {
										"id": 165,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 164,
												"mutability": "mutable",
												"name": "balance",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "930:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 163,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "930:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "929:17:3"
									},
									"scope": 241,
									"src": "873:74:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 167,
										"nodeType": "StructuredDocumentation",
										"src": "953:131:3",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 174,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 170,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 169,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 174,
												"src": "1106:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 168,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1106:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1105:17:3"
									},
									"returnParameters": {
										"id": 173,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 172,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 174,
												"src": "1146:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 171,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1146:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1145:15:3"
									},
									"scope": 241,
									"src": "1089:72:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 175,
										"nodeType": "StructuredDocumentation",
										"src": "1167:690:3",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 184,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 182,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 177,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 184,
												"src": "1888:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 176,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1888:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 179,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 184,
												"src": "1902:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 178,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1902:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 181,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 184,
												"src": "1914:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 180,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1914:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1887:43:3"
									},
									"returnParameters": {
										"id": 183,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1939:0:3"
									},
									"scope": 241,
									"src": "1862:78:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 185,
										"nodeType": "StructuredDocumentation",
										"src": "1946:504:3",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 194,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 192,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 187,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 194,
												"src": "2477:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 186,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2477:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 189,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 194,
												"src": "2491:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 188,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2491:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 191,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 194,
												"src": "2503:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 190,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2503:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2476:43:3"
									},
									"returnParameters": {
										"id": 193,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2528:0:3"
									},
									"scope": 241,
									"src": "2455:74:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 195,
										"nodeType": "StructuredDocumentation",
										"src": "2535:452:3",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 202,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 200,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 197,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 202,
												"src": "3009:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 196,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3009:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 199,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 202,
												"src": "3021:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 198,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3021:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3008:29:3"
									},
									"returnParameters": {
										"id": 201,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3046:0:3"
									},
									"scope": 241,
									"src": "2992:55:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 203,
										"nodeType": "StructuredDocumentation",
										"src": "3053:139:3",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 210,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 206,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 205,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 210,
												"src": "3218:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 204,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3218:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3217:17:3"
									},
									"returnParameters": {
										"id": 209,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 208,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 210,
												"src": "3258:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 207,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3258:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3257:18:3"
									},
									"scope": 241,
									"src": "3197:79:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 211,
										"nodeType": "StructuredDocumentation",
										"src": "3282:309:3",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 218,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 216,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 213,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 218,
												"src": "3623:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 212,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3623:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 215,
												"mutability": "mutable",
												"name": "_approved",
												"nodeType": "VariableDeclaration",
												"scope": 218,
												"src": "3641:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 214,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3641:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3622:34:3"
									},
									"returnParameters": {
										"id": 217,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3665:0:3"
									},
									"scope": 241,
									"src": "3596:70:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 219,
										"nodeType": "StructuredDocumentation",
										"src": "3672:138:3",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 228,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 224,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 221,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 228,
												"src": "3841:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 220,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3841:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 223,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 228,
												"src": "3856:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 222,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3856:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3840:33:3"
									},
									"returnParameters": {
										"id": 227,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 226,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 228,
												"src": "3897:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 225,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3897:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3896:6:3"
									},
									"scope": 241,
									"src": "3815:88:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 229,
										"nodeType": "StructuredDocumentation",
										"src": "3909:568:3",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 240,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 238,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 231,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 240,
												"src": "4508:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 230,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4508:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 233,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 240,
												"src": "4522:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 232,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4522:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 235,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 240,
												"src": "4534:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 234,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4534:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 237,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 240,
												"src": "4551:19:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 236,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4551:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4507:64:3"
									},
									"returnParameters": {
										"id": 239,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4580:0:3"
									},
									"scope": 241,
									"src": "4482:99:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 242,
							"src": "169:4414:3"
						}
					],
					"src": "33:4551:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol",
					"exportedSymbols": {
						"IERC165": [
							47
						],
						"IERC721": [
							241
						],
						"IERC721Enumerable": [
							272
						]
					},
					"id": 273,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 243,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "./IERC721.sol",
							"id": 244,
							"nodeType": "ImportDirective",
							"scope": 273,
							"sourceUnit": 242,
							"src": "58:23:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 246,
										"name": "IERC721",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 241,
										"src": "251:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC721_$241",
											"typeString": "contract IERC721"
										}
									},
									"id": 247,
									"nodeType": "InheritanceSpecifier",
									"src": "251:7:4"
								}
							],
							"contractDependencies": [
								47,
								241
							],
							"contractKind": "interface",
							"documentation": {
								"id": 245,
								"nodeType": "StructuredDocumentation",
								"src": "83:136:4",
								"text": " @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
							},
							"fullyImplemented": false,
							"id": 272,
							"linearizedBaseContracts": [
								272,
								241,
								47
							],
							"name": "IERC721Enumerable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 248,
										"nodeType": "StructuredDocumentation",
										"src": "266:82:4",
										"text": " @dev Returns the total amount of tokens stored by the contract."
									},
									"functionSelector": "18160ddd",
									"id": 253,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 249,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "373:2:4"
									},
									"returnParameters": {
										"id": 252,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 251,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 253,
												"src": "399:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 250,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "399:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "398:9:4"
									},
									"scope": 272,
									"src": "353:55:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 254,
										"nodeType": "StructuredDocumentation",
										"src": "414:171:4",
										"text": " @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
									},
									"functionSelector": "2f745c59",
									"id": 263,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenOfOwnerByIndex",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 259,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 256,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 263,
												"src": "619:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 255,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "619:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 258,
												"mutability": "mutable",
												"name": "index",
												"nodeType": "VariableDeclaration",
												"scope": 263,
												"src": "634:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 257,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "634:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "618:30:4"
									},
									"returnParameters": {
										"id": 262,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 261,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 263,
												"src": "672:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 260,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "672:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "671:17:4"
									},
									"scope": 272,
									"src": "590:99:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 264,
										"nodeType": "StructuredDocumentation",
										"src": "695:164:4",
										"text": " @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n Use along with {totalSupply} to enumerate all tokens."
									},
									"functionSelector": "4f6ccce7",
									"id": 271,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenByIndex",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 267,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 266,
												"mutability": "mutable",
												"name": "index",
												"nodeType": "VariableDeclaration",
												"scope": 271,
												"src": "886:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 265,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "886:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "885:15:4"
									},
									"returnParameters": {
										"id": 270,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 269,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 271,
												"src": "924:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 268,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "924:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "923:9:4"
									},
									"scope": 272,
									"src": "864:69:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 273,
							"src": "220:715:4"
						}
					],
					"src": "33:903:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol",
					"exportedSymbols": {
						"IERC165": [
							47
						],
						"IERC721": [
							241
						],
						"IERC721Metadata": [
							299
						]
					},
					"id": 300,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 274,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "./IERC721.sol",
							"id": 275,
							"nodeType": "ImportDirective",
							"scope": 300,
							"sourceUnit": 242,
							"src": "58:23:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 277,
										"name": "IERC721",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 241,
										"src": "246:7:5",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC721_$241",
											"typeString": "contract IERC721"
										}
									},
									"id": 278,
									"nodeType": "InheritanceSpecifier",
									"src": "246:7:5"
								}
							],
							"contractDependencies": [
								47,
								241
							],
							"contractKind": "interface",
							"documentation": {
								"id": 276,
								"nodeType": "StructuredDocumentation",
								"src": "83:133:5",
								"text": " @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
							},
							"fullyImplemented": false,
							"id": 299,
							"linearizedBaseContracts": [
								299,
								241,
								47
							],
							"name": "IERC721Metadata",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 279,
										"nodeType": "StructuredDocumentation",
										"src": "261:58:5",
										"text": " @dev Returns the token collection name."
									},
									"functionSelector": "06fdde03",
									"id": 284,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 280,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "337:2:5"
									},
									"returnParameters": {
										"id": 283,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 282,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 284,
												"src": "363:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 281,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "363:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "362:15:5"
									},
									"scope": 299,
									"src": "324:54:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 285,
										"nodeType": "StructuredDocumentation",
										"src": "384:60:5",
										"text": " @dev Returns the token collection symbol."
									},
									"functionSelector": "95d89b41",
									"id": 290,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 286,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "464:2:5"
									},
									"returnParameters": {
										"id": 289,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 288,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 290,
												"src": "490:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 287,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "490:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "489:15:5"
									},
									"scope": 299,
									"src": "449:56:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 291,
										"nodeType": "StructuredDocumentation",
										"src": "511:90:5",
										"text": " @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."
									},
									"functionSelector": "c87b56dd",
									"id": 298,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenURI",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 294,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 293,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 298,
												"src": "624:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 292,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "624:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "623:17:5"
									},
									"returnParameters": {
										"id": 297,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 296,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 298,
												"src": "664:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 295,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "664:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "663:15:5"
									},
									"scope": 299,
									"src": "606:73:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 300,
							"src": "217:464:5"
						}
					],
					"src": "33:649:5"
				},
				"id": 5
			},
			"@thinkincoin-libs/uniswap-v2-core/contracts/interfaces/IUniswapV2Pair.sol": {
				"ast": {
					"absolutePath": "@thinkincoin-libs/uniswap-v2-core/contracts/interfaces/IUniswapV2Pair.sol",
					"exportedSymbols": {
						"IUniswapV2Pair": [
							541
						]
					},
					"id": 542,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 301,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "0:24:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 541,
							"linearizedBaseContracts": [
								541
							],
							"name": "IUniswapV2Pair",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"id": 309,
									"name": "Approval",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 308,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 303,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 309,
												"src": "72:21:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 302,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "72:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 305,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 309,
												"src": "95:23:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 304,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "95:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 307,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 309,
												"src": "120:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 306,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "120:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "71:60:6"
									},
									"src": "57:75:6"
								},
								{
									"anonymous": false,
									"id": 317,
									"name": "Transfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 316,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 311,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 317,
												"src": "152:20:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 310,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "152:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 313,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 317,
												"src": "174:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 312,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "174:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 315,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 317,
												"src": "194:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 314,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "194:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "151:54:6"
									},
									"src": "137:69:6"
								},
								{
									"functionSelector": "06fdde03",
									"id": 322,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 318,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "225:2:6"
									},
									"returnParameters": {
										"id": 321,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 320,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 322,
												"src": "251:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 319,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "251:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "250:15:6"
									},
									"scope": 541,
									"src": "212:54:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "95d89b41",
									"id": 327,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 323,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "286:2:6"
									},
									"returnParameters": {
										"id": 326,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 325,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 327,
												"src": "312:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 324,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "312:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "311:15:6"
									},
									"scope": 541,
									"src": "271:56:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "313ce567",
									"id": 332,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 328,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "349:2:6"
									},
									"returnParameters": {
										"id": 331,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 330,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 332,
												"src": "375:5:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 329,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "375:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "374:7:6"
									},
									"scope": 541,
									"src": "332:50:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "18160ddd",
									"id": 337,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 333,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "407:2:6"
									},
									"returnParameters": {
										"id": 336,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 335,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 337,
												"src": "433:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 334,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "433:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "432:6:6"
									},
									"scope": 541,
									"src": "387:52:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "70a08231",
									"id": 344,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 340,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 339,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 344,
												"src": "463:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 338,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "463:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "462:15:6"
									},
									"returnParameters": {
										"id": 343,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 342,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 344,
												"src": "501:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 341,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "501:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "500:6:6"
									},
									"scope": 541,
									"src": "444:63:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "dd62ed3e",
									"id": 353,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 349,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 346,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 353,
												"src": "531:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 345,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "531:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 348,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 353,
												"src": "546:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 347,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "546:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "530:32:6"
									},
									"returnParameters": {
										"id": 352,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 351,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 353,
												"src": "586:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 350,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "586:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "585:6:6"
									},
									"scope": 541,
									"src": "512:80:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "095ea7b3",
									"id": 362,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 358,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 355,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 362,
												"src": "615:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 354,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "615:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 357,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 362,
												"src": "632:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 356,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "632:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "614:29:6"
									},
									"returnParameters": {
										"id": 361,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 360,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 362,
												"src": "662:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 359,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "662:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "661:6:6"
									},
									"scope": 541,
									"src": "598:70:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "a9059cbb",
									"id": 371,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 367,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 364,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 371,
												"src": "691:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 363,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "691:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 366,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 371,
												"src": "703:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 365,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "703:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "690:24:6"
									},
									"returnParameters": {
										"id": 370,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 369,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 371,
												"src": "733:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 368,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "733:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "732:6:6"
									},
									"scope": 541,
									"src": "673:66:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "23b872dd",
									"id": 382,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 378,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 373,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "766:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 372,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "766:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 375,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "780:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 374,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "780:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 377,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "792:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 376,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "792:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "765:38:6"
									},
									"returnParameters": {
										"id": 381,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 380,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "822:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 379,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "822:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "821:6:6"
									},
									"scope": 541,
									"src": "744:84:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "3644e515",
									"id": 387,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 383,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "859:2:6"
									},
									"returnParameters": {
										"id": 386,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 385,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 387,
												"src": "885:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 384,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "885:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "884:9:6"
									},
									"scope": 541,
									"src": "834:60:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "30adf81f",
									"id": 392,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "PERMIT_TYPEHASH",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 388,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "923:2:6"
									},
									"returnParameters": {
										"id": 391,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 390,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 392,
												"src": "949:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 389,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "949:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "948:9:6"
									},
									"scope": 541,
									"src": "899:59:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "7ecebe00",
									"id": 399,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 395,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 394,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 399,
												"src": "979:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 393,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "979:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "978:15:6"
									},
									"returnParameters": {
										"id": 398,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 397,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 399,
												"src": "1017:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 396,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1017:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1016:6:6"
									},
									"scope": 541,
									"src": "963:60:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "d505accf",
									"id": 416,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 414,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 401,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 416,
												"src": "1045:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 400,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1045:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 403,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 416,
												"src": "1060:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 402,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1060:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 405,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 416,
												"src": "1077:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 404,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1077:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 407,
												"mutability": "mutable",
												"name": "deadline",
												"nodeType": "VariableDeclaration",
												"scope": 416,
												"src": "1089:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 406,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1089:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 409,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 416,
												"src": "1104:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 408,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1104:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 411,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 416,
												"src": "1113:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 410,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1113:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 413,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 416,
												"src": "1124:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 412,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1124:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1044:90:6"
									},
									"returnParameters": {
										"id": 415,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1143:0:6"
									},
									"scope": 541,
									"src": "1029:115:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"id": 424,
									"name": "Mint",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 423,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 418,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 424,
												"src": "1161:22:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 417,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1161:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 420,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 424,
												"src": "1185:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 419,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1185:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 422,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 424,
												"src": "1199:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 421,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1199:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1160:52:6"
									},
									"src": "1150:63:6"
								},
								{
									"anonymous": false,
									"id": 434,
									"name": "Burn",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 433,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 426,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 434,
												"src": "1229:22:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 425,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1229:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 428,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 434,
												"src": "1253:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 427,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1253:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 430,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 434,
												"src": "1267:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 429,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1267:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 432,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 434,
												"src": "1281:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 431,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1281:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1228:72:6"
									},
									"src": "1218:83:6"
								},
								{
									"anonymous": false,
									"id": 448,
									"name": "Swap",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 447,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 436,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 448,
												"src": "1326:22:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 435,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1326:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 438,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0In",
												"nodeType": "VariableDeclaration",
												"scope": 448,
												"src": "1358:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 437,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1358:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 440,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1In",
												"nodeType": "VariableDeclaration",
												"scope": 448,
												"src": "1382:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 439,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1382:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 442,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0Out",
												"nodeType": "VariableDeclaration",
												"scope": 448,
												"src": "1406:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 441,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1406:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 444,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1Out",
												"nodeType": "VariableDeclaration",
												"scope": 448,
												"src": "1431:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 443,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1431:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 446,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 448,
												"src": "1456:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 445,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1456:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1316:164:6"
									},
									"src": "1306:175:6"
								},
								{
									"anonymous": false,
									"id": 454,
									"name": "Sync",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 453,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 450,
												"indexed": false,
												"mutability": "mutable",
												"name": "reserve0",
												"nodeType": "VariableDeclaration",
												"scope": 454,
												"src": "1497:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint112",
													"typeString": "uint112"
												},
												"typeName": {
													"id": 449,
													"name": "uint112",
													"nodeType": "ElementaryTypeName",
													"src": "1497:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint112",
														"typeString": "uint112"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 452,
												"indexed": false,
												"mutability": "mutable",
												"name": "reserve1",
												"nodeType": "VariableDeclaration",
												"scope": 454,
												"src": "1515:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint112",
													"typeString": "uint112"
												},
												"typeName": {
													"id": 451,
													"name": "uint112",
													"nodeType": "ElementaryTypeName",
													"src": "1515:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint112",
														"typeString": "uint112"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1496:36:6"
									},
									"src": "1486:47:6"
								},
								{
									"functionSelector": "ba9a7a56",
									"id": 459,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "MINIMUM_LIQUIDITY",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 455,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1565:2:6"
									},
									"returnParameters": {
										"id": 458,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 457,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 459,
												"src": "1591:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 456,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1591:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1590:6:6"
									},
									"scope": 541,
									"src": "1539:58:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "c45a0155",
									"id": 464,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "factory",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 460,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1618:2:6"
									},
									"returnParameters": {
										"id": 463,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 462,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 464,
												"src": "1644:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 461,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1644:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1643:9:6"
									},
									"scope": 541,
									"src": "1602:51:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "0dfe1681",
									"id": 469,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "token0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 465,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1673:2:6"
									},
									"returnParameters": {
										"id": 468,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 467,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 469,
												"src": "1699:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 466,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1699:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1698:9:6"
									},
									"scope": 541,
									"src": "1658:50:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "d21220a7",
									"id": 474,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "token1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 470,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1728:2:6"
									},
									"returnParameters": {
										"id": 473,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 472,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 474,
												"src": "1754:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 471,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1754:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1753:9:6"
									},
									"scope": 541,
									"src": "1713:50:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "0902f1ac",
									"id": 483,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getReserves",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 475,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1788:2:6"
									},
									"returnParameters": {
										"id": 482,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 477,
												"mutability": "mutable",
												"name": "reserve0",
												"nodeType": "VariableDeclaration",
												"scope": 483,
												"src": "1814:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint112",
													"typeString": "uint112"
												},
												"typeName": {
													"id": 476,
													"name": "uint112",
													"nodeType": "ElementaryTypeName",
													"src": "1814:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint112",
														"typeString": "uint112"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 479,
												"mutability": "mutable",
												"name": "reserve1",
												"nodeType": "VariableDeclaration",
												"scope": 483,
												"src": "1832:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint112",
													"typeString": "uint112"
												},
												"typeName": {
													"id": 478,
													"name": "uint112",
													"nodeType": "ElementaryTypeName",
													"src": "1832:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint112",
														"typeString": "uint112"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 481,
												"mutability": "mutable",
												"name": "blockTimestampLast",
												"nodeType": "VariableDeclaration",
												"scope": 483,
												"src": "1850:25:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 480,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "1850:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1813:63:6"
									},
									"scope": 541,
									"src": "1768:109:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "5909c0d5",
									"id": 488,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "price0CumulativeLast",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 484,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1911:2:6"
									},
									"returnParameters": {
										"id": 487,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 486,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 488,
												"src": "1937:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 485,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1937:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1936:6:6"
									},
									"scope": 541,
									"src": "1882:61:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "5a3d5493",
									"id": 493,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "price1CumulativeLast",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 489,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1977:2:6"
									},
									"returnParameters": {
										"id": 492,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 491,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "2003:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 490,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "2003:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2002:6:6"
									},
									"scope": 541,
									"src": "1948:61:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "7464fc3d",
									"id": 498,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "kLast",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 494,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2028:2:6"
									},
									"returnParameters": {
										"id": 497,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 496,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 498,
												"src": "2054:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 495,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "2054:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2053:6:6"
									},
									"scope": 541,
									"src": "2014:46:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "6a627842",
									"id": 505,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 501,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 500,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 505,
												"src": "2080:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 499,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2080:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2079:12:6"
									},
									"returnParameters": {
										"id": 504,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 503,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 505,
												"src": "2110:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 502,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "2110:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2109:16:6"
									},
									"scope": 541,
									"src": "2066:60:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "89afcb44",
									"id": 514,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 508,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 507,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 514,
												"src": "2145:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 506,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2145:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2144:12:6"
									},
									"returnParameters": {
										"id": 513,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 510,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 514,
												"src": "2175:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 509,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "2175:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 512,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 514,
												"src": "2189:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 511,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "2189:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2174:28:6"
									},
									"scope": 541,
									"src": "2131:72:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "022c0d9f",
									"id": 525,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "swap",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 523,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 516,
												"mutability": "mutable",
												"name": "amount0Out",
												"nodeType": "VariableDeclaration",
												"scope": 525,
												"src": "2222:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 515,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "2222:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 518,
												"mutability": "mutable",
												"name": "amount1Out",
												"nodeType": "VariableDeclaration",
												"scope": 525,
												"src": "2239:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 517,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "2239:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 520,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 525,
												"src": "2256:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 519,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2256:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 522,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 525,
												"src": "2268:19:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 521,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2268:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2221:67:6"
									},
									"returnParameters": {
										"id": 524,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2297:0:6"
									},
									"scope": 541,
									"src": "2208:90:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "bc25cf77",
									"id": 530,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "skim",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 528,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 527,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 530,
												"src": "2317:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 526,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2317:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2316:12:6"
									},
									"returnParameters": {
										"id": 529,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2337:0:6"
									},
									"scope": 541,
									"src": "2303:35:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "fff6cae9",
									"id": 533,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "sync",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 531,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2356:2:6"
									},
									"returnParameters": {
										"id": 532,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2367:0:6"
									},
									"scope": 541,
									"src": "2343:25:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "485cc955",
									"id": 540,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 538,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 535,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 540,
												"src": "2394:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 534,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2394:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 537,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 540,
												"src": "2403:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 536,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2403:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2393:18:6"
									},
									"returnParameters": {
										"id": 539,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2420:0:6"
									},
									"scope": 541,
									"src": "2374:47:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 542,
							"src": "26:2397:6"
						}
					],
					"src": "0:2424:6"
				},
				"id": 6
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/IUniswapV3Factory.sol": {
				"ast": {
					"absolutePath": "@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/IUniswapV3Factory.sol",
					"exportedSymbols": {
						"IUniswapV3Factory": [
							624
						]
					},
					"id": 625,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 543,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 544,
								"nodeType": "StructuredDocumentation",
								"src": "71:163:7",
								"text": "@title The interface for the Uniswap V3 Factory\n @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees"
							},
							"fullyImplemented": false,
							"id": 624,
							"linearizedBaseContracts": [
								624
							],
							"name": "IUniswapV3Factory",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 545,
										"nodeType": "StructuredDocumentation",
										"src": "268:185:7",
										"text": "@notice Emitted when the owner of the factory is changed\n @param oldOwner The owner before the owner was changed\n @param newOwner The owner after the owner was changed"
									},
									"id": 551,
									"name": "OwnerChanged",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 550,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 547,
												"indexed": true,
												"mutability": "mutable",
												"name": "oldOwner",
												"nodeType": "VariableDeclaration",
												"scope": 551,
												"src": "477:24:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 546,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "477:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 549,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 551,
												"src": "503:24:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 548,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "503:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "476:52:7"
									},
									"src": "458:71:7"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 552,
										"nodeType": "StructuredDocumentation",
										"src": "535:421:7",
										"text": "@notice Emitted when a pool is created\n @param token0 The first token of the pool by address sort order\n @param token1 The second token of the pool by address sort order\n @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n @param tickSpacing The minimum number of ticks between initialized ticks\n @param pool The address of the created pool"
									},
									"id": 564,
									"name": "PoolCreated",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 563,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 554,
												"indexed": true,
												"mutability": "mutable",
												"name": "token0",
												"nodeType": "VariableDeclaration",
												"scope": 564,
												"src": "988:22:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 553,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "988:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 556,
												"indexed": true,
												"mutability": "mutable",
												"name": "token1",
												"nodeType": "VariableDeclaration",
												"scope": 564,
												"src": "1020:22:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 555,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1020:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 558,
												"indexed": true,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 564,
												"src": "1052:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 557,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "1052:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 560,
												"indexed": false,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nodeType": "VariableDeclaration",
												"scope": 564,
												"src": "1080:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 559,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1080:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 562,
												"indexed": false,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 564,
												"src": "1107:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 561,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1107:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "978:147:7"
									},
									"src": "961:165:7"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 565,
										"nodeType": "StructuredDocumentation",
										"src": "1132:275:7",
										"text": "@notice Emitted when a new fee amount is enabled for pool creation via the factory\n @param fee The enabled fee, denominated in hundredths of a bip\n @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee"
									},
									"id": 571,
									"name": "FeeAmountEnabled",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 570,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 567,
												"indexed": true,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 571,
												"src": "1435:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 566,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "1435:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 569,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nodeType": "VariableDeclaration",
												"scope": 571,
												"src": "1455:25:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 568,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1455:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1434:47:7"
									},
									"src": "1412:70:7"
								},
								{
									"documentation": {
										"id": 572,
										"nodeType": "StructuredDocumentation",
										"src": "1488:163:7",
										"text": "@notice Returns the current owner of the factory\n @dev Can be changed by the current owner via setOwner\n @return The address of the factory owner"
									},
									"functionSelector": "8da5cb5b",
									"id": 577,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 573,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1670:2:7"
									},
									"returnParameters": {
										"id": 576,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 575,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 577,
												"src": "1696:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 574,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1696:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1695:9:7"
									},
									"scope": 624,
									"src": "1656:49:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 578,
										"nodeType": "StructuredDocumentation",
										"src": "1711:348:7",
										"text": "@notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n @return The tick spacing"
									},
									"functionSelector": "22afcccb",
									"id": 585,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "feeAmountTickSpacing",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 581,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 580,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 585,
												"src": "2094:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 579,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "2094:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2093:12:7"
									},
									"returnParameters": {
										"id": 584,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 583,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 585,
												"src": "2129:5:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 582,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2129:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2128:7:7"
									},
									"scope": 624,
									"src": "2064:72:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 586,
										"nodeType": "StructuredDocumentation",
										"src": "2142:471:7",
										"text": "@notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n @param tokenA The contract address of either token0 or token1\n @param tokenB The contract address of the other token\n @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n @return pool The pool address"
									},
									"functionSelector": "1698ee82",
									"id": 597,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getPool",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 593,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 588,
												"mutability": "mutable",
												"name": "tokenA",
												"nodeType": "VariableDeclaration",
												"scope": 597,
												"src": "2644:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 587,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2644:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 590,
												"mutability": "mutable",
												"name": "tokenB",
												"nodeType": "VariableDeclaration",
												"scope": 597,
												"src": "2668:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 589,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2668:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 592,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 597,
												"src": "2692:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 591,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "2692:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2634:74:7"
									},
									"returnParameters": {
										"id": 596,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 595,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 597,
												"src": "2732:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 594,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2732:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2731:14:7"
									},
									"scope": 624,
									"src": "2618:128:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 598,
										"nodeType": "StructuredDocumentation",
										"src": "2752:554:7",
										"text": "@notice Creates a pool for the given two tokens and fee\n @param tokenA One of the two tokens in the desired pool\n @param tokenB The other of the two tokens in the desired pool\n @param fee The desired fee for the pool\n @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n are invalid.\n @return pool The address of the newly created pool"
									},
									"functionSelector": "a1671295",
									"id": 609,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createPool",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 605,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 600,
												"mutability": "mutable",
												"name": "tokenA",
												"nodeType": "VariableDeclaration",
												"scope": 609,
												"src": "3340:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 599,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3340:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 602,
												"mutability": "mutable",
												"name": "tokenB",
												"nodeType": "VariableDeclaration",
												"scope": 609,
												"src": "3364:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 601,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3364:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 604,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 609,
												"src": "3388:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 603,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "3388:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3330:74:7"
									},
									"returnParameters": {
										"id": 608,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 607,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 609,
												"src": "3423:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 606,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3423:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3422:14:7"
									},
									"scope": 624,
									"src": "3311:126:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 610,
										"nodeType": "StructuredDocumentation",
										"src": "3443:144:7",
										"text": "@notice Updates the owner of the factory\n @dev Must be called by the current owner\n @param _owner The new owner of the factory"
									},
									"functionSelector": "13af4035",
									"id": 615,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setOwner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 613,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 612,
												"mutability": "mutable",
												"name": "_owner",
												"nodeType": "VariableDeclaration",
												"scope": 615,
												"src": "3610:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 611,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3610:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3609:16:7"
									},
									"returnParameters": {
										"id": 614,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3634:0:7"
									},
									"scope": 624,
									"src": "3592:43:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 616,
										"nodeType": "StructuredDocumentation",
										"src": "3641:326:7",
										"text": "@notice Enables a fee amount with the given tickSpacing\n @dev Fee amounts may never be removed once enabled\n @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount"
									},
									"functionSelector": "8a7c195f",
									"id": 623,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "enableFeeAmount",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 621,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 618,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 623,
												"src": "3997:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 617,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "3997:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 620,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nodeType": "VariableDeclaration",
												"scope": 623,
												"src": "4009:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 619,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "4009:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3996:31:7"
									},
									"returnParameters": {
										"id": 622,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4036:0:7"
									},
									"scope": 624,
									"src": "3972:65:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 625,
							"src": "234:3805:7"
						}
					],
					"src": "45:3995:7"
				},
				"id": 7
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
				"ast": {
					"absolutePath": "@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/IUniswapV3Pool.sol",
					"exportedSymbols": {
						"IUniswapV3Pool": [
							646
						],
						"IUniswapV3PoolActions": [
							742
						],
						"IUniswapV3PoolDerivedState": [
							773
						],
						"IUniswapV3PoolEvents": [
							892
						],
						"IUniswapV3PoolImmutables": [
							932
						],
						"IUniswapV3PoolOwnerActions": [
							958
						],
						"IUniswapV3PoolState": [
							1066
						]
					},
					"id": 647,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 626,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:8"
						},
						{
							"absolutePath": "@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol",
							"file": "./pool/IUniswapV3PoolImmutables.sol",
							"id": 627,
							"nodeType": "ImportDirective",
							"scope": 647,
							"sourceUnit": 933,
							"src": "71:45:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol",
							"file": "./pool/IUniswapV3PoolState.sol",
							"id": 628,
							"nodeType": "ImportDirective",
							"scope": 647,
							"sourceUnit": 1067,
							"src": "117:40:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol",
							"file": "./pool/IUniswapV3PoolDerivedState.sol",
							"id": 629,
							"nodeType": "ImportDirective",
							"scope": 647,
							"sourceUnit": 774,
							"src": "158:47:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol",
							"file": "./pool/IUniswapV3PoolActions.sol",
							"id": 630,
							"nodeType": "ImportDirective",
							"scope": 647,
							"sourceUnit": 743,
							"src": "206:42:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol",
							"file": "./pool/IUniswapV3PoolOwnerActions.sol",
							"id": 631,
							"nodeType": "ImportDirective",
							"scope": 647,
							"sourceUnit": 959,
							"src": "249:47:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol",
							"file": "./pool/IUniswapV3PoolEvents.sol",
							"id": 632,
							"nodeType": "ImportDirective",
							"scope": 647,
							"sourceUnit": 893,
							"src": "297:41:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 634,
										"name": "IUniswapV3PoolImmutables",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 932,
										"src": "637:24:8",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolImmutables_$932",
											"typeString": "contract IUniswapV3PoolImmutables"
										}
									},
									"id": 635,
									"nodeType": "InheritanceSpecifier",
									"src": "637:24:8"
								},
								{
									"baseName": {
										"id": 636,
										"name": "IUniswapV3PoolState",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1066,
										"src": "667:19:8",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolState_$1066",
											"typeString": "contract IUniswapV3PoolState"
										}
									},
									"id": 637,
									"nodeType": "InheritanceSpecifier",
									"src": "667:19:8"
								},
								{
									"baseName": {
										"id": 638,
										"name": "IUniswapV3PoolDerivedState",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 773,
										"src": "692:26:8",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolDerivedState_$773",
											"typeString": "contract IUniswapV3PoolDerivedState"
										}
									},
									"id": 639,
									"nodeType": "InheritanceSpecifier",
									"src": "692:26:8"
								},
								{
									"baseName": {
										"id": 640,
										"name": "IUniswapV3PoolActions",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 742,
										"src": "724:21:8",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolActions_$742",
											"typeString": "contract IUniswapV3PoolActions"
										}
									},
									"id": 641,
									"nodeType": "InheritanceSpecifier",
									"src": "724:21:8"
								},
								{
									"baseName": {
										"id": 642,
										"name": "IUniswapV3PoolOwnerActions",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 958,
										"src": "751:26:8",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolOwnerActions_$958",
											"typeString": "contract IUniswapV3PoolOwnerActions"
										}
									},
									"id": 643,
									"nodeType": "InheritanceSpecifier",
									"src": "751:26:8"
								},
								{
									"baseName": {
										"id": 644,
										"name": "IUniswapV3PoolEvents",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 892,
										"src": "783:20:8",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolEvents_$892",
											"typeString": "contract IUniswapV3PoolEvents"
										}
									},
									"id": 645,
									"nodeType": "InheritanceSpecifier",
									"src": "783:20:8"
								}
							],
							"contractDependencies": [
								742,
								773,
								892,
								932,
								958,
								1066
							],
							"contractKind": "interface",
							"documentation": {
								"id": 633,
								"nodeType": "StructuredDocumentation",
								"src": "340:265:8",
								"text": "@title The interface for a Uniswap V3 Pool\n @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n to the ERC20 specification\n @dev The pool interface is broken up into many smaller pieces"
							},
							"fullyImplemented": false,
							"id": 646,
							"linearizedBaseContracts": [
								646,
								892,
								958,
								742,
								773,
								1066,
								932
							],
							"name": "IUniswapV3Pool",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 647,
							"src": "605:203:8"
						}
					],
					"src": "45:764:8"
				},
				"id": 8
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
				"ast": {
					"absolutePath": "@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol",
					"exportedSymbols": {
						"IUniswapV3PoolActions": [
							742
						]
					},
					"id": 743,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 648,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 649,
								"nodeType": "StructuredDocumentation",
								"src": "71:102:9",
								"text": "@title Permissionless pool actions\n @notice Contains pool methods that can be called by anyone"
							},
							"fullyImplemented": false,
							"id": 742,
							"linearizedBaseContracts": [
								742
							],
							"name": "IUniswapV3PoolActions",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 650,
										"nodeType": "StructuredDocumentation",
										"src": "211:206:9",
										"text": "@notice Sets the initial price for the pool\n @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96"
									},
									"functionSelector": "f637731d",
									"id": 655,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 653,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 652,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 655,
												"src": "442:20:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 651,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "442:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "441:22:9"
									},
									"returnParameters": {
										"id": 654,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "472:0:9"
									},
									"scope": 742,
									"src": "422:51:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 656,
										"nodeType": "StructuredDocumentation",
										"src": "479:1029:9",
										"text": "@notice Adds liquidity for the given recipient/tickLower/tickUpper position\n @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n on tickLower, tickUpper, the amount of liquidity, and the current price.\n @param recipient The address for which the liquidity will be created\n @param tickLower The lower tick of the position in which to add liquidity\n @param tickUpper The upper tick of the position in which to add liquidity\n @param amount The amount of liquidity to mint\n @param data Any data that should be passed through to the callback\n @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
									},
									"functionSelector": "3c8a7d8d",
									"id": 673,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 667,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 658,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 673,
												"src": "1536:17:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 657,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1536:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 660,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 673,
												"src": "1563:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 659,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1563:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 662,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 673,
												"src": "1588:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 661,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1588:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 664,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 673,
												"src": "1613:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 663,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1613:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 666,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 673,
												"src": "1637:19:9",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 665,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1637:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1526:136:9"
									},
									"returnParameters": {
										"id": 672,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 669,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 673,
												"src": "1681:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 668,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1681:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 671,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 673,
												"src": "1698:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 670,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1698:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1680:34:9"
									},
									"scope": 742,
									"src": "1513:202:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 674,
										"nodeType": "StructuredDocumentation",
										"src": "1721:1053:9",
										"text": "@notice Collects tokens owed to a position\n @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n @param recipient The address which should receive the fees collected\n @param tickLower The lower tick of the position for which to collect fees\n @param tickUpper The upper tick of the position for which to collect fees\n @param amount0Requested How much token0 should be withdrawn from the fees owed\n @param amount1Requested How much token1 should be withdrawn from the fees owed\n @return amount0 The amount of fees collected in token0\n @return amount1 The amount of fees collected in token1"
									},
									"functionSelector": "4f1eb3d8",
									"id": 691,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collect",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 685,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 676,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 691,
												"src": "2805:17:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 675,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2805:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 678,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 691,
												"src": "2832:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 677,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2832:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 680,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 691,
												"src": "2857:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 679,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2857:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 682,
												"mutability": "mutable",
												"name": "amount0Requested",
												"nodeType": "VariableDeclaration",
												"scope": 691,
												"src": "2882:24:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 681,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2882:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 684,
												"mutability": "mutable",
												"name": "amount1Requested",
												"nodeType": "VariableDeclaration",
												"scope": 691,
												"src": "2916:24:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 683,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2916:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2795:151:9"
									},
									"returnParameters": {
										"id": 690,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 687,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 691,
												"src": "2965:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 686,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2965:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 689,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 691,
												"src": "2982:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 688,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2982:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2964:34:9"
									},
									"scope": 742,
									"src": "2779:220:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 692,
										"nodeType": "StructuredDocumentation",
										"src": "3005:631:9",
										"text": "@notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n @dev Fees must be collected separately via a call to #collect\n @param tickLower The lower tick of the position for which to burn liquidity\n @param tickUpper The upper tick of the position for which to burn liquidity\n @param amount How much liquidity to burn\n @return amount0 The amount of token0 sent to the recipient\n @return amount1 The amount of token1 sent to the recipient"
									},
									"functionSelector": "a34123a7",
									"id": 705,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 699,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 694,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 705,
												"src": "3664:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 693,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3664:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 696,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 705,
												"src": "3689:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 695,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3689:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 698,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 705,
												"src": "3714:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 697,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3714:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3654:80:9"
									},
									"returnParameters": {
										"id": 704,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 701,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 705,
												"src": "3753:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 700,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3753:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 703,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 705,
												"src": "3770:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 702,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3770:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3752:34:9"
									},
									"scope": 742,
									"src": "3641:146:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 706,
										"nodeType": "StructuredDocumentation",
										"src": "3793:1015:9",
										"text": "@notice Swap token0 for token1, or token1 for token0\n @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n @param recipient The address to receive the output of the swap\n @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n value after the swap. If one for zero, the price cannot be greater than this value after the swap\n @param data Any data to be passed through to the callback\n @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
									},
									"functionSelector": "128acb08",
									"id": 723,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "swap",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 717,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 708,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 723,
												"src": "4836:17:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 707,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4836:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 710,
												"mutability": "mutable",
												"name": "zeroForOne",
												"nodeType": "VariableDeclaration",
												"scope": 723,
												"src": "4863:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 709,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4863:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 712,
												"mutability": "mutable",
												"name": "amountSpecified",
												"nodeType": "VariableDeclaration",
												"scope": 723,
												"src": "4888:22:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 711,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "4888:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 714,
												"mutability": "mutable",
												"name": "sqrtPriceLimitX96",
												"nodeType": "VariableDeclaration",
												"scope": 723,
												"src": "4920:25:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 713,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "4920:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 716,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 723,
												"src": "4955:19:9",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 715,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4955:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4826:154:9"
									},
									"returnParameters": {
										"id": 722,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 719,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 723,
												"src": "4999:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 718,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "4999:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 721,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 723,
												"src": "5015:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 720,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "5015:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4998:32:9"
									},
									"scope": 742,
									"src": "4813:218:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 724,
										"nodeType": "StructuredDocumentation",
										"src": "5037:657:9",
										"text": "@notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n with 0 amount{0,1} and sending the donation amount(s) from the callback\n @param recipient The address which will receive the token0 and token1 amounts\n @param amount0 The amount of token0 to send\n @param amount1 The amount of token1 to send\n @param data Any data to be passed through to the callback"
									},
									"functionSelector": "490e6cbc",
									"id": 735,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "flash",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 733,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 726,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "5723:17:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 725,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5723:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 728,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "5750:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 727,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5750:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 730,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "5775:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 729,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5775:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 732,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "5800:19:9",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 731,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5800:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5713:112:9"
									},
									"returnParameters": {
										"id": 734,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5834:0:9"
									},
									"scope": 742,
									"src": "5699:136:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 736,
										"nodeType": "StructuredDocumentation",
										"src": "5841:367:9",
										"text": "@notice Increase the maximum number of price and liquidity observations that this pool will store\n @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n the input observationCardinalityNext.\n @param observationCardinalityNext The desired minimum number of observations for the pool to store"
									},
									"functionSelector": "32148f67",
									"id": 741,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "increaseObservationCardinalityNext",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 739,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 738,
												"mutability": "mutable",
												"name": "observationCardinalityNext",
												"nodeType": "VariableDeclaration",
												"scope": 741,
												"src": "6257:33:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 737,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "6257:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6256:35:9"
									},
									"returnParameters": {
										"id": 740,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6300:0:9"
									},
									"scope": 742,
									"src": "6213:88:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 743,
							"src": "173:6130:9"
						}
					],
					"src": "45:6259:9"
				},
				"id": 9
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
				"ast": {
					"absolutePath": "@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol",
					"exportedSymbols": {
						"IUniswapV3PoolDerivedState": [
							773
						]
					},
					"id": 774,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 744,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:10"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 745,
								"nodeType": "StructuredDocumentation",
								"src": "71:222:10",
								"text": "@title Pool state that is not stored\n @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n blockchain. The functions here may have variable gas costs."
							},
							"fullyImplemented": false,
							"id": 773,
							"linearizedBaseContracts": [
								773
							],
							"name": "IUniswapV3PoolDerivedState",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 746,
										"nodeType": "StructuredDocumentation",
										"src": "336:1045:10",
										"text": "@notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n you must call it with secondsAgos = [3600, 0].\n @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n timestamp"
									},
									"functionSelector": "883bdbfd",
									"id": 758,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "observe",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 750,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 749,
												"mutability": "mutable",
												"name": "secondsAgos",
												"nodeType": "VariableDeclaration",
												"scope": 758,
												"src": "1403:29:10",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint32_$dyn_calldata_ptr",
													"typeString": "uint32[]"
												},
												"typeName": {
													"baseType": {
														"id": 747,
														"name": "uint32",
														"nodeType": "ElementaryTypeName",
														"src": "1403:6:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"id": 748,
													"nodeType": "ArrayTypeName",
													"src": "1403:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint32_$dyn_storage_ptr",
														"typeString": "uint32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1402:31:10"
									},
									"returnParameters": {
										"id": 757,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 753,
												"mutability": "mutable",
												"name": "tickCumulatives",
												"nodeType": "VariableDeclaration",
												"scope": 758,
												"src": "1481:30:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_int56_$dyn_memory_ptr",
													"typeString": "int56[]"
												},
												"typeName": {
													"baseType": {
														"id": 751,
														"name": "int56",
														"nodeType": "ElementaryTypeName",
														"src": "1481:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_int56",
															"typeString": "int56"
														}
													},
													"id": 752,
													"nodeType": "ArrayTypeName",
													"src": "1481:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_int56_$dyn_storage_ptr",
														"typeString": "int56[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 756,
												"mutability": "mutable",
												"name": "secondsPerLiquidityCumulativeX128s",
												"nodeType": "VariableDeclaration",
												"scope": 758,
												"src": "1513:51:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint160_$dyn_memory_ptr",
													"typeString": "uint160[]"
												},
												"typeName": {
													"baseType": {
														"id": 754,
														"name": "uint160",
														"nodeType": "ElementaryTypeName",
														"src": "1513:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"id": 755,
													"nodeType": "ArrayTypeName",
													"src": "1513:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint160_$dyn_storage_ptr",
														"typeString": "uint160[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1480:85:10"
									},
									"scope": 773,
									"src": "1386:180:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 759,
										"nodeType": "StructuredDocumentation",
										"src": "1572:771:10",
										"text": "@notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n snapshot is taken and the second snapshot is taken.\n @param tickLower The lower tick of the range\n @param tickUpper The upper tick of the range\n @return tickCumulativeInside The snapshot of the tick accumulator for the range\n @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n @return secondsInside The snapshot of seconds per liquidity for the range"
									},
									"functionSelector": "a38807f2",
									"id": 772,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "snapshotCumulativesInside",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 764,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 761,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 772,
												"src": "2383:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 760,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2383:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 763,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 772,
												"src": "2400:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 762,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2400:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2382:34:10"
									},
									"returnParameters": {
										"id": 771,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 766,
												"mutability": "mutable",
												"name": "tickCumulativeInside",
												"nodeType": "VariableDeclaration",
												"scope": 772,
												"src": "2477:26:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 765,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "2477:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 768,
												"mutability": "mutable",
												"name": "secondsPerLiquidityInsideX128",
												"nodeType": "VariableDeclaration",
												"scope": 772,
												"src": "2517:37:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 767,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "2517:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 770,
												"mutability": "mutable",
												"name": "secondsInside",
												"nodeType": "VariableDeclaration",
												"scope": 772,
												"src": "2568:20:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 769,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "2568:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2463:135:10"
									},
									"scope": 773,
									"src": "2348:251:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 774,
							"src": "293:2308:10"
						}
					],
					"src": "45:2557:10"
				},
				"id": 10
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
				"ast": {
					"absolutePath": "@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol",
					"exportedSymbols": {
						"IUniswapV3PoolEvents": [
							892
						]
					},
					"id": 893,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 775,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:11"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 776,
								"nodeType": "StructuredDocumentation",
								"src": "71:88:11",
								"text": "@title Events emitted by a pool\n @notice Contains all events emitted by the pool"
							},
							"fullyImplemented": true,
							"id": 892,
							"linearizedBaseContracts": [
								892
							],
							"name": "IUniswapV3PoolEvents",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 777,
										"nodeType": "StructuredDocumentation",
										"src": "196:344:11",
										"text": "@notice Emitted exactly once by a pool when #initialize is first called on the pool\n @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"
									},
									"id": 783,
									"name": "Initialize",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 782,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 779,
												"indexed": false,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 783,
												"src": "562:20:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 778,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "562:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 781,
												"indexed": false,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 783,
												"src": "584:10:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 780,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "584:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "561:34:11"
									},
									"src": "545:51:11"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 784,
										"nodeType": "StructuredDocumentation",
										"src": "602:551:11",
										"text": "@notice Emitted when liquidity is minted for a given position\n @param sender The address that minted the liquidity\n @param owner The owner of the position and recipient of any minted liquidity\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount The amount of liquidity minted to the position range\n @param amount0 How much token0 was required for the minted liquidity\n @param amount1 How much token1 was required for the minted liquidity"
									},
									"id": 800,
									"name": "Mint",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 799,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 786,
												"indexed": false,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 800,
												"src": "1178:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 785,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1178:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 788,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 800,
												"src": "1202:21:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 787,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1202:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 790,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 800,
												"src": "1233:23:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 789,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1233:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 792,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 800,
												"src": "1266:23:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 791,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1266:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 794,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 800,
												"src": "1299:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 793,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1299:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 796,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 800,
												"src": "1323:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 795,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1323:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 798,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 800,
												"src": "1348:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 797,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1348:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1168:201:11"
									},
									"src": "1158:212:11"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 801,
										"nodeType": "StructuredDocumentation",
										"src": "1376:493:11",
										"text": "@notice Emitted when fees are collected by the owner of a position\n @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n @param owner The owner of the position for which fees are collected\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount0 The amount of token0 fees collected\n @param amount1 The amount of token1 fees collected"
									},
									"id": 815,
									"name": "Collect",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 814,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 803,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 815,
												"src": "1897:21:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 802,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1897:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 805,
												"indexed": false,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 815,
												"src": "1928:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 804,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1928:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 807,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 815,
												"src": "1955:23:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 806,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1955:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 809,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 815,
												"src": "1988:23:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 808,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1988:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 811,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 815,
												"src": "2021:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 810,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2021:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 813,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 815,
												"src": "2046:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 812,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2046:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1887:180:11"
									},
									"src": "1874:194:11"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 816,
										"nodeType": "StructuredDocumentation",
										"src": "2074:523:11",
										"text": "@notice Emitted when a position's liquidity is removed\n @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n @param owner The owner of the position for which liquidity is removed\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount The amount of liquidity to remove\n @param amount0 The amount of token0 withdrawn\n @param amount1 The amount of token1 withdrawn"
									},
									"id": 830,
									"name": "Burn",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 829,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 818,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 830,
												"src": "2622:21:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 817,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2622:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 820,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 830,
												"src": "2653:23:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 819,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2653:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 822,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 830,
												"src": "2686:23:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 821,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2686:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 824,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 830,
												"src": "2719:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 823,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2719:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 826,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 830,
												"src": "2743:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 825,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2743:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 828,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 830,
												"src": "2768:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 827,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2768:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2612:177:11"
									},
									"src": "2602:188:11"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 831,
										"nodeType": "StructuredDocumentation",
										"src": "2796:600:11",
										"text": "@notice Emitted by the pool for any swaps between token0 and token1\n @param sender The address that initiated the swap call, and that received the callback\n @param recipient The address that received the output of the swap\n @param amount0 The delta of the token0 balance of the pool\n @param amount1 The delta of the token1 balance of the pool\n @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n @param liquidity The liquidity of the pool after the swap\n @param tick The log base 1.0001 of price of the pool after the swap"
									},
									"id": 847,
									"name": "Swap",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 846,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 833,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 847,
												"src": "3421:22:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 832,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3421:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 835,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 847,
												"src": "3453:25:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 834,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3453:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 837,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 847,
												"src": "3488:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 836,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "3488:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 839,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 847,
												"src": "3512:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 838,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "3512:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 841,
												"indexed": false,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 847,
												"src": "3536:20:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 840,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "3536:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 843,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 847,
												"src": "3566:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 842,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3566:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 845,
												"indexed": false,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 847,
												"src": "3593:10:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 844,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3593:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3411:198:11"
									},
									"src": "3401:209:11"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 848,
										"nodeType": "StructuredDocumentation",
										"src": "3616:562:11",
										"text": "@notice Emitted by the pool for any flashes of token0/token1\n @param sender The address that initiated the swap call, and that received the callback\n @param recipient The address that received the tokens from flash\n @param amount0 The amount of token0 that was flashed\n @param amount1 The amount of token1 that was flashed\n @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee"
									},
									"id": 862,
									"name": "Flash",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 861,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 850,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 862,
												"src": "4204:22:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 849,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4204:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 852,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 862,
												"src": "4236:25:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 851,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4236:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 854,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 862,
												"src": "4271:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 853,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4271:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 856,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 862,
												"src": "4296:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 855,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4296:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 858,
												"indexed": false,
												"mutability": "mutable",
												"name": "paid0",
												"nodeType": "VariableDeclaration",
												"scope": 862,
												"src": "4321:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 857,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4321:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 860,
												"indexed": false,
												"mutability": "mutable",
												"name": "paid1",
												"nodeType": "VariableDeclaration",
												"scope": 862,
												"src": "4344:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 859,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4344:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4194:169:11"
									},
									"src": "4183:181:11"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 863,
										"nodeType": "StructuredDocumentation",
										"src": "4370:451:11",
										"text": "@notice Emitted by the pool for increases to the number of observations that can be stored\n @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n just before a mint/swap/burn.\n @param observationCardinalityNextOld The previous value of the next observation cardinality\n @param observationCardinalityNextNew The updated value of the next observation cardinality"
									},
									"id": 869,
									"name": "IncreaseObservationCardinalityNext",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 868,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 865,
												"indexed": false,
												"mutability": "mutable",
												"name": "observationCardinalityNextOld",
												"nodeType": "VariableDeclaration",
												"scope": 869,
												"src": "4876:36:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 864,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "4876:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 867,
												"indexed": false,
												"mutability": "mutable",
												"name": "observationCardinalityNextNew",
												"nodeType": "VariableDeclaration",
												"scope": 869,
												"src": "4922:36:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 866,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "4922:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4866:98:11"
									},
									"src": "4826:139:11"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 870,
										"nodeType": "StructuredDocumentation",
										"src": "4971:370:11",
										"text": "@notice Emitted when the protocol fee is changed by the pool\n @param feeProtocol0Old The previous value of the token0 protocol fee\n @param feeProtocol1Old The previous value of the token1 protocol fee\n @param feeProtocol0New The updated value of the token0 protocol fee\n @param feeProtocol1New The updated value of the token1 protocol fee"
									},
									"id": 880,
									"name": "SetFeeProtocol",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 879,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 872,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol0Old",
												"nodeType": "VariableDeclaration",
												"scope": 880,
												"src": "5367:21:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 871,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5367:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 874,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol1Old",
												"nodeType": "VariableDeclaration",
												"scope": 880,
												"src": "5390:21:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 873,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5390:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 876,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol0New",
												"nodeType": "VariableDeclaration",
												"scope": 880,
												"src": "5413:21:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 875,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5413:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 878,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol1New",
												"nodeType": "VariableDeclaration",
												"scope": 880,
												"src": "5436:21:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 877,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5436:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5366:92:11"
									},
									"src": "5346:113:11"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 881,
										"nodeType": "StructuredDocumentation",
										"src": "5465:384:11",
										"text": "@notice Emitted when the collected protocol fees are withdrawn by the factory owner\n @param sender The address that collects the protocol fees\n @param recipient The address that receives the collected protocol fees\n @param amount0 The amount of token0 protocol fees that is withdrawn\n @param amount0 The amount of token1 protocol fees that is withdrawn"
									},
									"id": 891,
									"name": "CollectProtocol",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 890,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 883,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 891,
												"src": "5876:22:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 882,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5876:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 885,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 891,
												"src": "5900:25:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 884,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5900:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 887,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 891,
												"src": "5927:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 886,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5927:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 889,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 891,
												"src": "5944:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 888,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5944:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5875:85:11"
									},
									"src": "5854:107:11"
								}
							],
							"scope": 893,
							"src": "159:5804:11"
						}
					],
					"src": "45:5919:11"
				},
				"id": 11
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
				"ast": {
					"absolutePath": "@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol",
					"exportedSymbols": {
						"IUniswapV3PoolImmutables": [
							932
						]
					},
					"id": 933,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 894,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:12"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 895,
								"nodeType": "StructuredDocumentation",
								"src": "71:153:12",
								"text": "@title Pool state that never changes\n @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values"
							},
							"fullyImplemented": false,
							"id": 932,
							"linearizedBaseContracts": [
								932
							],
							"name": "IUniswapV3PoolImmutables",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 896,
										"nodeType": "StructuredDocumentation",
										"src": "265:138:12",
										"text": "@notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n @return The contract address"
									},
									"functionSelector": "c45a0155",
									"id": 901,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "factory",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 897,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "424:2:12"
									},
									"returnParameters": {
										"id": 900,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 899,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 901,
												"src": "450:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 898,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "450:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "449:9:12"
									},
									"scope": 932,
									"src": "408:51:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 902,
										"nodeType": "StructuredDocumentation",
										"src": "465:113:12",
										"text": "@notice The first of the two tokens of the pool, sorted by address\n @return The token contract address"
									},
									"functionSelector": "0dfe1681",
									"id": 907,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "token0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 903,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "598:2:12"
									},
									"returnParameters": {
										"id": 906,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 905,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 907,
												"src": "624:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 904,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "624:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "623:9:12"
									},
									"scope": 932,
									"src": "583:50:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 908,
										"nodeType": "StructuredDocumentation",
										"src": "639:114:12",
										"text": "@notice The second of the two tokens of the pool, sorted by address\n @return The token contract address"
									},
									"functionSelector": "d21220a7",
									"id": 913,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "token1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 909,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "773:2:12"
									},
									"returnParameters": {
										"id": 912,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 911,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 913,
												"src": "799:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 910,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "799:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "798:9:12"
									},
									"scope": 932,
									"src": "758:50:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 914,
										"nodeType": "StructuredDocumentation",
										"src": "814:84:12",
										"text": "@notice The pool's fee in hundredths of a bip, i.e. 1e-6\n @return The fee"
									},
									"functionSelector": "ddca3f43",
									"id": 919,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "fee",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 915,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "915:2:12"
									},
									"returnParameters": {
										"id": 918,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 917,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 919,
												"src": "941:6:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 916,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "941:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "940:8:12"
									},
									"scope": 932,
									"src": "903:46:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 920,
										"nodeType": "StructuredDocumentation",
										"src": "955:358:12",
										"text": "@notice The pool tick spacing\n @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n This value is an int24 to avoid casting even though it is always positive.\n @return The tick spacing"
									},
									"functionSelector": "d0c93a7c",
									"id": 925,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tickSpacing",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 921,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1338:2:12"
									},
									"returnParameters": {
										"id": 924,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 923,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 925,
												"src": "1364:5:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 922,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1364:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1363:7:12"
									},
									"scope": 932,
									"src": "1318:53:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 926,
										"nodeType": "StructuredDocumentation",
										"src": "1377:363:12",
										"text": "@notice The maximum amount of position liquidity that can use any tick in the range\n @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n @return The max amount of liquidity per tick"
									},
									"functionSelector": "70cf754a",
									"id": 931,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "maxLiquidityPerTick",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 927,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1773:2:12"
									},
									"returnParameters": {
										"id": 930,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 929,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 931,
												"src": "1799:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 928,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1799:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1798:9:12"
									},
									"scope": 932,
									"src": "1745:63:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 933,
							"src": "224:1586:12"
						}
					],
					"src": "45:1766:12"
				},
				"id": 12
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
				"ast": {
					"absolutePath": "@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol",
					"exportedSymbols": {
						"IUniswapV3PoolOwnerActions": [
							958
						]
					},
					"id": 959,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 934,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:13"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 935,
								"nodeType": "StructuredDocumentation",
								"src": "71:116:13",
								"text": "@title Permissioned pool actions\n @notice Contains pool methods that may only be called by the factory owner"
							},
							"fullyImplemented": false,
							"id": 958,
							"linearizedBaseContracts": [
								958
							],
							"name": "IUniswapV3PoolOwnerActions",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 936,
										"nodeType": "StructuredDocumentation",
										"src": "230:205:13",
										"text": "@notice Set the denominator of the protocol's % share of the fees\n @param feeProtocol0 new protocol fee for token0 of the pool\n @param feeProtocol1 new protocol fee for token1 of the pool"
									},
									"functionSelector": "8206a4d1",
									"id": 943,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setFeeProtocol",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 941,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 938,
												"mutability": "mutable",
												"name": "feeProtocol0",
												"nodeType": "VariableDeclaration",
												"scope": 943,
												"src": "464:18:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 937,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "464:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 940,
												"mutability": "mutable",
												"name": "feeProtocol1",
												"nodeType": "VariableDeclaration",
												"scope": 943,
												"src": "484:18:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 939,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "484:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "463:40:13"
									},
									"returnParameters": {
										"id": 942,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "512:0:13"
									},
									"scope": 958,
									"src": "440:73:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 944,
										"nodeType": "StructuredDocumentation",
										"src": "519:483:13",
										"text": "@notice Collect the protocol fee accrued to the pool\n @param recipient The address to which collected protocol fees should be sent\n @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n @return amount0 The protocol fee collected in token0\n @return amount1 The protocol fee collected in token1"
									},
									"functionSelector": "85b66729",
									"id": 957,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collectProtocol",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 951,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 946,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 957,
												"src": "1041:17:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 945,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1041:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 948,
												"mutability": "mutable",
												"name": "amount0Requested",
												"nodeType": "VariableDeclaration",
												"scope": 957,
												"src": "1068:24:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 947,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1068:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 950,
												"mutability": "mutable",
												"name": "amount1Requested",
												"nodeType": "VariableDeclaration",
												"scope": 957,
												"src": "1102:24:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 949,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1102:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1031:101:13"
									},
									"returnParameters": {
										"id": 956,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 953,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 957,
												"src": "1151:15:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 952,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1151:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 955,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 957,
												"src": "1168:15:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 954,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1168:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1150:34:13"
									},
									"scope": 958,
									"src": "1007:178:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 959,
							"src": "187:1000:13"
						}
					],
					"src": "45:1143:13"
				},
				"id": 13
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
				"ast": {
					"absolutePath": "@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol",
					"exportedSymbols": {
						"IUniswapV3PoolState": [
							1066
						]
					},
					"id": 1067,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 960,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:14"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 961,
								"nodeType": "StructuredDocumentation",
								"src": "71:169:14",
								"text": "@title Pool state that can change\n @notice These methods compose the pool's state, and can change with any frequency including multiple times\n per transaction"
							},
							"fullyImplemented": false,
							"id": 1066,
							"linearizedBaseContracts": [
								1066
							],
							"name": "IUniswapV3PoolState",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 962,
										"nodeType": "StructuredDocumentation",
										"src": "276:1140:14",
										"text": "@notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n when accessed externally.\n @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n tick The current tick of the pool, i.e. according to the last tick transition that was run.\n This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n boundary.\n observationIndex The index of the last oracle observation that was written,\n observationCardinality The current maximum number of observations stored in the pool,\n observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n feeProtocol The protocol fee for both tokens of the pool.\n Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n unlocked Whether the pool is currently locked to reentrancy"
									},
									"functionSelector": "3850c7bd",
									"id": 979,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "slot0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 963,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1435:2:14"
									},
									"returnParameters": {
										"id": 978,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 965,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 979,
												"src": "1498:20:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 964,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1498:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 967,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 979,
												"src": "1532:10:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 966,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1532:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 969,
												"mutability": "mutable",
												"name": "observationIndex",
												"nodeType": "VariableDeclaration",
												"scope": 979,
												"src": "1556:23:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 968,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1556:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 971,
												"mutability": "mutable",
												"name": "observationCardinality",
												"nodeType": "VariableDeclaration",
												"scope": 979,
												"src": "1593:29:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 970,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1593:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 973,
												"mutability": "mutable",
												"name": "observationCardinalityNext",
												"nodeType": "VariableDeclaration",
												"scope": 979,
												"src": "1636:33:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 972,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1636:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 975,
												"mutability": "mutable",
												"name": "feeProtocol",
												"nodeType": "VariableDeclaration",
												"scope": 979,
												"src": "1683:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 974,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1683:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 977,
												"mutability": "mutable",
												"name": "unlocked",
												"nodeType": "VariableDeclaration",
												"scope": 979,
												"src": "1714:13:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 976,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1714:4:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1484:253:14"
									},
									"scope": 1066,
									"src": "1421:317:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 980,
										"nodeType": "StructuredDocumentation",
										"src": "1744:168:14",
										"text": "@notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n @dev This value can overflow the uint256"
									},
									"functionSelector": "f3058399",
									"id": 985,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "feeGrowthGlobal0X128",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 981,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1946:2:14"
									},
									"returnParameters": {
										"id": 984,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 983,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 985,
												"src": "1972:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 982,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1972:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1971:9:14"
									},
									"scope": 1066,
									"src": "1917:64:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 986,
										"nodeType": "StructuredDocumentation",
										"src": "1987:168:14",
										"text": "@notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n @dev This value can overflow the uint256"
									},
									"functionSelector": "46141319",
									"id": 991,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "feeGrowthGlobal1X128",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 987,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2189:2:14"
									},
									"returnParameters": {
										"id": 990,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 989,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 991,
												"src": "2215:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 988,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2215:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2214:9:14"
									},
									"scope": 1066,
									"src": "2160:64:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 992,
										"nodeType": "StructuredDocumentation",
										"src": "2230:147:14",
										"text": "@notice The amounts of token0 and token1 that are owed to the protocol\n @dev Protocol fees will never exceed uint128 max in either token"
									},
									"functionSelector": "1ad8b03b",
									"id": 999,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "protocolFees",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 993,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2403:2:14"
									},
									"returnParameters": {
										"id": 998,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 995,
												"mutability": "mutable",
												"name": "token0",
												"nodeType": "VariableDeclaration",
												"scope": 999,
												"src": "2429:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 994,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2429:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 997,
												"mutability": "mutable",
												"name": "token1",
												"nodeType": "VariableDeclaration",
												"scope": 999,
												"src": "2445:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 996,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2445:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2428:32:14"
									},
									"scope": 1066,
									"src": "2382:79:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1000,
										"nodeType": "StructuredDocumentation",
										"src": "2467:150:14",
										"text": "@notice The currently in range liquidity available to the pool\n @dev This value has no relationship to the total liquidity across all ticks"
									},
									"functionSelector": "1a686502",
									"id": 1005,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "liquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1001,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2640:2:14"
									},
									"returnParameters": {
										"id": 1004,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1003,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1005,
												"src": "2666:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1002,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2666:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2665:9:14"
									},
									"scope": 1066,
									"src": "2622:53:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1006,
										"nodeType": "StructuredDocumentation",
										"src": "2681:1244:14",
										"text": "@notice Look up information about a specific tick in the pool\n @param tick The tick to look up\n @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n tick upper,\n liquidityNet how much liquidity changes when the pool price crosses the tick,\n feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n secondsOutside the seconds spent on the other side of the tick from the current tick,\n initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n In addition, these values are only relative and must be used only in comparison to previous snapshots for\n a specific position."
									},
									"functionSelector": "f30dba93",
									"id": 1027,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ticks",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1009,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1008,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 1027,
												"src": "3945:10:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1007,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3945:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3944:12:14"
									},
									"returnParameters": {
										"id": 1026,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1011,
												"mutability": "mutable",
												"name": "liquidityGross",
												"nodeType": "VariableDeclaration",
												"scope": 1027,
												"src": "4017:22:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1010,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "4017:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1013,
												"mutability": "mutable",
												"name": "liquidityNet",
												"nodeType": "VariableDeclaration",
												"scope": 1027,
												"src": "4053:19:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												},
												"typeName": {
													"id": 1012,
													"name": "int128",
													"nodeType": "ElementaryTypeName",
													"src": "4053:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1015,
												"mutability": "mutable",
												"name": "feeGrowthOutside0X128",
												"nodeType": "VariableDeclaration",
												"scope": 1027,
												"src": "4086:29:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1014,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4086:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1017,
												"mutability": "mutable",
												"name": "feeGrowthOutside1X128",
												"nodeType": "VariableDeclaration",
												"scope": 1027,
												"src": "4129:29:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1016,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4129:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1019,
												"mutability": "mutable",
												"name": "tickCumulativeOutside",
												"nodeType": "VariableDeclaration",
												"scope": 1027,
												"src": "4172:27:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 1018,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "4172:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1021,
												"mutability": "mutable",
												"name": "secondsPerLiquidityOutsideX128",
												"nodeType": "VariableDeclaration",
												"scope": 1027,
												"src": "4213:38:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1020,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "4213:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1023,
												"mutability": "mutable",
												"name": "secondsOutside",
												"nodeType": "VariableDeclaration",
												"scope": 1027,
												"src": "4265:21:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 1022,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "4265:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1025,
												"mutability": "mutable",
												"name": "initialized",
												"nodeType": "VariableDeclaration",
												"scope": 1027,
												"src": "4300:16:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1024,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4300:4:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4003:323:14"
									},
									"scope": 1066,
									"src": "3930:397:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1028,
										"nodeType": "StructuredDocumentation",
										"src": "4333:99:14",
										"text": "@notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
									},
									"functionSelector": "5339c296",
									"id": 1035,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tickBitmap",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1031,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1030,
												"mutability": "mutable",
												"name": "wordPosition",
												"nodeType": "VariableDeclaration",
												"scope": 1035,
												"src": "4457:18:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int16",
													"typeString": "int16"
												},
												"typeName": {
													"id": 1029,
													"name": "int16",
													"nodeType": "ElementaryTypeName",
													"src": "4457:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_int16",
														"typeString": "int16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4456:20:14"
									},
									"returnParameters": {
										"id": 1034,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1033,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1035,
												"src": "4500:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1032,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4500:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4499:9:14"
									},
									"scope": 1066,
									"src": "4437:72:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1036,
										"nodeType": "StructuredDocumentation",
										"src": "4515:700:14",
										"text": "@notice Returns the information about a position by the position's key\n @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n @return _liquidity The amount of liquidity in the position,\n Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
									},
									"functionSelector": "514ea4bf",
									"id": 1051,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "positions",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1039,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1038,
												"mutability": "mutable",
												"name": "key",
												"nodeType": "VariableDeclaration",
												"scope": 1051,
												"src": "5239:11:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1037,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5239:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5238:13:14"
									},
									"returnParameters": {
										"id": 1050,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1041,
												"mutability": "mutable",
												"name": "_liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 1051,
												"src": "5312:18:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1040,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5312:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1043,
												"mutability": "mutable",
												"name": "feeGrowthInside0LastX128",
												"nodeType": "VariableDeclaration",
												"scope": 1051,
												"src": "5344:32:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1042,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5344:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1045,
												"mutability": "mutable",
												"name": "feeGrowthInside1LastX128",
												"nodeType": "VariableDeclaration",
												"scope": 1051,
												"src": "5390:32:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1044,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5390:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1047,
												"mutability": "mutable",
												"name": "tokensOwed0",
												"nodeType": "VariableDeclaration",
												"scope": 1051,
												"src": "5436:19:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1046,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5436:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1049,
												"mutability": "mutable",
												"name": "tokensOwed1",
												"nodeType": "VariableDeclaration",
												"scope": 1051,
												"src": "5469:19:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1048,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5469:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5298:200:14"
									},
									"scope": 1066,
									"src": "5220:279:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1052,
										"nodeType": "StructuredDocumentation",
										"src": "5505:749:14",
										"text": "@notice Returns data about a specific observation index\n @param index The element of the observations array to fetch\n @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n ago, rather than at a specific index in the array.\n @return blockTimestamp The timestamp of the observation,\n Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n Returns initialized whether the observation has been initialized and the values are safe to use"
									},
									"functionSelector": "252c09d7",
									"id": 1065,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "observations",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1055,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1054,
												"mutability": "mutable",
												"name": "index",
												"nodeType": "VariableDeclaration",
												"scope": 1065,
												"src": "6281:13:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1053,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6281:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6280:15:14"
									},
									"returnParameters": {
										"id": 1064,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1057,
												"mutability": "mutable",
												"name": "blockTimestamp",
												"nodeType": "VariableDeclaration",
												"scope": 1065,
												"src": "6356:21:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 1056,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "6356:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1059,
												"mutability": "mutable",
												"name": "tickCumulative",
												"nodeType": "VariableDeclaration",
												"scope": 1065,
												"src": "6391:20:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 1058,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "6391:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1061,
												"mutability": "mutable",
												"name": "secondsPerLiquidityCumulativeX128",
												"nodeType": "VariableDeclaration",
												"scope": 1065,
												"src": "6425:41:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1060,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "6425:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1063,
												"mutability": "mutable",
												"name": "initialized",
												"nodeType": "VariableDeclaration",
												"scope": 1065,
												"src": "6480:16:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1062,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6480:4:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6342:164:14"
									},
									"scope": 1066,
									"src": "6259:248:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1067,
							"src": "240:6269:14"
						}
					],
					"src": "45:6465:14"
				},
				"id": 14
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/LowGasSafeMath.sol": {
				"ast": {
					"absolutePath": "@thinkincoin-libs/uniswap-v3-core/contracts/libraries/LowGasSafeMath.sol",
					"exportedSymbols": {
						"LowGasSafeMath": [
							1196
						]
					},
					"id": 1197,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1068,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:15"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1069,
								"nodeType": "StructuredDocumentation",
								"src": "71:178:15",
								"text": "@title Optimized overflow and underflow safe math operations\n @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost"
							},
							"fullyImplemented": true,
							"id": 1196,
							"linearizedBaseContracts": [
								1196
							],
							"name": "LowGasSafeMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1090,
										"nodeType": "Block",
										"src": "504:42:15",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1087,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"id": 1084,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1080,
																			"name": "z",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1077,
																			"src": "523:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1083,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1081,
																				"name": "x",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1072,
																				"src": "527:1:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"id": 1082,
																				"name": "y",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1074,
																				"src": "531:1:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "527:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "523:9:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1085,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "522:11:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1086,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1072,
																"src": "537:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "522:16:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1079,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "514:7:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1088,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "514:25:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1089,
												"nodeType": "ExpressionStatement",
												"src": "514:25:15"
											}
										]
									},
									"documentation": {
										"id": 1070,
										"nodeType": "StructuredDocumentation",
										"src": "278:152:15",
										"text": "@notice Returns x + y, reverts if sum overflows uint256\n @param x The augend\n @param y The addend\n @return z The sum of x and y"
									},
									"id": 1091,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1075,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1072,
												"mutability": "mutable",
												"name": "x",
												"nodeType": "VariableDeclaration",
												"scope": 1091,
												"src": "448:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1071,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "448:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1074,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 1091,
												"src": "459:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1073,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "459:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "447:22:15"
									},
									"returnParameters": {
										"id": 1078,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1077,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 1091,
												"src": "493:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1076,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "493:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "492:11:15"
									},
									"scope": 1196,
									"src": "435:111:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1112,
										"nodeType": "Block",
										"src": "779:42:15",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1109,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"id": 1106,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1102,
																			"name": "z",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1099,
																			"src": "798:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1105,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1103,
																				"name": "x",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1094,
																				"src": "802:1:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 1104,
																				"name": "y",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1096,
																				"src": "806:1:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "802:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "798:9:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1107,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "797:11:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 1108,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1094,
																"src": "812:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "797:16:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1101,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "789:7:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1110,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "789:25:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1111,
												"nodeType": "ExpressionStatement",
												"src": "789:25:15"
											}
										]
									},
									"documentation": {
										"id": 1092,
										"nodeType": "StructuredDocumentation",
										"src": "552:153:15",
										"text": "@notice Returns x - y, reverts if underflows\n @param x The minuend\n @param y The subtrahend\n @return z The difference of x and y"
									},
									"id": 1113,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1097,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1094,
												"mutability": "mutable",
												"name": "x",
												"nodeType": "VariableDeclaration",
												"scope": 1113,
												"src": "723:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1093,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "723:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1096,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 1113,
												"src": "734:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1095,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "734:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "722:22:15"
									},
									"returnParameters": {
										"id": 1100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1099,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 1113,
												"src": "768:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1098,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "768:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "767:11:15"
									},
									"scope": 1196,
									"src": "710:111:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1140,
										"nodeType": "Block",
										"src": "1055:56:15",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1137,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1126,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1124,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1116,
																	"src": "1073:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1125,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1078:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "1073:6:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1136,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1134,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"components": [
																			{
																				"id": 1131,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftHandSide": {
																					"id": 1127,
																					"name": "z",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1121,
																					"src": "1084:1:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "Assignment",
																				"operator": "=",
																				"rightHandSide": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1130,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 1128,
																						"name": "x",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1116,
																						"src": "1088:1:15",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 1129,
																						"name": "y",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1118,
																						"src": "1092:1:15",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "1088:5:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "1084:9:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1132,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "1083:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 1133,
																		"name": "x",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1116,
																		"src": "1097:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1083:15:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"id": 1135,
																	"name": "y",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1118,
																	"src": "1102:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1083:20:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1073:30:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1123,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1065:7:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1138,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1065:39:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1139,
												"nodeType": "ExpressionStatement",
												"src": "1065:39:15"
											}
										]
									},
									"documentation": {
										"id": 1114,
										"nodeType": "StructuredDocumentation",
										"src": "827:154:15",
										"text": "@notice Returns x * y, reverts if overflows\n @param x The multiplicand\n @param y The multiplier\n @return z The product of x and y"
									},
									"id": 1141,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1119,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1116,
												"mutability": "mutable",
												"name": "x",
												"nodeType": "VariableDeclaration",
												"scope": 1141,
												"src": "999:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1115,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "999:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1118,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 1141,
												"src": "1010:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1117,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1010:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "998:22:15"
									},
									"returnParameters": {
										"id": 1122,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1121,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 1141,
												"src": "1044:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1120,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1044:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1043:11:15"
									},
									"scope": 1196,
									"src": "986:125:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1167,
										"nodeType": "Block",
										"src": "1342:54:15",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1164,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 1159,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"id": 1156,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 1152,
																				"name": "z",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1149,
																				"src": "1361:1:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"commonType": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				},
																				"id": 1155,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1153,
																					"name": "x",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1144,
																					"src": "1365:1:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "+",
																				"rightExpression": {
																					"id": 1154,
																					"name": "y",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1146,
																					"src": "1369:1:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				},
																				"src": "1365:5:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "1361:9:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 1157,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1360:11:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">=",
																"rightExpression": {
																	"id": 1158,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1144,
																	"src": "1375:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "1360:16:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 1162,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1160,
																			"name": "y",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1146,
																			"src": "1381:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 1161,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1386:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1381:6:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 1163,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1380:8:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1360:28:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1151,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1352:7:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1165,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1352:37:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1166,
												"nodeType": "ExpressionStatement",
												"src": "1352:37:15"
											}
										]
									},
									"documentation": {
										"id": 1142,
										"nodeType": "StructuredDocumentation",
										"src": "1117:154:15",
										"text": "@notice Returns x + y, reverts if overflows or underflows\n @param x The augend\n @param y The addend\n @return z The sum of x and y"
									},
									"id": 1168,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1147,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1144,
												"mutability": "mutable",
												"name": "x",
												"nodeType": "VariableDeclaration",
												"scope": 1168,
												"src": "1289:8:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1143,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1289:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1146,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 1168,
												"src": "1299:8:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1145,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1299:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1288:20:15"
									},
									"returnParameters": {
										"id": 1150,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1149,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 1168,
												"src": "1332:8:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1148,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1332:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1331:10:15"
									},
									"scope": 1196,
									"src": "1276:120:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1194,
										"nodeType": "Block",
										"src": "1639:54:15",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1191,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 1186,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"id": 1183,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 1179,
																				"name": "z",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1176,
																				"src": "1658:1:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"commonType": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				},
																				"id": 1182,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1180,
																					"name": "x",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1171,
																					"src": "1662:1:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 1181,
																					"name": "y",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1173,
																					"src": "1666:1:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				},
																				"src": "1662:5:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "1658:9:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 1184,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1657:11:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"id": 1185,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1171,
																	"src": "1672:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "1657:16:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 1189,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1187,
																			"name": "y",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1173,
																			"src": "1678:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 1188,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1683:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1678:6:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 1190,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1677:8:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1657:28:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1178,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1649:7:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1192,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1649:37:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1193,
												"nodeType": "ExpressionStatement",
												"src": "1649:37:15"
											}
										]
									},
									"documentation": {
										"id": 1169,
										"nodeType": "StructuredDocumentation",
										"src": "1402:166:15",
										"text": "@notice Returns x - y, reverts if overflows or underflows\n @param x The minuend\n @param y The subtrahend\n @return z The difference of x and y"
									},
									"id": 1195,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1174,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1171,
												"mutability": "mutable",
												"name": "x",
												"nodeType": "VariableDeclaration",
												"scope": 1195,
												"src": "1586:8:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1170,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1586:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1173,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 1195,
												"src": "1596:8:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1172,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1596:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1585:20:15"
									},
									"returnParameters": {
										"id": 1177,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1176,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 1195,
												"src": "1629:8:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1175,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1629:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1628:10:15"
									},
									"scope": 1196,
									"src": "1573:120:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1197,
							"src": "249:1446:15"
						}
					],
					"src": "45:1651:15"
				},
				"id": 15
			},
			"contracts/V3Migrator.sol": {
				"ast": {
					"absolutePath": "contracts/V3Migrator.sol",
					"exportedSymbols": {
						"IERC165": [
							47
						],
						"IERC20": [
							125
						],
						"IERC20Permit": [
							35
						],
						"IERC20PermitAllowed": [
							2318
						],
						"IERC721": [
							241
						],
						"IERC721Enumerable": [
							272
						],
						"IERC721Metadata": [
							299
						],
						"IERC721Permit": [
							1908
						],
						"IMulticall": [
							1923
						],
						"INonfungiblePositionManager": [
							2118
						],
						"IPeripheryImmutableState": [
							2134
						],
						"IPeripheryPayments": [
							2160
						],
						"IPoolInitializer": [
							2179
						],
						"ISelfPermit": [
							2247
						],
						"IUniswapV2Pair": [
							541
						],
						"IUniswapV3Factory": [
							624
						],
						"IUniswapV3Pool": [
							646
						],
						"IUniswapV3PoolActions": [
							742
						],
						"IUniswapV3PoolDerivedState": [
							773
						],
						"IUniswapV3PoolEvents": [
							892
						],
						"IUniswapV3PoolImmutables": [
							932
						],
						"IUniswapV3PoolOwnerActions": [
							958
						],
						"IUniswapV3PoolState": [
							1066
						],
						"IV3Migrator": [
							2294
						],
						"IWETH9": [
							2335
						],
						"LowGasSafeMath": [
							1196
						],
						"Multicall": [
							1583
						],
						"PeripheryImmutableState": [
							1614
						],
						"PoolAddress": [
							2427
						],
						"PoolInitializer": [
							1706
						],
						"SelfPermit": [
							1873
						],
						"TransferHelper": [
							2598
						],
						"V3Migrator": [
							1498
						]
					},
					"id": 1499,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1198,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "46:23:16"
						},
						{
							"id": 1199,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "71:19:16"
						},
						{
							"absolutePath": "@thinkincoin-libs/uniswap-v3-core/contracts/libraries/LowGasSafeMath.sol",
							"file": "@thinkincoin-libs/uniswap-v3-core/contracts/libraries/LowGasSafeMath.sol",
							"id": 1200,
							"nodeType": "ImportDirective",
							"scope": 1499,
							"sourceUnit": 1197,
							"src": "94:65:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@thinkincoin-libs/uniswap-v2-core/contracts/interfaces/IUniswapV2Pair.sol",
							"file": "@thinkincoin-libs/uniswap-v2-core/contracts/interfaces/IUniswapV2Pair.sol",
							"id": 1201,
							"nodeType": "ImportDirective",
							"scope": 1499,
							"sourceUnit": 542,
							"src": "161:66:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/INonfungiblePositionManager.sol",
							"file": "./interfaces/INonfungiblePositionManager.sol",
							"id": 1202,
							"nodeType": "ImportDirective",
							"scope": 1499,
							"sourceUnit": 2119,
							"src": "231:54:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/libraries/TransferHelper.sol",
							"file": "./libraries/TransferHelper.sol",
							"id": 1203,
							"nodeType": "ImportDirective",
							"scope": 1499,
							"sourceUnit": 2599,
							"src": "289:40:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/IV3Migrator.sol",
							"file": "./interfaces/IV3Migrator.sol",
							"id": 1204,
							"nodeType": "ImportDirective",
							"scope": 1499,
							"sourceUnit": 2295,
							"src": "333:38:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/base/PeripheryImmutableState.sol",
							"file": "./base/PeripheryImmutableState.sol",
							"id": 1205,
							"nodeType": "ImportDirective",
							"scope": 1499,
							"sourceUnit": 1615,
							"src": "373:44:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/base/Multicall.sol",
							"file": "./base/Multicall.sol",
							"id": 1206,
							"nodeType": "ImportDirective",
							"scope": 1499,
							"sourceUnit": 1584,
							"src": "419:30:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/base/SelfPermit.sol",
							"file": "./base/SelfPermit.sol",
							"id": 1207,
							"nodeType": "ImportDirective",
							"scope": 1499,
							"sourceUnit": 1874,
							"src": "451:31:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/external/IWETH9.sol",
							"file": "./interfaces/external/IWETH9.sol",
							"id": 1208,
							"nodeType": "ImportDirective",
							"scope": 1499,
							"sourceUnit": 2336,
							"src": "484:42:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/base/PoolInitializer.sol",
							"file": "./base/PoolInitializer.sol",
							"id": 1209,
							"nodeType": "ImportDirective",
							"scope": 1499,
							"sourceUnit": 1707,
							"src": "528:36:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1211,
										"name": "IV3Migrator",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2294,
										"src": "623:11:16",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IV3Migrator_$2294",
											"typeString": "contract IV3Migrator"
										}
									},
									"id": 1212,
									"nodeType": "InheritanceSpecifier",
									"src": "623:11:16"
								},
								{
									"baseName": {
										"id": 1213,
										"name": "PeripheryImmutableState",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1614,
										"src": "636:23:16",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_PeripheryImmutableState_$1614",
											"typeString": "contract PeripheryImmutableState"
										}
									},
									"id": 1214,
									"nodeType": "InheritanceSpecifier",
									"src": "636:23:16"
								},
								{
									"baseName": {
										"id": 1215,
										"name": "PoolInitializer",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1706,
										"src": "661:15:16",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_PoolInitializer_$1706",
											"typeString": "contract PoolInitializer"
										}
									},
									"id": 1216,
									"nodeType": "InheritanceSpecifier",
									"src": "661:15:16"
								},
								{
									"baseName": {
										"id": 1217,
										"name": "Multicall",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1583,
										"src": "678:9:16",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Multicall_$1583",
											"typeString": "contract Multicall"
										}
									},
									"id": 1218,
									"nodeType": "InheritanceSpecifier",
									"src": "678:9:16"
								},
								{
									"baseName": {
										"id": 1219,
										"name": "SelfPermit",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1873,
										"src": "689:10:16",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SelfPermit_$1873",
											"typeString": "contract SelfPermit"
										}
									},
									"id": 1220,
									"nodeType": "InheritanceSpecifier",
									"src": "689:10:16"
								}
							],
							"contractDependencies": [
								1583,
								1614,
								1706,
								1873,
								1923,
								2134,
								2179,
								2247,
								2294
							],
							"contractKind": "contract",
							"documentation": {
								"id": 1210,
								"nodeType": "StructuredDocumentation",
								"src": "568:32:16",
								"text": "@title Uniswap V3 Migrator"
							},
							"fullyImplemented": true,
							"id": 1498,
							"linearizedBaseContracts": [
								1498,
								1873,
								1583,
								1706,
								1614,
								2134,
								2294,
								2179,
								2247,
								1923
							],
							"name": "V3Migrator",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 1223,
									"libraryName": {
										"id": 1221,
										"name": "LowGasSafeMath",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1196,
										"src": "713:14:16",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_LowGasSafeMath_$1196",
											"typeString": "library LowGasSafeMath"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "707:33:16",
									"typeName": {
										"id": 1222,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "732:7:16",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": false,
									"functionSelector": "b44a2722",
									"id": 1225,
									"mutability": "immutable",
									"name": "nonfungiblePositionManager",
									"nodeType": "VariableDeclaration",
									"scope": 1498,
									"src": "748:51:16",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1224,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "748:7:16",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 1242,
										"nodeType": "Block",
										"src": "967:75:16",
										"statements": [
											{
												"expression": {
													"id": 1240,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1238,
														"name": "nonfungiblePositionManager",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1225,
														"src": "978:26:16",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1239,
														"name": "_nonfungiblePositionManager",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1231,
														"src": "1007:27:16",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "978:56:16",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1241,
												"nodeType": "ExpressionStatement",
												"src": "978:56:16"
											}
										]
									},
									"id": 1243,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 1234,
													"name": "_factory",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1227,
													"src": "949:8:16",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												{
													"id": 1235,
													"name": "_WETH9",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1229,
													"src": "959:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 1236,
											"modifierName": {
												"id": 1233,
												"name": "PeripheryImmutableState",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 1614,
												"src": "925:23:16",
												"typeDescriptions": {
													"typeIdentifier": "t_type$_t_contract$_PeripheryImmutableState_$1614_$",
													"typeString": "type(contract PeripheryImmutableState)"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "925:41:16"
										}
									],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1232,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1227,
												"mutability": "mutable",
												"name": "_factory",
												"nodeType": "VariableDeclaration",
												"scope": 1243,
												"src": "830:16:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1226,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "830:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1229,
												"mutability": "mutable",
												"name": "_WETH9",
												"nodeType": "VariableDeclaration",
												"scope": 1243,
												"src": "857:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1228,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "857:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1231,
												"mutability": "mutable",
												"name": "_nonfungiblePositionManager",
												"nodeType": "VariableDeclaration",
												"scope": 1243,
												"src": "882:35:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1230,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "882:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:105:16"
									},
									"returnParameters": {
										"id": 1237,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "967:0:16"
									},
									"scope": 1498,
									"src": "808:234:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1254,
										"nodeType": "Block",
										"src": "1077:60:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1250,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1247,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1096:3:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1248,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1096:10:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 1249,
																"name": "WETH9",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1597,
																"src": "1110:5:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1096:19:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f74205745544839",
															"id": 1251,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1117:11:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9a5f12903ee10b20c1ea1ca8d6f6723d553112d744fe8db2bc5453efb990e6b1",
																"typeString": "literal_string \"Not WETH9\""
															},
															"value": "Not WETH9"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9a5f12903ee10b20c1ea1ca8d6f6723d553112d744fe8db2bc5453efb990e6b1",
																"typeString": "literal_string \"Not WETH9\""
															}
														],
														"id": 1246,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1088:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1252,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1088:41:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1253,
												"nodeType": "ExpressionStatement",
												"src": "1088:41:16"
											}
										]
									},
									"id": 1255,
									"implemented": true,
									"kind": "receive",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1244,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1057:2:16"
									},
									"returnParameters": {
										"id": 1245,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1077:0:16"
									},
									"scope": 1498,
									"src": "1050:87:16",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										2293
									],
									"body": {
										"id": 1496,
										"nodeType": "Block",
										"src": "1211:2898:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															"id": 1265,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1262,
																	"name": "params",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1257,
																	"src": "1230:6:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_MigrateParams_$2287_calldata_ptr",
																		"typeString": "struct IV3Migrator.MigrateParams calldata"
																	}
																},
																"id": 1263,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "percentageToMigrate",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2266,
																"src": "1230:26:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1264,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1259:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1230:30:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "50657263656e7461676520746f6f20736d616c6c",
															"id": 1266,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1262:22:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_441c69a76c2d33fd9de54332033d9c05337cb9707baa639e0118d8dc01b47be7",
																"typeString": "literal_string \"Percentage too small\""
															},
															"value": "Percentage too small"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_441c69a76c2d33fd9de54332033d9c05337cb9707baa639e0118d8dc01b47be7",
																"typeString": "literal_string \"Percentage too small\""
															}
														],
														"id": 1261,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1222:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1267,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1222:63:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1268,
												"nodeType": "ExpressionStatement",
												"src": "1222:63:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															"id": 1273,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1270,
																	"name": "params",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1257,
																	"src": "1304:6:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_MigrateParams_$2287_calldata_ptr",
																		"typeString": "struct IV3Migrator.MigrateParams calldata"
																	}
																},
																"id": 1271,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "percentageToMigrate",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2266,
																"src": "1304:26:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"hexValue": "313030",
																"id": 1272,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1334:3:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																},
																"value": "100"
															},
															"src": "1304:33:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "50657263656e7461676520746f6f206c61726765",
															"id": 1274,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1339:22:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9a769b63cd4026b5e7e44da6e571c3cde616fe3a40029eab2d6b59e7b569424b",
																"typeString": "literal_string \"Percentage too large\""
															},
															"value": "Percentage too large"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9a769b63cd4026b5e7e44da6e571c3cde616fe3a40029eab2d6b59e7b569424b",
																"typeString": "literal_string \"Percentage too large\""
															}
														],
														"id": 1269,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1296:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1275,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1296:66:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1276,
												"nodeType": "ExpressionStatement",
												"src": "1296:66:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1282,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1462:3:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1283,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1462:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"expression": {
																"id": 1284,
																"name": "params",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1257,
																"src": "1474:6:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_MigrateParams_$2287_calldata_ptr",
																	"typeString": "struct IV3Migrator.MigrateParams calldata"
																}
															},
															"id": 1285,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "pair",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2262,
															"src": "1474:11:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 1286,
																"name": "params",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1257,
																"src": "1487:6:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_MigrateParams_$2287_calldata_ptr",
																	"typeString": "struct IV3Migrator.MigrateParams calldata"
																}
															},
															"id": 1287,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "liquidityToMigrate",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2264,
															"src": "1487:25:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"expression": {
																		"id": 1278,
																		"name": "params",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1257,
																		"src": "1436:6:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_MigrateParams_$2287_calldata_ptr",
																			"typeString": "struct IV3Migrator.MigrateParams calldata"
																		}
																	},
																	"id": 1279,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "pair",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2262,
																	"src": "1436:11:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1277,
																"name": "IUniswapV2Pair",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 541,
																"src": "1421:14:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IUniswapV2Pair_$541_$",
																	"typeString": "type(contract IUniswapV2Pair)"
																}
															},
															"id": 1280,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1421:27:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IUniswapV2Pair_$541",
																"typeString": "contract IUniswapV2Pair"
															}
														},
														"id": 1281,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 382,
														"src": "1421:40:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,address,uint256) external returns (bool)"
														}
													},
													"id": 1288,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1421:92:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1289,
												"nodeType": "ExpressionStatement",
												"src": "1421:92:16"
											},
											{
												"assignments": [
													1291,
													1293
												],
												"declarations": [
													{
														"constant": false,
														"id": 1291,
														"mutability": "mutable",
														"name": "amount0V2",
														"nodeType": "VariableDeclaration",
														"scope": 1496,
														"src": "1525:17:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1290,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1525:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1293,
														"mutability": "mutable",
														"name": "amount1V2",
														"nodeType": "VariableDeclaration",
														"scope": 1496,
														"src": "1544:17:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1292,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1544:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1304,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1301,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1606:4:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_V3Migrator_$1498",
																		"typeString": "contract V3Migrator"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_V3Migrator_$1498",
																		"typeString": "contract V3Migrator"
																	}
																],
																"id": 1300,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1598:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1299,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1598:7:16",
																	"typeDescriptions": {}
																}
															},
															"id": 1302,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1598:13:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														],
														"expression": {
															"arguments": [
																{
																	"expression": {
																		"id": 1295,
																		"name": "params",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1257,
																		"src": "1580:6:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_MigrateParams_$2287_calldata_ptr",
																			"typeString": "struct IV3Migrator.MigrateParams calldata"
																		}
																	},
																	"id": 1296,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "pair",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2262,
																	"src": "1580:11:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1294,
																"name": "IUniswapV2Pair",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 541,
																"src": "1565:14:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IUniswapV2Pair_$541_$",
																	"typeString": "type(contract IUniswapV2Pair)"
																}
															},
															"id": 1297,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1565:27:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IUniswapV2Pair_$541",
																"typeString": "contract IUniswapV2Pair"
															}
														},
														"id": 1298,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "burn",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 514,
														"src": "1565:32:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$_t_uint256_$_t_uint256_$",
															"typeString": "function (address) external returns (uint256,uint256)"
														}
													},
													"id": 1303,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1565:47:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
														"typeString": "tuple(uint256,uint256)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1524:88:16"
											},
											{
												"assignments": [
													1306
												],
												"declarations": [
													{
														"constant": false,
														"id": 1306,
														"mutability": "mutable",
														"name": "amount0V2ToMigrate",
														"nodeType": "VariableDeclaration",
														"scope": 1496,
														"src": "1676:26:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1305,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1676:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1314,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1313,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"expression": {
																	"id": 1309,
																	"name": "params",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1257,
																	"src": "1719:6:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_MigrateParams_$2287_calldata_ptr",
																		"typeString": "struct IV3Migrator.MigrateParams calldata"
																	}
																},
																"id": 1310,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "percentageToMigrate",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2266,
																"src": "1719:26:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															],
															"expression": {
																"id": 1307,
																"name": "amount0V2",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1291,
																"src": "1705:9:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1308,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "mul",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1141,
															"src": "1705:13:16",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1311,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1705:41:16",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "313030",
														"id": 1312,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1749:3:16",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_100_by_1",
															"typeString": "int_const 100"
														},
														"value": "100"
													},
													"src": "1705:47:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1676:76:16"
											},
											{
												"assignments": [
													1316
												],
												"declarations": [
													{
														"constant": false,
														"id": 1316,
														"mutability": "mutable",
														"name": "amount1V2ToMigrate",
														"nodeType": "VariableDeclaration",
														"scope": 1496,
														"src": "1763:26:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1315,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1763:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1324,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1323,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"expression": {
																	"id": 1319,
																	"name": "params",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1257,
																	"src": "1806:6:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_MigrateParams_$2287_calldata_ptr",
																		"typeString": "struct IV3Migrator.MigrateParams calldata"
																	}
																},
																"id": 1320,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "percentageToMigrate",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2266,
																"src": "1806:26:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															],
															"expression": {
																"id": 1317,
																"name": "amount1V2",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1293,
																"src": "1792:9:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1318,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "mul",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1141,
															"src": "1792:13:16",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1321,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1792:41:16",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "313030",
														"id": 1322,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1836:3:16",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_100_by_1",
															"typeString": "int_const 100"
														},
														"value": "100"
													},
													"src": "1792:47:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1763:76:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1328,
																"name": "params",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1257,
																"src": "1952:6:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_MigrateParams_$2287_calldata_ptr",
																	"typeString": "struct IV3Migrator.MigrateParams calldata"
																}
															},
															"id": 1329,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "token0",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2268,
															"src": "1952:13:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1330,
															"name": "nonfungiblePositionManager",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1225,
															"src": "1967:26:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1331,
															"name": "amount0V2ToMigrate",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1306,
															"src": "1995:18:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1325,
															"name": "TransferHelper",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2598,
															"src": "1925:14:16",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_TransferHelper_$2598_$",
																"typeString": "type(library TransferHelper)"
															}
														},
														"id": 1327,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeApprove",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2571,
														"src": "1925:26:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1332,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1925:89:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1333,
												"nodeType": "ExpressionStatement",
												"src": "1925:89:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1337,
																"name": "params",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1257,
																"src": "2052:6:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_MigrateParams_$2287_calldata_ptr",
																	"typeString": "struct IV3Migrator.MigrateParams calldata"
																}
															},
															"id": 1338,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "token1",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2270,
															"src": "2052:13:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1339,
															"name": "nonfungiblePositionManager",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1225,
															"src": "2067:26:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1340,
															"name": "amount1V2ToMigrate",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1316,
															"src": "2095:18:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1334,
															"name": "TransferHelper",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2598,
															"src": "2025:14:16",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_TransferHelper_$2598_$",
																"typeString": "type(library TransferHelper)"
															}
														},
														"id": 1336,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeApprove",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2571,
														"src": "2025:26:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1341,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2025:89:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1342,
												"nodeType": "ExpressionStatement",
												"src": "2025:89:16"
											},
											{
												"assignments": [
													null,
													null,
													1344,
													1346
												],
												"declarations": [
													null,
													null,
													{
														"constant": false,
														"id": 1344,
														"mutability": "mutable",
														"name": "amount0V3",
														"nodeType": "VariableDeclaration",
														"scope": 1496,
														"src": "2161:17:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1343,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2161:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1346,
														"mutability": "mutable",
														"name": "amount1V3",
														"nodeType": "VariableDeclaration",
														"scope": 1496,
														"src": "2180:17:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1345,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2180:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1375,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 1353,
																		"name": "params",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1257,
																		"src": "2363:6:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_MigrateParams_$2287_calldata_ptr",
																			"typeString": "struct IV3Migrator.MigrateParams calldata"
																		}
																	},
																	"id": 1354,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "token0",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2268,
																	"src": "2363:13:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"expression": {
																		"id": 1355,
																		"name": "params",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1257,
																		"src": "2407:6:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_MigrateParams_$2287_calldata_ptr",
																			"typeString": "struct IV3Migrator.MigrateParams calldata"
																		}
																	},
																	"id": 1356,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "token1",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2270,
																	"src": "2407:13:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"expression": {
																		"id": 1357,
																		"name": "params",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1257,
																		"src": "2448:6:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_MigrateParams_$2287_calldata_ptr",
																			"typeString": "struct IV3Migrator.MigrateParams calldata"
																		}
																	},
																	"id": 1358,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "fee",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2272,
																	"src": "2448:10:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint24",
																		"typeString": "uint24"
																	}
																},
																{
																	"expression": {
																		"id": 1359,
																		"name": "params",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1257,
																		"src": "2492:6:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_MigrateParams_$2287_calldata_ptr",
																			"typeString": "struct IV3Migrator.MigrateParams calldata"
																		}
																	},
																	"id": 1360,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "tickLower",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2274,
																	"src": "2492:16:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int24",
																		"typeString": "int24"
																	}
																},
																{
																	"expression": {
																		"id": 1361,
																		"name": "params",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1257,
																		"src": "2542:6:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_MigrateParams_$2287_calldata_ptr",
																			"typeString": "struct IV3Migrator.MigrateParams calldata"
																		}
																	},
																	"id": 1362,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "tickUpper",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2276,
																	"src": "2542:16:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int24",
																		"typeString": "int24"
																	}
																},
																{
																	"id": 1363,
																	"name": "amount0V2ToMigrate",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1306,
																	"src": "2597:18:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1364,
																	"name": "amount1V2ToMigrate",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1316,
																	"src": "2654:18:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"expression": {
																		"id": 1365,
																		"name": "params",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1257,
																		"src": "2707:6:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_MigrateParams_$2287_calldata_ptr",
																			"typeString": "struct IV3Migrator.MigrateParams calldata"
																		}
																	},
																	"id": 1366,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "amount0Min",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2278,
																	"src": "2707:17:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"expression": {
																		"id": 1367,
																		"name": "params",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1257,
																		"src": "2759:6:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_MigrateParams_$2287_calldata_ptr",
																			"typeString": "struct IV3Migrator.MigrateParams calldata"
																		}
																	},
																	"id": 1368,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "amount1Min",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2280,
																	"src": "2759:17:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"expression": {
																		"id": 1369,
																		"name": "params",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1257,
																		"src": "2810:6:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_MigrateParams_$2287_calldata_ptr",
																			"typeString": "struct IV3Migrator.MigrateParams calldata"
																		}
																	},
																	"id": 1370,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "recipient",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2282,
																	"src": "2810:16:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"expression": {
																		"id": 1371,
																		"name": "params",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1257,
																		"src": "2859:6:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_MigrateParams_$2287_calldata_ptr",
																			"typeString": "struct IV3Migrator.MigrateParams calldata"
																		}
																	},
																	"id": 1372,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "deadline",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2284,
																	"src": "2859:15:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint24",
																		"typeString": "uint24"
																	},
																	{
																		"typeIdentifier": "t_int24",
																		"typeString": "int24"
																	},
																	{
																		"typeIdentifier": "t_int24",
																		"typeString": "int24"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1351,
																	"name": "INonfungiblePositionManager",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2118,
																	"src": "2293:27:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_INonfungiblePositionManager_$2118_$",
																		"typeString": "type(contract INonfungiblePositionManager)"
																	}
																},
																"id": 1352,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "MintParams",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2032,
																"src": "2293:38:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_struct$_MintParams_$2032_storage_ptr_$",
																	"typeString": "type(struct INonfungiblePositionManager.MintParams storage pointer)"
																}
															},
															"id": 1373,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "structConstructorCall",
															"lValueRequested": false,
															"names": [
																"token0",
																"token1",
																"fee",
																"tickLower",
																"tickUpper",
																"amount0Desired",
																"amount1Desired",
																"amount0Min",
																"amount1Min",
																"recipient",
																"deadline"
															],
															"nodeType": "FunctionCall",
															"src": "2293:601:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_MintParams_$2032_memory_ptr",
																"typeString": "struct INonfungiblePositionManager.MintParams memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_MintParams_$2032_memory_ptr",
																"typeString": "struct INonfungiblePositionManager.MintParams memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1348,
																	"name": "nonfungiblePositionManager",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1225,
																	"src": "2242:26:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1347,
																"name": "INonfungiblePositionManager",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2118,
																"src": "2214:27:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_INonfungiblePositionManager_$2118_$",
																	"typeString": "type(contract INonfungiblePositionManager)"
																}
															},
															"id": 1349,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2214:55:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_INonfungiblePositionManager_$2118",
																"typeString": "contract INonfungiblePositionManager"
															}
														},
														"id": 1350,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "mint",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2046,
														"src": "2214:60:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_payable$_t_struct$_MintParams_$2032_memory_ptr_$returns$_t_uint256_$_t_uint128_$_t_uint256_$_t_uint256_$",
															"typeString": "function (struct INonfungiblePositionManager.MintParams memory) payable external returns (uint256,uint128,uint256,uint256)"
														}
													},
													"id": 1374,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2214:695:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint256_$_t_uint128_$_t_uint256_$_t_uint256_$",
														"typeString": "tuple(uint256,uint128,uint256,uint256)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2156:753:16"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1378,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1376,
														"name": "amount0V3",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1344,
														"src": "2984:9:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1377,
														"name": "amount0V2",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1291,
														"src": "2996:9:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2984:21:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1435,
												"nodeType": "IfStatement",
												"src": "2980:556:16",
												"trueBody": {
													"id": 1434,
													"nodeType": "Block",
													"src": "3007:529:16",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1381,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1379,
																	"name": "amount0V3",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1344,
																	"src": "3026:9:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 1380,
																	"name": "amount0V2ToMigrate",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1306,
																	"src": "3038:18:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3026:30:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1392,
															"nodeType": "IfStatement",
															"src": "3022:143:16",
															"trueBody": {
																"id": 1391,
																"nodeType": "Block",
																"src": "3058:107:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"expression": {
																						"id": 1385,
																						"name": "params",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1257,
																						"src": "3104:6:16",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_MigrateParams_$2287_calldata_ptr",
																							"typeString": "struct IV3Migrator.MigrateParams calldata"
																						}
																					},
																					"id": 1386,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "token0",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2268,
																					"src": "3104:13:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 1387,
																					"name": "nonfungiblePositionManager",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1225,
																					"src": "3119:26:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"hexValue": "30",
																					"id": 1388,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3147:1:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					},
																					"value": "0"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					}
																				],
																				"expression": {
																					"id": 1382,
																					"name": "TransferHelper",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2598,
																					"src": "3077:14:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_TransferHelper_$2598_$",
																						"typeString": "type(library TransferHelper)"
																					}
																				},
																				"id": 1384,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "safeApprove",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 2571,
																				"src": "3077:26:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																					"typeString": "function (address,address,uint256)"
																				}
																			},
																			"id": 1389,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "3077:72:16",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1390,
																		"nodeType": "ExpressionStatement",
																		"src": "3077:72:16"
																	}
																]
															}
														},
														{
															"assignments": [
																1394
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1394,
																	"mutability": "mutable",
																	"name": "refund0",
																	"nodeType": "VariableDeclaration",
																	"scope": 1434,
																	"src": "3181:15:16",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1393,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "3181:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1398,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1397,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1395,
																	"name": "amount0V2",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1291,
																	"src": "3199:9:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 1396,
																	"name": "amount0V3",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1344,
																	"src": "3211:9:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3199:21:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "3181:39:16"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 1405,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1399,
																		"name": "params",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1257,
																		"src": "3239:6:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_MigrateParams_$2287_calldata_ptr",
																			"typeString": "struct IV3Migrator.MigrateParams calldata"
																		}
																	},
																	"id": 1400,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "refundAsETH",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2286,
																	"src": "3239:18:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&&",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"id": 1404,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"id": 1401,
																			"name": "params",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1257,
																			"src": "3261:6:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_MigrateParams_$2287_calldata_ptr",
																				"typeString": "struct IV3Migrator.MigrateParams calldata"
																			}
																		},
																		"id": 1402,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "token0",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2268,
																		"src": "3261:13:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"id": 1403,
																		"name": "WETH9",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1597,
																		"src": "3278:5:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"src": "3261:22:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "3239:44:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 1432,
																"nodeType": "Block",
																"src": "3427:98:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"expression": {
																						"id": 1425,
																						"name": "params",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1257,
																						"src": "3474:6:16",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_MigrateParams_$2287_calldata_ptr",
																							"typeString": "struct IV3Migrator.MigrateParams calldata"
																						}
																					},
																					"id": 1426,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "token0",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2268,
																					"src": "3474:13:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"expression": {
																						"id": 1427,
																						"name": "msg",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967281,
																						"src": "3489:3:16",
																						"typeDescriptions": {
																							"typeIdentifier": "t_magic_message",
																							"typeString": "msg"
																						}
																					},
																					"id": 1428,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "sender",
																					"nodeType": "MemberAccess",
																					"src": "3489:10:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address_payable",
																						"typeString": "address payable"
																					}
																				},
																				{
																					"id": 1429,
																					"name": "refund0",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1394,
																					"src": "3501:7:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address_payable",
																						"typeString": "address payable"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"expression": {
																					"id": 1422,
																					"name": "TransferHelper",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2598,
																					"src": "3446:14:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_TransferHelper_$2598_$",
																						"typeString": "type(library TransferHelper)"
																					}
																				},
																				"id": 1424,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "safeTransfer",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 2525,
																				"src": "3446:27:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																					"typeString": "function (address,address,uint256)"
																				}
																			},
																			"id": 1430,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "3446:63:16",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1431,
																		"nodeType": "ExpressionStatement",
																		"src": "3446:63:16"
																	}
																]
															},
															"id": 1433,
															"nodeType": "IfStatement",
															"src": "3235:290:16",
															"trueBody": {
																"id": 1421,
																"nodeType": "Block",
																"src": "3285:136:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 1410,
																					"name": "refund0",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1394,
																					"src": "3327:7:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"expression": {
																					"arguments": [
																						{
																							"id": 1407,
																							"name": "WETH9",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1597,
																							"src": "3311:5:16",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 1406,
																						"name": "IWETH9",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2335,
																						"src": "3304:6:16",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_contract$_IWETH9_$2335_$",
																							"typeString": "type(contract IWETH9)"
																						}
																					},
																					"id": 1408,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "3304:13:16",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IWETH9_$2335",
																						"typeString": "contract IWETH9"
																					}
																				},
																				"id": 1409,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "withdraw",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 2334,
																				"src": "3304:22:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
																					"typeString": "function (uint256) external"
																				}
																			},
																			"id": 1411,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "3304:31:16",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1412,
																		"nodeType": "ExpressionStatement",
																		"src": "3304:31:16"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"expression": {
																						"id": 1416,
																						"name": "msg",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967281,
																						"src": "3385:3:16",
																						"typeDescriptions": {
																							"typeIdentifier": "t_magic_message",
																							"typeString": "msg"
																						}
																					},
																					"id": 1417,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "sender",
																					"nodeType": "MemberAccess",
																					"src": "3385:10:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address_payable",
																						"typeString": "address payable"
																					}
																				},
																				{
																					"id": 1418,
																					"name": "refund0",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1394,
																					"src": "3397:7:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address_payable",
																						"typeString": "address payable"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"expression": {
																					"id": 1413,
																					"name": "TransferHelper",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2598,
																					"src": "3354:14:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_TransferHelper_$2598_$",
																						"typeString": "type(library TransferHelper)"
																					}
																				},
																				"id": 1415,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "safeTransferETH",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 2597,
																				"src": "3354:30:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
																					"typeString": "function (address,uint256)"
																				}
																			},
																			"id": 1419,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "3354:51:16",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1420,
																		"nodeType": "ExpressionStatement",
																		"src": "3354:51:16"
																	}
																]
															}
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1438,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1436,
														"name": "amount1V3",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1346,
														"src": "3550:9:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1437,
														"name": "amount1V2",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1293,
														"src": "3562:9:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3550:21:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1495,
												"nodeType": "IfStatement",
												"src": "3546:556:16",
												"trueBody": {
													"id": 1494,
													"nodeType": "Block",
													"src": "3573:529:16",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1441,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1439,
																	"name": "amount1V3",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1346,
																	"src": "3592:9:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 1440,
																	"name": "amount1V2ToMigrate",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1316,
																	"src": "3604:18:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3592:30:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1452,
															"nodeType": "IfStatement",
															"src": "3588:143:16",
															"trueBody": {
																"id": 1451,
																"nodeType": "Block",
																"src": "3624:107:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"expression": {
																						"id": 1445,
																						"name": "params",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1257,
																						"src": "3670:6:16",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_MigrateParams_$2287_calldata_ptr",
																							"typeString": "struct IV3Migrator.MigrateParams calldata"
																						}
																					},
																					"id": 1446,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "token1",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2270,
																					"src": "3670:13:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 1447,
																					"name": "nonfungiblePositionManager",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1225,
																					"src": "3685:26:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"hexValue": "30",
																					"id": 1448,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3713:1:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					},
																					"value": "0"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					}
																				],
																				"expression": {
																					"id": 1442,
																					"name": "TransferHelper",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2598,
																					"src": "3643:14:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_TransferHelper_$2598_$",
																						"typeString": "type(library TransferHelper)"
																					}
																				},
																				"id": 1444,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "safeApprove",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 2571,
																				"src": "3643:26:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																					"typeString": "function (address,address,uint256)"
																				}
																			},
																			"id": 1449,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "3643:72:16",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1450,
																		"nodeType": "ExpressionStatement",
																		"src": "3643:72:16"
																	}
																]
															}
														},
														{
															"assignments": [
																1454
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1454,
																	"mutability": "mutable",
																	"name": "refund1",
																	"nodeType": "VariableDeclaration",
																	"scope": 1494,
																	"src": "3747:15:16",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1453,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "3747:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1458,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1457,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1455,
																	"name": "amount1V2",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1293,
																	"src": "3765:9:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 1456,
																	"name": "amount1V3",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1346,
																	"src": "3777:9:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3765:21:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "3747:39:16"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 1465,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1459,
																		"name": "params",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1257,
																		"src": "3805:6:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_MigrateParams_$2287_calldata_ptr",
																			"typeString": "struct IV3Migrator.MigrateParams calldata"
																		}
																	},
																	"id": 1460,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "refundAsETH",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2286,
																	"src": "3805:18:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&&",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"id": 1464,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"id": 1461,
																			"name": "params",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1257,
																			"src": "3827:6:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_MigrateParams_$2287_calldata_ptr",
																				"typeString": "struct IV3Migrator.MigrateParams calldata"
																			}
																		},
																		"id": 1462,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "token1",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2270,
																		"src": "3827:13:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"id": 1463,
																		"name": "WETH9",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1597,
																		"src": "3844:5:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"src": "3827:22:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "3805:44:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 1492,
																"nodeType": "Block",
																"src": "3993:98:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"expression": {
																						"id": 1485,
																						"name": "params",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1257,
																						"src": "4040:6:16",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_MigrateParams_$2287_calldata_ptr",
																							"typeString": "struct IV3Migrator.MigrateParams calldata"
																						}
																					},
																					"id": 1486,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "token1",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2270,
																					"src": "4040:13:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"expression": {
																						"id": 1487,
																						"name": "msg",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967281,
																						"src": "4055:3:16",
																						"typeDescriptions": {
																							"typeIdentifier": "t_magic_message",
																							"typeString": "msg"
																						}
																					},
																					"id": 1488,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "sender",
																					"nodeType": "MemberAccess",
																					"src": "4055:10:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address_payable",
																						"typeString": "address payable"
																					}
																				},
																				{
																					"id": 1489,
																					"name": "refund1",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1454,
																					"src": "4067:7:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address_payable",
																						"typeString": "address payable"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"expression": {
																					"id": 1482,
																					"name": "TransferHelper",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2598,
																					"src": "4012:14:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_TransferHelper_$2598_$",
																						"typeString": "type(library TransferHelper)"
																					}
																				},
																				"id": 1484,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "safeTransfer",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 2525,
																				"src": "4012:27:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																					"typeString": "function (address,address,uint256)"
																				}
																			},
																			"id": 1490,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "4012:63:16",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1491,
																		"nodeType": "ExpressionStatement",
																		"src": "4012:63:16"
																	}
																]
															},
															"id": 1493,
															"nodeType": "IfStatement",
															"src": "3801:290:16",
															"trueBody": {
																"id": 1481,
																"nodeType": "Block",
																"src": "3851:136:16",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 1470,
																					"name": "refund1",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1454,
																					"src": "3893:7:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"expression": {
																					"arguments": [
																						{
																							"id": 1467,
																							"name": "WETH9",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1597,
																							"src": "3877:5:16",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 1466,
																						"name": "IWETH9",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2335,
																						"src": "3870:6:16",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_contract$_IWETH9_$2335_$",
																							"typeString": "type(contract IWETH9)"
																						}
																					},
																					"id": 1468,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "3870:13:16",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IWETH9_$2335",
																						"typeString": "contract IWETH9"
																					}
																				},
																				"id": 1469,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "withdraw",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 2334,
																				"src": "3870:22:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
																					"typeString": "function (uint256) external"
																				}
																			},
																			"id": 1471,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "3870:31:16",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1472,
																		"nodeType": "ExpressionStatement",
																		"src": "3870:31:16"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"expression": {
																						"id": 1476,
																						"name": "msg",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967281,
																						"src": "3951:3:16",
																						"typeDescriptions": {
																							"typeIdentifier": "t_magic_message",
																							"typeString": "msg"
																						}
																					},
																					"id": 1477,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "sender",
																					"nodeType": "MemberAccess",
																					"src": "3951:10:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address_payable",
																						"typeString": "address payable"
																					}
																				},
																				{
																					"id": 1478,
																					"name": "refund1",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1454,
																					"src": "3963:7:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address_payable",
																						"typeString": "address payable"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"expression": {
																					"id": 1473,
																					"name": "TransferHelper",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2598,
																					"src": "3920:14:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_TransferHelper_$2598_$",
																						"typeString": "type(library TransferHelper)"
																					}
																				},
																				"id": 1475,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "safeTransferETH",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 2597,
																				"src": "3920:30:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
																					"typeString": "function (address,uint256)"
																				}
																			},
																			"id": 1479,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "3920:51:16",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1480,
																		"nodeType": "ExpressionStatement",
																		"src": "3920:51:16"
																	}
																]
															}
														}
													]
												}
											}
										]
									},
									"functionSelector": "d44f2bf2",
									"id": 1497,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "migrate",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1259,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1202:8:16"
									},
									"parameters": {
										"id": 1258,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1257,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 1497,
												"src": "1162:29:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_MigrateParams_$2287_calldata_ptr",
													"typeString": "struct IV3Migrator.MigrateParams"
												},
												"typeName": {
													"id": 1256,
													"name": "MigrateParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2287,
													"src": "1162:13:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_MigrateParams_$2287_storage_ptr",
														"typeString": "struct IV3Migrator.MigrateParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1161:31:16"
									},
									"returnParameters": {
										"id": 1260,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1211:0:16"
									},
									"scope": 1498,
									"src": "1145:2964:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1499,
							"src": "600:3512:16"
						}
					],
					"src": "46:4068:16"
				},
				"id": 16
			},
			"contracts/base/Multicall.sol": {
				"ast": {
					"absolutePath": "contracts/base/Multicall.sol",
					"exportedSymbols": {
						"IMulticall": [
							1923
						],
						"Multicall": [
							1583
						]
					},
					"id": 1584,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1500,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "46:23:17"
						},
						{
							"id": 1501,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "71:19:17"
						},
						{
							"absolutePath": "contracts/interfaces/IMulticall.sol",
							"file": "../interfaces/IMulticall.sol",
							"id": 1502,
							"nodeType": "ImportDirective",
							"scope": 1584,
							"sourceUnit": 1924,
							"src": "94:38:17",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1504,
										"name": "IMulticall",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1923,
										"src": "268:10:17",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IMulticall_$1923",
											"typeString": "contract IMulticall"
										}
									},
									"id": 1505,
									"nodeType": "InheritanceSpecifier",
									"src": "268:10:17"
								}
							],
							"contractDependencies": [
								1923
							],
							"contractKind": "contract",
							"documentation": {
								"id": 1503,
								"nodeType": "StructuredDocumentation",
								"src": "136:101:17",
								"text": "@title Multicall\n @notice Enables calling multiple methods in a single call to the contract"
							},
							"fullyImplemented": true,
							"id": 1583,
							"linearizedBaseContracts": [
								1583,
								1923
							],
							"name": "Multicall",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"baseFunctions": [
										1922
									],
									"body": {
										"id": 1581,
										"nodeType": "Block",
										"src": "417:570:17",
										"statements": [
											{
												"expression": {
													"id": 1523,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1516,
														"name": "results",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1514,
														"src": "428:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
															"typeString": "bytes memory[] memory"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"expression": {
																	"id": 1520,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1509,
																	"src": "450:4:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
																		"typeString": "bytes calldata[] calldata"
																	}
																},
																"id": 1521,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "450:11:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1519,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "NewExpression",
															"src": "438:11:17",
															"typeDescriptions": {
																"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$",
																"typeString": "function (uint256) pure returns (bytes memory[] memory)"
															},
															"typeName": {
																"baseType": {
																	"id": 1517,
																	"name": "bytes",
																	"nodeType": "ElementaryTypeName",
																	"src": "442:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_storage_ptr",
																		"typeString": "bytes"
																	}
																},
																"id": 1518,
																"nodeType": "ArrayTypeName",
																"src": "442:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
																	"typeString": "bytes[]"
																}
															}
														},
														"id": 1522,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "438:24:17",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
															"typeString": "bytes memory[] memory"
														}
													},
													"src": "428:34:17",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
														"typeString": "bytes memory[] memory"
													}
												},
												"id": 1524,
												"nodeType": "ExpressionStatement",
												"src": "428:34:17"
											},
											{
												"body": {
													"id": 1579,
													"nodeType": "Block",
													"src": "515:465:17",
													"statements": [
														{
															"assignments": [
																1537,
																1539
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1537,
																	"mutability": "mutable",
																	"name": "success",
																	"nodeType": "VariableDeclaration",
																	"scope": 1579,
																	"src": "531:12:17",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"typeName": {
																		"id": 1536,
																		"name": "bool",
																		"nodeType": "ElementaryTypeName",
																		"src": "531:4:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"visibility": "internal"
																},
																{
																	"constant": false,
																	"id": 1539,
																	"mutability": "mutable",
																	"name": "result",
																	"nodeType": "VariableDeclaration",
																	"scope": 1579,
																	"src": "545:19:17",
																	"stateVariable": false,
																	"storageLocation": "memory",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes"
																	},
																	"typeName": {
																		"id": 1538,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "545:5:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_storage_ptr",
																			"typeString": "bytes"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1549,
															"initialValue": {
																"arguments": [
																	{
																		"baseExpression": {
																			"id": 1545,
																			"name": "data",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1509,
																			"src": "595:4:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
																				"typeString": "bytes calldata[] calldata"
																			}
																		},
																		"id": 1547,
																		"indexExpression": {
																			"id": 1546,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1526,
																			"src": "600:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "595:7:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_calldata_ptr",
																			"typeString": "bytes calldata"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_calldata_ptr",
																			"typeString": "bytes calldata"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 1542,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "576:4:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_Multicall_$1583",
																					"typeString": "contract Multicall"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_Multicall_$1583",
																					"typeString": "contract Multicall"
																				}
																			],
																			"id": 1541,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "568:7:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1540,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "568:7:17",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1543,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "568:13:17",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"id": 1544,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "delegatecall",
																	"nodeType": "MemberAccess",
																	"src": "568:26:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																		"typeString": "function (bytes memory) returns (bool,bytes memory)"
																	}
																},
																"id": 1548,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "568:35:17",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
																	"typeString": "tuple(bool,bytes memory)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "530:73:17"
														},
														{
															"condition": {
																"id": 1551,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "!",
																"prefix": true,
																"src": "624:8:17",
																"subExpression": {
																	"id": 1550,
																	"name": "success",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1537,
																	"src": "625:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1572,
															"nodeType": "IfStatement",
															"src": "620:313:17",
															"trueBody": {
																"id": 1571,
																"nodeType": "Block",
																"src": "634:299:17",
																"statements": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1555,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 1552,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1539,
																					"src": "738:6:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 1553,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "738:13:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "<",
																			"rightExpression": {
																				"hexValue": "3638",
																				"id": 1554,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "754:2:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_68_by_1",
																					"typeString": "int_const 68"
																				},
																				"value": "68"
																			},
																			"src": "738:18:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"id": 1559,
																		"nodeType": "IfStatement",
																		"src": "734:32:17",
																		"trueBody": {
																			"expression": {
																				"arguments": [],
																				"expression": {
																					"argumentTypes": [],
																					"id": 1556,
																					"name": "revert",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [
																						4294967277,
																						4294967277
																					],
																					"referencedDeclaration": 4294967277,
																					"src": "758:6:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_revert_pure$__$returns$__$",
																						"typeString": "function () pure"
																					}
																				},
																				"id": 1557,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "758:8:17",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_tuple$__$",
																					"typeString": "tuple()"
																				}
																			},
																			"id": 1558,
																			"nodeType": "ExpressionStatement",
																			"src": "758:8:17"
																		}
																	},
																	{
																		"AST": {
																			"nodeType": "YulBlock",
																			"src": "794:69:17",
																			"statements": [
																				{
																					"nodeType": "YulAssignment",
																					"src": "817:27:17",
																					"value": {
																						"arguments": [
																							{
																								"name": "result",
																								"nodeType": "YulIdentifier",
																								"src": "831:6:17"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "839:4:17",
																								"type": "",
																								"value": "0x04"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "827:3:17"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "827:17:17"
																					},
																					"variableNames": [
																						{
																							"name": "result",
																							"nodeType": "YulIdentifier",
																							"src": "817:6:17"
																						}
																					]
																				}
																			]
																		},
																		"evmVersion": "istanbul",
																		"externalReferences": [
																			{
																				"declaration": 1539,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "817:6:17",
																				"valueSize": 1
																			},
																			{
																				"declaration": 1539,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "831:6:17",
																				"valueSize": 1
																			}
																		],
																		"id": 1560,
																		"nodeType": "InlineAssembly",
																		"src": "785:78:17"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 1564,
																							"name": "result",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1539,
																							"src": "899:6:17",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bytes_memory_ptr",
																								"typeString": "bytes memory"
																							}
																						},
																						{
																							"components": [
																								{
																									"id": 1566,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"lValueRequested": false,
																									"nodeType": "ElementaryTypeNameExpression",
																									"src": "908:6:17",
																									"typeDescriptions": {
																										"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																										"typeString": "type(string storage pointer)"
																									},
																									"typeName": {
																										"id": 1565,
																										"name": "string",
																										"nodeType": "ElementaryTypeName",
																										"src": "908:6:17",
																										"typeDescriptions": {}
																									}
																								}
																							],
																							"id": 1567,
																							"isConstant": false,
																							"isInlineArray": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "TupleExpression",
																							"src": "907:8:17",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																								"typeString": "type(string storage pointer)"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_bytes_memory_ptr",
																								"typeString": "bytes memory"
																							},
																							{
																								"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																								"typeString": "type(string storage pointer)"
																							}
																						],
																						"expression": {
																							"id": 1562,
																							"name": "abi",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967295,
																							"src": "888:3:17",
																							"typeDescriptions": {
																								"typeIdentifier": "t_magic_abi",
																								"typeString": "abi"
																							}
																						},
																						"id": 1563,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"memberName": "decode",
																						"nodeType": "MemberAccess",
																						"src": "888:10:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																							"typeString": "function () pure"
																						}
																					},
																					"id": 1568,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "888:28:17",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				],
																				"id": 1561,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967277,
																					4294967277
																				],
																				"referencedDeclaration": 4294967277,
																				"src": "881:6:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 1569,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "881:36:17",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1570,
																		"nodeType": "ExpressionStatement",
																		"src": "881:36:17"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 1577,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1573,
																		"name": "results",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1514,
																		"src": "949:7:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
																			"typeString": "bytes memory[] memory"
																		}
																	},
																	"id": 1575,
																	"indexExpression": {
																		"id": 1574,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1526,
																		"src": "957:1:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "949:10:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 1576,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1539,
																	"src": "962:6:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																"src": "949:19:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 1578,
															"nodeType": "ExpressionStatement",
															"src": "949:19:17"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1532,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1529,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1526,
														"src": "493:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 1530,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1509,
															"src": "497:4:17",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
																"typeString": "bytes calldata[] calldata"
															}
														},
														"id": 1531,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "497:11:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "493:15:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1580,
												"initializationExpression": {
													"assignments": [
														1526
													],
													"declarations": [
														{
															"constant": false,
															"id": 1526,
															"mutability": "mutable",
															"name": "i",
															"nodeType": "VariableDeclaration",
															"scope": 1580,
															"src": "478:9:17",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1525,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "478:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1528,
													"initialValue": {
														"hexValue": "30",
														"id": 1527,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "490:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "478:13:17"
												},
												"loopExpression": {
													"expression": {
														"id": 1534,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "510:3:17",
														"subExpression": {
															"id": 1533,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1526,
															"src": "510:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1535,
													"nodeType": "ExpressionStatement",
													"src": "510:3:17"
												},
												"nodeType": "ForStatement",
												"src": "473:507:17"
											}
										]
									},
									"documentation": {
										"id": 1506,
										"nodeType": "StructuredDocumentation",
										"src": "286:26:17",
										"text": "@inheritdoc IMulticall"
									},
									"functionSelector": "ac9650d8",
									"id": 1582,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "multicall",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1511,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "375:8:17"
									},
									"parameters": {
										"id": 1510,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1509,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 1582,
												"src": "337:21:17",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "bytes[]"
												},
												"typeName": {
													"baseType": {
														"id": 1507,
														"name": "bytes",
														"nodeType": "ElementaryTypeName",
														"src": "337:5:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_storage_ptr",
															"typeString": "bytes"
														}
													},
													"id": 1508,
													"nodeType": "ArrayTypeName",
													"src": "337:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
														"typeString": "bytes[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "336:23:17"
									},
									"returnParameters": {
										"id": 1515,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1514,
												"mutability": "mutable",
												"name": "results",
												"nodeType": "VariableDeclaration",
												"scope": 1582,
												"src": "393:22:17",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
													"typeString": "bytes[]"
												},
												"typeName": {
													"baseType": {
														"id": 1512,
														"name": "bytes",
														"nodeType": "ElementaryTypeName",
														"src": "393:5:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_storage_ptr",
															"typeString": "bytes"
														}
													},
													"id": 1513,
													"nodeType": "ArrayTypeName",
													"src": "393:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
														"typeString": "bytes[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "392:24:17"
									},
									"scope": 1583,
									"src": "318:669:17",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 1584,
							"src": "237:753:17"
						}
					],
					"src": "46:946:17"
				},
				"id": 17
			},
			"contracts/base/PeripheryImmutableState.sol": {
				"ast": {
					"absolutePath": "contracts/base/PeripheryImmutableState.sol",
					"exportedSymbols": {
						"IPeripheryImmutableState": [
							2134
						],
						"PeripheryImmutableState": [
							1614
						]
					},
					"id": 1615,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1585,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "46:23:18"
						},
						{
							"absolutePath": "contracts/interfaces/IPeripheryImmutableState.sol",
							"file": "../interfaces/IPeripheryImmutableState.sol",
							"id": 1586,
							"nodeType": "ImportDirective",
							"scope": 1615,
							"sourceUnit": 2135,
							"src": "73:52:18",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1588,
										"name": "IPeripheryImmutableState",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2134,
										"src": "259:24:18",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IPeripheryImmutableState_$2134",
											"typeString": "contract IPeripheryImmutableState"
										}
									},
									"id": 1589,
									"nodeType": "InheritanceSpecifier",
									"src": "259:24:18"
								}
							],
							"contractDependencies": [
								2134
							],
							"contractKind": "contract",
							"documentation": {
								"id": 1587,
								"nodeType": "StructuredDocumentation",
								"src": "129:85:18",
								"text": "@title Immutable state\n @notice Immutable state used by periphery contracts"
							},
							"fullyImplemented": true,
							"id": 1614,
							"linearizedBaseContracts": [
								1614,
								2134
							],
							"name": "PeripheryImmutableState",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"baseFunctions": [
										2127
									],
									"constant": false,
									"documentation": {
										"id": 1590,
										"nodeType": "StructuredDocumentation",
										"src": "291:40:18",
										"text": "@inheritdoc IPeripheryImmutableState"
									},
									"functionSelector": "c45a0155",
									"id": 1593,
									"mutability": "immutable",
									"name": "factory",
									"nodeType": "VariableDeclaration",
									"overrides": {
										"id": 1592,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "362:8:18"
									},
									"scope": 1614,
									"src": "337:41:18",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1591,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "337:7:18",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"baseFunctions": [
										2133
									],
									"constant": false,
									"documentation": {
										"id": 1594,
										"nodeType": "StructuredDocumentation",
										"src": "385:40:18",
										"text": "@inheritdoc IPeripheryImmutableState"
									},
									"functionSelector": "4aa4a4fc",
									"id": 1597,
									"mutability": "immutable",
									"name": "WETH9",
									"nodeType": "VariableDeclaration",
									"overrides": {
										"id": 1596,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "456:8:18"
									},
									"scope": 1614,
									"src": "431:39:18",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1595,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "431:7:18",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 1612,
										"nodeType": "Block",
										"src": "525:62:18",
										"statements": [
											{
												"expression": {
													"id": 1606,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1604,
														"name": "factory",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1593,
														"src": "536:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1605,
														"name": "_factory",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1599,
														"src": "546:8:18",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "536:18:18",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1607,
												"nodeType": "ExpressionStatement",
												"src": "536:18:18"
											},
											{
												"expression": {
													"id": 1610,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1608,
														"name": "WETH9",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1597,
														"src": "565:5:18",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1609,
														"name": "_WETH9",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1601,
														"src": "573:6:18",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "565:14:18",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1611,
												"nodeType": "ExpressionStatement",
												"src": "565:14:18"
											}
										]
									},
									"id": 1613,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1602,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1599,
												"mutability": "mutable",
												"name": "_factory",
												"nodeType": "VariableDeclaration",
												"scope": 1613,
												"src": "491:16:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1598,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "491:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1601,
												"mutability": "mutable",
												"name": "_WETH9",
												"nodeType": "VariableDeclaration",
												"scope": 1613,
												"src": "509:14:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1600,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "509:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "490:34:18"
									},
									"returnParameters": {
										"id": 1603,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "525:0:18"
									},
									"scope": 1614,
									"src": "479:108:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1615,
							"src": "214:376:18"
						}
					],
					"src": "46:546:18"
				},
				"id": 18
			},
			"contracts/base/PoolInitializer.sol": {
				"ast": {
					"absolutePath": "contracts/base/PoolInitializer.sol",
					"exportedSymbols": {
						"IPeripheryImmutableState": [
							2134
						],
						"IPoolInitializer": [
							2179
						],
						"IUniswapV3Factory": [
							624
						],
						"IUniswapV3Pool": [
							646
						],
						"IUniswapV3PoolActions": [
							742
						],
						"IUniswapV3PoolDerivedState": [
							773
						],
						"IUniswapV3PoolEvents": [
							892
						],
						"IUniswapV3PoolImmutables": [
							932
						],
						"IUniswapV3PoolOwnerActions": [
							958
						],
						"IUniswapV3PoolState": [
							1066
						],
						"PeripheryImmutableState": [
							1614
						],
						"PoolInitializer": [
							1706
						]
					},
					"id": 1707,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1616,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "46:23:19"
						},
						{
							"absolutePath": "@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/IUniswapV3Factory.sol",
							"file": "@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/IUniswapV3Factory.sol",
							"id": 1617,
							"nodeType": "ImportDirective",
							"scope": 1707,
							"sourceUnit": 625,
							"src": "73:69:19",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/IUniswapV3Pool.sol",
							"file": "@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/IUniswapV3Pool.sol",
							"id": 1618,
							"nodeType": "ImportDirective",
							"scope": 1707,
							"sourceUnit": 647,
							"src": "144:66:19",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/base/PeripheryImmutableState.sol",
							"file": "./PeripheryImmutableState.sol",
							"id": 1619,
							"nodeType": "ImportDirective",
							"scope": 1707,
							"sourceUnit": 1615,
							"src": "214:39:19",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/IPoolInitializer.sol",
							"file": "../interfaces/IPoolInitializer.sol",
							"id": 1620,
							"nodeType": "ImportDirective",
							"scope": 1707,
							"sourceUnit": 2180,
							"src": "255:44:19",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1622,
										"name": "IPoolInitializer",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2179,
										"src": "385:16:19",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IPoolInitializer_$2179",
											"typeString": "contract IPoolInitializer"
										}
									},
									"id": 1623,
									"nodeType": "InheritanceSpecifier",
									"src": "385:16:19"
								},
								{
									"baseName": {
										"id": 1624,
										"name": "PeripheryImmutableState",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1614,
										"src": "403:23:19",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_PeripheryImmutableState_$1614",
											"typeString": "contract PeripheryImmutableState"
										}
									},
									"id": 1625,
									"nodeType": "InheritanceSpecifier",
									"src": "403:23:19"
								}
							],
							"contractDependencies": [
								1614,
								2134,
								2179
							],
							"contractKind": "contract",
							"documentation": {
								"id": 1621,
								"nodeType": "StructuredDocumentation",
								"src": "303:45:19",
								"text": "@title Creates and initializes V3 Pools"
							},
							"fullyImplemented": false,
							"id": 1706,
							"linearizedBaseContracts": [
								1706,
								1614,
								2134,
								2179
							],
							"name": "PoolInitializer",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"baseFunctions": [
										2178
									],
									"body": {
										"id": 1704,
										"nodeType": "Block",
										"src": "674:535:19",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1643,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1641,
																"name": "token0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1628,
																"src": "693:6:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 1642,
																"name": "token1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1630,
																"src": "702:6:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "693:15:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1640,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "685:7:19",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1644,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "685:24:19",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1645,
												"nodeType": "ExpressionStatement",
												"src": "685:24:19"
											},
											{
												"expression": {
													"id": 1655,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1646,
														"name": "pool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1638,
														"src": "720:4:19",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1651,
																"name": "token0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1628,
																"src": "762:6:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 1652,
																"name": "token1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1630,
																"src": "770:6:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 1653,
																"name": "fee",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1632,
																"src": "778:3:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint24",
																	"typeString": "uint24"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_uint24",
																	"typeString": "uint24"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"id": 1648,
																		"name": "factory",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1593,
																		"src": "745:7:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1647,
																	"name": "IUniswapV3Factory",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 624,
																	"src": "727:17:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_IUniswapV3Factory_$624_$",
																		"typeString": "type(contract IUniswapV3Factory)"
																	}
																},
																"id": 1649,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "727:26:19",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IUniswapV3Factory_$624",
																	"typeString": "contract IUniswapV3Factory"
																}
															},
															"id": 1650,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "getPool",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 597,
															"src": "727:34:19",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$_t_uint24_$returns$_t_address_$",
																"typeString": "function (address,address,uint24) view external returns (address)"
															}
														},
														"id": 1654,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "727:55:19",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "720:62:19",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1656,
												"nodeType": "ExpressionStatement",
												"src": "720:62:19"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1662,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1657,
														"name": "pool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1638,
														"src": "799:4:19",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1660,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "815:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1659,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "807:7:19",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1658,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "807:7:19",
																"typeDescriptions": {}
															}
														},
														"id": 1661,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "807:10:19",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "799:18:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1702,
													"nodeType": "Block",
													"src": "977:225:19",
													"statements": [
														{
															"assignments": [
																1683,
																null,
																null,
																null,
																null,
																null,
																null
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1683,
																	"mutability": "mutable",
																	"name": "sqrtPriceX96Existing",
																	"nodeType": "VariableDeclaration",
																	"scope": 1702,
																	"src": "993:28:19",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	},
																	"typeName": {
																		"id": 1682,
																		"name": "uint160",
																		"nodeType": "ElementaryTypeName",
																		"src": "993:7:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	},
																	"visibility": "internal"
																},
																null,
																null,
																null,
																null,
																null,
																null
															],
															"id": 1689,
															"initialValue": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"arguments": [
																			{
																				"id": 1685,
																				"name": "pool",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1638,
																				"src": "1052:4:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1684,
																			"name": "IUniswapV3Pool",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 646,
																			"src": "1037:14:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IUniswapV3Pool_$646_$",
																				"typeString": "type(contract IUniswapV3Pool)"
																			}
																		},
																		"id": 1686,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1037:20:19",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IUniswapV3Pool_$646",
																			"typeString": "contract IUniswapV3Pool"
																		}
																	},
																	"id": 1687,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "slot0",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 979,
																	"src": "1037:26:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$__$returns$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_uint8_$_t_bool_$",
																		"typeString": "function () view external returns (uint160,int24,uint16,uint16,uint16,uint8,bool)"
																	}
																},
																"id": 1688,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1037:28:19",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_uint8_$_t_bool_$",
																	"typeString": "tuple(uint160,int24,uint16,uint16,uint16,uint8,bool)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "992:73:19"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 1692,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1690,
																	"name": "sqrtPriceX96Existing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1683,
																	"src": "1084:20:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1691,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1108:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "1084:25:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1701,
															"nodeType": "IfStatement",
															"src": "1080:111:19",
															"trueBody": {
																"id": 1700,
																"nodeType": "Block",
																"src": "1111:80:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 1697,
																					"name": "sqrtPriceX96",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1634,
																					"src": "1162:12:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint160",
																						"typeString": "uint160"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint160",
																						"typeString": "uint160"
																					}
																				],
																				"expression": {
																					"arguments": [
																						{
																							"id": 1694,
																							"name": "pool",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1638,
																							"src": "1145:4:19",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 1693,
																						"name": "IUniswapV3Pool",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 646,
																						"src": "1130:14:19",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_contract$_IUniswapV3Pool_$646_$",
																							"typeString": "type(contract IUniswapV3Pool)"
																						}
																					},
																					"id": 1695,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "1130:20:19",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IUniswapV3Pool_$646",
																						"typeString": "contract IUniswapV3Pool"
																					}
																				},
																				"id": 1696,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "initialize",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 655,
																				"src": "1130:31:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_uint160_$returns$__$",
																					"typeString": "function (uint160) external"
																				}
																			},
																			"id": 1698,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1130:45:19",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1699,
																		"nodeType": "ExpressionStatement",
																		"src": "1130:45:19"
																	}
																]
															}
														}
													]
												},
												"id": 1703,
												"nodeType": "IfStatement",
												"src": "795:407:19",
												"trueBody": {
													"id": 1681,
													"nodeType": "Block",
													"src": "819:152:19",
													"statements": [
														{
															"expression": {
																"id": 1672,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1663,
																	"name": "pool",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1638,
																	"src": "834:4:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 1668,
																			"name": "token0",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1628,
																			"src": "879:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1669,
																			"name": "token1",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1630,
																			"src": "887:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1670,
																			"name": "fee",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1632,
																			"src": "895:3:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint24",
																				"typeString": "uint24"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint24",
																				"typeString": "uint24"
																			}
																		],
																		"expression": {
																			"arguments": [
																				{
																					"id": 1665,
																					"name": "factory",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1593,
																					"src": "859:7:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 1664,
																				"name": "IUniswapV3Factory",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 624,
																				"src": "841:17:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_IUniswapV3Factory_$624_$",
																					"typeString": "type(contract IUniswapV3Factory)"
																				}
																			},
																			"id": 1666,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "841:26:19",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IUniswapV3Factory_$624",
																				"typeString": "contract IUniswapV3Factory"
																			}
																		},
																		"id": 1667,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "createPool",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 609,
																		"src": "841:37:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint24_$returns$_t_address_$",
																			"typeString": "function (address,address,uint24) external returns (address)"
																		}
																	},
																	"id": 1671,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "841:58:19",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "834:65:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1673,
															"nodeType": "ExpressionStatement",
															"src": "834:65:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1678,
																		"name": "sqrtPriceX96",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1634,
																		"src": "946:12:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 1675,
																				"name": "pool",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1638,
																				"src": "929:4:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1674,
																			"name": "IUniswapV3Pool",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 646,
																			"src": "914:14:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IUniswapV3Pool_$646_$",
																				"typeString": "type(contract IUniswapV3Pool)"
																			}
																		},
																		"id": 1676,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "914:20:19",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IUniswapV3Pool_$646",
																			"typeString": "contract IUniswapV3Pool"
																		}
																	},
																	"id": 1677,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "initialize",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 655,
																	"src": "914:31:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_uint160_$returns$__$",
																		"typeString": "function (uint160) external"
																	}
																},
																"id": 1679,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "914:45:19",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1680,
															"nodeType": "ExpressionStatement",
															"src": "914:45:19"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1626,
										"nodeType": "StructuredDocumentation",
										"src": "434:32:19",
										"text": "@inheritdoc IPoolInitializer"
									},
									"functionSelector": "13ead562",
									"id": 1705,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "createAndInitializePoolIfNecessary",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1636,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "642:8:19"
									},
									"parameters": {
										"id": 1635,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1628,
												"mutability": "mutable",
												"name": "token0",
												"nodeType": "VariableDeclaration",
												"scope": 1705,
												"src": "526:14:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1627,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "526:7:19",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1630,
												"mutability": "mutable",
												"name": "token1",
												"nodeType": "VariableDeclaration",
												"scope": 1705,
												"src": "551:14:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1629,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "551:7:19",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1632,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 1705,
												"src": "576:10:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1631,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "576:6:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1634,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 1705,
												"src": "597:20:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1633,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "597:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "515:109:19"
									},
									"returnParameters": {
										"id": 1639,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1638,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 1705,
												"src": "660:12:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1637,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "660:7:19",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "659:14:19"
									},
									"scope": 1706,
									"src": "472:737:19",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1707,
							"src": "348:864:19"
						}
					],
					"src": "46:1168:19"
				},
				"id": 19
			},
			"contracts/base/SelfPermit.sol": {
				"ast": {
					"absolutePath": "contracts/base/SelfPermit.sol",
					"exportedSymbols": {
						"IERC20": [
							125
						],
						"IERC20Permit": [
							35
						],
						"IERC20PermitAllowed": [
							2318
						],
						"ISelfPermit": [
							2247
						],
						"SelfPermit": [
							1873
						]
					},
					"id": 1874,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1708,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "46:24:20"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 1709,
							"nodeType": "ImportDirective",
							"scope": 1874,
							"sourceUnit": 126,
							"src": "74:56:20",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/drafts/IERC20Permit.sol",
							"file": "@openzeppelin/contracts/drafts/IERC20Permit.sol",
							"id": 1710,
							"nodeType": "ImportDirective",
							"scope": 1874,
							"sourceUnit": 36,
							"src": "132:57:20",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/ISelfPermit.sol",
							"file": "../interfaces/ISelfPermit.sol",
							"id": 1711,
							"nodeType": "ImportDirective",
							"scope": 1874,
							"sourceUnit": 2248,
							"src": "193:39:20",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/external/IERC20PermitAllowed.sol",
							"file": "../interfaces/external/IERC20PermitAllowed.sol",
							"id": 1712,
							"nodeType": "ImportDirective",
							"scope": 1874,
							"sourceUnit": 2319,
							"src": "234:56:20",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1714,
										"name": "ISelfPermit",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2247,
										"src": "625:11:20",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ISelfPermit_$2247",
											"typeString": "contract ISelfPermit"
										}
									},
									"id": 1715,
									"nodeType": "InheritanceSpecifier",
									"src": "625:11:20"
								}
							],
							"contractDependencies": [
								2247
							],
							"contractKind": "contract",
							"documentation": {
								"id": 1713,
								"nodeType": "StructuredDocumentation",
								"src": "294:299:20",
								"text": "@title Self Permit\n @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\n @dev These functions are expected to be embedded in multicalls to allow EOAs to approve a contract and call a function\n that requires an approval in a single transaction."
							},
							"fullyImplemented": true,
							"id": 1873,
							"linearizedBaseContracts": [
								1873,
								2247
							],
							"name": "SelfPermit",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"baseFunctions": [
										2198
									],
									"body": {
										"id": 1749,
										"nodeType": "Block",
										"src": "861:98:20",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1736,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "899:3:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1737,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "899:10:20",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"arguments": [
																{
																	"id": 1740,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "919:4:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SelfPermit_$1873",
																		"typeString": "contract SelfPermit"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SelfPermit_$1873",
																		"typeString": "contract SelfPermit"
																	}
																],
																"id": 1739,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "911:7:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1738,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "911:7:20",
																	"typeDescriptions": {}
																}
															},
															"id": 1741,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "911:13:20",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1742,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1720,
															"src": "926:5:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1743,
															"name": "deadline",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1722,
															"src": "933:8:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1744,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1724,
															"src": "943:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 1745,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1726,
															"src": "946:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1746,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1728,
															"src": "949:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1733,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1718,
																	"src": "885:5:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1732,
																"name": "IERC20Permit",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 35,
																"src": "872:12:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20Permit_$35_$",
																	"typeString": "type(contract IERC20Permit)"
																}
															},
															"id": 1734,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "872:19:20",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$35",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 1735,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "permit",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 20,
														"src": "872:26:20",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"
														}
													},
													"id": 1747,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "872:79:20",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1748,
												"nodeType": "ExpressionStatement",
												"src": "872:79:20"
											}
										]
									},
									"documentation": {
										"id": 1716,
										"nodeType": "StructuredDocumentation",
										"src": "644:27:20",
										"text": "@inheritdoc ISelfPermit"
									},
									"functionSelector": "f3995c67",
									"id": 1750,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "selfPermit",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1730,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "852:8:20"
									},
									"parameters": {
										"id": 1729,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1718,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 1750,
												"src": "707:13:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1717,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "707:7:20",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1720,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 1750,
												"src": "731:13:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1719,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "731:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1722,
												"mutability": "mutable",
												"name": "deadline",
												"nodeType": "VariableDeclaration",
												"scope": 1750,
												"src": "755:16:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1721,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "755:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1724,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 1750,
												"src": "782:7:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1723,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "782:5:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1726,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 1750,
												"src": "800:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1725,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "800:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1728,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 1750,
												"src": "820:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1727,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "696:140:20"
									},
									"returnParameters": {
										"id": 1731,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "861:0:20"
									},
									"scope": 1873,
									"src": "677:282:20",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										2214
									],
									"body": {
										"id": 1790,
										"nodeType": "Block",
										"src": "1197:126:20",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1779,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"expression": {
																	"id": 1771,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1236:3:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1772,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1236:10:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															{
																"arguments": [
																	{
																		"id": 1775,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "1256:4:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_SelfPermit_$1873",
																			"typeString": "contract SelfPermit"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_SelfPermit_$1873",
																			"typeString": "contract SelfPermit"
																		}
																	],
																	"id": 1774,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1248:7:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1773,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "1248:7:20",
																		"typeDescriptions": {}
																	}
																},
																"id": 1776,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1248:13:20",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"id": 1768,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1753,
																		"src": "1219:5:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1767,
																	"name": "IERC20",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 125,
																	"src": "1212:6:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_IERC20_$125_$",
																		"typeString": "type(contract IERC20)"
																	}
																},
																"id": 1769,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1212:13:20",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$125",
																	"typeString": "contract IERC20"
																}
															},
															"id": 1770,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "allowance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 84,
															"src": "1212:23:20",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																"typeString": "function (address,address) view external returns (uint256)"
															}
														},
														"id": 1777,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1212:50:20",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1778,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1755,
														"src": "1265:5:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1212:58:20",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1789,
												"nodeType": "IfStatement",
												"src": "1208:107:20",
												"trueBody": {
													"expression": {
														"arguments": [
															{
																"id": 1781,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1753,
																"src": "1283:5:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 1782,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1755,
																"src": "1290:5:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1783,
																"name": "deadline",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1757,
																"src": "1297:8:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1784,
																"name": "v",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1759,
																"src": "1307:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															{
																"id": 1785,
																"name": "r",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1761,
																"src": "1310:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 1786,
																"name": "s",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1763,
																"src": "1313:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 1780,
															"name": "selfPermit",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1750,
															"src": "1272:10:20",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$",
																"typeString": "function (address,uint256,uint256,uint8,bytes32,bytes32)"
															}
														},
														"id": 1787,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1272:43:20",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1788,
													"nodeType": "ExpressionStatement",
													"src": "1272:43:20"
												}
											}
										]
									},
									"documentation": {
										"id": 1751,
										"nodeType": "StructuredDocumentation",
										"src": "967:27:20",
										"text": "@inheritdoc ISelfPermit"
									},
									"functionSelector": "c2e3140a",
									"id": 1791,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "selfPermitIfNecessary",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1765,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1188:8:20"
									},
									"parameters": {
										"id": 1764,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1753,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 1791,
												"src": "1041:13:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1752,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1041:7:20",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1755,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 1791,
												"src": "1065:13:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1754,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1065:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1757,
												"mutability": "mutable",
												"name": "deadline",
												"nodeType": "VariableDeclaration",
												"scope": 1791,
												"src": "1089:16:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1756,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1089:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1759,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 1791,
												"src": "1116:7:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1758,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1116:5:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1761,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 1791,
												"src": "1134:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1760,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1134:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1763,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 1791,
												"src": "1154:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1762,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1154:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1030:140:20"
									},
									"returnParameters": {
										"id": 1766,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1197:0:20"
									},
									"scope": 1873,
									"src": "1000:323:20",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										2230
									],
									"body": {
										"id": 1826,
										"nodeType": "Block",
										"src": "1553:109:20",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1812,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1598:3:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1813,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1598:10:20",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"arguments": [
																{
																	"id": 1816,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1618:4:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SelfPermit_$1873",
																		"typeString": "contract SelfPermit"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SelfPermit_$1873",
																		"typeString": "contract SelfPermit"
																	}
																],
																"id": 1815,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1610:7:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1814,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1610:7:20",
																	"typeDescriptions": {}
																}
															},
															"id": 1817,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1610:13:20",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1818,
															"name": "nonce",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1796,
															"src": "1625:5:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1819,
															"name": "expiry",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1798,
															"src": "1632:6:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "74727565",
															"id": 1820,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1640:4:20",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"id": 1821,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1800,
															"src": "1646:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 1822,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1802,
															"src": "1649:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1823,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1804,
															"src": "1652:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1809,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1794,
																	"src": "1584:5:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1808,
																"name": "IERC20PermitAllowed",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2318,
																"src": "1564:19:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20PermitAllowed_$2318_$",
																	"typeString": "type(contract IERC20PermitAllowed)"
																}
															},
															"id": 1810,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1564:26:20",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20PermitAllowed_$2318",
																"typeString": "contract IERC20PermitAllowed"
															}
														},
														"id": 1811,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "permit",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2317,
														"src": "1564:33:20",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bool_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (address,address,uint256,uint256,bool,uint8,bytes32,bytes32) external"
														}
													},
													"id": 1824,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1564:90:20",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1825,
												"nodeType": "ExpressionStatement",
												"src": "1564:90:20"
											}
										]
									},
									"documentation": {
										"id": 1792,
										"nodeType": "StructuredDocumentation",
										"src": "1331:27:20",
										"text": "@inheritdoc ISelfPermit"
									},
									"functionSelector": "4659a494",
									"id": 1827,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "selfPermitAllowed",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1806,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1544:8:20"
									},
									"parameters": {
										"id": 1805,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1794,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 1827,
												"src": "1401:13:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1793,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1401:7:20",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1796,
												"mutability": "mutable",
												"name": "nonce",
												"nodeType": "VariableDeclaration",
												"scope": 1827,
												"src": "1425:13:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1795,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1425:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1798,
												"mutability": "mutable",
												"name": "expiry",
												"nodeType": "VariableDeclaration",
												"scope": 1827,
												"src": "1449:14:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1797,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1449:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1800,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 1827,
												"src": "1474:7:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1799,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1474:5:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1802,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 1827,
												"src": "1492:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1801,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1492:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1804,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 1827,
												"src": "1512:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1803,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1512:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1390:138:20"
									},
									"returnParameters": {
										"id": 1807,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1553:0:20"
									},
									"scope": 1873,
									"src": "1364:298:20",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										2246
									],
									"body": {
										"id": 1871,
										"nodeType": "Block",
										"src": "1905:156:20",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1860,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"expression": {
																	"id": 1848,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1944:3:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1849,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1944:10:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															{
																"arguments": [
																	{
																		"id": 1852,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "1964:4:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_SelfPermit_$1873",
																			"typeString": "contract SelfPermit"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_SelfPermit_$1873",
																			"typeString": "contract SelfPermit"
																		}
																	],
																	"id": 1851,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1956:7:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1850,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "1956:7:20",
																		"typeDescriptions": {}
																	}
																},
																"id": 1853,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1956:13:20",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"id": 1845,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1830,
																		"src": "1927:5:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1844,
																	"name": "IERC20",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 125,
																	"src": "1920:6:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_IERC20_$125_$",
																		"typeString": "type(contract IERC20)"
																	}
																},
																"id": 1846,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1920:13:20",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$125",
																	"typeString": "contract IERC20"
																}
															},
															"id": 1847,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "allowance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 84,
															"src": "1920:23:20",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																"typeString": "function (address,address) view external returns (uint256)"
															}
														},
														"id": 1854,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1920:50:20",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1857,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1978:7:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 1856,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1978:7:20",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 1855,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "1973:4:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 1858,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1973:13:20",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 1859,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "1973:17:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1920:70:20",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1870,
												"nodeType": "IfStatement",
												"src": "1916:137:20",
												"trueBody": {
													"expression": {
														"arguments": [
															{
																"id": 1862,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1830,
																"src": "2023:5:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 1863,
																"name": "nonce",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1832,
																"src": "2030:5:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1864,
																"name": "expiry",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1834,
																"src": "2037:6:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1865,
																"name": "v",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1836,
																"src": "2045:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															{
																"id": 1866,
																"name": "r",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1838,
																"src": "2048:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 1867,
																"name": "s",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1840,
																"src": "2051:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 1861,
															"name": "selfPermitAllowed",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1827,
															"src": "2005:17:20",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$",
																"typeString": "function (address,uint256,uint256,uint8,bytes32,bytes32)"
															}
														},
														"id": 1868,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2005:48:20",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1869,
													"nodeType": "ExpressionStatement",
													"src": "2005:48:20"
												}
											}
										]
									},
									"documentation": {
										"id": 1828,
										"nodeType": "StructuredDocumentation",
										"src": "1670:27:20",
										"text": "@inheritdoc ISelfPermit"
									},
									"functionSelector": "a4a78f0c",
									"id": 1872,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "selfPermitAllowedIfNecessary",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1842,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1896:8:20"
									},
									"parameters": {
										"id": 1841,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1830,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 1872,
												"src": "1751:13:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1829,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1751:7:20",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1832,
												"mutability": "mutable",
												"name": "nonce",
												"nodeType": "VariableDeclaration",
												"scope": 1872,
												"src": "1775:13:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1831,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1775:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1834,
												"mutability": "mutable",
												"name": "expiry",
												"nodeType": "VariableDeclaration",
												"scope": 1872,
												"src": "1799:14:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1833,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1799:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1836,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 1872,
												"src": "1824:7:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1835,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1824:5:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1838,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 1872,
												"src": "1842:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1837,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1842:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1840,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 1872,
												"src": "1862:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1839,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1862:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1740:138:20"
									},
									"returnParameters": {
										"id": 1843,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1905:0:20"
									},
									"scope": 1873,
									"src": "1703:358:20",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1874,
							"src": "593:1471:20"
						}
					],
					"src": "46:2020:20"
				},
				"id": 20
			},
			"contracts/interfaces/IERC721Permit.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/IERC721Permit.sol",
					"exportedSymbols": {
						"IERC165": [
							47
						],
						"IERC721": [
							241
						],
						"IERC721Permit": [
							1908
						]
					},
					"id": 1909,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1875,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "46:24:21"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"id": 1876,
							"nodeType": "ImportDirective",
							"scope": 1909,
							"sourceUnit": 242,
							"src": "74:58:21",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1878,
										"name": "IERC721",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 241,
										"src": "289:7:21",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC721_$241",
											"typeString": "contract IERC721"
										}
									},
									"id": 1879,
									"nodeType": "InheritanceSpecifier",
									"src": "289:7:21"
								}
							],
							"contractDependencies": [
								47,
								241
							],
							"contractKind": "interface",
							"documentation": {
								"id": 1877,
								"nodeType": "StructuredDocumentation",
								"src": "136:126:21",
								"text": "@title ERC721 with permit\n @notice Extension to ERC721 that includes a permit function for signature based approvals"
							},
							"fullyImplemented": false,
							"id": 1908,
							"linearizedBaseContracts": [
								1908,
								241,
								47
							],
							"name": "IERC721Permit",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1880,
										"nodeType": "StructuredDocumentation",
										"src": "304:105:21",
										"text": "@notice The permit typehash used in the permit signature\n @return The typehash for the permit"
									},
									"functionSelector": "30adf81f",
									"id": 1885,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "PERMIT_TYPEHASH",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1881,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "439:2:21"
									},
									"returnParameters": {
										"id": 1884,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1883,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1885,
												"src": "465:7:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1882,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "465:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "464:9:21"
									},
									"scope": 1908,
									"src": "415:59:21",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1886,
										"nodeType": "StructuredDocumentation",
										"src": "482:136:21",
										"text": "@notice The domain separator used in the permit signature\n @return The domain seperator used in encoding of permit signature"
									},
									"functionSelector": "3644e515",
									"id": 1891,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1887,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "649:2:21"
									},
									"returnParameters": {
										"id": 1890,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1889,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1891,
												"src": "675:7:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1888,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "675:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "674:9:21"
									},
									"scope": 1908,
									"src": "624:60:21",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1892,
										"nodeType": "StructuredDocumentation",
										"src": "692:611:21",
										"text": "@notice Approve of a specific token ID for spending by spender via signature\n @param spender The account that is being approved\n @param tokenId The ID of the token that is being approved for spending\n @param deadline The deadline timestamp by which the call must be mined for the approve to work\n @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`"
									},
									"functionSelector": "7ac2ff7b",
									"id": 1907,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1905,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1894,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 1907,
												"src": "1335:15:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1893,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1335:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1896,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 1907,
												"src": "1361:15:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1895,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1361:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1898,
												"mutability": "mutable",
												"name": "deadline",
												"nodeType": "VariableDeclaration",
												"scope": 1907,
												"src": "1387:16:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1897,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1387:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1900,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 1907,
												"src": "1414:7:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1899,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1414:5:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1902,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 1907,
												"src": "1432:9:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1901,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1432:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1904,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 1907,
												"src": "1452:9:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1903,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1452:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1324:144:21"
									},
									"returnParameters": {
										"id": 1906,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1485:0:21"
									},
									"scope": 1908,
									"src": "1309:177:21",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1909,
							"src": "262:1227:21"
						}
					],
					"src": "46:1445:21"
				},
				"id": 21
			},
			"contracts/interfaces/IMulticall.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/IMulticall.sol",
					"exportedSymbols": {
						"IMulticall": [
							1923
						]
					},
					"id": 1924,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1910,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "46:24:22"
						},
						{
							"id": 1911,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "72:19:22"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1912,
								"nodeType": "StructuredDocumentation",
								"src": "95:111:22",
								"text": "@title Multicall interface\n @notice Enables calling multiple methods in a single call to the contract"
							},
							"fullyImplemented": false,
							"id": 1923,
							"linearizedBaseContracts": [
								1923
							],
							"name": "IMulticall",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1913,
										"nodeType": "StructuredDocumentation",
										"src": "234:381:22",
										"text": "@notice Call multiple functions in the current contract and return the data from all of them if they all succeed\n @dev The `msg.value` should not be trusted for any method callable from multicall.\n @param data The encoded function data for each of the calls to make to this contract\n @return results The results from each of the calls passed in via data"
									},
									"functionSelector": "ac9650d8",
									"id": 1922,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "multicall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1917,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1916,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 1922,
												"src": "640:21:22",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "bytes[]"
												},
												"typeName": {
													"baseType": {
														"id": 1914,
														"name": "bytes",
														"nodeType": "ElementaryTypeName",
														"src": "640:5:22",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_storage_ptr",
															"typeString": "bytes"
														}
													},
													"id": 1915,
													"nodeType": "ArrayTypeName",
													"src": "640:7:22",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
														"typeString": "bytes[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "639:23:22"
									},
									"returnParameters": {
										"id": 1921,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1920,
												"mutability": "mutable",
												"name": "results",
												"nodeType": "VariableDeclaration",
												"scope": 1922,
												"src": "689:22:22",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
													"typeString": "bytes[]"
												},
												"typeName": {
													"baseType": {
														"id": 1918,
														"name": "bytes",
														"nodeType": "ElementaryTypeName",
														"src": "689:5:22",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_storage_ptr",
															"typeString": "bytes"
														}
													},
													"id": 1919,
													"nodeType": "ArrayTypeName",
													"src": "689:7:22",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
														"typeString": "bytes[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "688:24:22"
									},
									"scope": 1923,
									"src": "621:92:22",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1924,
							"src": "206:510:22"
						}
					],
					"src": "46:672:22"
				},
				"id": 22
			},
			"contracts/interfaces/INonfungiblePositionManager.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/INonfungiblePositionManager.sol",
					"exportedSymbols": {
						"IERC165": [
							47
						],
						"IERC721": [
							241
						],
						"IERC721Enumerable": [
							272
						],
						"IERC721Metadata": [
							299
						],
						"IERC721Permit": [
							1908
						],
						"INonfungiblePositionManager": [
							2118
						],
						"IPeripheryImmutableState": [
							2134
						],
						"IPeripheryPayments": [
							2160
						],
						"IPoolInitializer": [
							2179
						],
						"PoolAddress": [
							2427
						]
					},
					"id": 2119,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1925,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "46:24:23"
						},
						{
							"id": 1926,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "72:19:23"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol",
							"id": 1927,
							"nodeType": "ImportDirective",
							"scope": 2119,
							"sourceUnit": 300,
							"src": "95:66:23",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol",
							"id": 1928,
							"nodeType": "ImportDirective",
							"scope": 2119,
							"sourceUnit": 273,
							"src": "163:68:23",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/IPoolInitializer.sol",
							"file": "./IPoolInitializer.sol",
							"id": 1929,
							"nodeType": "ImportDirective",
							"scope": 2119,
							"sourceUnit": 2180,
							"src": "235:32:23",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/IERC721Permit.sol",
							"file": "./IERC721Permit.sol",
							"id": 1930,
							"nodeType": "ImportDirective",
							"scope": 2119,
							"sourceUnit": 1909,
							"src": "269:29:23",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/IPeripheryPayments.sol",
							"file": "./IPeripheryPayments.sol",
							"id": 1931,
							"nodeType": "ImportDirective",
							"scope": 2119,
							"sourceUnit": 2161,
							"src": "300:34:23",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/IPeripheryImmutableState.sol",
							"file": "./IPeripheryImmutableState.sol",
							"id": 1932,
							"nodeType": "ImportDirective",
							"scope": 2119,
							"sourceUnit": 2135,
							"src": "336:40:23",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/libraries/PoolAddress.sol",
							"file": "../libraries/PoolAddress.sol",
							"id": 1933,
							"nodeType": "ImportDirective",
							"scope": 2119,
							"sourceUnit": 2428,
							"src": "378:38:23",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1935,
										"name": "IPoolInitializer",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2179,
										"src": "646:16:23",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IPoolInitializer_$2179",
											"typeString": "contract IPoolInitializer"
										}
									},
									"id": 1936,
									"nodeType": "InheritanceSpecifier",
									"src": "646:16:23"
								},
								{
									"baseName": {
										"id": 1937,
										"name": "IPeripheryPayments",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2160,
										"src": "669:18:23",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IPeripheryPayments_$2160",
											"typeString": "contract IPeripheryPayments"
										}
									},
									"id": 1938,
									"nodeType": "InheritanceSpecifier",
									"src": "669:18:23"
								},
								{
									"baseName": {
										"id": 1939,
										"name": "IPeripheryImmutableState",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2134,
										"src": "694:24:23",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IPeripheryImmutableState_$2134",
											"typeString": "contract IPeripheryImmutableState"
										}
									},
									"id": 1940,
									"nodeType": "InheritanceSpecifier",
									"src": "694:24:23"
								},
								{
									"baseName": {
										"id": 1941,
										"name": "IERC721Metadata",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 299,
										"src": "725:15:23",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC721Metadata_$299",
											"typeString": "contract IERC721Metadata"
										}
									},
									"id": 1942,
									"nodeType": "InheritanceSpecifier",
									"src": "725:15:23"
								},
								{
									"baseName": {
										"id": 1943,
										"name": "IERC721Enumerable",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 272,
										"src": "747:17:23",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC721Enumerable_$272",
											"typeString": "contract IERC721Enumerable"
										}
									},
									"id": 1944,
									"nodeType": "InheritanceSpecifier",
									"src": "747:17:23"
								},
								{
									"baseName": {
										"id": 1945,
										"name": "IERC721Permit",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1908,
										"src": "771:13:23",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC721Permit_$1908",
											"typeString": "contract IERC721Permit"
										}
									},
									"id": 1946,
									"nodeType": "InheritanceSpecifier",
									"src": "771:13:23"
								}
							],
							"contractDependencies": [
								47,
								241,
								272,
								299,
								1908,
								2134,
								2160,
								2179
							],
							"contractKind": "interface",
							"documentation": {
								"id": 1934,
								"nodeType": "StructuredDocumentation",
								"src": "420:180:23",
								"text": "@title Non-fungible token for positions\n @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\n and authorized."
							},
							"fullyImplemented": false,
							"id": 2118,
							"linearizedBaseContracts": [
								2118,
								1908,
								272,
								299,
								241,
								47,
								2134,
								2160,
								2179
							],
							"name": "INonfungiblePositionManager",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 1947,
										"nodeType": "StructuredDocumentation",
										"src": "793:463:23",
										"text": "@notice Emitted when liquidity is increased for a position NFT\n @dev Also emitted when a token is minted\n @param tokenId The ID of the token for which liquidity was increased\n @param liquidity The amount by which liquidity for the NFT position was increased\n @param amount0 The amount of token0 that was paid for the increase in liquidity\n @param amount1 The amount of token1 that was paid for the increase in liquidity"
									},
									"id": 1957,
									"name": "IncreaseLiquidity",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1956,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1949,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 1957,
												"src": "1286:23:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1948,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1286:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1951,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 1957,
												"src": "1311:17:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1950,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1311:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1953,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1957,
												"src": "1330:15:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1952,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1330:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1955,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1957,
												"src": "1347:15:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1954,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1347:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1285:78:23"
									},
									"src": "1262:102:23"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1958,
										"nodeType": "StructuredDocumentation",
										"src": "1370:423:23",
										"text": "@notice Emitted when liquidity is decreased for a position NFT\n @param tokenId The ID of the token for which liquidity was decreased\n @param liquidity The amount by which liquidity for the NFT position was decreased\n @param amount0 The amount of token0 that was accounted for the decrease in liquidity\n @param amount1 The amount of token1 that was accounted for the decrease in liquidity"
									},
									"id": 1968,
									"name": "DecreaseLiquidity",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1967,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1960,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 1968,
												"src": "1823:23:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1959,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1823:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1962,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 1968,
												"src": "1848:17:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1961,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1848:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1964,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1968,
												"src": "1867:15:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1963,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1867:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1966,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1968,
												"src": "1884:15:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1965,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1884:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1822:78:23"
									},
									"src": "1799:102:23"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1969,
										"nodeType": "StructuredDocumentation",
										"src": "1907:527:23",
										"text": "@notice Emitted when tokens are collected for a position NFT\n @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\n @param tokenId The ID of the token for which underlying tokens were collected\n @param recipient The address of the account that received the collected tokens\n @param amount0 The amount of token0 owed to the position that was collected\n @param amount1 The amount of token1 owed to the position that was collected"
									},
									"id": 1979,
									"name": "Collect",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1978,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1971,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 1979,
												"src": "2454:23:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1970,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2454:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1973,
												"indexed": false,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1979,
												"src": "2479:17:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1972,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2479:7:23",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1975,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1979,
												"src": "2498:15:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1974,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2498:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1977,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1979,
												"src": "2515:15:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1976,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2515:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2453:78:23"
									},
									"src": "2440:92:23"
								},
								{
									"documentation": {
										"id": 1980,
										"nodeType": "StructuredDocumentation",
										"src": "2540:1171:23",
										"text": "@notice Returns the position information associated with a given token ID.\n @dev Throws if the token ID is not valid.\n @param tokenId The ID of the token that represents the position\n @return nonce The nonce for permits\n @return operator The address that is approved for spending\n @return token0 The address of the token0 for a specific pool\n @return token1 The address of the token1 for a specific pool\n @return fee The fee associated with the pool\n @return tickLower The lower end of the tick range for the position\n @return tickUpper The higher end of the tick range for the position\n @return liquidity The liquidity of the position\n @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\n @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\n @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\n @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation"
									},
									"functionSelector": "99fbab88",
									"id": 2009,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "positions",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1983,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1982,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 2009,
												"src": "3736:15:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1981,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3736:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3735:17:23"
									},
									"returnParameters": {
										"id": 2008,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1985,
												"mutability": "mutable",
												"name": "nonce",
												"nodeType": "VariableDeclaration",
												"scope": 2009,
												"src": "3817:12:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint96",
													"typeString": "uint96"
												},
												"typeName": {
													"id": 1984,
													"name": "uint96",
													"nodeType": "ElementaryTypeName",
													"src": "3817:6:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint96",
														"typeString": "uint96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1987,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 2009,
												"src": "3844:16:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1986,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3844:7:23",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1989,
												"mutability": "mutable",
												"name": "token0",
												"nodeType": "VariableDeclaration",
												"scope": 2009,
												"src": "3875:14:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1988,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3875:7:23",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1991,
												"mutability": "mutable",
												"name": "token1",
												"nodeType": "VariableDeclaration",
												"scope": 2009,
												"src": "3904:14:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1990,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3904:7:23",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1993,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 2009,
												"src": "3933:10:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1992,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "3933:6:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1995,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 2009,
												"src": "3958:15:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1994,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3958:5:23",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1997,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 2009,
												"src": "3988:15:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1996,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3988:5:23",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1999,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 2009,
												"src": "4018:17:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1998,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "4018:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2001,
												"mutability": "mutable",
												"name": "feeGrowthInside0LastX128",
												"nodeType": "VariableDeclaration",
												"scope": 2009,
												"src": "4050:32:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2000,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4050:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2003,
												"mutability": "mutable",
												"name": "feeGrowthInside1LastX128",
												"nodeType": "VariableDeclaration",
												"scope": 2009,
												"src": "4097:32:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2002,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4097:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2005,
												"mutability": "mutable",
												"name": "tokensOwed0",
												"nodeType": "VariableDeclaration",
												"scope": 2009,
												"src": "4144:19:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 2004,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "4144:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2007,
												"mutability": "mutable",
												"name": "tokensOwed1",
												"nodeType": "VariableDeclaration",
												"scope": 2009,
												"src": "4178:19:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 2006,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "4178:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3802:406:23"
									},
									"scope": 2118,
									"src": "3717:492:23",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "INonfungiblePositionManager.MintParams",
									"id": 2032,
									"members": [
										{
											"constant": false,
											"id": 2011,
											"mutability": "mutable",
											"name": "token0",
											"nodeType": "VariableDeclaration",
											"scope": 2032,
											"src": "4246:14:23",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2010,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "4246:7:23",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2013,
											"mutability": "mutable",
											"name": "token1",
											"nodeType": "VariableDeclaration",
											"scope": 2032,
											"src": "4271:14:23",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2012,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "4271:7:23",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2015,
											"mutability": "mutable",
											"name": "fee",
											"nodeType": "VariableDeclaration",
											"scope": 2032,
											"src": "4296:10:23",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint24",
												"typeString": "uint24"
											},
											"typeName": {
												"id": 2014,
												"name": "uint24",
												"nodeType": "ElementaryTypeName",
												"src": "4296:6:23",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2017,
											"mutability": "mutable",
											"name": "tickLower",
											"nodeType": "VariableDeclaration",
											"scope": 2032,
											"src": "4317:15:23",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											},
											"typeName": {
												"id": 2016,
												"name": "int24",
												"nodeType": "ElementaryTypeName",
												"src": "4317:5:23",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2019,
											"mutability": "mutable",
											"name": "tickUpper",
											"nodeType": "VariableDeclaration",
											"scope": 2032,
											"src": "4343:15:23",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											},
											"typeName": {
												"id": 2018,
												"name": "int24",
												"nodeType": "ElementaryTypeName",
												"src": "4343:5:23",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2021,
											"mutability": "mutable",
											"name": "amount0Desired",
											"nodeType": "VariableDeclaration",
											"scope": 2032,
											"src": "4369:22:23",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2020,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4369:7:23",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2023,
											"mutability": "mutable",
											"name": "amount1Desired",
											"nodeType": "VariableDeclaration",
											"scope": 2032,
											"src": "4402:22:23",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2022,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4402:7:23",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2025,
											"mutability": "mutable",
											"name": "amount0Min",
											"nodeType": "VariableDeclaration",
											"scope": 2032,
											"src": "4435:18:23",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2024,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4435:7:23",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2027,
											"mutability": "mutable",
											"name": "amount1Min",
											"nodeType": "VariableDeclaration",
											"scope": 2032,
											"src": "4464:18:23",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2026,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4464:7:23",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2029,
											"mutability": "mutable",
											"name": "recipient",
											"nodeType": "VariableDeclaration",
											"scope": 2032,
											"src": "4493:17:23",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2028,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "4493:7:23",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2031,
											"mutability": "mutable",
											"name": "deadline",
											"nodeType": "VariableDeclaration",
											"scope": 2032,
											"src": "4521:16:23",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2030,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4521:7:23",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "MintParams",
									"nodeType": "StructDefinition",
									"scope": 2118,
									"src": "4217:328:23",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 2033,
										"nodeType": "StructuredDocumentation",
										"src": "4553:593:23",
										"text": "@notice Creates a new position wrapped in a NFT\n @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\n a method does not exist, i.e. the pool is assumed to be initialized.\n @param params The params necessary to mint a position, encoded as `MintParams` in calldata\n @return tokenId The ID of the token that represents the minted position\n @return liquidity The amount of liquidity for this position\n @return amount0 The amount of token0\n @return amount1 The amount of token1"
									},
									"functionSelector": "88316456",
									"id": 2046,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2036,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2035,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 2046,
												"src": "5166:26:23",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_MintParams_$2032_calldata_ptr",
													"typeString": "struct INonfungiblePositionManager.MintParams"
												},
												"typeName": {
													"id": 2034,
													"name": "MintParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2032,
													"src": "5166:10:23",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_MintParams_$2032_storage_ptr",
														"typeString": "struct INonfungiblePositionManager.MintParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5165:28:23"
									},
									"returnParameters": {
										"id": 2045,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2038,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 2046,
												"src": "5261:15:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2037,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5261:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2040,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 2046,
												"src": "5291:17:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 2039,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5291:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2042,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 2046,
												"src": "5323:15:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2041,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5323:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2044,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 2046,
												"src": "5353:15:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2043,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5353:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5246:133:23"
									},
									"scope": 2118,
									"src": "5152:228:23",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "INonfungiblePositionManager.IncreaseLiquidityParams",
									"id": 2059,
									"members": [
										{
											"constant": false,
											"id": 2048,
											"mutability": "mutable",
											"name": "tokenId",
											"nodeType": "VariableDeclaration",
											"scope": 2059,
											"src": "5430:15:23",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2047,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5430:7:23",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2050,
											"mutability": "mutable",
											"name": "amount0Desired",
											"nodeType": "VariableDeclaration",
											"scope": 2059,
											"src": "5456:22:23",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2049,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5456:7:23",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2052,
											"mutability": "mutable",
											"name": "amount1Desired",
											"nodeType": "VariableDeclaration",
											"scope": 2059,
											"src": "5489:22:23",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2051,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5489:7:23",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2054,
											"mutability": "mutable",
											"name": "amount0Min",
											"nodeType": "VariableDeclaration",
											"scope": 2059,
											"src": "5522:18:23",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2053,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5522:7:23",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2056,
											"mutability": "mutable",
											"name": "amount1Min",
											"nodeType": "VariableDeclaration",
											"scope": 2059,
											"src": "5551:18:23",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2055,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5551:7:23",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2058,
											"mutability": "mutable",
											"name": "deadline",
											"nodeType": "VariableDeclaration",
											"scope": 2059,
											"src": "5580:16:23",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2057,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5580:7:23",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "IncreaseLiquidityParams",
									"nodeType": "StructDefinition",
									"scope": 2118,
									"src": "5388:216:23",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 2060,
										"nodeType": "StructuredDocumentation",
										"src": "5612:830:23",
										"text": "@notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\n @param params tokenId The ID of the token for which liquidity is being increased,\n amount0Desired The desired amount of token0 to be spent,\n amount1Desired The desired amount of token1 to be spent,\n amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\n amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\n deadline The time by which the transaction must be included to effect the change\n @return liquidity The new liquidity amount as a result of the increase\n @return amount0 The amount of token0 to acheive resulting liquidity\n @return amount1 The amount of token1 to acheive resulting liquidity"
									},
									"functionSelector": "219f5d17",
									"id": 2071,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "increaseLiquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2063,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2062,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 2071,
												"src": "6475:39:23",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_IncreaseLiquidityParams_$2059_calldata_ptr",
													"typeString": "struct INonfungiblePositionManager.IncreaseLiquidityParams"
												},
												"typeName": {
													"id": 2061,
													"name": "IncreaseLiquidityParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2059,
													"src": "6475:23:23",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_IncreaseLiquidityParams_$2059_storage_ptr",
														"typeString": "struct INonfungiblePositionManager.IncreaseLiquidityParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6474:41:23"
									},
									"returnParameters": {
										"id": 2070,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2065,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 2071,
												"src": "6583:17:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 2064,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "6583:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2067,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 2071,
												"src": "6615:15:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2066,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6615:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2069,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 2071,
												"src": "6645:15:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2068,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6645:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6568:103:23"
									},
									"scope": 2118,
									"src": "6448:224:23",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "INonfungiblePositionManager.DecreaseLiquidityParams",
									"id": 2082,
									"members": [
										{
											"constant": false,
											"id": 2073,
											"mutability": "mutable",
											"name": "tokenId",
											"nodeType": "VariableDeclaration",
											"scope": 2082,
											"src": "6722:15:23",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2072,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "6722:7:23",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2075,
											"mutability": "mutable",
											"name": "liquidity",
											"nodeType": "VariableDeclaration",
											"scope": 2082,
											"src": "6748:17:23",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 2074,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "6748:7:23",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2077,
											"mutability": "mutable",
											"name": "amount0Min",
											"nodeType": "VariableDeclaration",
											"scope": 2082,
											"src": "6776:18:23",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2076,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "6776:7:23",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2079,
											"mutability": "mutable",
											"name": "amount1Min",
											"nodeType": "VariableDeclaration",
											"scope": 2082,
											"src": "6805:18:23",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2078,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "6805:7:23",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2081,
											"mutability": "mutable",
											"name": "deadline",
											"nodeType": "VariableDeclaration",
											"scope": 2082,
											"src": "6834:16:23",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2080,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "6834:7:23",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "DecreaseLiquidityParams",
									"nodeType": "StructDefinition",
									"scope": 2118,
									"src": "6680:178:23",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 2083,
										"nodeType": "StructuredDocumentation",
										"src": "6866:709:23",
										"text": "@notice Decreases the amount of liquidity in a position and accounts it to the position\n @param params tokenId The ID of the token for which liquidity is being decreased,\n amount The amount by which liquidity will be decreased,\n amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\n amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\n deadline The time by which the transaction must be included to effect the change\n @return amount0 The amount of token0 accounted to the position's tokens owed\n @return amount1 The amount of token1 accounted to the position's tokens owed"
									},
									"functionSelector": "0c49ccbe",
									"id": 2092,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseLiquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2086,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2085,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 2092,
												"src": "7608:39:23",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_DecreaseLiquidityParams_$2082_calldata_ptr",
													"typeString": "struct INonfungiblePositionManager.DecreaseLiquidityParams"
												},
												"typeName": {
													"id": 2084,
													"name": "DecreaseLiquidityParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2082,
													"src": "7608:23:23",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_DecreaseLiquidityParams_$2082_storage_ptr",
														"typeString": "struct INonfungiblePositionManager.DecreaseLiquidityParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7607:41:23"
									},
									"returnParameters": {
										"id": 2091,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2088,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 2092,
												"src": "7702:15:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2087,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7702:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2090,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 2092,
												"src": "7719:15:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2089,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7719:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7701:34:23"
									},
									"scope": 2118,
									"src": "7581:155:23",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "INonfungiblePositionManager.CollectParams",
									"id": 2101,
									"members": [
										{
											"constant": false,
											"id": 2094,
											"mutability": "mutable",
											"name": "tokenId",
											"nodeType": "VariableDeclaration",
											"scope": 2101,
											"src": "7776:15:23",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2093,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "7776:7:23",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2096,
											"mutability": "mutable",
											"name": "recipient",
											"nodeType": "VariableDeclaration",
											"scope": 2101,
											"src": "7802:17:23",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2095,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "7802:7:23",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2098,
											"mutability": "mutable",
											"name": "amount0Max",
											"nodeType": "VariableDeclaration",
											"scope": 2101,
											"src": "7830:18:23",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 2097,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "7830:7:23",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2100,
											"mutability": "mutable",
											"name": "amount1Max",
											"nodeType": "VariableDeclaration",
											"scope": 2101,
											"src": "7859:18:23",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 2099,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "7859:7:23",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "CollectParams",
									"nodeType": "StructDefinition",
									"scope": 2118,
									"src": "7744:141:23",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 2102,
										"nodeType": "StructuredDocumentation",
										"src": "7893:495:23",
										"text": "@notice Collects up to a maximum amount of fees owed to a specific position to the recipient\n @param params tokenId The ID of the NFT for which tokens are being collected,\n recipient The account that should receive the tokens,\n amount0Max The maximum amount of token0 to collect,\n amount1Max The maximum amount of token1 to collect\n @return amount0 The amount of fees collected in token0\n @return amount1 The amount of fees collected in token1"
									},
									"functionSelector": "fc6f7865",
									"id": 2111,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collect",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2105,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2104,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 2111,
												"src": "8411:29:23",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_CollectParams_$2101_calldata_ptr",
													"typeString": "struct INonfungiblePositionManager.CollectParams"
												},
												"typeName": {
													"id": 2103,
													"name": "CollectParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2101,
													"src": "8411:13:23",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_CollectParams_$2101_storage_ptr",
														"typeString": "struct INonfungiblePositionManager.CollectParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8410:31:23"
									},
									"returnParameters": {
										"id": 2110,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2107,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 2111,
												"src": "8468:15:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2106,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8468:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2109,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 2111,
												"src": "8485:15:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2108,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8485:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8467:34:23"
									},
									"scope": 2118,
									"src": "8394:108:23",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2112,
										"nodeType": "StructuredDocumentation",
										"src": "8510:215:23",
										"text": "@notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\n must be collected first.\n @param tokenId The ID of the token that is being burned"
									},
									"functionSelector": "42966c68",
									"id": 2117,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2115,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2114,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 2117,
												"src": "8745:15:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2113,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8745:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8744:17:23"
									},
									"returnParameters": {
										"id": 2116,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8778:0:23"
									},
									"scope": 2118,
									"src": "8731:48:23",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2119,
							"src": "600:8182:23"
						}
					],
					"src": "46:8738:23"
				},
				"id": 23
			},
			"contracts/interfaces/IPeripheryImmutableState.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/IPeripheryImmutableState.sol",
					"exportedSymbols": {
						"IPeripheryImmutableState": [
							2134
						]
					},
					"id": 2135,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2120,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "46:24:24"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2121,
								"nodeType": "StructuredDocumentation",
								"src": "74:93:24",
								"text": "@title Immutable state\n @notice Functions that return immutable state of the router"
							},
							"fullyImplemented": false,
							"id": 2134,
							"linearizedBaseContracts": [
								2134
							],
							"name": "IPeripheryImmutableState",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2122,
										"nodeType": "StructuredDocumentation",
										"src": "209:57:24",
										"text": "@return Returns the address of the Uniswap V3 factory"
									},
									"functionSelector": "c45a0155",
									"id": 2127,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "factory",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2123,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "288:2:24"
									},
									"returnParameters": {
										"id": 2126,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2125,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2127,
												"src": "314:7:24",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2124,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "314:7:24",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "313:9:24"
									},
									"scope": 2134,
									"src": "272:51:24",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2128,
										"nodeType": "StructuredDocumentation",
										"src": "331:40:24",
										"text": "@return Returns the address of WETH9"
									},
									"functionSelector": "4aa4a4fc",
									"id": 2133,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "WETH9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2129,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "391:2:24"
									},
									"returnParameters": {
										"id": 2132,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2131,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2133,
												"src": "417:7:24",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2130,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "417:7:24",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "416:9:24"
									},
									"scope": 2134,
									"src": "377:49:24",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2135,
							"src": "167:262:24"
						}
					],
					"src": "46:385:24"
				},
				"id": 24
			},
			"contracts/interfaces/IPeripheryPayments.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/IPeripheryPayments.sol",
					"exportedSymbols": {
						"IPeripheryPayments": [
							2160
						]
					},
					"id": 2161,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2136,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "46:24:25"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2137,
								"nodeType": "StructuredDocumentation",
								"src": "74:94:25",
								"text": "@title Periphery Payments\n @notice Functions to ease deposits and withdrawals of ETH"
							},
							"fullyImplemented": false,
							"id": 2160,
							"linearizedBaseContracts": [
								2160
							],
							"name": "IPeripheryPayments",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2138,
										"nodeType": "StructuredDocumentation",
										"src": "204:305:25",
										"text": "@notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\n @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\n @param amountMinimum The minimum amount of WETH9 to unwrap\n @param recipient The address receiving ETH"
									},
									"functionSelector": "49404b7c",
									"id": 2145,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "unwrapWETH9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2140,
												"mutability": "mutable",
												"name": "amountMinimum",
												"nodeType": "VariableDeclaration",
												"scope": 2145,
												"src": "536:21:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2139,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "536:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2142,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 2145,
												"src": "559:17:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2141,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "559:7:25",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "535:42:25"
									},
									"returnParameters": {
										"id": 2144,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "594:0:25"
									},
									"scope": 2160,
									"src": "515:80:25",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2146,
										"nodeType": "StructuredDocumentation",
										"src": "603:227:25",
										"text": "@notice Refunds any ETH balance held by this contract to the `msg.sender`\n @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\n that use ether for the input amount"
									},
									"functionSelector": "12210e8a",
									"id": 2149,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "refundETH",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2147,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "854:2:25"
									},
									"returnParameters": {
										"id": 2148,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "873:0:25"
									},
									"scope": 2160,
									"src": "836:38:25",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2150,
										"nodeType": "StructuredDocumentation",
										"src": "882:431:25",
										"text": "@notice Transfers the full amount of a token held by this contract to recipient\n @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\n @param token The contract address of the token which will be transferred to `recipient`\n @param amountMinimum The minimum amount of token required for a transfer\n @param recipient The destination address of the token"
									},
									"functionSelector": "df2ab5bb",
									"id": 2159,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "sweepToken",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2152,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 2159,
												"src": "1349:13:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2151,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1349:7:25",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2154,
												"mutability": "mutable",
												"name": "amountMinimum",
												"nodeType": "VariableDeclaration",
												"scope": 2159,
												"src": "1373:21:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2153,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1373:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2156,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 2159,
												"src": "1405:17:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2155,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1405:7:25",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1338:91:25"
									},
									"returnParameters": {
										"id": 2158,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1446:0:25"
									},
									"scope": 2160,
									"src": "1319:128:25",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2161,
							"src": "168:1282:25"
						}
					],
					"src": "46:1406:25"
				},
				"id": 25
			},
			"contracts/interfaces/IPoolInitializer.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/IPoolInitializer.sol",
					"exportedSymbols": {
						"IPoolInitializer": [
							2179
						]
					},
					"id": 2180,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2162,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "46:24:26"
						},
						{
							"id": 2163,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "72:19:26"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2164,
								"nodeType": "StructuredDocumentation",
								"src": "95:197:26",
								"text": "@title Creates and initializes V3 Pools\n @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\n require the pool to exist."
							},
							"fullyImplemented": false,
							"id": 2179,
							"linearizedBaseContracts": [
								2179
							],
							"name": "IPoolInitializer",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2165,
										"nodeType": "StructuredDocumentation",
										"src": "326:654:26",
										"text": "@notice Creates a new pool if it does not exist, then initializes if not initialized\n @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\n @param token0 The contract address of token0 of the pool\n @param token1 The contract address of token1 of the pool\n @param fee The fee amount of the v3 pool for the specified token pair\n @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\n @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary"
									},
									"functionSelector": "13ead562",
									"id": 2178,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createAndInitializePoolIfNecessary",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2174,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2167,
												"mutability": "mutable",
												"name": "token0",
												"nodeType": "VariableDeclaration",
												"scope": 2178,
												"src": "1040:14:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2166,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1040:7:26",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2169,
												"mutability": "mutable",
												"name": "token1",
												"nodeType": "VariableDeclaration",
												"scope": 2178,
												"src": "1065:14:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2168,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1065:7:26",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2171,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 2178,
												"src": "1090:10:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 2170,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "1090:6:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2173,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 2178,
												"src": "1111:20:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 2172,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1111:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1029:109:26"
									},
									"returnParameters": {
										"id": 2177,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2176,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 2178,
												"src": "1165:12:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2175,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1165:7:26",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1164:14:26"
									},
									"scope": 2179,
									"src": "986:193:26",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2180,
							"src": "292:890:26"
						}
					],
					"src": "46:1138:26"
				},
				"id": 26
			},
			"contracts/interfaces/ISelfPermit.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/ISelfPermit.sol",
					"exportedSymbols": {
						"ISelfPermit": [
							2247
						]
					},
					"id": 2248,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2181,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "46:24:27"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2182,
								"nodeType": "StructuredDocumentation",
								"src": "74:119:27",
								"text": "@title Self Permit\n @notice Functionality to call permit on any EIP-2612-compliant token for use in the route"
							},
							"fullyImplemented": false,
							"id": 2247,
							"linearizedBaseContracts": [
								2247
							],
							"name": "ISelfPermit",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2183,
										"nodeType": "StructuredDocumentation",
										"src": "222:670:27",
										"text": "@notice Permits this contract to spend a given token from `msg.sender`\n @dev The `owner` is always msg.sender and the `spender` is always address(this).\n @param token The address of the token spent\n @param value The amount that can be spent of token\n @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\n @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`"
									},
									"functionSelector": "f3995c67",
									"id": 2198,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "selfPermit",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2196,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2185,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 2198,
												"src": "928:13:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2184,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "928:7:27",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2187,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 2198,
												"src": "952:13:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2186,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "952:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2189,
												"mutability": "mutable",
												"name": "deadline",
												"nodeType": "VariableDeclaration",
												"scope": 2198,
												"src": "976:16:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2188,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "976:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2191,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 2198,
												"src": "1003:7:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2190,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1003:5:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2193,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 2198,
												"src": "1021:9:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2192,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1021:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2195,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 2198,
												"src": "1041:9:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2194,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1041:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "917:140:27"
									},
									"returnParameters": {
										"id": 2197,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1074:0:27"
									},
									"scope": 2247,
									"src": "898:177:27",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2199,
										"nodeType": "StructuredDocumentation",
										"src": "1083:787:27",
										"text": "@notice Permits this contract to spend a given token from `msg.sender`\n @dev The `owner` is always msg.sender and the `spender` is always address(this).\n Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit\n @param token The address of the token spent\n @param value The amount that can be spent of token\n @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\n @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`"
									},
									"functionSelector": "c2e3140a",
									"id": 2214,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "selfPermitIfNecessary",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2212,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2201,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 2214,
												"src": "1917:13:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2200,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1917:7:27",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2203,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 2214,
												"src": "1941:13:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2202,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1941:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2205,
												"mutability": "mutable",
												"name": "deadline",
												"nodeType": "VariableDeclaration",
												"scope": 2214,
												"src": "1965:16:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2204,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1965:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2207,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 2214,
												"src": "1992:7:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2206,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1992:5:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2209,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 2214,
												"src": "2010:9:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2208,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2010:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2211,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 2214,
												"src": "2030:9:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2210,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2030:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1906:140:27"
									},
									"returnParameters": {
										"id": 2213,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2063:0:27"
									},
									"scope": 2247,
									"src": "1876:188:27",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2215,
										"nodeType": "StructuredDocumentation",
										"src": "2072:677:27",
										"text": "@notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\n @dev The `owner` is always msg.sender and the `spender` is always address(this)\n @param token The address of the token spent\n @param nonce The current nonce of the owner\n @param expiry The timestamp at which the permit is no longer valid\n @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`"
									},
									"functionSelector": "4659a494",
									"id": 2230,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "selfPermitAllowed",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2228,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2217,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 2230,
												"src": "2792:13:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2216,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2792:7:27",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2219,
												"mutability": "mutable",
												"name": "nonce",
												"nodeType": "VariableDeclaration",
												"scope": 2230,
												"src": "2816:13:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2218,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2816:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2221,
												"mutability": "mutable",
												"name": "expiry",
												"nodeType": "VariableDeclaration",
												"scope": 2230,
												"src": "2840:14:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2220,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2840:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2223,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 2230,
												"src": "2865:7:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2222,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2865:5:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2225,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 2230,
												"src": "2883:9:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2224,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2883:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2227,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 2230,
												"src": "2903:9:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2226,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2903:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2781:138:27"
									},
									"returnParameters": {
										"id": 2229,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2936:0:27"
									},
									"scope": 2247,
									"src": "2755:182:27",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2231,
										"nodeType": "StructuredDocumentation",
										"src": "2945:809:27",
										"text": "@notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\n @dev The `owner` is always msg.sender and the `spender` is always address(this)\n Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.\n @param token The address of the token spent\n @param nonce The current nonce of the owner\n @param expiry The timestamp at which the permit is no longer valid\n @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`"
									},
									"functionSelector": "a4a78f0c",
									"id": 2246,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "selfPermitAllowedIfNecessary",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2244,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2233,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 2246,
												"src": "3808:13:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2232,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3808:7:27",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2235,
												"mutability": "mutable",
												"name": "nonce",
												"nodeType": "VariableDeclaration",
												"scope": 2246,
												"src": "3832:13:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2234,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3832:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2237,
												"mutability": "mutable",
												"name": "expiry",
												"nodeType": "VariableDeclaration",
												"scope": 2246,
												"src": "3856:14:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2236,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3856:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2239,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 2246,
												"src": "3881:7:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2238,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3881:5:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2241,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 2246,
												"src": "3899:9:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2240,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3899:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2243,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 2246,
												"src": "3919:9:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2242,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3919:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3797:138:27"
									},
									"returnParameters": {
										"id": 2245,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3952:0:27"
									},
									"scope": 2247,
									"src": "3760:193:27",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2248,
							"src": "193:3763:27"
						}
					],
					"src": "46:3912:27"
				},
				"id": 27
			},
			"contracts/interfaces/IV3Migrator.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/IV3Migrator.sol",
					"exportedSymbols": {
						"IMulticall": [
							1923
						],
						"IPoolInitializer": [
							2179
						],
						"ISelfPermit": [
							2247
						],
						"IV3Migrator": [
							2294
						]
					},
					"id": 2295,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2249,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "46:24:28"
						},
						{
							"id": 2250,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "72:19:28"
						},
						{
							"absolutePath": "contracts/interfaces/IMulticall.sol",
							"file": "./IMulticall.sol",
							"id": 2251,
							"nodeType": "ImportDirective",
							"scope": 2295,
							"sourceUnit": 1924,
							"src": "95:26:28",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/ISelfPermit.sol",
							"file": "./ISelfPermit.sol",
							"id": 2252,
							"nodeType": "ImportDirective",
							"scope": 2295,
							"sourceUnit": 2248,
							"src": "123:27:28",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/IPoolInitializer.sol",
							"file": "./IPoolInitializer.sol",
							"id": 2253,
							"nodeType": "ImportDirective",
							"scope": 2295,
							"sourceUnit": 2180,
							"src": "152:32:28",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 2255,
										"name": "IMulticall",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1923,
										"src": "335:10:28",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IMulticall_$1923",
											"typeString": "contract IMulticall"
										}
									},
									"id": 2256,
									"nodeType": "InheritanceSpecifier",
									"src": "335:10:28"
								},
								{
									"baseName": {
										"id": 2257,
										"name": "ISelfPermit",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2247,
										"src": "347:11:28",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ISelfPermit_$2247",
											"typeString": "contract ISelfPermit"
										}
									},
									"id": 2258,
									"nodeType": "InheritanceSpecifier",
									"src": "347:11:28"
								},
								{
									"baseName": {
										"id": 2259,
										"name": "IPoolInitializer",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 2179,
										"src": "360:16:28",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IPoolInitializer_$2179",
											"typeString": "contract IPoolInitializer"
										}
									},
									"id": 2260,
									"nodeType": "InheritanceSpecifier",
									"src": "360:16:28"
								}
							],
							"contractDependencies": [
								1923,
								2179,
								2247
							],
							"contractKind": "interface",
							"documentation": {
								"id": 2254,
								"nodeType": "StructuredDocumentation",
								"src": "188:122:28",
								"text": "@title V3 Migrator\n @notice Enables migration of liqudity from Uniswap v2-compatible pairs into Uniswap v3 pools"
							},
							"fullyImplemented": false,
							"id": 2294,
							"linearizedBaseContracts": [
								2294,
								2179,
								2247,
								1923
							],
							"name": "IV3Migrator",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "IV3Migrator.MigrateParams",
									"id": 2287,
									"members": [
										{
											"constant": false,
											"id": 2262,
											"mutability": "mutable",
											"name": "pair",
											"nodeType": "VariableDeclaration",
											"scope": 2287,
											"src": "416:12:28",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2261,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "416:7:28",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2264,
											"mutability": "mutable",
											"name": "liquidityToMigrate",
											"nodeType": "VariableDeclaration",
											"scope": 2287,
											"src": "473:26:28",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2263,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "473:7:28",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2266,
											"mutability": "mutable",
											"name": "percentageToMigrate",
											"nodeType": "VariableDeclaration",
											"scope": 2287,
											"src": "550:25:28",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											},
											"typeName": {
												"id": 2265,
												"name": "uint8",
												"nodeType": "ElementaryTypeName",
												"src": "550:5:28",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2268,
											"mutability": "mutable",
											"name": "token0",
											"nodeType": "VariableDeclaration",
											"scope": 2287,
											"src": "625:14:28",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2267,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "625:7:28",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2270,
											"mutability": "mutable",
											"name": "token1",
											"nodeType": "VariableDeclaration",
											"scope": 2287,
											"src": "650:14:28",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2269,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "650:7:28",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2272,
											"mutability": "mutable",
											"name": "fee",
											"nodeType": "VariableDeclaration",
											"scope": 2287,
											"src": "675:10:28",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint24",
												"typeString": "uint24"
											},
											"typeName": {
												"id": 2271,
												"name": "uint24",
												"nodeType": "ElementaryTypeName",
												"src": "675:6:28",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2274,
											"mutability": "mutable",
											"name": "tickLower",
											"nodeType": "VariableDeclaration",
											"scope": 2287,
											"src": "696:15:28",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											},
											"typeName": {
												"id": 2273,
												"name": "int24",
												"nodeType": "ElementaryTypeName",
												"src": "696:5:28",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2276,
											"mutability": "mutable",
											"name": "tickUpper",
											"nodeType": "VariableDeclaration",
											"scope": 2287,
											"src": "722:15:28",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											},
											"typeName": {
												"id": 2275,
												"name": "int24",
												"nodeType": "ElementaryTypeName",
												"src": "722:5:28",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2278,
											"mutability": "mutable",
											"name": "amount0Min",
											"nodeType": "VariableDeclaration",
											"scope": 2287,
											"src": "748:18:28",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2277,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "748:7:28",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2280,
											"mutability": "mutable",
											"name": "amount1Min",
											"nodeType": "VariableDeclaration",
											"scope": 2287,
											"src": "822:18:28",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2279,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "822:7:28",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2282,
											"mutability": "mutable",
											"name": "recipient",
											"nodeType": "VariableDeclaration",
											"scope": 2287,
											"src": "896:17:28",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2281,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "896:7:28",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2284,
											"mutability": "mutable",
											"name": "deadline",
											"nodeType": "VariableDeclaration",
											"scope": 2287,
											"src": "924:16:28",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2283,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "924:7:28",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2286,
											"mutability": "mutable",
											"name": "refundAsETH",
											"nodeType": "VariableDeclaration",
											"scope": 2287,
											"src": "951:16:28",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 2285,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "951:4:28",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "MigrateParams",
									"nodeType": "StructDefinition",
									"scope": 2294,
									"src": "384:591:28",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 2288,
										"nodeType": "StructuredDocumentation",
										"src": "983:553:28",
										"text": "@notice Migrates liquidity to v3 by burning v2 liquidity and minting a new position for v3\n @dev Slippage protection is enforced via `amount{0,1}Min`, which should be a discount of the expected values of\n the maximum amount of v3 liquidity that the v2 liquidity can get. For the special case of migrating to an\n out-of-range position, `amount{0,1}Min` may be set to 0, enforcing that the position remains out of range\n @param params The params necessary to migrate v2 liquidity, encoded as `MigrateParams` in calldata"
									},
									"functionSelector": "d44f2bf2",
									"id": 2293,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "migrate",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2291,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2290,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 2293,
												"src": "1559:29:28",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_MigrateParams_$2287_calldata_ptr",
													"typeString": "struct IV3Migrator.MigrateParams"
												},
												"typeName": {
													"id": 2289,
													"name": "MigrateParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2287,
													"src": "1559:13:28",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_MigrateParams_$2287_storage_ptr",
														"typeString": "struct IV3Migrator.MigrateParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1558:31:28"
									},
									"returnParameters": {
										"id": 2292,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1598:0:28"
									},
									"scope": 2294,
									"src": "1542:57:28",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2295,
							"src": "310:1292:28"
						}
					],
					"src": "46:1558:28"
				},
				"id": 28
			},
			"contracts/interfaces/external/IERC20PermitAllowed.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/external/IERC20PermitAllowed.sol",
					"exportedSymbols": {
						"IERC20PermitAllowed": [
							2318
						]
					},
					"id": 2319,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2296,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "46:24:29"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2297,
								"nodeType": "StructuredDocumentation",
								"src": "74:84:29",
								"text": "@title Interface for permit\n @notice Interface used by DAI/CHAI for permit"
							},
							"fullyImplemented": false,
							"id": 2318,
							"linearizedBaseContracts": [
								2318
							],
							"name": "IERC20PermitAllowed",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2298,
										"nodeType": "StructuredDocumentation",
										"src": "195:811:29",
										"text": "@notice Approve the spender to spend some tokens via the holder signature\n @dev This is the permit interface used by DAI and CHAI\n @param holder The address of the token holder, the token owner\n @param spender The address of the token spender\n @param nonce The holder's nonce, increases at each call to permit\n @param expiry The timestamp at which the permit is no longer valid\n @param allowed Boolean that sets approval amount, true for type(uint256).max and false for 0\n @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`"
									},
									"functionSelector": "8fcbaf0c",
									"id": 2317,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2315,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2300,
												"mutability": "mutable",
												"name": "holder",
												"nodeType": "VariableDeclaration",
												"scope": 2317,
												"src": "1038:14:29",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2299,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1038:7:29",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2302,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 2317,
												"src": "1063:15:29",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2301,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1063:7:29",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2304,
												"mutability": "mutable",
												"name": "nonce",
												"nodeType": "VariableDeclaration",
												"scope": 2317,
												"src": "1089:13:29",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2303,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1089:7:29",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2306,
												"mutability": "mutable",
												"name": "expiry",
												"nodeType": "VariableDeclaration",
												"scope": 2317,
												"src": "1113:14:29",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2305,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1113:7:29",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2308,
												"mutability": "mutable",
												"name": "allowed",
												"nodeType": "VariableDeclaration",
												"scope": 2317,
												"src": "1138:12:29",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2307,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1138:4:29",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2310,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"scope": 2317,
												"src": "1161:7:29",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2309,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1161:5:29",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2312,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"scope": 2317,
												"src": "1179:9:29",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2311,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1179:7:29",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2314,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 2317,
												"src": "1199:9:29",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2313,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1199:7:29",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1027:188:29"
									},
									"returnParameters": {
										"id": 2316,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1224:0:29"
									},
									"scope": 2318,
									"src": "1012:213:29",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2319,
							"src": "158:1070:29"
						}
					],
					"src": "46:1184:29"
				},
				"id": 29
			},
			"contracts/interfaces/external/IWETH9.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/external/IWETH9.sol",
					"exportedSymbols": {
						"IERC20": [
							125
						],
						"IWETH9": [
							2335
						]
					},
					"id": 2336,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2320,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "46:23:30"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 2321,
							"nodeType": "ImportDirective",
							"scope": 2336,
							"sourceUnit": 126,
							"src": "73:56:30",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 2323,
										"name": "IERC20",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 125,
										"src": "185:6:30",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$125",
											"typeString": "contract IERC20"
										}
									},
									"id": 2324,
									"nodeType": "InheritanceSpecifier",
									"src": "185:6:30"
								}
							],
							"contractDependencies": [
								125
							],
							"contractKind": "interface",
							"documentation": {
								"id": 2322,
								"nodeType": "StructuredDocumentation",
								"src": "133:32:30",
								"text": "@title Interface for WETH9"
							},
							"fullyImplemented": false,
							"id": 2335,
							"linearizedBaseContracts": [
								2335,
								125
							],
							"name": "IWETH9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2325,
										"nodeType": "StructuredDocumentation",
										"src": "199:46:30",
										"text": "@notice Deposit ether to get wrapped ether"
									},
									"functionSelector": "d0e30db0",
									"id": 2328,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "deposit",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2326,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "267:2:30"
									},
									"returnParameters": {
										"id": 2327,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "286:0:30"
									},
									"scope": 2335,
									"src": "251:36:30",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2329,
										"nodeType": "StructuredDocumentation",
										"src": "295:47:30",
										"text": "@notice Withdraw wrapped ether to get ether"
									},
									"functionSelector": "2e1a7d4d",
									"id": 2334,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "withdraw",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2332,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2331,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2334,
												"src": "366:7:30",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2330,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "366:7:30",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "365:9:30"
									},
									"returnParameters": {
										"id": 2333,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "383:0:30"
									},
									"scope": 2335,
									"src": "348:36:30",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2336,
							"src": "165:222:30"
						}
					],
					"src": "46:343:30"
				},
				"id": 30
			},
			"contracts/libraries/PoolAddress.sol": {
				"ast": {
					"absolutePath": "contracts/libraries/PoolAddress.sol",
					"exportedSymbols": {
						"PoolAddress": [
							2427
						]
					},
					"id": 2428,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2337,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "46:24:31"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2338,
								"nodeType": "StructuredDocumentation",
								"src": "74:97:31",
								"text": "@title Provides functions for deriving a pool address from the factory, tokens, and the fee"
							},
							"fullyImplemented": true,
							"id": 2427,
							"linearizedBaseContracts": [
								2427
							],
							"name": "PoolAddress",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 2341,
									"mutability": "constant",
									"name": "POOL_INIT_CODE_HASH",
									"nodeType": "VariableDeclaration",
									"scope": 2427,
									"src": "198:114:31",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2339,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "198:7:31",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307865333466313939623139623262346634376636383434323631396435353535323764323434663738613332393765613839333235663834336638376238623534",
										"id": 2340,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "246:66:31",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_102814774271675688723325049954498779091328469440286648861889194717372678376276_by_1",
											"typeString": "int_const 1028...(70 digits omitted)...6276"
										},
										"value": "0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54"
									},
									"visibility": "internal"
								},
								{
									"canonicalName": "PoolAddress.PoolKey",
									"id": 2348,
									"members": [
										{
											"constant": false,
											"id": 2343,
											"mutability": "mutable",
											"name": "token0",
											"nodeType": "VariableDeclaration",
											"scope": 2348,
											"src": "396:14:31",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2342,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "396:7:31",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2345,
											"mutability": "mutable",
											"name": "token1",
											"nodeType": "VariableDeclaration",
											"scope": 2348,
											"src": "421:14:31",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2344,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "421:7:31",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2347,
											"mutability": "mutable",
											"name": "fee",
											"nodeType": "VariableDeclaration",
											"scope": 2348,
											"src": "446:10:31",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint24",
												"typeString": "uint24"
											},
											"typeName": {
												"id": 2346,
												"name": "uint24",
												"nodeType": "ElementaryTypeName",
												"src": "446:6:31",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "PoolKey",
									"nodeType": "StructDefinition",
									"scope": 2427,
									"src": "370:94:31",
									"visibility": "public"
								},
								{
									"body": {
										"id": 2378,
										"nodeType": "Block",
										"src": "940:144:31",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 2362,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2360,
														"name": "tokenA",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2351,
														"src": "955:6:31",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 2361,
														"name": "tokenB",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2353,
														"src": "964:6:31",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "955:15:31",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2371,
												"nodeType": "IfStatement",
												"src": "951:56:31",
												"trueBody": {
													"expression": {
														"id": 2369,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"components": [
																{
																	"id": 2363,
																	"name": "tokenA",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2351,
																	"src": "973:6:31",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2364,
																	"name": "tokenB",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2353,
																	"src": "981:6:31",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"id": 2365,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": true,
															"nodeType": "TupleExpression",
															"src": "972:16:31",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_address_$",
																"typeString": "tuple(address,address)"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"components": [
																{
																	"id": 2366,
																	"name": "tokenB",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2353,
																	"src": "992:6:31",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2367,
																	"name": "tokenA",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2351,
																	"src": "1000:6:31",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"id": 2368,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "991:16:31",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_address_$",
																"typeString": "tuple(address,address)"
															}
														},
														"src": "972:35:31",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 2370,
													"nodeType": "ExpressionStatement",
													"src": "972:35:31"
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2373,
															"name": "tokenA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2351,
															"src": "1042:6:31",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2374,
															"name": "tokenB",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2353,
															"src": "1058:6:31",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2375,
															"name": "fee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2355,
															"src": "1071:3:31",
															"typeDescriptions": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														],
														"id": 2372,
														"name": "PoolKey",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2348,
														"src": "1025:7:31",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_PoolKey_$2348_storage_ptr_$",
															"typeString": "type(struct PoolAddress.PoolKey storage pointer)"
														}
													},
													"id": 2376,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"names": [
														"token0",
														"token1",
														"fee"
													],
													"nodeType": "FunctionCall",
													"src": "1025:51:31",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolKey_$2348_memory_ptr",
														"typeString": "struct PoolAddress.PoolKey memory"
													}
												},
												"functionReturnParameters": 2359,
												"id": 2377,
												"nodeType": "Return",
												"src": "1018:58:31"
											}
										]
									},
									"documentation": {
										"id": 2349,
										"nodeType": "StructuredDocumentation",
										"src": "472:325:31",
										"text": "@notice Returns PoolKey: the ordered tokens with the matched fee levels\n @param tokenA The first token of a pool, unsorted\n @param tokenB The second token of a pool, unsorted\n @param fee The fee level of the pool\n @return Poolkey The pool details with ordered token0 and token1 assignments"
									},
									"id": 2379,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getPoolKey",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2356,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2351,
												"mutability": "mutable",
												"name": "tokenA",
												"nodeType": "VariableDeclaration",
												"scope": 2379,
												"src": "833:14:31",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2350,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "833:7:31",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2353,
												"mutability": "mutable",
												"name": "tokenB",
												"nodeType": "VariableDeclaration",
												"scope": 2379,
												"src": "858:14:31",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2352,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "858:7:31",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2355,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 2379,
												"src": "883:10:31",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 2354,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "883:6:31",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "822:78:31"
									},
									"returnParameters": {
										"id": 2359,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2358,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 2379,
												"src": "924:14:31",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PoolKey_$2348_memory_ptr",
													"typeString": "struct PoolAddress.PoolKey"
												},
												"typeName": {
													"id": 2357,
													"name": "PoolKey",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2348,
													"src": "924:7:31",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolKey_$2348_storage_ptr",
														"typeString": "struct PoolAddress.PoolKey"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "923:16:31"
									},
									"scope": 2427,
									"src": "803:281:31",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2425,
										"nodeType": "Block",
										"src": "1435:428:31",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2394,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 2390,
																	"name": "key",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2384,
																	"src": "1454:3:31",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_PoolKey_$2348_memory_ptr",
																		"typeString": "struct PoolAddress.PoolKey memory"
																	}
																},
																"id": 2391,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "token0",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2343,
																"src": "1454:10:31",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"expression": {
																	"id": 2392,
																	"name": "key",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2384,
																	"src": "1467:3:31",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_PoolKey_$2348_memory_ptr",
																		"typeString": "struct PoolAddress.PoolKey memory"
																	}
																},
																"id": 2393,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "token1",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2345,
																"src": "1467:10:31",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1454:23:31",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 2389,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1446:7:31",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 2395,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1446:32:31",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2396,
												"nodeType": "ExpressionStatement",
												"src": "1446:32:31"
											},
											{
												"expression": {
													"id": 2423,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2397,
														"name": "pool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2387,
														"src": "1489:4:31",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"hexValue": "ff",
																						"id": 2405,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "hexString",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "1619:7:31",
																						"typeDescriptions": {
																							"typeIdentifier": "t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9",
																							"typeString": "literal_string hex\"ff\""
																						}
																					},
																					{
																						"id": 2406,
																						"name": "factory",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2382,
																						"src": "1653:7:31",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"expression": {
																											"id": 2410,
																											"name": "key",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 2384,
																											"src": "1708:3:31",
																											"typeDescriptions": {
																												"typeIdentifier": "t_struct$_PoolKey_$2348_memory_ptr",
																												"typeString": "struct PoolAddress.PoolKey memory"
																											}
																										},
																										"id": 2411,
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"memberName": "token0",
																										"nodeType": "MemberAccess",
																										"referencedDeclaration": 2343,
																										"src": "1708:10:31",
																										"typeDescriptions": {
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									},
																									{
																										"expression": {
																											"id": 2412,
																											"name": "key",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 2384,
																											"src": "1720:3:31",
																											"typeDescriptions": {
																												"typeIdentifier": "t_struct$_PoolKey_$2348_memory_ptr",
																												"typeString": "struct PoolAddress.PoolKey memory"
																											}
																										},
																										"id": 2413,
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"memberName": "token1",
																										"nodeType": "MemberAccess",
																										"referencedDeclaration": 2345,
																										"src": "1720:10:31",
																										"typeDescriptions": {
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									},
																									{
																										"expression": {
																											"id": 2414,
																											"name": "key",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 2384,
																											"src": "1732:3:31",
																											"typeDescriptions": {
																												"typeIdentifier": "t_struct$_PoolKey_$2348_memory_ptr",
																												"typeString": "struct PoolAddress.PoolKey memory"
																											}
																										},
																										"id": 2415,
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"memberName": "fee",
																										"nodeType": "MemberAccess",
																										"referencedDeclaration": 2347,
																										"src": "1732:7:31",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint24",
																											"typeString": "uint24"
																										}
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										},
																										{
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										},
																										{
																											"typeIdentifier": "t_uint24",
																											"typeString": "uint24"
																										}
																									],
																									"expression": {
																										"id": 2408,
																										"name": "abi",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 4294967295,
																										"src": "1697:3:31",
																										"typeDescriptions": {
																											"typeIdentifier": "t_magic_abi",
																											"typeString": "abi"
																										}
																									},
																									"id": 2409,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"lValueRequested": false,
																									"memberName": "encode",
																									"nodeType": "MemberAccess",
																									"src": "1697:10:31",
																									"typeDescriptions": {
																										"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																										"typeString": "function () pure returns (bytes memory)"
																									}
																								},
																								"id": 2416,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"kind": "functionCall",
																								"lValueRequested": false,
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "1697:43:31",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes_memory_ptr",
																									"typeString": "bytes memory"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_bytes_memory_ptr",
																									"typeString": "bytes memory"
																								}
																							],
																							"id": 2407,
																							"name": "keccak256",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967288,
																							"src": "1687:9:31",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																								"typeString": "function (bytes memory) pure returns (bytes32)"
																							}
																						},
																						"id": 2417,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "1687:54:31",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					},
																					{
																						"id": 2418,
																						"name": "POOL_INIT_CODE_HASH",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2341,
																						"src": "1768:19:31",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9",
																							"typeString": "literal_string hex\"ff\""
																						},
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						},
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						},
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					],
																					"expression": {
																						"id": 2403,
																						"name": "abi",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967295,
																						"src": "1576:3:31",
																						"typeDescriptions": {
																							"typeIdentifier": "t_magic_abi",
																							"typeString": "abi"
																						}
																					},
																					"id": 2404,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "encodePacked",
																					"nodeType": "MemberAccess",
																					"src": "1576:16:31",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																						"typeString": "function () pure returns (bytes memory)"
																					}
																				},
																				"id": 2419,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "1576:234:31",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			],
																			"id": 2402,
																			"name": "keccak256",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967288,
																			"src": "1544:9:31",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																				"typeString": "function (bytes memory) pure returns (bytes32)"
																			}
																		},
																		"id": 2420,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1544:285:31",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"id": 2401,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1518:7:31",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 2400,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1518:7:31",
																		"typeDescriptions": {}
																	}
																},
																"id": 2421,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1518:326:31",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 2399,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1496:7:31",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 2398,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1496:7:31",
																"typeDescriptions": {}
															}
														},
														"id": 2422,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1496:359:31",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "1489:366:31",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2424,
												"nodeType": "ExpressionStatement",
												"src": "1489:366:31"
											}
										]
									},
									"documentation": {
										"id": 2380,
										"nodeType": "StructuredDocumentation",
										"src": "1092:239:31",
										"text": "@notice Deterministically computes the pool address given the factory and PoolKey\n @param factory The Uniswap V3 factory contract address\n @param key The PoolKey\n @return pool The contract address of the V3 pool"
									},
									"id": 2426,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "computeAddress",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2385,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2382,
												"mutability": "mutable",
												"name": "factory",
												"nodeType": "VariableDeclaration",
												"scope": 2426,
												"src": "1361:15:31",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2381,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1361:7:31",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2384,
												"mutability": "mutable",
												"name": "key",
												"nodeType": "VariableDeclaration",
												"scope": 2426,
												"src": "1378:18:31",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PoolKey_$2348_memory_ptr",
													"typeString": "struct PoolAddress.PoolKey"
												},
												"typeName": {
													"id": 2383,
													"name": "PoolKey",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 2348,
													"src": "1378:7:31",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolKey_$2348_storage_ptr",
														"typeString": "struct PoolAddress.PoolKey"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1360:37:31"
									},
									"returnParameters": {
										"id": 2388,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2387,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 2426,
												"src": "1421:12:31",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2386,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1421:7:31",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1420:14:31"
									},
									"scope": 2427,
									"src": "1337:526:31",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2428,
							"src": "171:1695:31"
						}
					],
					"src": "46:1822:31"
				},
				"id": 31
			},
			"contracts/libraries/TransferHelper.sol": {
				"ast": {
					"absolutePath": "contracts/libraries/TransferHelper.sol",
					"exportedSymbols": {
						"IERC20": [
							125
						],
						"TransferHelper": [
							2598
						]
					},
					"id": 2599,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2429,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "46:24:32"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 2430,
							"nodeType": "ImportDirective",
							"scope": 2599,
							"sourceUnit": 126,
							"src": "74:56:32",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"fullyImplemented": true,
							"id": 2598,
							"linearizedBaseContracts": [
								2598
							],
							"name": "TransferHelper",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2478,
										"nodeType": "Block",
										"src": "707:233:32",
										"statements": [
											{
												"assignments": [
													2443,
													2445
												],
												"declarations": [
													{
														"constant": false,
														"id": 2443,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 2478,
														"src": "719:12:32",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2442,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "719:4:32",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2445,
														"mutability": "mutable",
														"name": "data",
														"nodeType": "VariableDeclaration",
														"scope": 2478,
														"src": "733:17:32",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2444,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "733:5:32",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2458,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 2450,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 125,
																			"src": "801:6:32",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$125_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 2451,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 106,
																		"src": "801:19:32",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function IERC20.transferFrom(address,address,uint256) returns (bool)"
																		}
																	},
																	"id": 2452,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "801:28:32",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 2453,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2435,
																	"src": "831:4:32",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2454,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2437,
																	"src": "837:2:32",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2455,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2439,
																	"src": "841:5:32",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 2448,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "778:3:32",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2449,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "778:22:32",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 2456,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "778:69:32",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 2446,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2433,
															"src": "767:5:32",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2447,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "767:10:32",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 2457,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "767:81:32",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "718:130:32"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2474,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2460,
																"name": "success",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2443,
																"src": "867:7:32",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 2472,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2464,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 2461,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2445,
																					"src": "879:4:32",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 2462,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "879:11:32",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "30",
																				"id": 2463,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "894:1:32",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"src": "879:16:32",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "||",
																		"rightExpression": {
																			"arguments": [
																				{
																					"id": 2467,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2445,
																					"src": "910:4:32",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				{
																					"components": [
																						{
																							"id": 2469,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "917:4:32",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_bool_$",
																								"typeString": "type(bool)"
																							},
																							"typeName": {
																								"id": 2468,
																								"name": "bool",
																								"nodeType": "ElementaryTypeName",
																								"src": "917:4:32",
																								"typeDescriptions": {}
																							}
																						}
																					],
																					"id": 2470,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "916:6:32",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					},
																					{
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				],
																				"expression": {
																					"id": 2465,
																					"name": "abi",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967295,
																					"src": "899:3:32",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_abi",
																						"typeString": "abi"
																					}
																				},
																				"id": 2466,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberName": "decode",
																				"nodeType": "MemberAccess",
																				"src": "899:10:32",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 2471,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "899:24:32",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "879:44:32",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 2473,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "878:46:32",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "867:57:32",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "535446",
															"id": 2475,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "926:5:32",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a1c4b1d67db284650e7cfb49cb11ce76848206ad466478425bd3418f8bbb9a86",
																"typeString": "literal_string \"STF\""
															},
															"value": "STF"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a1c4b1d67db284650e7cfb49cb11ce76848206ad466478425bd3418f8bbb9a86",
																"typeString": "literal_string \"STF\""
															}
														],
														"id": 2459,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "859:7:32",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2476,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "859:73:32",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2477,
												"nodeType": "ExpressionStatement",
												"src": "859:73:32"
											}
										]
									},
									"documentation": {
										"id": 2431,
										"nodeType": "StructuredDocumentation",
										"src": "164:403:32",
										"text": "@notice Transfers tokens from the targeted address to the given destination\n @notice Errors with 'STF' if transfer fails\n @param token The contract address of the token to be transferred\n @param from The originating address from which the tokens will be transferred\n @param to The destination address of the transfer\n @param value The amount to be transferred"
									},
									"id": 2479,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2440,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2433,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 2479,
												"src": "609:13:32",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2432,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "609:7:32",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2435,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 2479,
												"src": "633:12:32",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2434,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "633:7:32",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2437,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 2479,
												"src": "656:10:32",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2436,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "656:7:32",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2439,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 2479,
												"src": "677:13:32",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2438,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "677:7:32",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "598:99:32"
									},
									"returnParameters": {
										"id": 2441,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "707:0:32"
									},
									"scope": 2598,
									"src": "573:367:32",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2524,
										"nodeType": "Block",
										"src": "1346:209:32",
										"statements": [
											{
												"assignments": [
													2490,
													2492
												],
												"declarations": [
													{
														"constant": false,
														"id": 2490,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 2524,
														"src": "1358:12:32",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2489,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "1358:4:32",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2492,
														"mutability": "mutable",
														"name": "data",
														"nodeType": "VariableDeclaration",
														"scope": 2524,
														"src": "1372:17:32",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2491,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1372:5:32",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2504,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 2497,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 125,
																			"src": "1427:6:32",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$125_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 2498,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 74,
																		"src": "1427:15:32",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_declaration_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function IERC20.transfer(address,uint256) returns (bool)"
																		}
																	},
																	"id": 2499,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1427:24:32",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 2500,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2484,
																	"src": "1453:2:32",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2501,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2486,
																	"src": "1457:5:32",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 2495,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1404:3:32",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2496,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1404:22:32",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 2502,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1404:59:32",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 2493,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2482,
															"src": "1393:5:32",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2494,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "1393:10:32",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 2503,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1393:71:32",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1357:107:32"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2520,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2506,
																"name": "success",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2490,
																"src": "1483:7:32",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 2518,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2510,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 2507,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2492,
																					"src": "1495:4:32",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 2508,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "1495:11:32",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "30",
																				"id": 2509,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1510:1:32",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"src": "1495:16:32",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "||",
																		"rightExpression": {
																			"arguments": [
																				{
																					"id": 2513,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2492,
																					"src": "1526:4:32",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				{
																					"components": [
																						{
																							"id": 2515,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "1533:4:32",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_bool_$",
																								"typeString": "type(bool)"
																							},
																							"typeName": {
																								"id": 2514,
																								"name": "bool",
																								"nodeType": "ElementaryTypeName",
																								"src": "1533:4:32",
																								"typeDescriptions": {}
																							}
																						}
																					],
																					"id": 2516,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "1532:6:32",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					},
																					{
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				],
																				"expression": {
																					"id": 2511,
																					"name": "abi",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967295,
																					"src": "1515:3:32",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_abi",
																						"typeString": "abi"
																					}
																				},
																				"id": 2512,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberName": "decode",
																				"nodeType": "MemberAccess",
																				"src": "1515:10:32",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 2517,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1515:24:32",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "1495:44:32",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 2519,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1494:46:32",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1483:57:32",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5354",
															"id": 2521,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1542:4:32",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8e992d6a09e3feb7936717fa482f3a7086f18407e19b697f3153d17fd25870ca",
																"typeString": "literal_string \"ST\""
															},
															"value": "ST"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8e992d6a09e3feb7936717fa482f3a7086f18407e19b697f3153d17fd25870ca",
																"typeString": "literal_string \"ST\""
															}
														],
														"id": 2505,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1475:7:32",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2522,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1475:72:32",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2523,
												"nodeType": "ExpressionStatement",
												"src": "1475:72:32"
											}
										]
									},
									"documentation": {
										"id": 2480,
										"nodeType": "StructuredDocumentation",
										"src": "948:285:32",
										"text": "@notice Transfers tokens from msg.sender to a recipient\n @dev Errors with ST if transfer fails\n @param token The contract address of the token which will be transferred\n @param to The recipient of the transfer\n @param value The value of the transfer"
									},
									"id": 2525,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2487,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2482,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 2525,
												"src": "1271:13:32",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2481,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1271:7:32",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2484,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 2525,
												"src": "1295:10:32",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2483,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1295:7:32",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2486,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 2525,
												"src": "1316:13:32",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2485,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1316:7:32",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1260:76:32"
									},
									"returnParameters": {
										"id": 2488,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1346:0:32"
									},
									"scope": 2598,
									"src": "1239:316:32",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2570,
										"nodeType": "Block",
										"src": "2021:208:32",
										"statements": [
											{
												"assignments": [
													2536,
													2538
												],
												"declarations": [
													{
														"constant": false,
														"id": 2536,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 2570,
														"src": "2033:12:32",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2535,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2033:4:32",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2538,
														"mutability": "mutable",
														"name": "data",
														"nodeType": "VariableDeclaration",
														"scope": 2570,
														"src": "2047:17:32",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2537,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "2047:5:32",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2550,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 2543,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 125,
																			"src": "2102:6:32",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$125_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 2544,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 94,
																		"src": "2102:14:32",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_declaration_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function IERC20.approve(address,uint256) returns (bool)"
																		}
																	},
																	"id": 2545,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2102:23:32",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 2546,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2530,
																	"src": "2127:2:32",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2547,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2532,
																	"src": "2131:5:32",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 2541,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2079:3:32",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2542,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2079:22:32",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 2548,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2079:58:32",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 2539,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2528,
															"src": "2068:5:32",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2540,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "2068:10:32",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 2549,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2068:70:32",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2032:106:32"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2566,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2552,
																"name": "success",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2536,
																"src": "2157:7:32",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 2564,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2556,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 2553,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2538,
																					"src": "2169:4:32",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 2554,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "2169:11:32",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "30",
																				"id": 2555,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2184:1:32",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"src": "2169:16:32",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "||",
																		"rightExpression": {
																			"arguments": [
																				{
																					"id": 2559,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2538,
																					"src": "2200:4:32",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				{
																					"components": [
																						{
																							"id": 2561,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "2207:4:32",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_bool_$",
																								"typeString": "type(bool)"
																							},
																							"typeName": {
																								"id": 2560,
																								"name": "bool",
																								"nodeType": "ElementaryTypeName",
																								"src": "2207:4:32",
																								"typeDescriptions": {}
																							}
																						}
																					],
																					"id": 2562,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "2206:6:32",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					},
																					{
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				],
																				"expression": {
																					"id": 2557,
																					"name": "abi",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967295,
																					"src": "2189:3:32",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_abi",
																						"typeString": "abi"
																					}
																				},
																				"id": 2558,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberName": "decode",
																				"nodeType": "MemberAccess",
																				"src": "2189:10:32",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 2563,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2189:24:32",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "2169:44:32",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 2565,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2168:46:32",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "2157:57:32",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5341",
															"id": 2567,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2216:4:32",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0c382912095e7706ed01a66755a50c713445aceaf5a9168954498b03dd381faa",
																"typeString": "literal_string \"SA\""
															},
															"value": "SA"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0c382912095e7706ed01a66755a50c713445aceaf5a9168954498b03dd381faa",
																"typeString": "literal_string \"SA\""
															}
														],
														"id": 2551,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2149:7:32",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2568,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2149:72:32",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2569,
												"nodeType": "ExpressionStatement",
												"src": "2149:72:32"
											}
										]
									},
									"documentation": {
										"id": 2526,
										"nodeType": "StructuredDocumentation",
										"src": "1563:346:32",
										"text": "@notice Approves the stipulated contract to spend the given allowance in the given token\n @dev Errors with 'SA' if transfer fails\n @param token The contract address of the token to be approved\n @param to The target of the approval\n @param value The amount of the given token the target will be allowed to spend"
									},
									"id": 2571,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2533,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2528,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 2571,
												"src": "1946:13:32",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2527,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1946:7:32",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2530,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 2571,
												"src": "1970:10:32",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2529,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1970:7:32",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2532,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 2571,
												"src": "1991:13:32",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2531,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1991:7:32",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1935:76:32"
									},
									"returnParameters": {
										"id": 2534,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2021:0:32"
									},
									"scope": 2598,
									"src": "1915:314:32",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2596,
										"nodeType": "Block",
										"src": "2486:107:32",
										"statements": [
											{
												"assignments": [
													2580,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 2580,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 2596,
														"src": "2498:12:32",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2579,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2498:4:32",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 2590,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2587,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2548:1:32",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2586,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "2538:9:32",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (bytes memory)"
																},
																"typeName": {
																	"id": 2585,
																	"name": "bytes",
																	"nodeType": "ElementaryTypeName",
																	"src": "2542:5:32",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_storage_ptr",
																		"typeString": "bytes"
																	}
																}
															},
															"id": 2588,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2538:12:32",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 2581,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2574,
																"src": "2516:2:32",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 2582,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2516:7:32",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 2584,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 2583,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2576,
																"src": "2531:5:32",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2516:21:32",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 2589,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2516:35:32",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2497:54:32"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2592,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2580,
															"src": "2570:7:32",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "535445",
															"id": 2593,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2579:5:32",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_48541fce89df928ec30caa1aed6c0cd94b8e2ef76b3c68b10b9a184ceadb93d4",
																"typeString": "literal_string \"STE\""
															},
															"value": "STE"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_48541fce89df928ec30caa1aed6c0cd94b8e2ef76b3c68b10b9a184ceadb93d4",
																"typeString": "literal_string \"STE\""
															}
														],
														"id": 2591,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2562:7:32",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2594,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2562:23:32",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2595,
												"nodeType": "ExpressionStatement",
												"src": "2562:23:32"
											}
										]
									},
									"documentation": {
										"id": 2572,
										"nodeType": "StructuredDocumentation",
										"src": "2237:182:32",
										"text": "@notice Transfers ETH to the recipient address\n @dev Fails with `STE`\n @param to The destination of the transfer\n @param value The value to be transferred"
									},
									"id": 2597,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferETH",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2577,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2574,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 2597,
												"src": "2450:10:32",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2573,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2450:7:32",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2576,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 2597,
												"src": "2462:13:32",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2575,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2462:7:32",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2449:27:32"
									},
									"returnParameters": {
										"id": 2578,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2486:0:32"
									},
									"scope": 2598,
									"src": "2425:168:32",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2599,
							"src": "134:2462:32"
						}
					],
					"src": "46:2552:32"
				},
				"id": 32
			}
		}
	}
}