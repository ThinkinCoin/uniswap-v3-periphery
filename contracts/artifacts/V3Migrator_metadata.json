{
	"compiler": {
		"version": "0.7.6+commit.7338295f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_factory",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_WETH9",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_nonfungiblePositionManager",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "WETH9",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token0",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "token1",
						"type": "address"
					},
					{
						"internalType": "uint24",
						"name": "fee",
						"type": "uint24"
					},
					{
						"internalType": "uint160",
						"name": "sqrtPriceX96",
						"type": "uint160"
					}
				],
				"name": "createAndInitializePoolIfNecessary",
				"outputs": [
					{
						"internalType": "address",
						"name": "pool",
						"type": "address"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "factory",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "pair",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "liquidityToMigrate",
								"type": "uint256"
							},
							{
								"internalType": "uint8",
								"name": "percentageToMigrate",
								"type": "uint8"
							},
							{
								"internalType": "address",
								"name": "token0",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "token1",
								"type": "address"
							},
							{
								"internalType": "uint24",
								"name": "fee",
								"type": "uint24"
							},
							{
								"internalType": "int24",
								"name": "tickLower",
								"type": "int24"
							},
							{
								"internalType": "int24",
								"name": "tickUpper",
								"type": "int24"
							},
							{
								"internalType": "uint256",
								"name": "amount0Min",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amount1Min",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "recipient",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "deadline",
								"type": "uint256"
							},
							{
								"internalType": "bool",
								"name": "refundAsETH",
								"type": "bool"
							}
						],
						"internalType": "struct IV3Migrator.MigrateParams",
						"name": "params",
						"type": "tuple"
					}
				],
				"name": "migrate",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes[]",
						"name": "data",
						"type": "bytes[]"
					}
				],
				"name": "multicall",
				"outputs": [
					{
						"internalType": "bytes[]",
						"name": "results",
						"type": "bytes[]"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "nonfungiblePositionManager",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "v",
						"type": "uint8"
					},
					{
						"internalType": "bytes32",
						"name": "r",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "s",
						"type": "bytes32"
					}
				],
				"name": "selfPermit",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "nonce",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "expiry",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "v",
						"type": "uint8"
					},
					{
						"internalType": "bytes32",
						"name": "r",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "s",
						"type": "bytes32"
					}
				],
				"name": "selfPermitAllowed",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "nonce",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "expiry",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "v",
						"type": "uint8"
					},
					{
						"internalType": "bytes32",
						"name": "r",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "s",
						"type": "bytes32"
					}
				],
				"name": "selfPermitAllowedIfNecessary",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "v",
						"type": "uint8"
					},
					{
						"internalType": "bytes32",
						"name": "r",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "s",
						"type": "bytes32"
					}
				],
				"name": "selfPermitIfNecessary",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
					"details": "This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool",
					"params": {
						"fee": "The fee amount of the v3 pool for the specified token pair",
						"sqrtPriceX96": "The initial square root price of the pool as a Q64.96 value",
						"token0": "The contract address of token0 of the pool",
						"token1": "The contract address of token1 of the pool"
					},
					"returns": {
						"pool": "Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary"
					}
				},
				"migrate((address,uint256,uint8,address,address,uint24,int24,int24,uint256,uint256,address,uint256,bool))": {
					"details": "Slippage protection is enforced via `amount{0,1}Min`, which should be a discount of the expected values of the maximum amount of v3 liquidity that the v2 liquidity can get. For the special case of migrating to an out-of-range position, `amount{0,1}Min` may be set to 0, enforcing that the position remains out of range",
					"params": {
						"params": "The params necessary to migrate v2 liquidity, encoded as `MigrateParams` in calldata"
					}
				},
				"multicall(bytes[])": {
					"details": "The `msg.value` should not be trusted for any method callable from multicall.",
					"params": {
						"data": "The encoded function data for each of the calls to make to this contract"
					},
					"returns": {
						"results": "The results from each of the calls passed in via data"
					}
				},
				"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
					"details": "The `owner` is always msg.sender and the `spender` is always address(this).",
					"params": {
						"deadline": "A timestamp, the current blocktime must be less than or equal to this timestamp",
						"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
						"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
						"token": "The address of the token spent",
						"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`",
						"value": "The amount that can be spent of token"
					}
				},
				"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": {
					"details": "The `owner` is always msg.sender and the `spender` is always address(this)",
					"params": {
						"expiry": "The timestamp at which the permit is no longer valid",
						"nonce": "The current nonce of the owner",
						"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
						"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
						"token": "The address of the token spent",
						"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
					}
				},
				"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
					"details": "The `owner` is always msg.sender and the `spender` is always address(this) Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.",
					"params": {
						"expiry": "The timestamp at which the permit is no longer valid",
						"nonce": "The current nonce of the owner",
						"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
						"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
						"token": "The address of the token spent",
						"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
					}
				},
				"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
					"details": "The `owner` is always msg.sender and the `spender` is always address(this). Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit",
					"params": {
						"deadline": "A timestamp, the current blocktime must be less than or equal to this timestamp",
						"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
						"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
						"token": "The address of the token spent",
						"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`",
						"value": "The amount that can be spent of token"
					}
				}
			},
			"title": "Uniswap V3 Migrator",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
					"notice": "Creates a new pool if it does not exist, then initializes if not initialized"
				},
				"migrate((address,uint256,uint8,address,address,uint24,int24,int24,uint256,uint256,address,uint256,bool))": {
					"notice": "Migrates liquidity to v3 by burning v2 liquidity and minting a new position for v3"
				},
				"multicall(bytes[])": {
					"notice": "Call multiple functions in the current contract and return the data from all of them if they all succeed"
				},
				"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
					"notice": "Permits this contract to spend a given token from `msg.sender`"
				},
				"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": {
					"notice": "Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter"
				},
				"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
					"notice": "Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter"
				},
				"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
					"notice": "Permits this contract to spend a given token from `msg.sender`"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/V3Migrator.sol": "V3Migrator"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/drafts/IERC20Permit.sol": {
			"keccak256": "0x1aab7754719ba764a8a05bec47e975001400f62986474945eb3dbee6d871259f",
			"license": "MIT",
			"urls": [
				"bzz-raw://8c14e8ff1b384bdb68f262669364b1e79fbbd82b85938b7ce788a1395c40c6a2",
				"dweb:/ipfs/QmUKLXfSeEuRUXkeWLBhjHTKeSFoNBCS1RaMXv1AmHXYzn"
			]
		},
		"@openzeppelin/contracts/introspection/IERC165.sol": {
			"keccak256": "0xd2f30fad5b24c4120f96dbac83aacdb7993ee610a9092bc23c44463da292bf8d",
			"license": "MIT",
			"urls": [
				"bzz-raw://e3d4e72409e392c7694b6405a0136cf073d8da016df33ef8f9ad195f724ebfea",
				"dweb:/ipfs/QmPGcddKq6CgsiKnxUUif2q76wRqP3dmdQ6bKuHCLmb8Wa"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76",
			"license": "MIT",
			"urls": [
				"bzz-raw://2d0913dfbfce90d170df0d496ad7596c0778518e5fa7aba6c32562522546f66b",
				"dweb:/ipfs/QmR6B8nLj2PJf5e1JWD9Nk7ErkAwkqUwadCnvE82FJr1RU"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
			"keccak256": "0xb11597841d47f7a773bca63ca323c76f804cb5d944788de0327db5526319dc82",
			"license": "MIT",
			"urls": [
				"bzz-raw://930d2da1934886a1098753be4173dd89c45ca0b306a1930accd37e00b1af4aaf",
				"dweb:/ipfs/QmVSXnvEV41d43k8cfpANHoTYMKgBDBL8iCbxkLfEtQZBe"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol": {
			"keccak256": "0x2789dfea2d73182683d637db5729201f6730dae6113030a94c828f8688f38f2f",
			"license": "MIT",
			"urls": [
				"bzz-raw://36374eaa68c0737bf7e1ae13d55327b4868fb0825e971ee729f4b8d355ededb4",
				"dweb:/ipfs/QmYN9yuzz4P5SumiT6rgYgTEY8MhnPQapMwx2LHxRKju7r"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol": {
			"keccak256": "0xc82c7d1d732081d9bd23f1555ebdf8f3bc1738bc42c2bfc4b9aa7564d9fa3573",
			"license": "MIT",
			"urls": [
				"bzz-raw://5cb07e4ff3352161510a0d1536fe93f3c62526358e073a8bab2a8abbb27d0da1",
				"dweb:/ipfs/QmX7K1JjnWKT1JzZT92Qx5zNJQYbssE533TLFHP88hj2fb"
			]
		},
		"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol": {
			"keccak256": "0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b",
			"urls": [
				"bzz-raw://85d5ad2dd23ee127f40907a12865a1e8cb5828814f6f2480285e1827dd72dedf",
				"dweb:/ipfs/QmayKQWJgWmr46DqWseADyUanmqxh662hPNdAkdHRjiQQH"
			]
		},
		"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol": {
			"keccak256": "0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://b9379ad954680c44a0bc523b314ae4c4da735f9fe1d02aa56ea5bdba6f1136f2",
				"dweb:/ipfs/QmZXdgQNXKAckrXWz9R3mc47F1fvDvr28a2ewJrwNAw71B"
			]
		},
		"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
			"keccak256": "0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://1c42b9e6f5902ac38dd43e25750939baa7e0c1425dc75afd717c4412731065d5",
				"dweb:/ipfs/QmWaoacnzsucTvBME2o7YgZBZMhaHv7fkj83htHMVWJKWh"
			]
		},
		"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
			"keccak256": "0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5",
				"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ"
			]
		},
		"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
			"keccak256": "0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7",
				"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c"
			]
		},
		"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
			"keccak256": "0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03",
				"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39"
			]
		},
		"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
			"keccak256": "0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047",
				"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3"
			]
		},
		"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
			"keccak256": "0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735",
				"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u"
			]
		},
		"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
			"keccak256": "0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f",
				"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg"
			]
		},
		"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol": {
			"keccak256": "0x86715eb960f18e01ac94e3bba4614ed51a887fa3c5bd1c43bf80aa98e019cf2d",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://bfc1d5d58e59015086b0e65a6c3a2ddad312e2350480510f6c0c8167f3d71a37",
				"dweb:/ipfs/QmQndULYjFsHKHjMAKLMfc12vWbVB5FawtioHtvwcWRJZp"
			]
		},
		"contracts/V3Migrator.sol": {
			"keccak256": "0xc4bfeb7f60f36c558861af003c131941d4172100ab13600904ca952375bac0dd",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://4595459fab1fa1df7d372ed0793621435db35598e1d3b38892b11a7ec1ba143b",
				"dweb:/ipfs/QmUUDWXZStqv7N1oNM8XjDEZjKPER8LLCLBKrNr8WS7smg"
			]
		},
		"contracts/base/Multicall.sol": {
			"keccak256": "0x3acc1acf20b9f218e68706d90f71b28d63fbca91b8a6b5445613e12d5c98aac6",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://c4414bcad1d2971596866d1dc95790954fac1ca9e772d9864785496348083839",
				"dweb:/ipfs/QmXeTSwz3446DddKoZSaY1vZ4mNsMvdF4zAeX4ANoMxhjT"
			]
		},
		"contracts/base/PeripheryImmutableState.sol": {
			"keccak256": "0x1d0175136fda60c5e1b6aab6dfa4a35856717413d754d0750eb75866f3f5e43f",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://8e19496cd2a7239e9e869bafbfb9f762691a9ab52f169b579f11d752d7df79a5",
				"dweb:/ipfs/QmTaLVPUVMGp4ZywHwpFupnz2873NPyqYs3EzbJTHpVNSA"
			]
		},
		"contracts/base/PoolInitializer.sol": {
			"keccak256": "0x1141fd6d820b534347ad90e0f027d1dd3378066cbaf78330d8d0072ed9aeefcc",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://67dbbcb74c0c1b8761b2656f35bd7f8b0bad3311cfe5e6fbe6ba92f60d77821a",
				"dweb:/ipfs/QmRPhL3KAzhphnba2gRBryPCn5Zth3CoA6pPqHANcw8N6G"
			]
		},
		"contracts/base/SelfPermit.sol": {
			"keccak256": "0x6d508a027f7a4a41ccb30a20f84bf29c52d7210d30e968142d064f9ce5c496ae",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://ff72331865afd843ac65d0fd559dc92bcfe1bcd9a2db913c1bdbb9f62224d724",
				"dweb:/ipfs/Qme7YMqjHxoo3RuN9onk9Notw7h512NnVFncAjqX6HuQdV"
			]
		},
		"contracts/interfaces/IERC721Permit.sol": {
			"keccak256": "0x211a77d98af9c4c686f7f6365d9e545ea6253be910232c36be7758d3bc99bdff",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://ce417bd13b8b7d49c7ddda765392c2117b39f5a04bd56bbf47d65cdcd1af1bac",
				"dweb:/ipfs/QmbU2vFrffABYuCB9s9vckfaLiwXu4diTRSBf6YB1LXth2"
			]
		},
		"contracts/interfaces/IMulticall.sol": {
			"keccak256": "0x76aeef8a8cd237f1bd8fb67f21e1734ba5c294b522c1932ce336f72fe41e5355",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://0b577b8f8e1b2767f218d0a1d78f7cc4d7b24ccd01ed7422a7129f9ae465edff",
				"dweb:/ipfs/QmVUzqSeAXf9Urwc1tseh1sW3pNz6z36vEYYYAGTNAnDWf"
			]
		},
		"contracts/interfaces/INonfungiblePositionManager.sol": {
			"keccak256": "0x424f2c08cab7abab5033e7c02f0e7a26437e640bccec41d7e7b077f996642d20",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://022a5f4bd78fe0d0c408be06b275f76d9a2ad67770a7d0fd8c97e66647237c7a",
				"dweb:/ipfs/QmYAWxDbRgjYqw1kSCJv5WCobQ36XnA8Ke4jfBBsmEt1HX"
			]
		},
		"contracts/interfaces/IPeripheryImmutableState.sol": {
			"keccak256": "0x23bb9671c6188fe826d384acb88182efc75c55ee7b6e7c5792de8f26581f0390",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://eb0b086015acc6d97e15e71a406e5ba393d188df878c71eaeb98b6ce4c99a353",
				"dweb:/ipfs/QmWvXDAjebKmEJcvoB7S7e981zcvLvMLT11BLZZMf7D2rL"
			]
		},
		"contracts/interfaces/IPeripheryPayments.sol": {
			"keccak256": "0x8e0cdb6280728619c44a8220996512b81e85f6fa7bc5373db742ea953a81eda8",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://f0748123e32874d0e1e405a463fafcf98f686fac0055da2e13bfdaa0db917766",
				"dweb:/ipfs/QmRZPF69X1e6T3yT2z8HTgzEtXHTVScqzoEMbfvp5Niggq"
			]
		},
		"contracts/interfaces/IPoolInitializer.sol": {
			"keccak256": "0x8229e43304f2c2412aaca27ea314ee78f3bcaca31124017b3bc4729c383594f1",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://3beed69fd04dd1ad59e9c083914ca47fd1f3c0bf53e50a62c772597a25191d78",
				"dweb:/ipfs/QmZ7vuCn86Gg6kopXVw5hBRPemcqtWykke8zUskZArq8aP"
			]
		},
		"contracts/interfaces/ISelfPermit.sol": {
			"keccak256": "0xb442ad31c8fef5c47ebb82b3b3f906d0a5dbca8eb26db90b287a4825bf53d595",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://6e36e6e894083ad07e2ba62977a06db0874b8ed1f6eac705f4c9d89a410f54ea",
				"dweb:/ipfs/QmWLWTuKrcCzxZeedLpUG3c8jjFLs5gLmvt35Ysp2uc9c6"
			]
		},
		"contracts/interfaces/IV3Migrator.sol": {
			"keccak256": "0xcc9095af5736016d4aa775ef7ab99306c8262954a59b9829a073455c2c61c236",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://812d269fc93db8ec94d8bb7297bb4f04faf90ab90ded0364c930db20860bd1c4",
				"dweb:/ipfs/Qme9ZDXEdRF6hdNwWUYbqshgDDEKr2wd3wbCDnwq1Rm4ud"
			]
		},
		"contracts/interfaces/external/IERC20PermitAllowed.sol": {
			"keccak256": "0x1495f5068f2b892668447889f379d87decb18c9369f4506df9d23edba9ccb4b7",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://6f322bead944abc1da0e75aba72c9e02b22f02c15712f49b212bb65869b406ca",
				"dweb:/ipfs/QmTZAqfg4EwuFAX61ZW4nA55sUbn3o2Qy3W55C3ghPUAWM"
			]
		},
		"contracts/interfaces/external/IWETH9.sol": {
			"keccak256": "0x04b01ec95f0d2f84238441c9aef03219f4bef075c224c5752978cd9dd0e94c72",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://6b0d33db4100951dc4d1e1c08f41869bf504c9613efc8dbda8fca6b3540e93fa",
				"dweb:/ipfs/QmZ9QU2UxKPKkS2MTvNBWXKJUim3kcfLaXZ3c5DS4K7Hx1"
			]
		},
		"contracts/libraries/PoolAddress.sol": {
			"keccak256": "0xd8fca2727cc0b80b46f9bef41aa958c46c075dc785bc3ad3cda3b822e31a7354",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://54877e50ab00753f73eed0a4a9f2ff735401c07e78a76603738a6b9879eb39ae",
				"dweb:/ipfs/QmXuiT99xKNdZVTZ2gQkAxa6rSVKohSxYUU9BtYB5RXX5D"
			]
		},
		"contracts/libraries/TransferHelper.sol": {
			"keccak256": "0xdd6bdb15d86cea91b32e431a3665fb02d89cd2e3ac364defdd4996c984f3b2ef",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://ea225076bf821ab6be89f44aeb024ada5ad96dd5b0a59721b57b3634a24da67a",
				"dweb:/ipfs/QmThwpyvdpBuDGfaWQPvnNuTS2bbhr6zCaJB5pGHkxkuj7"
			]
		}
	},
	"version": 1
}