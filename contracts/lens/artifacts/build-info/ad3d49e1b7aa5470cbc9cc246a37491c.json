{
	"id": "ad3d49e1b7aa5470cbc9cc246a37491c",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.7.6",
	"solcLongVersion": "0.7.6+commit.7338295f",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/lens/Quoter.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity =0.7.6;\r\n\r\nimport '@thinkincoin-libs/uniswap-v3-core/contracts/libraries/SafeCast.sol';\r\nimport '@thinkincoin-libs/uniswap-v3-core/contracts/libraries/TickMath.sol';\r\nimport '@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/IUniswapV3Pool.sol';\r\nimport '@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\r\n\r\nimport '../interfaces/IQuoter.sol';\r\nimport '../base/PeripheryImmutableState.sol';\r\nimport '../libraries/Path.sol';\r\nimport '../libraries/PoolAddress.sol';\r\nimport '../libraries/CallbackValidation.sol';\r\n\r\n/// @title Provides quotes for swaps\r\n/// @notice Allows getting the expected amount out or amount in for a given swap without executing the swap\r\n/// @dev These functions are not gas efficient and should _not_ be called on chain. Instead, optimistically execute\r\n/// the swap and check the amounts in the callback.\r\ncontract Quoter is IQuoter, IUniswapV3SwapCallback, PeripheryImmutableState {\r\n    using Path for bytes;\r\n    using SafeCast for uint256;\r\n\r\n    /// @dev Transient storage variable used to check a safety condition in exact output swaps.\r\n    uint256 private amountOutCached;\r\n\r\n    constructor(address _factory, address _WETH9) PeripheryImmutableState(_factory, _WETH9) {}\r\n\r\n    function getPool(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint24 fee\r\n    ) private view returns (IUniswapV3Pool) {\r\n        return IUniswapV3Pool(PoolAddress.computeAddress(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee)));\r\n    }\r\n\r\n    /// @inheritdoc IUniswapV3SwapCallback\r\n    function uniswapV3SwapCallback(\r\n        int256 amount0Delta,\r\n        int256 amount1Delta,\r\n        bytes memory path\r\n    ) external view override {\r\n        require(amount0Delta > 0 || amount1Delta > 0); // swaps entirely within 0-liquidity regions are not supported\r\n        (address tokenIn, address tokenOut, uint24 fee) = path.decodeFirstPool();\r\n        CallbackValidation.verifyCallback(factory, tokenIn, tokenOut, fee);\r\n\r\n        (bool isExactInput, uint256 amountToPay, uint256 amountReceived) =\r\n            amount0Delta > 0\r\n                ? (tokenIn < tokenOut, uint256(amount0Delta), uint256(-amount1Delta))\r\n                : (tokenOut < tokenIn, uint256(amount1Delta), uint256(-amount0Delta));\r\n        if (isExactInput) {\r\n            assembly {\r\n                let ptr := mload(0x40)\r\n                mstore(ptr, amountReceived)\r\n                revert(ptr, 32)\r\n            }\r\n        } else {\r\n            // if the cache has been populated, ensure that the full output amount has been received\r\n            if (amountOutCached != 0) require(amountReceived == amountOutCached);\r\n            assembly {\r\n                let ptr := mload(0x40)\r\n                mstore(ptr, amountToPay)\r\n                revert(ptr, 32)\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Parses a revert reason that should contain the numeric quote\r\n    function parseRevertReason(bytes memory reason) private pure returns (uint256) {\r\n        if (reason.length != 32) {\r\n            if (reason.length < 68) revert('Unexpected error');\r\n            assembly {\r\n                reason := add(reason, 0x04)\r\n            }\r\n            revert(abi.decode(reason, (string)));\r\n        }\r\n        return abi.decode(reason, (uint256));\r\n    }\r\n\r\n    /// @inheritdoc IQuoter\r\n    function quoteExactInputSingle(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint24 fee,\r\n        uint256 amountIn,\r\n        uint160 sqrtPriceLimitX96\r\n    ) public override returns (uint256 amountOut) {\r\n        bool zeroForOne = tokenIn < tokenOut;\r\n\r\n        try\r\n            getPool(tokenIn, tokenOut, fee).swap(\r\n                address(this), // address(0) might cause issues with some tokens\r\n                zeroForOne,\r\n                amountIn.toInt256(),\r\n                sqrtPriceLimitX96 == 0\r\n                    ? (zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1)\r\n                    : sqrtPriceLimitX96,\r\n                abi.encodePacked(tokenIn, fee, tokenOut)\r\n            )\r\n        {} catch (bytes memory reason) {\r\n            return parseRevertReason(reason);\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc IQuoter\r\n    function quoteExactInput(bytes memory path, uint256 amountIn) external override returns (uint256 amountOut) {\r\n        while (true) {\r\n            bool hasMultiplePools = path.hasMultiplePools();\r\n\r\n            (address tokenIn, address tokenOut, uint24 fee) = path.decodeFirstPool();\r\n\r\n            // the outputs of prior swaps become the inputs to subsequent ones\r\n            amountIn = quoteExactInputSingle(tokenIn, tokenOut, fee, amountIn, 0);\r\n\r\n            // decide whether to continue or terminate\r\n            if (hasMultiplePools) {\r\n                path = path.skipToken();\r\n            } else {\r\n                return amountIn;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc IQuoter\r\n    function quoteExactOutputSingle(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint24 fee,\r\n        uint256 amountOut,\r\n        uint160 sqrtPriceLimitX96\r\n    ) public override returns (uint256 amountIn) {\r\n        bool zeroForOne = tokenIn < tokenOut;\r\n\r\n        // if no price limit has been specified, cache the output amount for comparison in the swap callback\r\n        if (sqrtPriceLimitX96 == 0) amountOutCached = amountOut;\r\n        try\r\n            getPool(tokenIn, tokenOut, fee).swap(\r\n                address(this), // address(0) might cause issues with some tokens\r\n                zeroForOne,\r\n                -amountOut.toInt256(),\r\n                sqrtPriceLimitX96 == 0\r\n                    ? (zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1)\r\n                    : sqrtPriceLimitX96,\r\n                abi.encodePacked(tokenOut, fee, tokenIn)\r\n            )\r\n        {} catch (bytes memory reason) {\r\n            if (sqrtPriceLimitX96 == 0) delete amountOutCached; // clear cache\r\n            return parseRevertReason(reason);\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc IQuoter\r\n    function quoteExactOutput(bytes memory path, uint256 amountOut) external override returns (uint256 amountIn) {\r\n        while (true) {\r\n            bool hasMultiplePools = path.hasMultiplePools();\r\n\r\n            (address tokenOut, address tokenIn, uint24 fee) = path.decodeFirstPool();\r\n\r\n            // the inputs of prior swaps become the outputs of subsequent ones\r\n            amountOut = quoteExactOutputSingle(tokenIn, tokenOut, fee, amountOut, 0);\r\n\r\n            // decide whether to continue or terminate\r\n            if (hasMultiplePools) {\r\n                path = path.skipToken();\r\n            } else {\r\n                return amountOut;\r\n            }\r\n        }\r\n    }\r\n}\r\n"
			},
			"contracts/libraries/CallbackValidation.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity =0.7.6;\r\n\r\nimport '@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/IUniswapV3Pool.sol';\r\nimport './PoolAddress.sol';\r\n\r\n/// @notice Provides validation for callbacks from Uniswap V3 Pools\r\nlibrary CallbackValidation {\r\n    /// @notice Returns the address of a valid Uniswap V3 Pool\r\n    /// @param factory The contract address of the Uniswap V3 factory\r\n    /// @param tokenA The contract address of either token0 or token1\r\n    /// @param tokenB The contract address of the other token\r\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\r\n    /// @return pool The V3 pool contract address\r\n    function verifyCallback(\r\n        address factory,\r\n        address tokenA,\r\n        address tokenB,\r\n        uint24 fee\r\n    ) internal view returns (IUniswapV3Pool pool) {\r\n        return verifyCallback(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee));\r\n    }\r\n\r\n    /// @notice Returns the address of a valid Uniswap V3 Pool\r\n    /// @param factory The contract address of the Uniswap V3 factory\r\n    /// @param poolKey The identifying key of the V3 pool\r\n    /// @return pool The V3 pool contract address\r\n    function verifyCallback(address factory, PoolAddress.PoolKey memory poolKey)\r\n        internal\r\n        view\r\n        returns (IUniswapV3Pool pool)\r\n    {\r\n        pool = IUniswapV3Pool(PoolAddress.computeAddress(factory, poolKey));\r\n        require(msg.sender == address(pool));\r\n    }\r\n}\r\n"
			},
			"contracts/libraries/PoolAddress.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\r\nlibrary PoolAddress {\r\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\r\n\r\n    /// @notice The identifying key of the pool\r\n    struct PoolKey {\r\n        address token0;\r\n        address token1;\r\n        uint24 fee;\r\n    }\r\n\r\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\r\n    /// @param tokenA The first token of a pool, unsorted\r\n    /// @param tokenB The second token of a pool, unsorted\r\n    /// @param fee The fee level of the pool\r\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\r\n    function getPoolKey(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint24 fee\r\n    ) internal pure returns (PoolKey memory) {\r\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\r\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\r\n    }\r\n\r\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\r\n    /// @param factory The Uniswap V3 factory contract address\r\n    /// @param key The PoolKey\r\n    /// @return pool The contract address of the V3 pool\r\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\r\n        require(key.token0 < key.token1);\r\n        pool = address(\r\n            uint256(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        hex'ff',\r\n                        factory,\r\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\r\n                        POOL_INIT_CODE_HASH\r\n                    )\r\n                )\r\n            )\r\n        );\r\n    }\r\n}\r\n"
			},
			"contracts/libraries/Path.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.6.0;\r\n\r\nimport './BytesLib.sol';\r\n\r\n/// @title Functions for manipulating path data for multihop swaps\r\nlibrary Path {\r\n    using BytesLib for bytes;\r\n\r\n    /// @dev The length of the bytes encoded address\r\n    uint256 private constant ADDR_SIZE = 20;\r\n    /// @dev The length of the bytes encoded fee\r\n    uint256 private constant FEE_SIZE = 3;\r\n\r\n    /// @dev The offset of a single token address and pool fee\r\n    uint256 private constant NEXT_OFFSET = ADDR_SIZE + FEE_SIZE;\r\n    /// @dev The offset of an encoded pool key\r\n    uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;\r\n    /// @dev The minimum length of an encoding that contains 2 or more pools\r\n    uint256 private constant MULTIPLE_POOLS_MIN_LENGTH = POP_OFFSET + NEXT_OFFSET;\r\n\r\n    /// @notice Returns true iff the path contains two or more pools\r\n    /// @param path The encoded swap path\r\n    /// @return True if path contains two or more pools, otherwise false\r\n    function hasMultiplePools(bytes memory path) internal pure returns (bool) {\r\n        return path.length >= MULTIPLE_POOLS_MIN_LENGTH;\r\n    }\r\n\r\n    /// @notice Returns the number of pools in the path\r\n    /// @param path The encoded swap path\r\n    /// @return The number of pools in the path\r\n    function numPools(bytes memory path) internal pure returns (uint256) {\r\n        // Ignore the first token address. From then on every fee and token offset indicates a pool.\r\n        return ((path.length - ADDR_SIZE) / NEXT_OFFSET);\r\n    }\r\n\r\n    /// @notice Decodes the first pool in path\r\n    /// @param path The bytes encoded swap path\r\n    /// @return tokenA The first token of the given pool\r\n    /// @return tokenB The second token of the given pool\r\n    /// @return fee The fee level of the pool\r\n    function decodeFirstPool(bytes memory path)\r\n        internal\r\n        pure\r\n        returns (\r\n            address tokenA,\r\n            address tokenB,\r\n            uint24 fee\r\n        )\r\n    {\r\n        tokenA = path.toAddress(0);\r\n        fee = path.toUint24(ADDR_SIZE);\r\n        tokenB = path.toAddress(NEXT_OFFSET);\r\n    }\r\n\r\n    /// @notice Gets the segment corresponding to the first pool in the path\r\n    /// @param path The bytes encoded swap path\r\n    /// @return The segment containing all data necessary to target the first pool in the path\r\n    function getFirstPool(bytes memory path) internal pure returns (bytes memory) {\r\n        return path.slice(0, POP_OFFSET);\r\n    }\r\n\r\n    /// @notice Skips a token + fee element from the buffer and returns the remainder\r\n    /// @param path The swap path\r\n    /// @return The remaining token + fee elements in the path\r\n    function skipToken(bytes memory path) internal pure returns (bytes memory) {\r\n        return path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET);\r\n    }\r\n}\r\n"
			},
			"contracts/base/PeripheryImmutableState.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity =0.7.6;\r\n\r\nimport '../interfaces/IPeripheryImmutableState.sol';\r\n\r\n/// @title Immutable state\r\n/// @notice Immutable state used by periphery contracts\r\nabstract contract PeripheryImmutableState is IPeripheryImmutableState {\r\n    /// @inheritdoc IPeripheryImmutableState\r\n    address public immutable override factory;\r\n    /// @inheritdoc IPeripheryImmutableState\r\n    address public immutable override WETH9;\r\n\r\n    constructor(address _factory, address _WETH9) {\r\n        factory = _factory;\r\n        WETH9 = _WETH9;\r\n    }\r\n}\r\n"
			},
			"contracts/interfaces/IQuoter.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.7.5;\r\npragma abicoder v2;\r\n\r\n/// @title Quoter Interface\r\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\r\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\r\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\r\ninterface IQuoter {\r\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\r\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\r\n    /// @param amountIn The amount of the first token to swap\r\n    /// @return amountOut The amount of the last token that would be received\r\n    function quoteExactInput(bytes memory path, uint256 amountIn) external returns (uint256 amountOut);\r\n\r\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\r\n    /// @param tokenIn The token being swapped in\r\n    /// @param tokenOut The token being swapped out\r\n    /// @param fee The fee of the token pool to consider for the pair\r\n    /// @param amountIn The desired input amount\r\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\r\n    /// @return amountOut The amount of `tokenOut` that would be received\r\n    function quoteExactInputSingle(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint24 fee,\r\n        uint256 amountIn,\r\n        uint160 sqrtPriceLimitX96\r\n    ) external returns (uint256 amountOut);\r\n\r\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\r\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\r\n    /// @param amountOut The amount of the last token to receive\r\n    /// @return amountIn The amount of first token required to be paid\r\n    function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\r\n\r\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\r\n    /// @param tokenIn The token being swapped in\r\n    /// @param tokenOut The token being swapped out\r\n    /// @param fee The fee of the token pool to consider for the pair\r\n    /// @param amountOut The desired output amount\r\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\r\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\r\n    function quoteExactOutputSingle(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint24 fee,\r\n        uint256 amountOut,\r\n        uint160 sqrtPriceLimitX96\r\n    ) external returns (uint256 amountIn);\r\n}\r\n"
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './pool/IUniswapV3PoolImmutables.sol';\nimport './pool/IUniswapV3PoolState.sol';\nimport './pool/IUniswapV3PoolDerivedState.sol';\nimport './pool/IUniswapV3PoolActions.sol';\nimport './pool/IUniswapV3PoolOwnerActions.sol';\nimport './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolEvents\n{\n\n}\n"
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/TickMath.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -887272;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n        require(absTick <= uint256(MAX_TICK), 'T');\n\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n        if (tick > 0) ratio = type(uint256).max / ratio;\n\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\n        // second inequality must be < because the price can never reach the price at the max tick\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n        uint256 r = ratio;\n        uint256 msb = 0;\n\n        assembly {\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(5, gt(r, 0xFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(4, gt(r, 0xFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(3, gt(r, 0xFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(2, gt(r, 0xF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(1, gt(r, 0x3))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := gt(r, 0x1)\n            msb := or(msb, f)\n        }\n\n        if (msb >= 128) r = ratio >> (msb - 127);\n        else r = ratio << (127 - msb);\n\n        int256 log_2 = (int256(msb) - 128) << 64;\n\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(63, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(62, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(61, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(60, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(59, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(58, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(57, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(56, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(55, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(54, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(53, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(52, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(51, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(50, f))\n        }\n\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\n    }\n}\n"
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/SafeCast.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Safe casting methods\n/// @notice Contains methods for safely casting between types\nlibrary SafeCast {\n    /// @notice Cast a uint256 to a uint160, revert on overflow\n    /// @param y The uint256 to be downcasted\n    /// @return z The downcasted integer, now type uint160\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\n        require((z = uint160(y)) == y);\n    }\n\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\n    /// @param y The int256 to be downcasted\n    /// @return z The downcasted integer, now type int128\n    function toInt128(int256 y) internal pure returns (int128 z) {\n        require((z = int128(y)) == y);\n    }\n\n    /// @notice Cast a uint256 to a int256, revert on overflow\n    /// @param y The uint256 to be casted\n    /// @return z The casted integer, now type int256\n    function toInt256(uint256 y) internal pure returns (int256 z) {\n        require(y < 2**255);\n        z = int256(y);\n    }\n}\n"
			},
			"contracts/libraries/BytesLib.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\n/*\r\n * @title Solidity Bytes Arrays Utils\r\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\r\n *\r\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\r\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\r\n */\r\npragma solidity >=0.5.0 <0.8.0;\r\n\r\nlibrary BytesLib {\r\n    function slice(\r\n        bytes memory _bytes,\r\n        uint256 _start,\r\n        uint256 _length\r\n    ) internal pure returns (bytes memory) {\r\n        require(_length + 31 >= _length, 'slice_overflow');\r\n        require(_start + _length >= _start, 'slice_overflow');\r\n        require(_bytes.length >= _start + _length, 'slice_outOfBounds');\r\n\r\n        bytes memory tempBytes;\r\n\r\n        assembly {\r\n            switch iszero(_length)\r\n                case 0 {\r\n                    // Get a location of some free memory and store it in tempBytes as\r\n                    // Solidity does for memory variables.\r\n                    tempBytes := mload(0x40)\r\n\r\n                    // The first word of the slice result is potentially a partial\r\n                    // word read from the original array. To read it, we calculate\r\n                    // the length of that partial word and start copying that many\r\n                    // bytes into the array. The first word we copy will start with\r\n                    // data we don't care about, but the last `lengthmod` bytes will\r\n                    // land at the beginning of the contents of the new array. When\r\n                    // we're done copying, we overwrite the full first word with\r\n                    // the actual length of the slice.\r\n                    let lengthmod := and(_length, 31)\r\n\r\n                    // The multiplication in the next line is necessary\r\n                    // because when slicing multiples of 32 bytes (lengthmod == 0)\r\n                    // the following copy loop was copying the origin's length\r\n                    // and then ending prematurely not copying everything it should.\r\n                    let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\r\n                    let end := add(mc, _length)\r\n\r\n                    for {\r\n                        // The multiplication in the next line has the same exact purpose\r\n                        // as the one above.\r\n                        let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\r\n                    } lt(mc, end) {\r\n                        mc := add(mc, 0x20)\r\n                        cc := add(cc, 0x20)\r\n                    } {\r\n                        mstore(mc, mload(cc))\r\n                    }\r\n\r\n                    mstore(tempBytes, _length)\r\n\r\n                    //update free-memory pointer\r\n                    //allocating the array padded to 32 bytes like the compiler does now\r\n                    mstore(0x40, and(add(mc, 31), not(31)))\r\n                }\r\n                //if we want a zero-length slice let's just return a zero-length array\r\n                default {\r\n                    tempBytes := mload(0x40)\r\n                    //zero out the 32 bytes slice we are about to return\r\n                    //we need to do it because Solidity does not garbage collect\r\n                    mstore(tempBytes, 0)\r\n\r\n                    mstore(0x40, add(tempBytes, 0x20))\r\n                }\r\n        }\r\n\r\n        return tempBytes;\r\n    }\r\n\r\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\r\n        require(_start + 20 >= _start, 'toAddress_overflow');\r\n        require(_bytes.length >= _start + 20, 'toAddress_outOfBounds');\r\n        address tempAddress;\r\n\r\n        assembly {\r\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\r\n        }\r\n\r\n        return tempAddress;\r\n    }\r\n\r\n    function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\r\n        require(_start + 3 >= _start, 'toUint24_overflow');\r\n        require(_bytes.length >= _start + 3, 'toUint24_outOfBounds');\r\n        uint24 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x3), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n}\r\n"
			},
			"contracts/interfaces/IPeripheryImmutableState.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Immutable state\r\n/// @notice Functions that return immutable state of the router\r\ninterface IPeripheryImmutableState {\r\n    /// @return Returns the address of the Uniswap V3 factory\r\n    function factory() external view returns (address);\r\n\r\n    /// @return Returns the address of WETH9\r\n    function WETH9() external view returns (address);\r\n}\r\n"
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
				"IUniswapV3Pool": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Burn",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "Collect",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "CollectProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid1",
									"type": "uint256"
								}
							],
							"name": "Flash",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextOld",
									"type": "uint16"
								},
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextNew",
									"type": "uint16"
								}
							],
							"name": "IncreaseObservationCardinalityNext",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Initialize",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Mint",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0New",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1New",
									"type": "uint8"
								}
							],
							"name": "SetFeeProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Swap",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								}
							],
							"name": "burn",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collectProtocol",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "fee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal0X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal1X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "flash",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								}
							],
							"name": "increaseObservationCardinalityNext",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "liquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "maxLiquidityPerTick",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "observations",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "blockTimestamp",
									"type": "uint32"
								},
								{
									"internalType": "int56",
									"name": "tickCumulative",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityCumulativeX128",
									"type": "uint160"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint32[]",
									"name": "secondsAgos",
									"type": "uint32[]"
								}
							],
							"name": "observe",
							"outputs": [
								{
									"internalType": "int56[]",
									"name": "tickCumulatives",
									"type": "int56[]"
								},
								{
									"internalType": "uint160[]",
									"name": "secondsPerLiquidityCumulativeX128s",
									"type": "uint160[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "_liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside0LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside1LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "protocolFees",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "token0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "token1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint8",
									"name": "feeProtocol0",
									"type": "uint8"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol1",
									"type": "uint8"
								}
							],
							"name": "setFeeProtocol",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "slot0",
							"outputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								},
								{
									"internalType": "uint16",
									"name": "observationIndex",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinality",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol",
									"type": "uint8"
								},
								{
									"internalType": "bool",
									"name": "unlocked",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								}
							],
							"name": "snapshotCumulativesInside",
							"outputs": [
								{
									"internalType": "int56",
									"name": "tickCumulativeInside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityInsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsInside",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "zeroForOne",
									"type": "bool"
								},
								{
									"internalType": "int256",
									"name": "amountSpecified",
									"type": "int256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceLimitX96",
									"type": "uint160"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "swap",
							"outputs": [
								{
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int16",
									"name": "wordPosition",
									"type": "int16"
								}
							],
							"name": "tickBitmap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tickSpacing",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "ticks",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "liquidityGross",
									"type": "uint128"
								},
								{
									"internalType": "int128",
									"name": "liquidityNet",
									"type": "int128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside0X128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside1X128",
									"type": "uint256"
								},
								{
									"internalType": "int56",
									"name": "tickCumulativeOutside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityOutsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsOutside",
									"type": "uint32"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token0",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token1",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "The pool interface is broken up into many smaller pieces",
						"kind": "dev",
						"methods": {
							"burn(int24,int24,uint128)": {
								"details": "Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect",
								"params": {
									"amount": "How much liquidity to burn",
									"tickLower": "The lower tick of the position for which to burn liquidity",
									"tickUpper": "The upper tick of the position for which to burn liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 sent to the recipient",
									"amount1": "The amount of token1 sent to the recipient"
								}
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"details": "Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.",
								"params": {
									"amount0Requested": "How much token0 should be withdrawn from the fees owed",
									"amount1Requested": "How much token1 should be withdrawn from the fees owed",
									"recipient": "The address which should receive the fees collected",
									"tickLower": "The lower tick of the position for which to collect fees",
									"tickUpper": "The upper tick of the position for which to collect fees"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"collectProtocol(address,uint128,uint128)": {
								"params": {
									"amount0Requested": "The maximum amount of token0 to send, can be 0 to collect fees in only token1",
									"amount1Requested": "The maximum amount of token1 to send, can be 0 to collect fees in only token0",
									"recipient": "The address to which collected protocol fees should be sent"
								},
								"returns": {
									"amount0": "The protocol fee collected in token0",
									"amount1": "The protocol fee collected in token1"
								}
							},
							"factory()": {
								"returns": {
									"_0": "The contract address"
								}
							},
							"fee()": {
								"returns": {
									"_0": "The fee"
								}
							},
							"feeGrowthGlobal0X128()": {
								"details": "This value can overflow the uint256"
							},
							"feeGrowthGlobal1X128()": {
								"details": "This value can overflow the uint256"
							},
							"flash(address,uint256,uint256,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback",
								"params": {
									"amount0": "The amount of token0 to send",
									"amount1": "The amount of token1 to send",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address which will receive the token0 and token1 amounts"
								}
							},
							"increaseObservationCardinalityNext(uint16)": {
								"details": "This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.",
								"params": {
									"observationCardinalityNext": "The desired minimum number of observations for the pool to store"
								}
							},
							"initialize(uint160)": {
								"details": "Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value",
								"params": {
									"sqrtPriceX96": "the initial sqrt price of the pool as a Q64.96"
								}
							},
							"liquidity()": {
								"details": "This value has no relationship to the total liquidity across all ticks"
							},
							"maxLiquidityPerTick()": {
								"details": "This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool",
								"returns": {
									"_0": "The max amount of liquidity per tick"
								}
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.",
								"params": {
									"amount": "The amount of liquidity to mint",
									"data": "Any data that should be passed through to the callback",
									"recipient": "The address for which the liquidity will be created",
									"tickLower": "The lower tick of the position in which to add liquidity",
									"tickUpper": "The upper tick of the position in which to add liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback",
									"amount1": "The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
								}
							},
							"observations(uint256)": {
								"details": "You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.",
								"params": {
									"index": "The element of the observations array to fetch"
								},
								"returns": {
									"blockTimestamp": "The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use"
								}
							},
							"observe(uint32[])": {
								"details": "To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.",
								"params": {
									"secondsAgos": "From how long ago each cumulative tick and liquidity value should be returned"
								},
								"returns": {
									"secondsPerLiquidityCumulativeX128s": "Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp",
									"tickCumulatives": "Cumulative tick values as of each `secondsAgos` from the current block timestamp"
								}
							},
							"positions(bytes32)": {
								"params": {
									"key": "The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper"
								},
								"returns": {
									"_liquidity": "The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
								}
							},
							"protocolFees()": {
								"details": "Protocol fees will never exceed uint128 max in either token"
							},
							"setFeeProtocol(uint8,uint8)": {
								"params": {
									"feeProtocol0": "new protocol fee for token0 of the pool",
									"feeProtocol1": "new protocol fee for token1 of the pool"
								}
							},
							"slot0()": {
								"returns": {
									"sqrtPriceX96": "The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy"
								}
							},
							"snapshotCumulativesInside(int24,int24)": {
								"details": "Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.",
								"params": {
									"tickLower": "The lower tick of the range",
									"tickUpper": "The upper tick of the range"
								},
								"returns": {
									"secondsInside": "The snapshot of seconds per liquidity for the range",
									"secondsPerLiquidityInsideX128": "The snapshot of seconds per liquidity for the range",
									"tickCumulativeInside": "The snapshot of the tick accumulator for the range"
								}
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback",
								"params": {
									"amountSpecified": "The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address to receive the output of the swap",
									"sqrtPriceLimitX96": "The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap",
									"zeroForOne": "The direction of the swap, true for token0 to token1, false for token1 to token0"
								},
								"returns": {
									"amount0": "The delta of the balance of token0 of the pool, exact when negative, minimum when positive",
									"amount1": "The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
								}
							},
							"tickSpacing()": {
								"details": "Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.",
								"returns": {
									"_0": "The tick spacing"
								}
							},
							"ticks(int24)": {
								"params": {
									"tick": "The tick to look up"
								},
								"returns": {
									"liquidityGross": "the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position."
								}
							},
							"token0()": {
								"returns": {
									"_0": "The token contract address"
								}
							},
							"token1()": {
								"returns": {
									"_0": "The token contract address"
								}
							}
						},
						"title": "The interface for a Uniswap V3 Pool",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"burn(int24,int24,uint128)": "a34123a7",
							"collect(address,int24,int24,uint128,uint128)": "4f1eb3d8",
							"collectProtocol(address,uint128,uint128)": "85b66729",
							"factory()": "c45a0155",
							"fee()": "ddca3f43",
							"feeGrowthGlobal0X128()": "f3058399",
							"feeGrowthGlobal1X128()": "46141319",
							"flash(address,uint256,uint256,bytes)": "490e6cbc",
							"increaseObservationCardinalityNext(uint16)": "32148f67",
							"initialize(uint160)": "f637731d",
							"liquidity()": "1a686502",
							"maxLiquidityPerTick()": "70cf754a",
							"mint(address,int24,int24,uint128,bytes)": "3c8a7d8d",
							"observations(uint256)": "252c09d7",
							"observe(uint32[])": "883bdbfd",
							"positions(bytes32)": "514ea4bf",
							"protocolFees()": "1ad8b03b",
							"setFeeProtocol(uint8,uint8)": "8206a4d1",
							"slot0()": "3850c7bd",
							"snapshotCumulativesInside(int24,int24)": "a38807f2",
							"swap(address,bool,int256,uint160,bytes)": "128acb08",
							"tickBitmap(int16)": "5339c296",
							"tickSpacing()": "d0c93a7c",
							"ticks(int24)": "f30dba93",
							"token0()": "0dfe1681",
							"token1()": "d21220a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"CollectProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0New\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1New\",\"type\":\"uint8\"}],\"name\":\"SetFeeProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collectProtocol\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal0X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal1X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"token0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"token1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feeProtocol0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol1\",\"type\":\"uint8\"}],\"name\":\"setFeeProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The pool interface is broken up into many smaller pieces\",\"kind\":\"dev\",\"methods\":{\"burn(int24,int24,uint128)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"collect(address,int24,int24,uint128,uint128)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"collectProtocol(address,uint128,uint128)\":{\"params\":{\"amount0Requested\":\"The maximum amount of token0 to send, can be 0 to collect fees in only token1\",\"amount1Requested\":\"The maximum amount of token1 to send, can be 0 to collect fees in only token0\",\"recipient\":\"The address to which collected protocol fees should be sent\"},\"returns\":{\"amount0\":\"The protocol fee collected in token0\",\"amount1\":\"The protocol fee collected in token1\"}},\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"fee()\":{\"returns\":{\"_0\":\"The fee\"}},\"feeGrowthGlobal0X128()\":{\"details\":\"This value can overflow the uint256\"},\"feeGrowthGlobal1X128()\":{\"details\":\"This value can overflow the uint256\"},\"flash(address,uint256,uint256,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback\",\"params\":{\"amount0\":\"The amount of token0 to send\",\"amount1\":\"The amount of token1 to send\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address which will receive the token0 and token1 amounts\"}},\"increaseObservationCardinalityNext(uint16)\":{\"details\":\"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.\",\"params\":{\"observationCardinalityNext\":\"The desired minimum number of observations for the pool to store\"}},\"initialize(uint160)\":{\"details\":\"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\",\"params\":{\"sqrtPriceX96\":\"the initial sqrt price of the pool as a Q64.96\"}},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticks\"},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"mint(address,int24,int24,uint128,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.\",\"params\":{\"amount\":\"The amount of liquidity to mint\",\"data\":\"Any data that should be passed through to the callback\",\"recipient\":\"The address for which the liquidity will be created\",\"tickLower\":\"The lower tick of the position in which to add liquidity\",\"tickUpper\":\"The upper tick of the position in which to add liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"amount1\":\"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\"}},\"observations(uint256)\":{\"details\":\"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.\",\"params\":{\"index\":\"The element of the observations array to fetch\"},\"returns\":{\"blockTimestamp\":\"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use\"}},\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulativeX128s\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}},\"positions(bytes32)\":{\"params\":{\"key\":\"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\"},\"returns\":{\"_liquidity\":\"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\"}},\"protocolFees()\":{\"details\":\"Protocol fees will never exceed uint128 max in either token\"},\"setFeeProtocol(uint8,uint8)\":{\"params\":{\"feeProtocol0\":\"new protocol fee for token0 of the pool\",\"feeProtocol1\":\"new protocol fee for token1 of the pool\"}},\"slot0()\":{\"returns\":{\"sqrtPriceX96\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy\"}},\"snapshotCumulativesInside(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"secondsInside\":\"The snapshot of seconds per liquidity for the range\",\"secondsPerLiquidityInsideX128\":\"The snapshot of seconds per liquidity for the range\",\"tickCumulativeInside\":\"The snapshot of the tick accumulator for the range\"}},\"swap(address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\",\"params\":{\"amountSpecified\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address to receive the output of the swap\",\"sqrtPriceLimitX96\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"zeroForOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"ticks(int24)\":{\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"liquidityGross\":\"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"title\":\"The interface for a Uniswap V3 Pool\",\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when a position's liquidity is removed\"},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"notice\":\"Emitted when fees are collected by the owner of a position\"},\"CollectProtocol(address,address,uint128,uint128)\":{\"notice\":\"Emitted when the collected protocol fees are withdrawn by the factory owner\"},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted by the pool for any flashes of token0/token1\"},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"notice\":\"Emitted by the pool for increases to the number of observations that can be stored\"},\"Initialize(uint160,int24)\":{\"notice\":\"Emitted exactly once by a pool when #initialize is first called on the pool\"},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is minted for a given position\"},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"notice\":\"Emitted when the protocol fee is changed by the pool\"},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"notice\":\"Emitted by the pool for any swaps between token0 and token1\"}},\"kind\":\"user\",\"methods\":{\"burn(int24,int24,uint128)\":{\"notice\":\"Burn liquidity from the sender and account tokens owed for the liquidity to the position\"},\"collect(address,int24,int24,uint128,uint128)\":{\"notice\":\"Collects tokens owed to a position\"},\"collectProtocol(address,uint128,uint128)\":{\"notice\":\"Collect the protocol fee accrued to the pool\"},\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\"},\"fee()\":{\"notice\":\"The pool's fee in hundredths of a bip, i.e. 1e-6\"},\"feeGrowthGlobal0X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"feeGrowthGlobal1X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"},\"flash(address,uint256,uint256,bytes)\":{\"notice\":\"Receive token0 and/or token1 and pay it back, plus a fee, in the callback\"},\"increaseObservationCardinalityNext(uint16)\":{\"notice\":\"Increase the maximum number of price and liquidity observations that this pool will store\"},\"initialize(uint160)\":{\"notice\":\"Sets the initial price for the pool\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"mint(address,int24,int24,uint128,bytes)\":{\"notice\":\"Adds liquidity for the given recipient/tickLower/tickUpper position\"},\"observations(uint256)\":{\"notice\":\"Returns data about a specific observation index\"},\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"protocolFees()\":{\"notice\":\"The amounts of token0 and token1 that are owed to the protocol\"},\"setFeeProtocol(uint8,uint8)\":{\"notice\":\"Set the denominator of the protocol's % share of the fees\"},\"slot0()\":{\"notice\":\"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.\"},\"snapshotCumulativesInside(int24,int24)\":{\"notice\":\"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\"},\"swap(address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0\"},\"tickBitmap(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickBitmap for more information\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"notice\":\"A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform to the ERC20 specification\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/IUniswapV3Pool.sol\":\"IUniswapV3Pool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://1c42b9e6f5902ac38dd43e25750939baa7e0c1425dc75afd717c4412731065d5\",\"dweb:/ipfs/QmWaoacnzsucTvBME2o7YgZBZMhaHv7fkj83htHMVWJKWh\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5\",\"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7\",\"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03\",\"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047\",\"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735\",\"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f\",\"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when a position's liquidity is removed"
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"notice": "Emitted when fees are collected by the owner of a position"
							},
							"CollectProtocol(address,address,uint128,uint128)": {
								"notice": "Emitted when the collected protocol fees are withdrawn by the factory owner"
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"notice": "Emitted by the pool for any flashes of token0/token1"
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"notice": "Emitted by the pool for increases to the number of observations that can be stored"
							},
							"Initialize(uint160,int24)": {
								"notice": "Emitted exactly once by a pool when #initialize is first called on the pool"
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is minted for a given position"
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"notice": "Emitted when the protocol fee is changed by the pool"
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"notice": "Emitted by the pool for any swaps between token0 and token1"
							}
						},
						"kind": "user",
						"methods": {
							"burn(int24,int24,uint128)": {
								"notice": "Burn liquidity from the sender and account tokens owed for the liquidity to the position"
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"notice": "Collects tokens owed to a position"
							},
							"collectProtocol(address,uint128,uint128)": {
								"notice": "Collect the protocol fee accrued to the pool"
							},
							"factory()": {
								"notice": "The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface"
							},
							"fee()": {
								"notice": "The pool's fee in hundredths of a bip, i.e. 1e-6"
							},
							"feeGrowthGlobal0X128()": {
								"notice": "The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"
							},
							"feeGrowthGlobal1X128()": {
								"notice": "The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"
							},
							"flash(address,uint256,uint256,bytes)": {
								"notice": "Receive token0 and/or token1 and pay it back, plus a fee, in the callback"
							},
							"increaseObservationCardinalityNext(uint16)": {
								"notice": "Increase the maximum number of price and liquidity observations that this pool will store"
							},
							"initialize(uint160)": {
								"notice": "Sets the initial price for the pool"
							},
							"liquidity()": {
								"notice": "The currently in range liquidity available to the pool"
							},
							"maxLiquidityPerTick()": {
								"notice": "The maximum amount of position liquidity that can use any tick in the range"
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"notice": "Adds liquidity for the given recipient/tickLower/tickUpper position"
							},
							"observations(uint256)": {
								"notice": "Returns data about a specific observation index"
							},
							"observe(uint32[])": {
								"notice": "Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"
							},
							"positions(bytes32)": {
								"notice": "Returns the information about a position by the position's key"
							},
							"protocolFees()": {
								"notice": "The amounts of token0 and token1 that are owed to the protocol"
							},
							"setFeeProtocol(uint8,uint8)": {
								"notice": "Set the denominator of the protocol's % share of the fees"
							},
							"slot0()": {
								"notice": "The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally."
							},
							"snapshotCumulativesInside(int24,int24)": {
								"notice": "Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"notice": "Swap token0 for token1, or token1 for token0"
							},
							"tickBitmap(int16)": {
								"notice": "Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
							},
							"tickSpacing()": {
								"notice": "The pool tick spacing"
							},
							"ticks(int24)": {
								"notice": "Look up information about a specific tick in the pool"
							},
							"token0()": {
								"notice": "The first of the two tokens of the pool, sorted by address"
							},
							"token1()": {
								"notice": "The second of the two tokens of the pool, sorted by address"
							}
						},
						"notice": "A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform to the ERC20 specification",
						"version": 1
					}
				}
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
				"IUniswapV3SwapCallback": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "int256",
									"name": "amount0Delta",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1Delta",
									"type": "int256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "uniswapV3SwapCallback",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"details": "In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.",
								"params": {
									"amount0Delta": "The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.",
									"amount1Delta": "The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.",
									"data": "Any data passed through by the caller via the IUniswapV3PoolActions#swap call"
								}
							}
						},
						"title": "Callback for IUniswapV3PoolActions#swap",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"uniswapV3SwapCallback(int256,int256,bytes)": "fa461e33"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the IUniswapV3PoolActions#swap call\"}}},\"title\":\"Callback for IUniswapV3PoolActions#swap\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\"}},\"notice\":\"Any contract that calls IUniswapV3PoolActions#swap must implement this interface\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":\"IUniswapV3SwapCallback\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://095ce0626b41318c772b3ebf19d548282607f6a8f3d6c41c13edfbd5370c8652\",\"dweb:/ipfs/QmVDZfJJ89UUCE1hMyzqpkZAtQ8jUsBgZNE5AMRG7RzRFS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"notice": "Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap."
							}
						},
						"notice": "Any contract that calls IUniswapV3PoolActions#swap must implement this interface",
						"version": 1
					}
				}
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
				"IUniswapV3PoolActions": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								}
							],
							"name": "burn",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "flash",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								}
							],
							"name": "increaseObservationCardinalityNext",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "zeroForOne",
									"type": "bool"
								},
								{
									"internalType": "int256",
									"name": "amountSpecified",
									"type": "int256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceLimitX96",
									"type": "uint160"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "swap",
							"outputs": [
								{
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"burn(int24,int24,uint128)": {
								"details": "Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect",
								"params": {
									"amount": "How much liquidity to burn",
									"tickLower": "The lower tick of the position for which to burn liquidity",
									"tickUpper": "The upper tick of the position for which to burn liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 sent to the recipient",
									"amount1": "The amount of token1 sent to the recipient"
								}
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"details": "Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.",
								"params": {
									"amount0Requested": "How much token0 should be withdrawn from the fees owed",
									"amount1Requested": "How much token1 should be withdrawn from the fees owed",
									"recipient": "The address which should receive the fees collected",
									"tickLower": "The lower tick of the position for which to collect fees",
									"tickUpper": "The upper tick of the position for which to collect fees"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"flash(address,uint256,uint256,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback",
								"params": {
									"amount0": "The amount of token0 to send",
									"amount1": "The amount of token1 to send",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address which will receive the token0 and token1 amounts"
								}
							},
							"increaseObservationCardinalityNext(uint16)": {
								"details": "This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.",
								"params": {
									"observationCardinalityNext": "The desired minimum number of observations for the pool to store"
								}
							},
							"initialize(uint160)": {
								"details": "Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value",
								"params": {
									"sqrtPriceX96": "the initial sqrt price of the pool as a Q64.96"
								}
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.",
								"params": {
									"amount": "The amount of liquidity to mint",
									"data": "Any data that should be passed through to the callback",
									"recipient": "The address for which the liquidity will be created",
									"tickLower": "The lower tick of the position in which to add liquidity",
									"tickUpper": "The upper tick of the position in which to add liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback",
									"amount1": "The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
								}
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback",
								"params": {
									"amountSpecified": "The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address to receive the output of the swap",
									"sqrtPriceLimitX96": "The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap",
									"zeroForOne": "The direction of the swap, true for token0 to token1, false for token1 to token0"
								},
								"returns": {
									"amount0": "The delta of the balance of token0 of the pool, exact when negative, minimum when positive",
									"amount1": "The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
								}
							}
						},
						"title": "Permissionless pool actions",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"burn(int24,int24,uint128)": "a34123a7",
							"collect(address,int24,int24,uint128,uint128)": "4f1eb3d8",
							"flash(address,uint256,uint256,bytes)": "490e6cbc",
							"increaseObservationCardinalityNext(uint16)": "32148f67",
							"initialize(uint160)": "f637731d",
							"mint(address,int24,int24,uint128,bytes)": "3c8a7d8d",
							"swap(address,bool,int256,uint160,bytes)": "128acb08"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(int24,int24,uint128)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"collect(address,int24,int24,uint128,uint128)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"flash(address,uint256,uint256,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback\",\"params\":{\"amount0\":\"The amount of token0 to send\",\"amount1\":\"The amount of token1 to send\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address which will receive the token0 and token1 amounts\"}},\"increaseObservationCardinalityNext(uint16)\":{\"details\":\"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.\",\"params\":{\"observationCardinalityNext\":\"The desired minimum number of observations for the pool to store\"}},\"initialize(uint160)\":{\"details\":\"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\",\"params\":{\"sqrtPriceX96\":\"the initial sqrt price of the pool as a Q64.96\"}},\"mint(address,int24,int24,uint128,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.\",\"params\":{\"amount\":\"The amount of liquidity to mint\",\"data\":\"Any data that should be passed through to the callback\",\"recipient\":\"The address for which the liquidity will be created\",\"tickLower\":\"The lower tick of the position in which to add liquidity\",\"tickUpper\":\"The upper tick of the position in which to add liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"amount1\":\"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\"}},\"swap(address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\",\"params\":{\"amountSpecified\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address to receive the output of the swap\",\"sqrtPriceLimitX96\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"zeroForOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}}},\"title\":\"Permissionless pool actions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(int24,int24,uint128)\":{\"notice\":\"Burn liquidity from the sender and account tokens owed for the liquidity to the position\"},\"collect(address,int24,int24,uint128,uint128)\":{\"notice\":\"Collects tokens owed to a position\"},\"flash(address,uint256,uint256,bytes)\":{\"notice\":\"Receive token0 and/or token1 and pay it back, plus a fee, in the callback\"},\"increaseObservationCardinalityNext(uint16)\":{\"notice\":\"Increase the maximum number of price and liquidity observations that this pool will store\"},\"initialize(uint160)\":{\"notice\":\"Sets the initial price for the pool\"},\"mint(address,int24,int24,uint128,bytes)\":{\"notice\":\"Adds liquidity for the given recipient/tickLower/tickUpper position\"},\"swap(address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0\"}},\"notice\":\"Contains pool methods that can be called by anyone\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":\"IUniswapV3PoolActions\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5\",\"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"burn(int24,int24,uint128)": {
								"notice": "Burn liquidity from the sender and account tokens owed for the liquidity to the position"
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"notice": "Collects tokens owed to a position"
							},
							"flash(address,uint256,uint256,bytes)": {
								"notice": "Receive token0 and/or token1 and pay it back, plus a fee, in the callback"
							},
							"increaseObservationCardinalityNext(uint16)": {
								"notice": "Increase the maximum number of price and liquidity observations that this pool will store"
							},
							"initialize(uint160)": {
								"notice": "Sets the initial price for the pool"
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"notice": "Adds liquidity for the given recipient/tickLower/tickUpper position"
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"notice": "Swap token0 for token1, or token1 for token0"
							}
						},
						"notice": "Contains pool methods that can be called by anyone",
						"version": 1
					}
				}
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
				"IUniswapV3PoolDerivedState": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint32[]",
									"name": "secondsAgos",
									"type": "uint32[]"
								}
							],
							"name": "observe",
							"outputs": [
								{
									"internalType": "int56[]",
									"name": "tickCumulatives",
									"type": "int56[]"
								},
								{
									"internalType": "uint160[]",
									"name": "secondsPerLiquidityCumulativeX128s",
									"type": "uint160[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								}
							],
							"name": "snapshotCumulativesInside",
							"outputs": [
								{
									"internalType": "int56",
									"name": "tickCumulativeInside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityInsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsInside",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"observe(uint32[])": {
								"details": "To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.",
								"params": {
									"secondsAgos": "From how long ago each cumulative tick and liquidity value should be returned"
								},
								"returns": {
									"secondsPerLiquidityCumulativeX128s": "Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp",
									"tickCumulatives": "Cumulative tick values as of each `secondsAgos` from the current block timestamp"
								}
							},
							"snapshotCumulativesInside(int24,int24)": {
								"details": "Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.",
								"params": {
									"tickLower": "The lower tick of the range",
									"tickUpper": "The upper tick of the range"
								},
								"returns": {
									"secondsInside": "The snapshot of seconds per liquidity for the range",
									"secondsPerLiquidityInsideX128": "The snapshot of seconds per liquidity for the range",
									"tickCumulativeInside": "The snapshot of the tick accumulator for the range"
								}
							}
						},
						"title": "Pool state that is not stored",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"observe(uint32[])": "883bdbfd",
							"snapshotCumulativesInside(int24,int24)": "a38807f2"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulativeX128s\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}},\"snapshotCumulativesInside(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"secondsInside\":\"The snapshot of seconds per liquidity for the range\",\"secondsPerLiquidityInsideX128\":\"The snapshot of seconds per liquidity for the range\",\"tickCumulativeInside\":\"The snapshot of the tick accumulator for the range\"}}},\"title\":\"Pool state that is not stored\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"snapshotCumulativesInside(int24,int24)\":{\"notice\":\"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\"}},\"notice\":\"Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":\"IUniswapV3PoolDerivedState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7\",\"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"observe(uint32[])": {
								"notice": "Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"
							},
							"snapshotCumulativesInside(int24,int24)": {
								"notice": "Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"
							}
						},
						"notice": "Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.",
						"version": 1
					}
				}
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
				"IUniswapV3PoolEvents": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Burn",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "Collect",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "CollectProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid1",
									"type": "uint256"
								}
							],
							"name": "Flash",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextOld",
									"type": "uint16"
								},
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextNew",
									"type": "uint16"
								}
							],
							"name": "IncreaseObservationCardinalityNext",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Initialize",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Mint",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0New",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1New",
									"type": "uint8"
								}
							],
							"name": "SetFeeProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Swap",
							"type": "event"
						}
					],
					"devdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"details": "Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect",
								"params": {
									"amount": "The amount of liquidity to remove",
									"amount0": "The amount of token0 withdrawn",
									"amount1": "The amount of token1 withdrawn",
									"owner": "The owner of the position for which liquidity is removed",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"details": "Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees",
								"params": {
									"amount0": "The amount of token0 fees collected",
									"amount1": "The amount of token1 fees collected",
									"owner": "The owner of the position for which fees are collected",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"CollectProtocol(address,address,uint128,uint128)": {
								"params": {
									"amount0": "The amount of token1 protocol fees that is withdrawn",
									"recipient": "The address that receives the collected protocol fees",
									"sender": "The address that collects the protocol fees"
								}
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"params": {
									"amount0": "The amount of token0 that was flashed",
									"amount1": "The amount of token1 that was flashed",
									"paid0": "The amount of token0 paid for the flash, which can exceed the amount0 plus the fee",
									"paid1": "The amount of token1 paid for the flash, which can exceed the amount1 plus the fee",
									"recipient": "The address that received the tokens from flash",
									"sender": "The address that initiated the swap call, and that received the callback"
								}
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"details": "observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.",
								"params": {
									"observationCardinalityNextNew": "The updated value of the next observation cardinality",
									"observationCardinalityNextOld": "The previous value of the next observation cardinality"
								}
							},
							"Initialize(uint160,int24)": {
								"details": "Mint/Burn/Swap cannot be emitted by the pool before Initialize",
								"params": {
									"sqrtPriceX96": "The initial sqrt price of the pool, as a Q64.96",
									"tick": "The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"
								}
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"params": {
									"amount": "The amount of liquidity minted to the position range",
									"amount0": "How much token0 was required for the minted liquidity",
									"amount1": "How much token1 was required for the minted liquidity",
									"owner": "The owner of the position and recipient of any minted liquidity",
									"sender": "The address that minted the liquidity",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"params": {
									"feeProtocol0New": "The updated value of the token0 protocol fee",
									"feeProtocol0Old": "The previous value of the token0 protocol fee",
									"feeProtocol1New": "The updated value of the token1 protocol fee",
									"feeProtocol1Old": "The previous value of the token1 protocol fee"
								}
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"params": {
									"amount0": "The delta of the token0 balance of the pool",
									"amount1": "The delta of the token1 balance of the pool",
									"liquidity": "The liquidity of the pool after the swap",
									"recipient": "The address that received the output of the swap",
									"sender": "The address that initiated the swap call, and that received the callback",
									"sqrtPriceX96": "The sqrt(price) of the pool after the swap, as a Q64.96",
									"tick": "The log base 1.0001 of price of the pool after the swap"
								}
							}
						},
						"kind": "dev",
						"methods": {},
						"title": "Events emitted by a pool",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"CollectProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0New\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1New\",\"type\":\"uint8\"}],\"name\":\"SetFeeProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"details\":\"Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\",\"params\":{\"amount\":\"The amount of liquidity to remove\",\"amount0\":\"The amount of token0 withdrawn\",\"amount1\":\"The amount of token1 withdrawn\",\"owner\":\"The owner of the position for which liquidity is removed\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"details\":\"Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\",\"params\":{\"amount0\":\"The amount of token0 fees collected\",\"amount1\":\"The amount of token1 fees collected\",\"owner\":\"The owner of the position for which fees are collected\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"CollectProtocol(address,address,uint128,uint128)\":{\"params\":{\"amount0\":\"The amount of token1 protocol fees that is withdrawn\",\"recipient\":\"The address that receives the collected protocol fees\",\"sender\":\"The address that collects the protocol fees\"}},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"amount0\":\"The amount of token0 that was flashed\",\"amount1\":\"The amount of token1 that was flashed\",\"paid0\":\"The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\",\"paid1\":\"The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\",\"recipient\":\"The address that received the tokens from flash\",\"sender\":\"The address that initiated the swap call, and that received the callback\"}},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"details\":\"observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.\",\"params\":{\"observationCardinalityNextNew\":\"The updated value of the next observation cardinality\",\"observationCardinalityNextOld\":\"The previous value of the next observation cardinality\"}},\"Initialize(uint160,int24)\":{\"details\":\"Mint/Burn/Swap cannot be emitted by the pool before Initialize\",\"params\":{\"sqrtPriceX96\":\"The initial sqrt price of the pool, as a Q64.96\",\"tick\":\"The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\"}},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of liquidity minted to the position range\",\"amount0\":\"How much token0 was required for the minted liquidity\",\"amount1\":\"How much token1 was required for the minted liquidity\",\"owner\":\"The owner of the position and recipient of any minted liquidity\",\"sender\":\"The address that minted the liquidity\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"params\":{\"feeProtocol0New\":\"The updated value of the token0 protocol fee\",\"feeProtocol0Old\":\"The previous value of the token0 protocol fee\",\"feeProtocol1New\":\"The updated value of the token1 protocol fee\",\"feeProtocol1Old\":\"The previous value of the token1 protocol fee\"}},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"params\":{\"amount0\":\"The delta of the token0 balance of the pool\",\"amount1\":\"The delta of the token1 balance of the pool\",\"liquidity\":\"The liquidity of the pool after the swap\",\"recipient\":\"The address that received the output of the swap\",\"sender\":\"The address that initiated the swap call, and that received the callback\",\"sqrtPriceX96\":\"The sqrt(price) of the pool after the swap, as a Q64.96\",\"tick\":\"The log base 1.0001 of price of the pool after the swap\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"Events emitted by a pool\",\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when a position's liquidity is removed\"},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"notice\":\"Emitted when fees are collected by the owner of a position\"},\"CollectProtocol(address,address,uint128,uint128)\":{\"notice\":\"Emitted when the collected protocol fees are withdrawn by the factory owner\"},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted by the pool for any flashes of token0/token1\"},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"notice\":\"Emitted by the pool for increases to the number of observations that can be stored\"},\"Initialize(uint160,int24)\":{\"notice\":\"Emitted exactly once by a pool when #initialize is first called on the pool\"},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is minted for a given position\"},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"notice\":\"Emitted when the protocol fee is changed by the pool\"},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"notice\":\"Emitted by the pool for any swaps between token0 and token1\"}},\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains all events emitted by the pool\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":\"IUniswapV3PoolEvents\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03\",\"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when a position's liquidity is removed"
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"notice": "Emitted when fees are collected by the owner of a position"
							},
							"CollectProtocol(address,address,uint128,uint128)": {
								"notice": "Emitted when the collected protocol fees are withdrawn by the factory owner"
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"notice": "Emitted by the pool for any flashes of token0/token1"
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"notice": "Emitted by the pool for increases to the number of observations that can be stored"
							},
							"Initialize(uint160,int24)": {
								"notice": "Emitted exactly once by a pool when #initialize is first called on the pool"
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is minted for a given position"
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"notice": "Emitted when the protocol fee is changed by the pool"
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"notice": "Emitted by the pool for any swaps between token0 and token1"
							}
						},
						"kind": "user",
						"methods": {},
						"notice": "Contains all events emitted by the pool",
						"version": 1
					}
				}
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
				"IUniswapV3PoolImmutables": {
					"abi": [
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "fee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "maxLiquidityPerTick",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tickSpacing",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token0",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token1",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"factory()": {
								"returns": {
									"_0": "The contract address"
								}
							},
							"fee()": {
								"returns": {
									"_0": "The fee"
								}
							},
							"maxLiquidityPerTick()": {
								"details": "This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool",
								"returns": {
									"_0": "The max amount of liquidity per tick"
								}
							},
							"tickSpacing()": {
								"details": "Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.",
								"returns": {
									"_0": "The tick spacing"
								}
							},
							"token0()": {
								"returns": {
									"_0": "The token contract address"
								}
							},
							"token1()": {
								"returns": {
									"_0": "The token contract address"
								}
							}
						},
						"title": "Pool state that never changes",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"factory()": "c45a0155",
							"fee()": "ddca3f43",
							"maxLiquidityPerTick()": "70cf754a",
							"tickSpacing()": "d0c93a7c",
							"token0()": "0dfe1681",
							"token1()": "d21220a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"fee()\":{\"returns\":{\"_0\":\"The fee\"}},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"title\":\"Pool state that never changes\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\"},\"fee()\":{\"notice\":\"The pool's fee in hundredths of a bip, i.e. 1e-6\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"notice\":\"These parameters are fixed for a pool forever, i.e., the methods will always return the same values\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":\"IUniswapV3PoolImmutables\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047\",\"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"factory()": {
								"notice": "The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface"
							},
							"fee()": {
								"notice": "The pool's fee in hundredths of a bip, i.e. 1e-6"
							},
							"maxLiquidityPerTick()": {
								"notice": "The maximum amount of position liquidity that can use any tick in the range"
							},
							"tickSpacing()": {
								"notice": "The pool tick spacing"
							},
							"token0()": {
								"notice": "The first of the two tokens of the pool, sorted by address"
							},
							"token1()": {
								"notice": "The second of the two tokens of the pool, sorted by address"
							}
						},
						"notice": "These parameters are fixed for a pool forever, i.e., the methods will always return the same values",
						"version": 1
					}
				}
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
				"IUniswapV3PoolOwnerActions": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collectProtocol",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint8",
									"name": "feeProtocol0",
									"type": "uint8"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol1",
									"type": "uint8"
								}
							],
							"name": "setFeeProtocol",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"collectProtocol(address,uint128,uint128)": {
								"params": {
									"amount0Requested": "The maximum amount of token0 to send, can be 0 to collect fees in only token1",
									"amount1Requested": "The maximum amount of token1 to send, can be 0 to collect fees in only token0",
									"recipient": "The address to which collected protocol fees should be sent"
								},
								"returns": {
									"amount0": "The protocol fee collected in token0",
									"amount1": "The protocol fee collected in token1"
								}
							},
							"setFeeProtocol(uint8,uint8)": {
								"params": {
									"feeProtocol0": "new protocol fee for token0 of the pool",
									"feeProtocol1": "new protocol fee for token1 of the pool"
								}
							}
						},
						"title": "Permissioned pool actions",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"collectProtocol(address,uint128,uint128)": "85b66729",
							"setFeeProtocol(uint8,uint8)": "8206a4d1"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collectProtocol\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feeProtocol0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol1\",\"type\":\"uint8\"}],\"name\":\"setFeeProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"collectProtocol(address,uint128,uint128)\":{\"params\":{\"amount0Requested\":\"The maximum amount of token0 to send, can be 0 to collect fees in only token1\",\"amount1Requested\":\"The maximum amount of token1 to send, can be 0 to collect fees in only token0\",\"recipient\":\"The address to which collected protocol fees should be sent\"},\"returns\":{\"amount0\":\"The protocol fee collected in token0\",\"amount1\":\"The protocol fee collected in token1\"}},\"setFeeProtocol(uint8,uint8)\":{\"params\":{\"feeProtocol0\":\"new protocol fee for token0 of the pool\",\"feeProtocol1\":\"new protocol fee for token1 of the pool\"}}},\"title\":\"Permissioned pool actions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"collectProtocol(address,uint128,uint128)\":{\"notice\":\"Collect the protocol fee accrued to the pool\"},\"setFeeProtocol(uint8,uint8)\":{\"notice\":\"Set the denominator of the protocol's % share of the fees\"}},\"notice\":\"Contains pool methods that may only be called by the factory owner\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":\"IUniswapV3PoolOwnerActions\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735\",\"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"collectProtocol(address,uint128,uint128)": {
								"notice": "Collect the protocol fee accrued to the pool"
							},
							"setFeeProtocol(uint8,uint8)": {
								"notice": "Set the denominator of the protocol's % share of the fees"
							}
						},
						"notice": "Contains pool methods that may only be called by the factory owner",
						"version": 1
					}
				}
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
				"IUniswapV3PoolState": {
					"abi": [
						{
							"inputs": [],
							"name": "feeGrowthGlobal0X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal1X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "liquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "observations",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "blockTimestamp",
									"type": "uint32"
								},
								{
									"internalType": "int56",
									"name": "tickCumulative",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityCumulativeX128",
									"type": "uint160"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "_liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside0LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside1LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "protocolFees",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "token0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "token1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "slot0",
							"outputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								},
								{
									"internalType": "uint16",
									"name": "observationIndex",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinality",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol",
									"type": "uint8"
								},
								{
									"internalType": "bool",
									"name": "unlocked",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int16",
									"name": "wordPosition",
									"type": "int16"
								}
							],
							"name": "tickBitmap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "ticks",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "liquidityGross",
									"type": "uint128"
								},
								{
									"internalType": "int128",
									"name": "liquidityNet",
									"type": "int128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside0X128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside1X128",
									"type": "uint256"
								},
								{
									"internalType": "int56",
									"name": "tickCumulativeOutside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityOutsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsOutside",
									"type": "uint32"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"feeGrowthGlobal0X128()": {
								"details": "This value can overflow the uint256"
							},
							"feeGrowthGlobal1X128()": {
								"details": "This value can overflow the uint256"
							},
							"liquidity()": {
								"details": "This value has no relationship to the total liquidity across all ticks"
							},
							"observations(uint256)": {
								"details": "You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.",
								"params": {
									"index": "The element of the observations array to fetch"
								},
								"returns": {
									"blockTimestamp": "The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use"
								}
							},
							"positions(bytes32)": {
								"params": {
									"key": "The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper"
								},
								"returns": {
									"_liquidity": "The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
								}
							},
							"protocolFees()": {
								"details": "Protocol fees will never exceed uint128 max in either token"
							},
							"slot0()": {
								"returns": {
									"sqrtPriceX96": "The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy"
								}
							},
							"ticks(int24)": {
								"params": {
									"tick": "The tick to look up"
								},
								"returns": {
									"liquidityGross": "the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position."
								}
							}
						},
						"title": "Pool state that can change",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"feeGrowthGlobal0X128()": "f3058399",
							"feeGrowthGlobal1X128()": "46141319",
							"liquidity()": "1a686502",
							"observations(uint256)": "252c09d7",
							"positions(bytes32)": "514ea4bf",
							"protocolFees()": "1ad8b03b",
							"slot0()": "3850c7bd",
							"tickBitmap(int16)": "5339c296",
							"ticks(int24)": "f30dba93"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"feeGrowthGlobal0X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal1X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"token0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"token1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"feeGrowthGlobal0X128()\":{\"details\":\"This value can overflow the uint256\"},\"feeGrowthGlobal1X128()\":{\"details\":\"This value can overflow the uint256\"},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticks\"},\"observations(uint256)\":{\"details\":\"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.\",\"params\":{\"index\":\"The element of the observations array to fetch\"},\"returns\":{\"blockTimestamp\":\"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use\"}},\"positions(bytes32)\":{\"params\":{\"key\":\"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\"},\"returns\":{\"_liquidity\":\"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\"}},\"protocolFees()\":{\"details\":\"Protocol fees will never exceed uint128 max in either token\"},\"slot0()\":{\"returns\":{\"sqrtPriceX96\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy\"}},\"ticks(int24)\":{\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"liquidityGross\":\"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\"}}},\"title\":\"Pool state that can change\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"feeGrowthGlobal0X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"feeGrowthGlobal1X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"observations(uint256)\":{\"notice\":\"Returns data about a specific observation index\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"protocolFees()\":{\"notice\":\"The amounts of token0 and token1 that are owed to the protocol\"},\"slot0()\":{\"notice\":\"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.\"},\"tickBitmap(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickBitmap for more information\"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"}},\"notice\":\"These methods compose the pool's state, and can change with any frequency including multiple times per transaction\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":\"IUniswapV3PoolState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f\",\"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"feeGrowthGlobal0X128()": {
								"notice": "The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"
							},
							"feeGrowthGlobal1X128()": {
								"notice": "The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"
							},
							"liquidity()": {
								"notice": "The currently in range liquidity available to the pool"
							},
							"observations(uint256)": {
								"notice": "Returns data about a specific observation index"
							},
							"positions(bytes32)": {
								"notice": "Returns the information about a position by the position's key"
							},
							"protocolFees()": {
								"notice": "The amounts of token0 and token1 that are owed to the protocol"
							},
							"slot0()": {
								"notice": "The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally."
							},
							"tickBitmap(int16)": {
								"notice": "Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
							},
							"ticks(int24)": {
								"notice": "Look up information about a specific tick in the pool"
							}
						},
						"notice": "These methods compose the pool's state, and can change with any frequency including multiple times per transaction",
						"version": 1
					}
				}
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/SafeCast.sol": {
				"SafeCast": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Safe casting methods",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/SafeCast.sol\":165:1047  library SafeCast {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/SafeCast.sol\":165:1047  library SafeCast {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122073d5f2b94e4c352abd46019a798fe01b76a9deedc64eaab543860374326baddc64736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122073d5f2b94e4c352abd46019a798fe01b76a9deedc64eaab543860374326baddc64736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH20 0xD5F2B94E4C352ABD46019A798FE01B76A9DEEDC6 0x4E 0xAA 0xB5 NUMBER DUP7 SUB PUSH21 0x326BADDC64736F6C63430007060033000000000000 ",
							"sourceMap": "165:882:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122073d5f2b94e4c352abd46019a798fe01b76a9deedc64eaab543860374326baddc64736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH20 0xD5F2B94E4C352ABD46019A798FE01B76A9DEEDC6 0x4E 0xAA 0xB5 NUMBER DUP7 SUB PUSH21 0x326BADDC64736F6C63430007060033000000000000 ",
							"sourceMap": "165:882:8:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"toInt128(int256)": "infinite",
								"toInt256(uint256)": "infinite",
								"toUint160(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 165,
									"end": 1047,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "PUSH",
									"source": 8,
									"value": "B"
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "BYTE",
									"source": 8
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "EQ",
									"source": 8
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "INVALID",
									"source": 8
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "ADDRESS",
									"source": 8
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "MSTORE8",
									"source": 8
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 165,
									"end": 1047,
									"name": "RETURN",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122073d5f2b94e4c352abd46019a798fe01b76a9deedc64eaab543860374326baddc64736f6c63430007060033",
									".code": [
										{
											"begin": 165,
											"end": 1047,
											"name": "PUSHDEPLOYADDRESS",
											"source": 8
										},
										{
											"begin": 165,
											"end": 1047,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 165,
											"end": 1047,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 165,
											"end": 1047,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 165,
											"end": 1047,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 165,
											"end": 1047,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 165,
											"end": 1047,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 165,
											"end": 1047,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 165,
											"end": 1047,
											"name": "REVERT",
											"source": 8
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Safe casting methods\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains methods for safely casting between types\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/SafeCast.sol\":\"SafeCast\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/SafeCast.sol\":{\"keccak256\":\"0x4c12bf820c0b011f5490a209960ca34dd8af34660ef9e01de0438393d15e3fd8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://fed11489e218e55d087d42b4f350a30e10cd2aedec8f432bd3cc712f648d5869\",\"dweb:/ipfs/QmWfRnRxyXwHUDcTQPazxYYk5jxErGeQqdvnYtyg5nBPbU\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Contains methods for safely casting between types",
						"version": 1
					}
				}
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/TickMath.sol": {
				"TickMath": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"MAX_SQRT_RATIO": {
								"details": "The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)"
							},
							"MAX_TICK": {
								"details": "The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128"
							},
							"MIN_SQRT_RATIO": {
								"details": "The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)"
							},
							"MIN_TICK": {
								"details": "The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128"
							}
						},
						"title": "Math library for computing sqrt prices from ticks and vice versa",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/TickMath.sol\":306:8637  library TickMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/TickMath.sol\":306:8637  library TickMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220d620b0b145a03ddf9b9201d2bd8e1e9d22df87691c5475e6c9963760a2ccee4b64736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d620b0b145a03ddf9b9201d2bd8e1e9d22df87691c5475e6c9963760a2ccee4b64736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD6 KECCAK256 0xB0 0xB1 GASLIMIT LOG0 RETURNDATASIZE 0xDF SWAP12 SWAP3 ADD 0xD2 0xBD DUP15 0x1E SWAP14 0x22 0xDF DUP8 PUSH10 0x1C5475E6C9963760A2CC 0xEE 0x4B PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "306:8331:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d620b0b145a03ddf9b9201d2bd8e1e9d22df87691c5475e6c9963760a2ccee4b64736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD6 KECCAK256 0xB0 0xB1 GASLIMIT LOG0 RETURNDATASIZE 0xDF SWAP12 SWAP3 ADD 0xD2 0xBD DUP15 0x1E SWAP14 0x22 0xDF DUP8 PUSH10 0x1C5475E6C9963760A2CC 0xEE 0x4B PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "306:8331:9:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"getSqrtRatioAtTick(int24)": "infinite",
								"getTickAtSqrtRatio(uint160)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 306,
									"end": 8637,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "PUSH",
									"source": 9,
									"value": "B"
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "BYTE",
									"source": 9
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "INVALID",
									"source": 9
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "ADDRESS",
									"source": 9
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "MSTORE8",
									"source": 9
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 306,
									"end": 8637,
									"name": "RETURN",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220d620b0b145a03ddf9b9201d2bd8e1e9d22df87691c5475e6c9963760a2ccee4b64736f6c63430007060033",
									".code": [
										{
											"begin": 306,
											"end": 8637,
											"name": "PUSHDEPLOYADDRESS",
											"source": 9
										},
										{
											"begin": 306,
											"end": 8637,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 306,
											"end": 8637,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 306,
											"end": 8637,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 306,
											"end": 8637,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 306,
											"end": 8637,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 306,
											"end": 8637,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 306,
											"end": 8637,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 306,
											"end": 8637,
											"name": "REVERT",
											"source": 9
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"MAX_SQRT_RATIO\":{\"details\":\"The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\"},\"MAX_TICK\":{\"details\":\"The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\"},\"MIN_SQRT_RATIO\":{\"details\":\"The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\"},\"MIN_TICK\":{\"details\":\"The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\"}},\"title\":\"Math library for computing sqrt prices from ticks and vice versa\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/TickMath.sol\":\"TickMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/TickMath.sol\":{\"keccak256\":\"0x1f864a2bf61ba05f3173eaf2e3f94c5e1da4bec0554757527b6d1ef1fe439e4e\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://5139b586df546a9d1c46804ca400b1cb9ce87236eaf212ebd64edee6747a172a\",\"dweb:/ipfs/QmVa2kcRw3VyuB6j1EVWXACKnkbQZgfXYXNi5voq3XkYG8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128",
						"version": 1
					}
				}
			},
			"contracts/base/PeripheryImmutableState.sol": {
				"PeripheryImmutableState": {
					"abi": [
						{
							"inputs": [],
							"name": "WETH9",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"WETH9": {
								"return": "Returns the address of WETH9"
							},
							"factory": {
								"return": "Returns the address of the Uniswap V3 factory"
							}
						},
						"title": "Immutable state",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"WETH9()": "4aa4a4fc",
							"factory()": "c45a0155"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"WETH9\":{\"return\":\"Returns the address of WETH9\"},\"factory\":{\"return\":\"Returns the address of the Uniswap V3 factory\"}},\"title\":\"Immutable state\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Immutable state used by periphery contracts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/PeripheryImmutableState.sol\":\"PeripheryImmutableState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/base/PeripheryImmutableState.sol\":{\"keccak256\":\"0x1d0175136fda60c5e1b6aab6dfa4a35856717413d754d0750eb75866f3f5e43f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8e19496cd2a7239e9e869bafbfb9f762691a9ab52f169b579f11d752d7df79a5\",\"dweb:/ipfs/QmTaLVPUVMGp4ZywHwpFupnz2873NPyqYs3EzbJTHpVNSA\"]},\"contracts/interfaces/IPeripheryImmutableState.sol\":{\"keccak256\":\"0x23bb9671c6188fe826d384acb88182efc75c55ee7b6e7c5792de8f26581f0390\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb0b086015acc6d97e15e71a406e5ba393d188df878c71eaeb98b6ce4c99a353\",\"dweb:/ipfs/QmWvXDAjebKmEJcvoB7S7e981zcvLvMLT11BLZZMf7D2rL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Immutable state used by periphery contracts",
						"version": 1
					}
				}
			},
			"contracts/interfaces/IPeripheryImmutableState.sol": {
				"IPeripheryImmutableState": {
					"abi": [
						{
							"inputs": [],
							"name": "WETH9",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"WETH9()": {
								"returns": {
									"_0": "Returns the address of WETH9"
								}
							},
							"factory()": {
								"returns": {
									"_0": "Returns the address of the Uniswap V3 factory"
								}
							}
						},
						"title": "Immutable state",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"WETH9()": "4aa4a4fc",
							"factory()": "c45a0155"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"WETH9()\":{\"returns\":{\"_0\":\"Returns the address of WETH9\"}},\"factory()\":{\"returns\":{\"_0\":\"Returns the address of the Uniswap V3 factory\"}}},\"title\":\"Immutable state\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Functions that return immutable state of the router\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IPeripheryImmutableState.sol\":\"IPeripheryImmutableState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IPeripheryImmutableState.sol\":{\"keccak256\":\"0x23bb9671c6188fe826d384acb88182efc75c55ee7b6e7c5792de8f26581f0390\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb0b086015acc6d97e15e71a406e5ba393d188df878c71eaeb98b6ce4c99a353\",\"dweb:/ipfs/QmWvXDAjebKmEJcvoB7S7e981zcvLvMLT11BLZZMf7D2rL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Functions that return immutable state of the router",
						"version": 1
					}
				}
			},
			"contracts/interfaces/IQuoter.sol": {
				"IQuoter": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "path",
									"type": "bytes"
								},
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"name": "quoteExactInput",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenIn",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenOut",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceLimitX96",
									"type": "uint160"
								}
							],
							"name": "quoteExactInputSingle",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "path",
									"type": "bytes"
								},
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"name": "quoteExactOutput",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenIn",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenOut",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceLimitX96",
									"type": "uint160"
								}
							],
							"name": "quoteExactOutputSingle",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "These functions are not marked view because they rely on calling non-view functions and reverting to compute the result. They are also not gas efficient and should not be called on-chain.",
						"kind": "dev",
						"methods": {
							"quoteExactInput(bytes,uint256)": {
								"params": {
									"amountIn": "The amount of the first token to swap",
									"path": "The path of the swap, i.e. each token pair and the pool fee"
								},
								"returns": {
									"amountOut": "The amount of the last token that would be received"
								}
							},
							"quoteExactInputSingle(address,address,uint24,uint256,uint160)": {
								"params": {
									"amountIn": "The desired input amount",
									"fee": "The fee of the token pool to consider for the pair",
									"sqrtPriceLimitX96": "The price limit of the pool that cannot be exceeded by the swap",
									"tokenIn": "The token being swapped in",
									"tokenOut": "The token being swapped out"
								},
								"returns": {
									"amountOut": "The amount of `tokenOut` that would be received"
								}
							},
							"quoteExactOutput(bytes,uint256)": {
								"params": {
									"amountOut": "The amount of the last token to receive",
									"path": "The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order"
								},
								"returns": {
									"amountIn": "The amount of first token required to be paid"
								}
							},
							"quoteExactOutputSingle(address,address,uint24,uint256,uint160)": {
								"params": {
									"amountOut": "The desired output amount",
									"fee": "The fee of the token pool to consider for the pair",
									"sqrtPriceLimitX96": "The price limit of the pool that cannot be exceeded by the swap",
									"tokenIn": "The token being swapped in",
									"tokenOut": "The token being swapped out"
								},
								"returns": {
									"amountIn": "The amount required as the input for the swap in order to receive `amountOut`"
								}
							}
						},
						"title": "Quoter Interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"quoteExactInput(bytes,uint256)": "cdca1753",
							"quoteExactInputSingle(address,address,uint24,uint256,uint160)": "f7729d43",
							"quoteExactOutput(bytes,uint256)": "2f80bb1d",
							"quoteExactOutputSingle(address,address,uint24,uint256,uint160)": "30d07f21"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"quoteExactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"name\":\"quoteExactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"quoteExactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"name\":\"quoteExactOutputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"These functions are not marked view because they rely on calling non-view functions and reverting to compute the result. They are also not gas efficient and should not be called on-chain.\",\"kind\":\"dev\",\"methods\":{\"quoteExactInput(bytes,uint256)\":{\"params\":{\"amountIn\":\"The amount of the first token to swap\",\"path\":\"The path of the swap, i.e. each token pair and the pool fee\"},\"returns\":{\"amountOut\":\"The amount of the last token that would be received\"}},\"quoteExactInputSingle(address,address,uint24,uint256,uint160)\":{\"params\":{\"amountIn\":\"The desired input amount\",\"fee\":\"The fee of the token pool to consider for the pair\",\"sqrtPriceLimitX96\":\"The price limit of the pool that cannot be exceeded by the swap\",\"tokenIn\":\"The token being swapped in\",\"tokenOut\":\"The token being swapped out\"},\"returns\":{\"amountOut\":\"The amount of `tokenOut` that would be received\"}},\"quoteExactOutput(bytes,uint256)\":{\"params\":{\"amountOut\":\"The amount of the last token to receive\",\"path\":\"The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\"},\"returns\":{\"amountIn\":\"The amount of first token required to be paid\"}},\"quoteExactOutputSingle(address,address,uint24,uint256,uint160)\":{\"params\":{\"amountOut\":\"The desired output amount\",\"fee\":\"The fee of the token pool to consider for the pair\",\"sqrtPriceLimitX96\":\"The price limit of the pool that cannot be exceeded by the swap\",\"tokenIn\":\"The token being swapped in\",\"tokenOut\":\"The token being swapped out\"},\"returns\":{\"amountIn\":\"The amount required as the input for the swap in order to receive `amountOut`\"}}},\"title\":\"Quoter Interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"quoteExactInput(bytes,uint256)\":{\"notice\":\"Returns the amount out received for a given exact input swap without executing the swap\"},\"quoteExactInputSingle(address,address,uint24,uint256,uint160)\":{\"notice\":\"Returns the amount out received for a given exact input but for a swap of a single pool\"},\"quoteExactOutput(bytes,uint256)\":{\"notice\":\"Returns the amount in required for a given exact output swap without executing the swap\"},\"quoteExactOutputSingle(address,address,uint24,uint256,uint160)\":{\"notice\":\"Returns the amount in required to receive the given exact output amount but for a swap of a single pool\"}},\"notice\":\"Supports quoting the calculated amounts from exact input or exact output swaps\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IQuoter.sol\":\"IQuoter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IQuoter.sol\":{\"keccak256\":\"0x216c7b70ca8811513d2c78eb82b25ee6ab89ad59192fb8ae2cbf8c92e5db1adf\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://0346d5f05f11c49ff3abbb00e9e422500d3922cd934b5e29f1dbd49cf778ac1d\",\"dweb:/ipfs/Qmd7KvVPLNFzQJ2vThN2mJYbDDbqWtmvnHY5QdGB9Qbsbu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"quoteExactInput(bytes,uint256)": {
								"notice": "Returns the amount out received for a given exact input swap without executing the swap"
							},
							"quoteExactInputSingle(address,address,uint24,uint256,uint160)": {
								"notice": "Returns the amount out received for a given exact input but for a swap of a single pool"
							},
							"quoteExactOutput(bytes,uint256)": {
								"notice": "Returns the amount in required for a given exact output swap without executing the swap"
							},
							"quoteExactOutputSingle(address,address,uint24,uint256,uint160)": {
								"notice": "Returns the amount in required to receive the given exact output amount but for a swap of a single pool"
							}
						},
						"notice": "Supports quoting the calculated amounts from exact input or exact output swaps",
						"version": 1
					}
				}
			},
			"contracts/lens/Quoter.sol": {
				"Quoter": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_factory",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_WETH9",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "WETH9",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "path",
									"type": "bytes"
								},
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"name": "quoteExactInput",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenIn",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenOut",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceLimitX96",
									"type": "uint160"
								}
							],
							"name": "quoteExactInputSingle",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "path",
									"type": "bytes"
								},
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"name": "quoteExactOutput",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenIn",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenOut",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceLimitX96",
									"type": "uint160"
								}
							],
							"name": "quoteExactOutputSingle",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int256",
									"name": "amount0Delta",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1Delta",
									"type": "int256"
								},
								{
									"internalType": "bytes",
									"name": "path",
									"type": "bytes"
								}
							],
							"name": "uniswapV3SwapCallback",
							"outputs": [],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "These functions are not gas efficient and should _not_ be called on chain. Instead, optimistically execute the swap and check the amounts in the callback.",
						"kind": "dev",
						"methods": {
							"quoteExactInput(bytes,uint256)": {
								"params": {
									"amountIn": "The amount of the first token to swap",
									"path": "The path of the swap, i.e. each token pair and the pool fee"
								},
								"returns": {
									"amountOut": "The amount of the last token that would be received"
								}
							},
							"quoteExactInputSingle(address,address,uint24,uint256,uint160)": {
								"params": {
									"amountIn": "The desired input amount",
									"fee": "The fee of the token pool to consider for the pair",
									"sqrtPriceLimitX96": "The price limit of the pool that cannot be exceeded by the swap",
									"tokenIn": "The token being swapped in",
									"tokenOut": "The token being swapped out"
								},
								"returns": {
									"amountOut": "The amount of `tokenOut` that would be received"
								}
							},
							"quoteExactOutput(bytes,uint256)": {
								"params": {
									"amountOut": "The amount of the last token to receive",
									"path": "The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order"
								},
								"returns": {
									"amountIn": "The amount of first token required to be paid"
								}
							},
							"quoteExactOutputSingle(address,address,uint24,uint256,uint160)": {
								"params": {
									"amountOut": "The desired output amount",
									"fee": "The fee of the token pool to consider for the pair",
									"sqrtPriceLimitX96": "The price limit of the pool that cannot be exceeded by the swap",
									"tokenIn": "The token being swapped in",
									"tokenOut": "The token being swapped out"
								},
								"returns": {
									"amountIn": "The amount required as the input for the swap in order to receive `amountOut`"
								}
							},
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"details": "In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.",
								"params": {
									"amount0Delta": "The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.",
									"amount1Delta": "The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.",
									"data": "Any data passed through by the caller via the IUniswapV3PoolActions#swap call"
								}
							}
						},
						"stateVariables": {
							"amountOutCached": {
								"details": "Transient storage variable used to check a safety condition in exact output swaps."
							}
						},
						"title": "Provides quotes for swaps",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/lens/Quoter.sol\":873:6744  contract Quoter is IQuoter, IUniswapV3SwapCallback, PeripheryImmutableState {\r... */\n  mstore(0x40, 0xc0)\n    /* \"contracts/lens/Quoter.sol\":1155:1245  constructor(address _factory, address _WETH9) PeripheryImmutableState(_factory, _WETH9) {} */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  0x40\n  dup2\n  lt\n  iszero\n  tag_2\n  jumpi\n  0x00\n  dup1\n  revert\ntag_2:\n  pop\n  dup1\n  mload\n  0x20\n  swap1\n  swap2\n  add\n  mload\n  not(sub(shl(0x60, 0x01), 0x01))\n    /* \"contracts/base/PeripheryImmutableState.sol\":536:554  factory = _factory */\n  0x60\n  swap3\n  dup4\n  shl\n  dup2\n  and\n  0x80\n  mstore\n    /* \"contracts/base/PeripheryImmutableState.sol\":565:579  WETH9 = _WETH9 */\n  swap2\n  shl\n  and\n  0xa0\n  mstore\n    /* \"contracts/lens/Quoter.sol\":873:6744  contract Quoter is IQuoter, IUniswapV3SwapCallback, PeripheryImmutableState {\r... */\n  shr(0x60, mload(0x80))\n  shr(0x60, mload(0xa0))\n  codecopy(0x00, dataOffset(sub_0), dataSize(sub_0))\n  assignImmutable(\"0xb37328d1c6f33416cc50b9168b9894b89e743919cc7edc16d1bdc20660330b9f\")\n  assignImmutable(\"0x912cdad641b4408bd64eb5a331e5fe393f33f2296e0c7fad54e613ac760cfb47\")\n  return(0x00, dataSize(sub_0))\nstop\n\nsub_0: assembly {\n        /* \"contracts/lens/Quoter.sol\":873:6744  contract Quoter is IQuoter, IUniswapV3SwapCallback, PeripheryImmutableState {\r... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0xc45a0155\n      gt\n      tag_10\n      jumpi\n      dup1\n      0xc45a0155\n      eq\n      tag_6\n      jumpi\n      dup1\n      0xcdca1753\n      eq\n      tag_7\n      jumpi\n      dup1\n      0xf7729d43\n      eq\n      tag_8\n      jumpi\n      dup1\n      0xfa461e33\n      eq\n      tag_9\n      jumpi\n      jump(tag_2)\n    tag_10:\n      dup1\n      0x2f80bb1d\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x30d07f21\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x4aa4a4fc\n      eq\n      tag_5\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/lens/Quoter.sol\":6060:6741  function quoteExactOutput(bytes memory path, uint256 amountOut) external override returns (uint256 amountIn) {\r... */\n    tag_3:\n      tag_11\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x40\n      dup2\n      lt\n      iszero\n      tag_12\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_12:\n      dup2\n      add\n      swap1\n      0x20\n      dup2\n      add\n      dup2\n      calldataload\n      shl(0x20, 0x01)\n      dup2\n      gt\n      iszero\n      tag_13\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_13:\n      dup3\n      add\n      dup4\n      0x20\n      dup3\n      add\n      gt\n      iszero\n      tag_14\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_14:\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap2\n      dup5\n      0x01\n      dup4\n      mul\n      dup5\n      add\n      gt\n      shl(0x20, 0x01)\n      dup4\n      gt\n      or\n      iszero\n      tag_15\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_15:\n      swap2\n      swap1\n      dup1\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap4\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup4\n      dup1\n      dup3\n      dup5\n      calldatacopy\n      0x00\n      swap3\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      pop\n      swap3\n      swap6\n      pop\n      pop\n      swap2\n      calldataload\n      swap3\n      pop\n      tag_16\n      swap2\n      pop\n      pop\n      jump\t// in\n    tag_11:\n      0x40\n      dup1\n      mload\n      swap2\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"contracts/lens/Quoter.sol\":4924:6023  function quoteExactOutputSingle(\r... */\n    tag_4:\n      tag_11\n      0x04\n      dup1\n      calldatasize\n      sub\n      0xa0\n      dup2\n      lt\n      iszero\n      tag_18\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_18:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n      dup2\n      calldataload\n      dup2\n      and\n      swap2\n      0x20\n      dup2\n      add\n      calldataload\n      dup3\n      and\n      swap2\n      0xffffff\n      0x40\n      dup4\n      add\n      calldataload\n      and\n      swap2\n      0x60\n      dup2\n      add\n      calldataload\n      swap2\n      0x80\n      swap1\n      swap2\n      add\n      calldataload\n      and\n      tag_19\n      jump\t// in\n        /* \"contracts/base/PeripheryImmutableState.sol\":431:470  address public immutable override WETH9 */\n    tag_5:\n      tag_20\n      tag_21\n      jump\t// in\n    tag_20:\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap3\n      and\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"contracts/base/PeripheryImmutableState.sol\":337:378  address public immutable override factory */\n    tag_6:\n      tag_20\n      tag_23\n      jump\t// in\n        /* \"contracts/lens/Quoter.sol\":4211:4887  function quoteExactInput(bytes memory path, uint256 amountIn) external override returns (uint256 amountOut) {\r... */\n    tag_7:\n      tag_11\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x40\n      dup2\n      lt\n      iszero\n      tag_25\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_25:\n      dup2\n      add\n      swap1\n      0x20\n      dup2\n      add\n      dup2\n      calldataload\n      shl(0x20, 0x01)\n      dup2\n      gt\n      iszero\n      tag_26\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_26:\n      dup3\n      add\n      dup4\n      0x20\n      dup3\n      add\n      gt\n      iszero\n      tag_27\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_27:\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap2\n      dup5\n      0x01\n      dup4\n      mul\n      dup5\n      add\n      gt\n      shl(0x20, 0x01)\n      dup4\n      gt\n      or\n      iszero\n      tag_28\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_28:\n      swap2\n      swap1\n      dup1\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap4\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup4\n      dup1\n      dup3\n      dup5\n      calldatacopy\n      0x00\n      swap3\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      pop\n      swap3\n      swap6\n      pop\n      pop\n      swap2\n      calldataload\n      swap3\n      pop\n      tag_29\n      swap2\n      pop\n      pop\n      jump\t// in\n        /* \"contracts/lens/Quoter.sol\":3334:4174  function quoteExactInputSingle(\r... */\n    tag_8:\n      tag_11\n      0x04\n      dup1\n      calldatasize\n      sub\n      0xa0\n      dup2\n      lt\n      iszero\n      tag_31\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_31:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n      dup2\n      calldataload\n      dup2\n      and\n      swap2\n      0x20\n      dup2\n      add\n      calldataload\n      dup3\n      and\n      swap2\n      0xffffff\n      0x40\n      dup4\n      add\n      calldataload\n      and\n      swap2\n      0x60\n      dup2\n      add\n      calldataload\n      swap2\n      0x80\n      swap1\n      swap2\n      add\n      calldataload\n      and\n      tag_32\n      jump\t// in\n        /* \"contracts/lens/Quoter.sol\":1560:2833  function uniswapV3SwapCallback(\r... */\n    tag_9:\n      tag_33\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x60\n      dup2\n      lt\n      iszero\n      tag_34\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_34:\n      dup2\n      calldataload\n      swap2\n      0x20\n      dup2\n      add\n      calldataload\n      swap2\n      dup2\n      add\n      swap1\n      0x60\n      dup2\n      add\n      0x40\n      dup3\n      add\n      calldataload\n      shl(0x20, 0x01)\n      dup2\n      gt\n      iszero\n      tag_35\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_35:\n      dup3\n      add\n      dup4\n      0x20\n      dup3\n      add\n      gt\n      iszero\n      tag_36\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_36:\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap2\n      dup5\n      0x01\n      dup4\n      mul\n      dup5\n      add\n      gt\n      shl(0x20, 0x01)\n      dup4\n      gt\n      or\n      iszero\n      tag_37\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_37:\n      swap2\n      swap1\n      dup1\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap4\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup4\n      dup1\n      dup3\n      dup5\n      calldatacopy\n      0x00\n      swap3\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      pop\n      swap3\n      swap6\n      pop\n      tag_38\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// in\n    tag_33:\n      stop\n        /* \"contracts/lens/Quoter.sol\":6060:6741  function quoteExactOutput(bytes memory path, uint256 amountOut) external override returns (uint256 amountIn) {\r... */\n    tag_16:\n        /* \"contracts/lens/Quoter.sol\":6151:6167  uint256 amountIn */\n      0x00\n        /* \"contracts/lens/Quoter.sol\":6180:6734  while (true) {\r... */\n    tag_40:\n        /* \"contracts/lens/Quoter.sol\":6208:6229  bool hasMultiplePools */\n      0x00\n        /* \"contracts/lens/Quoter.sol\":6232:6255  path.hasMultiplePools() */\n      tag_42\n        /* \"contracts/lens/Quoter.sol\":6232:6236  path */\n      dup5\n        /* \"contracts/lens/Quoter.sol\":6232:6253  path.hasMultiplePools */\n      tag_43\n        /* \"contracts/lens/Quoter.sol\":6232:6255  path.hasMultiplePools() */\n      jump\t// in\n    tag_42:\n        /* \"contracts/lens/Quoter.sol\":6208:6255  bool hasMultiplePools = path.hasMultiplePools() */\n      swap1\n      pop\n        /* \"contracts/lens/Quoter.sol\":6273:6289  address tokenOut */\n      0x00\n        /* \"contracts/lens/Quoter.sol\":6291:6306  address tokenIn */\n      dup1\n        /* \"contracts/lens/Quoter.sol\":6308:6318  uint24 fee */\n      0x00\n        /* \"contracts/lens/Quoter.sol\":6322:6344  path.decodeFirstPool() */\n      tag_44\n        /* \"contracts/lens/Quoter.sol\":6322:6326  path */\n      dup8\n        /* \"contracts/lens/Quoter.sol\":6322:6342  path.decodeFirstPool */\n      tag_45\n        /* \"contracts/lens/Quoter.sol\":6322:6344  path.decodeFirstPool() */\n      jump\t// in\n    tag_44:\n        /* \"contracts/lens/Quoter.sol\":6272:6344  (address tokenOut, address tokenIn, uint24 fee) = path.decodeFirstPool() */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      pop\n        /* \"contracts/lens/Quoter.sol\":6453:6513  quoteExactOutputSingle(tokenIn, tokenOut, fee, amountOut, 0) */\n      tag_46\n        /* \"contracts/lens/Quoter.sol\":6476:6483  tokenIn */\n      dup3\n        /* \"contracts/lens/Quoter.sol\":6485:6493  tokenOut */\n      dup5\n        /* \"contracts/lens/Quoter.sol\":6495:6498  fee */\n      dup4\n        /* \"contracts/lens/Quoter.sol\":6500:6509  amountOut */\n      dup10\n        /* \"contracts/lens/Quoter.sol\":6511:6512  0 */\n      0x00\n        /* \"contracts/lens/Quoter.sol\":6453:6475  quoteExactOutputSingle */\n      tag_19\n        /* \"contracts/lens/Quoter.sol\":6453:6513  quoteExactOutputSingle(tokenIn, tokenOut, fee, amountOut, 0) */\n      jump\t// in\n    tag_46:\n        /* \"contracts/lens/Quoter.sol\":6441:6513  amountOut = quoteExactOutputSingle(tokenIn, tokenOut, fee, amountOut, 0) */\n      swap6\n      pop\n        /* \"contracts/lens/Quoter.sol\":6590:6606  hasMultiplePools */\n      dup4\n        /* \"contracts/lens/Quoter.sol\":6586:6723  if (hasMultiplePools) {\r... */\n      iszero\n      tag_47\n      jumpi\n        /* \"contracts/lens/Quoter.sol\":6634:6650  path.skipToken() */\n      tag_48\n        /* \"contracts/lens/Quoter.sol\":6634:6638  path */\n      dup8\n        /* \"contracts/lens/Quoter.sol\":6634:6648  path.skipToken */\n      tag_49\n        /* \"contracts/lens/Quoter.sol\":6634:6650  path.skipToken() */\n      jump\t// in\n    tag_48:\n        /* \"contracts/lens/Quoter.sol\":6627:6650  path = path.skipToken() */\n      swap7\n      pop\n        /* \"contracts/lens/Quoter.sol\":6586:6723  if (hasMultiplePools) {\r... */\n      jump(tag_50)\n    tag_47:\n        /* \"contracts/lens/Quoter.sol\":6698:6707  amountOut */\n      dup6\n        /* \"contracts/lens/Quoter.sol\":6691:6707  return amountOut */\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump(tag_41)\n        /* \"contracts/lens/Quoter.sol\":6586:6723  if (hasMultiplePools) {\r... */\n    tag_50:\n        /* \"contracts/lens/Quoter.sol\":6180:6734  while (true) {\r... */\n      pop\n      pop\n      pop\n      pop\n      jump(tag_40)\n    tag_41:\n        /* \"contracts/lens/Quoter.sol\":6060:6741  function quoteExactOutput(bytes memory path, uint256 amountOut) external override returns (uint256 amountIn) {\r... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/lens/Quoter.sol\":4924:6023  function quoteExactOutputSingle(\r... */\n    tag_19:\n        /* \"contracts/lens/Quoter.sol\":5126:5142  uint256 amountIn */\n      0x00\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/lens/Quoter.sol\":5173:5191  tokenIn < tokenOut */\n      dup1\n      dup7\n      and\n      dup8\n      dup3\n      and\n      lt\n      swap1\n        /* \"contracts/lens/Quoter.sol\":5318:5340  sqrtPriceLimitX96 == 0 */\n      dup4\n      and\n        /* \"contracts/lens/Quoter.sol\":5314:5369  if (sqrtPriceLimitX96 == 0) amountOutCached = amountOut */\n      tag_52\n      jumpi\n        /* \"contracts/lens/Quoter.sol\":5342:5357  amountOutCached */\n      0x00\n        /* \"contracts/lens/Quoter.sol\":5342:5369  amountOutCached = amountOut */\n      dup5\n      swap1\n      sstore\n        /* \"contracts/lens/Quoter.sol\":5314:5369  if (sqrtPriceLimitX96 == 0) amountOutCached = amountOut */\n    tag_52:\n        /* \"contracts/lens/Quoter.sol\":5397:5428  getPool(tokenIn, tokenOut, fee) */\n      tag_53\n        /* \"contracts/lens/Quoter.sol\":5405:5412  tokenIn */\n      dup8\n        /* \"contracts/lens/Quoter.sol\":5414:5422  tokenOut */\n      dup8\n        /* \"contracts/lens/Quoter.sol\":5424:5427  fee */\n      dup8\n        /* \"contracts/lens/Quoter.sol\":5397:5404  getPool */\n      tag_54\n        /* \"contracts/lens/Quoter.sol\":5397:5428  getPool(tokenIn, tokenOut, fee) */\n      jump\t// in\n    tag_53:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/lens/Quoter.sol\":5397:5433  getPool(tokenIn, tokenOut, fee).swap */\n      and\n      0x128acb08\n        /* \"contracts/lens/Quoter.sol\":5460:5464  this */\n      address\n        /* \"contracts/lens/Quoter.sol\":5534:5544  zeroForOne */\n      dup4\n        /* \"contracts/lens/Quoter.sol\":5564:5584  amountOut.toInt256() */\n      tag_55\n        /* \"contracts/lens/Quoter.sol\":5564:5573  amountOut */\n      dup9\n        /* \"contracts/lens/Quoter.sol\":5564:5582  amountOut.toInt256 */\n      tag_56\n        /* \"contracts/lens/Quoter.sol\":5564:5584  amountOut.toInt256() */\n      jump\t// in\n    tag_55:\n        /* \"contracts/lens/Quoter.sol\":5563:5584  -amountOut.toInt256() */\n      0x00\n      sub\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/lens/Quoter.sol\":5603:5625  sqrtPriceLimitX96 == 0 */\n      dup9\n      and\n      iszero\n        /* \"contracts/lens/Quoter.sol\":5603:5762  sqrtPriceLimitX96 == 0\r... */\n      tag_57\n      jumpi\n        /* \"contracts/lens/Quoter.sol\":5745:5762  sqrtPriceLimitX96 */\n      dup8\n        /* \"contracts/lens/Quoter.sol\":5603:5762  sqrtPriceLimitX96 == 0\r... */\n      jump(tag_60)\n    tag_57:\n        /* \"contracts/lens/Quoter.sol\":5650:5660  zeroForOne */\n      dup6\n        /* \"contracts/lens/Quoter.sol\":5650:5720  zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1 */\n      tag_59\n      jumpi\n        /* \"contracts/lens/Quoter.sol\":5693:5720  TickMath.MAX_SQRT_RATIO - 1 */\n      0xfffd8963efd1fc6a506488495d951d5263988d25\n        /* \"contracts/lens/Quoter.sol\":5650:5720  zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1 */\n      jump(tag_60)\n    tag_59:\n        /* \"contracts/lens/Quoter.sol\":5663:5690  TickMath.MIN_SQRT_RATIO + 1 */\n      0x01000276a4\n        /* \"contracts/lens/Quoter.sol\":5650:5720  zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1 */\n    tag_60:\n        /* \"contracts/lens/Quoter.sol\":5798:5806  tokenOut */\n      dup12\n        /* \"contracts/lens/Quoter.sol\":5808:5811  fee */\n      dup12\n        /* \"contracts/lens/Quoter.sol\":5813:5820  tokenIn */\n      dup15\n        /* \"contracts/lens/Quoter.sol\":5781:5821  abi.encodePacked(tokenOut, fee, tokenIn) */\n      add(0x20, mload(0x40))\n      dup1\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      0x60\n      shl\n      dup2\n      mstore\n      0x14\n      add\n      dup4\n      0xffffff\n      and\n      0xe8\n      shl\n      dup2\n      mstore\n      0x03\n      add\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      0x60\n      shl\n      dup2\n      mstore\n      0x14\n      add\n      swap4\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"contracts/lens/Quoter.sol\":5397:5836  getPool(tokenIn, tokenOut, fee).swap(\r... */\n      mload(0x40)\n      dup7\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup7\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup6\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      dup5\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      dup4\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n      0x00\n    tag_61:\n      dup4\n      dup2\n      lt\n      iszero\n      tag_63\n      jumpi\n      dup2\n      dup2\n      add\n      mload\n      dup4\n      dup3\n      add\n      mstore\n      0x20\n      add\n      jump(tag_61)\n    tag_63:\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      swap1\n      dup2\n      add\n      swap1\n      0x1f\n      and\n      dup1\n      iszero\n      tag_64\n      jumpi\n      dup1\n      dup3\n      sub\n      dup1\n      mload\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      not\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n    tag_64:\n      pop\n      swap7\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      0x40\n      dup1\n      mload\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_65\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_65:\n      pop\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      dup1\n      iszero\n      tag_66\n      jumpi\n      pop\n      mload(0x40)\n      returndatasize\n      0x40\n      dup2\n      lt\n      iszero\n      tag_67\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_67:\n      pop\n      dup1\n      mload\n      0x20\n      swap1\n      swap2\n      add\n      mload\n      0x01\n    tag_66:\n        /* \"contracts/lens/Quoter.sol\":5380:6016  try\r... */\n      tag_68\n      jumpi\n      returndatasize\n      dup1\n      dup1\n      iszero\n      tag_72\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_71)\n    tag_72:\n      0x60\n      swap2\n      pop\n    tag_71:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/lens/Quoter.sol\":5896:5918  sqrtPriceLimitX96 == 0 */\n      dup5\n      and\n        /* \"contracts/lens/Quoter.sol\":5892:5942  if (sqrtPriceLimitX96 == 0) delete amountOutCached */\n      tag_73\n      jumpi\n        /* \"contracts/lens/Quoter.sol\":5927:5942  amountOutCached */\n      0x00\n        /* \"contracts/lens/Quoter.sol\":5920:5942  delete amountOutCached */\n      dup1\n      sstore\n        /* \"contracts/lens/Quoter.sol\":5892:5942  if (sqrtPriceLimitX96 == 0) delete amountOutCached */\n    tag_73:\n        /* \"contracts/lens/Quoter.sol\":5979:6004  parseRevertReason(reason) */\n      tag_74\n        /* \"contracts/lens/Quoter.sol\":5997:6003  reason */\n      dup2\n        /* \"contracts/lens/Quoter.sol\":5979:5996  parseRevertReason */\n      tag_75\n        /* \"contracts/lens/Quoter.sol\":5979:6004  parseRevertReason(reason) */\n      jump\t// in\n    tag_74:\n        /* \"contracts/lens/Quoter.sol\":5972:6004  return parseRevertReason(reason) */\n      swap3\n      pop\n      pop\n      pop\n      jump(tag_51)\n        /* \"contracts/lens/Quoter.sol\":5380:6016  try\r... */\n    tag_68:\n      pop\n      pop\n        /* \"contracts/lens/Quoter.sol\":4924:6023  function quoteExactOutputSingle(\r... */\n      pop\n    tag_51:\n      swap6\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/base/PeripheryImmutableState.sol\":431:470  address public immutable override WETH9 */\n    tag_21:\n      immutable(\"0xb37328d1c6f33416cc50b9168b9894b89e743919cc7edc16d1bdc20660330b9f\")\n      dup2\n      jump\t// out\n        /* \"contracts/base/PeripheryImmutableState.sol\":337:378  address public immutable override factory */\n    tag_23:\n      immutable(\"0x912cdad641b4408bd64eb5a331e5fe393f33f2296e0c7fad54e613ac760cfb47\")\n      dup2\n      jump\t// out\n        /* \"contracts/lens/Quoter.sol\":4211:4887  function quoteExactInput(bytes memory path, uint256 amountIn) external override returns (uint256 amountOut) {\r... */\n    tag_29:\n        /* \"contracts/lens/Quoter.sol\":4300:4317  uint256 amountOut */\n      0x00\n        /* \"contracts/lens/Quoter.sol\":4330:4880  while (true) {\r... */\n    tag_78:\n        /* \"contracts/lens/Quoter.sol\":4358:4379  bool hasMultiplePools */\n      0x00\n        /* \"contracts/lens/Quoter.sol\":4382:4405  path.hasMultiplePools() */\n      tag_80\n        /* \"contracts/lens/Quoter.sol\":4382:4386  path */\n      dup5\n        /* \"contracts/lens/Quoter.sol\":4382:4403  path.hasMultiplePools */\n      tag_43\n        /* \"contracts/lens/Quoter.sol\":4382:4405  path.hasMultiplePools() */\n      jump\t// in\n    tag_80:\n        /* \"contracts/lens/Quoter.sol\":4358:4405  bool hasMultiplePools = path.hasMultiplePools() */\n      swap1\n      pop\n        /* \"contracts/lens/Quoter.sol\":4423:4438  address tokenIn */\n      0x00\n        /* \"contracts/lens/Quoter.sol\":4440:4456  address tokenOut */\n      dup1\n        /* \"contracts/lens/Quoter.sol\":4458:4468  uint24 fee */\n      0x00\n        /* \"contracts/lens/Quoter.sol\":4472:4494  path.decodeFirstPool() */\n      tag_81\n        /* \"contracts/lens/Quoter.sol\":4472:4476  path */\n      dup8\n        /* \"contracts/lens/Quoter.sol\":4472:4492  path.decodeFirstPool */\n      tag_45\n        /* \"contracts/lens/Quoter.sol\":4472:4494  path.decodeFirstPool() */\n      jump\t// in\n    tag_81:\n        /* \"contracts/lens/Quoter.sol\":4422:4494  (address tokenIn, address tokenOut, uint24 fee) = path.decodeFirstPool() */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      pop\n        /* \"contracts/lens/Quoter.sol\":4602:4660  quoteExactInputSingle(tokenIn, tokenOut, fee, amountIn, 0) */\n      tag_82\n        /* \"contracts/lens/Quoter.sol\":4624:4631  tokenIn */\n      dup4\n        /* \"contracts/lens/Quoter.sol\":4633:4641  tokenOut */\n      dup4\n        /* \"contracts/lens/Quoter.sol\":4643:4646  fee */\n      dup4\n        /* \"contracts/lens/Quoter.sol\":4648:4656  amountIn */\n      dup10\n        /* \"contracts/lens/Quoter.sol\":4658:4659  0 */\n      0x00\n        /* \"contracts/lens/Quoter.sol\":4602:4623  quoteExactInputSingle */\n      tag_32\n        /* \"contracts/lens/Quoter.sol\":4602:4660  quoteExactInputSingle(tokenIn, tokenOut, fee, amountIn, 0) */\n      jump\t// in\n    tag_82:\n        /* \"contracts/lens/Quoter.sol\":4591:4660  amountIn = quoteExactInputSingle(tokenIn, tokenOut, fee, amountIn, 0) */\n      swap6\n      pop\n        /* \"contracts/lens/Quoter.sol\":4737:4753  hasMultiplePools */\n      dup4\n        /* \"contracts/lens/Quoter.sol\":4733:4869  if (hasMultiplePools) {\r... */\n      iszero\n      tag_47\n      jumpi\n        /* \"contracts/lens/Quoter.sol\":4781:4797  path.skipToken() */\n      tag_84\n        /* \"contracts/lens/Quoter.sol\":4781:4785  path */\n      dup8\n        /* \"contracts/lens/Quoter.sol\":4781:4795  path.skipToken */\n      tag_49\n        /* \"contracts/lens/Quoter.sol\":4781:4797  path.skipToken() */\n      jump\t// in\n    tag_84:\n        /* \"contracts/lens/Quoter.sol\":4774:4797  path = path.skipToken() */\n      swap7\n      pop\n        /* \"contracts/lens/Quoter.sol\":4330:4880  while (true) {\r... */\n      pop\n      pop\n      pop\n      pop\n      jump(tag_78)\n        /* \"contracts/lens/Quoter.sol\":3334:4174  function quoteExactInputSingle(\r... */\n    tag_32:\n        /* \"contracts/lens/Quoter.sol\":3534:3551  uint256 amountOut */\n      0x00\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/lens/Quoter.sol\":3582:3600  tokenIn < tokenOut */\n      dup1\n      dup7\n      and\n      swap1\n      dup8\n      and\n      lt\n        /* \"contracts/lens/Quoter.sol\":3630:3661  getPool(tokenIn, tokenOut, fee) */\n      tag_87\n        /* \"contracts/lens/Quoter.sol\":3582:3589  tokenIn */\n      dup8\n        /* \"contracts/lens/Quoter.sol\":3592:3600  tokenOut */\n      dup8\n        /* \"contracts/lens/Quoter.sol\":3657:3660  fee */\n      dup8\n        /* \"contracts/lens/Quoter.sol\":3630:3637  getPool */\n      tag_54\n        /* \"contracts/lens/Quoter.sol\":3630:3661  getPool(tokenIn, tokenOut, fee) */\n      jump\t// in\n    tag_87:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/lens/Quoter.sol\":3630:3666  getPool(tokenIn, tokenOut, fee).swap */\n      and\n      0x128acb08\n        /* \"contracts/lens/Quoter.sol\":3693:3697  this */\n      address\n        /* \"contracts/lens/Quoter.sol\":3767:3777  zeroForOne */\n      dup4\n        /* \"contracts/lens/Quoter.sol\":3796:3815  amountIn.toInt256() */\n      tag_88\n        /* \"contracts/lens/Quoter.sol\":3796:3804  amountIn */\n      dup9\n        /* \"contracts/lens/Quoter.sol\":3796:3813  amountIn.toInt256 */\n      tag_56\n        /* \"contracts/lens/Quoter.sol\":3796:3815  amountIn.toInt256() */\n      jump\t// in\n    tag_88:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/lens/Quoter.sol\":3834:3856  sqrtPriceLimitX96 == 0 */\n      dup9\n      and\n      iszero\n        /* \"contracts/lens/Quoter.sol\":3834:3993  sqrtPriceLimitX96 == 0\r... */\n      tag_89\n      jumpi\n        /* \"contracts/lens/Quoter.sol\":3976:3993  sqrtPriceLimitX96 */\n      dup8\n        /* \"contracts/lens/Quoter.sol\":3834:3993  sqrtPriceLimitX96 == 0\r... */\n      jump(tag_92)\n    tag_89:\n        /* \"contracts/lens/Quoter.sol\":3881:3891  zeroForOne */\n      dup6\n        /* \"contracts/lens/Quoter.sol\":3881:3951  zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1 */\n      tag_91\n      jumpi\n        /* \"contracts/lens/Quoter.sol\":3924:3951  TickMath.MAX_SQRT_RATIO - 1 */\n      0xfffd8963efd1fc6a506488495d951d5263988d25\n        /* \"contracts/lens/Quoter.sol\":3881:3951  zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1 */\n      jump(tag_92)\n    tag_91:\n        /* \"contracts/lens/Quoter.sol\":3894:3921  TickMath.MIN_SQRT_RATIO + 1 */\n      0x01000276a4\n        /* \"contracts/lens/Quoter.sol\":3881:3951  zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1 */\n    tag_92:\n        /* \"contracts/lens/Quoter.sol\":4029:4036  tokenIn */\n      dup13\n        /* \"contracts/lens/Quoter.sol\":4038:4041  fee */\n      dup12\n        /* \"contracts/lens/Quoter.sol\":4043:4051  tokenOut */\n      dup14\n        /* \"contracts/lens/Quoter.sol\":4012:4052  abi.encodePacked(tokenIn, fee, tokenOut) */\n      add(0x20, mload(0x40))\n      dup1\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      0x60\n      shl\n      dup2\n      mstore\n      0x14\n      add\n      dup4\n      0xffffff\n      and\n      0xe8\n      shl\n      dup2\n      mstore\n      0x03\n      add\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      0x60\n      shl\n      dup2\n      mstore\n      0x14\n      add\n      swap4\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"contracts/lens/Quoter.sol\":3630:4067  getPool(tokenIn, tokenOut, fee).swap(\r... */\n      mload(0x40)\n      dup7\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup7\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup6\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      dup5\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      dup4\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n      0x00\n    tag_93:\n      dup4\n      dup2\n      lt\n      iszero\n      tag_95\n      jumpi\n      dup2\n      dup2\n      add\n      mload\n      dup4\n      dup3\n      add\n      mstore\n      0x20\n      add\n      jump(tag_93)\n    tag_95:\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      swap1\n      dup2\n      add\n      swap1\n      0x1f\n      and\n      dup1\n      iszero\n      tag_96\n      jumpi\n      dup1\n      dup3\n      sub\n      dup1\n      mload\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      not\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n    tag_96:\n      pop\n      swap7\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      0x40\n      dup1\n      mload\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_97\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_97:\n      pop\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      dup1\n      iszero\n      tag_98\n      jumpi\n      pop\n      mload(0x40)\n      returndatasize\n      0x40\n      dup2\n      lt\n      iszero\n      tag_99\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_99:\n      pop\n      dup1\n      mload\n      0x20\n      swap1\n      swap2\n      add\n      mload\n      0x01\n    tag_98:\n        /* \"contracts/lens/Quoter.sol\":3613:4167  try\r... */\n      tag_68\n      jumpi\n      returndatasize\n      dup1\n      dup1\n      iszero\n      tag_104\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_103)\n    tag_104:\n      0x60\n      swap2\n      pop\n    tag_103:\n      pop\n        /* \"contracts/lens/Quoter.sol\":4130:4155  parseRevertReason(reason) */\n      tag_74\n        /* \"contracts/lens/Quoter.sol\":4148:4154  reason */\n      dup2\n        /* \"contracts/lens/Quoter.sol\":4130:4147  parseRevertReason */\n      tag_75\n        /* \"contracts/lens/Quoter.sol\":4130:4155  parseRevertReason(reason) */\n      jump\t// in\n        /* \"contracts/lens/Quoter.sol\":1560:2833  function uniswapV3SwapCallback(\r... */\n    tag_38:\n        /* \"contracts/lens/Quoter.sol\":1743:1744  0 */\n      0x00\n        /* \"contracts/lens/Quoter.sol\":1728:1740  amount0Delta */\n      dup4\n        /* \"contracts/lens/Quoter.sol\":1728:1744  amount0Delta > 0 */\n      sgt\n        /* \"contracts/lens/Quoter.sol\":1728:1764  amount0Delta > 0 || amount1Delta > 0 */\n      dup1\n      tag_108\n      jumpi\n      pop\n        /* \"contracts/lens/Quoter.sol\":1763:1764  0 */\n      0x00\n        /* \"contracts/lens/Quoter.sol\":1748:1760  amount1Delta */\n      dup3\n        /* \"contracts/lens/Quoter.sol\":1748:1764  amount1Delta > 0 */\n      sgt\n        /* \"contracts/lens/Quoter.sol\":1728:1764  amount0Delta > 0 || amount1Delta > 0 */\n    tag_108:\n        /* \"contracts/lens/Quoter.sol\":1720:1765  require(amount0Delta > 0 || amount1Delta > 0) */\n      tag_109\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_109:\n        /* \"contracts/lens/Quoter.sol\":1840:1855  address tokenIn */\n      0x00\n        /* \"contracts/lens/Quoter.sol\":1857:1873  address tokenOut */\n      dup1\n        /* \"contracts/lens/Quoter.sol\":1875:1885  uint24 fee */\n      0x00\n        /* \"contracts/lens/Quoter.sol\":1889:1911  path.decodeFirstPool() */\n      tag_110\n        /* \"contracts/lens/Quoter.sol\":1889:1893  path */\n      dup5\n        /* \"contracts/lens/Quoter.sol\":1889:1909  path.decodeFirstPool */\n      tag_45\n        /* \"contracts/lens/Quoter.sol\":1889:1911  path.decodeFirstPool() */\n      jump\t// in\n    tag_110:\n        /* \"contracts/lens/Quoter.sol\":1839:1911  (address tokenIn, address tokenOut, uint24 fee) = path.decodeFirstPool() */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      pop\n        /* \"contracts/lens/Quoter.sol\":1922:1988  CallbackValidation.verifyCallback(factory, tokenIn, tokenOut, fee) */\n      tag_111\n        /* \"contracts/lens/Quoter.sol\":1956:1963  factory */\n      immutable(\"0x912cdad641b4408bd64eb5a331e5fe393f33f2296e0c7fad54e613ac760cfb47\")\n        /* \"contracts/lens/Quoter.sol\":1965:1972  tokenIn */\n      dup5\n        /* \"contracts/lens/Quoter.sol\":1974:1982  tokenOut */\n      dup5\n        /* \"contracts/lens/Quoter.sol\":1984:1987  fee */\n      dup5\n        /* \"contracts/lens/Quoter.sol\":1922:1955  CallbackValidation.verifyCallback */\n      tag_112\n        /* \"contracts/lens/Quoter.sol\":1922:1988  CallbackValidation.verifyCallback(factory, tokenIn, tokenOut, fee) */\n      jump\t// in\n    tag_111:\n      pop\n        /* \"contracts/lens/Quoter.sol\":2002:2019  bool isExactInput */\n      0x00\n        /* \"contracts/lens/Quoter.sol\":2021:2040  uint256 amountToPay */\n      dup1\n        /* \"contracts/lens/Quoter.sol\":2042:2064  uint256 amountReceived */\n      0x00\n        /* \"contracts/lens/Quoter.sol\":2096:2097  0 */\n      dup1\n        /* \"contracts/lens/Quoter.sol\":2081:2093  amount0Delta */\n      dup10\n        /* \"contracts/lens/Quoter.sol\":2081:2097  amount0Delta > 0 */\n      sgt\n        /* \"contracts/lens/Quoter.sol\":2081:2271  amount0Delta > 0\r... */\n      tag_113\n      jumpi\n        /* \"contracts/lens/Quoter.sol\":2216:2223  tokenIn */\n      dup6\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/lens/Quoter.sol\":2205:2223  tokenOut < tokenIn */\n      and\n        /* \"contracts/lens/Quoter.sol\":2205:2213  tokenOut */\n      dup6\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/lens/Quoter.sol\":2205:2223  tokenOut < tokenIn */\n      and\n      lt\n        /* \"contracts/lens/Quoter.sol\":2233:2245  amount1Delta */\n      dup9\n        /* \"contracts/lens/Quoter.sol\":2257:2269  amount0Delta */\n      dup11\n        /* \"contracts/lens/Quoter.sol\":2256:2269  -amount0Delta */\n      0x00\n      sub\n        /* \"contracts/lens/Quoter.sol\":2081:2271  amount0Delta > 0\r... */\n      jump(tag_114)\n    tag_113:\n        /* \"contracts/lens/Quoter.sol\":2128:2136  tokenOut */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/lens/Quoter.sol\":2118:2136  tokenIn < tokenOut */\n      and\n        /* \"contracts/lens/Quoter.sol\":2118:2125  tokenIn */\n      dup7\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/lens/Quoter.sol\":2118:2136  tokenIn < tokenOut */\n      and\n      lt\n        /* \"contracts/lens/Quoter.sol\":2146:2158  amount0Delta */\n      dup10\n        /* \"contracts/lens/Quoter.sol\":2170:2182  amount1Delta */\n      dup10\n        /* \"contracts/lens/Quoter.sol\":2169:2182  -amount1Delta */\n      0x00\n      sub\n        /* \"contracts/lens/Quoter.sol\":2081:2271  amount0Delta > 0\r... */\n    tag_114:\n        /* \"contracts/lens/Quoter.sol\":2001:2271  (bool isExactInput, uint256 amountToPay, uint256 amountReceived) =\r... */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      pop\n        /* \"contracts/lens/Quoter.sol\":2286:2298  isExactInput */\n      dup3\n        /* \"contracts/lens/Quoter.sol\":2282:2826  if (isExactInput) {\r... */\n      iszero\n      tag_115\n      jumpi\n        /* \"contracts/lens/Quoter.sol\":2360:2364  0x40 */\n      0x40\n        /* \"contracts/lens/Quoter.sol\":2354:2365  mload(0x40) */\n      mload\n        /* \"contracts/lens/Quoter.sol\":2395:2409  amountReceived */\n      dup2\n        /* \"contracts/lens/Quoter.sol\":2390:2393  ptr */\n      dup2\n        /* \"contracts/lens/Quoter.sol\":2383:2410  mstore(ptr, amountReceived) */\n      mstore\n        /* \"contracts/lens/Quoter.sol\":2440:2442  32 */\n      0x20\n        /* \"contracts/lens/Quoter.sol\":2435:2438  ptr */\n      dup2\n        /* \"contracts/lens/Quoter.sol\":2428:2443  revert(ptr, 32) */\n      revert\n        /* \"contracts/lens/Quoter.sol\":2324:2458  {\r... */\n    tag_115:\n        /* \"contracts/lens/Quoter.sol\":2596:2611  amountOutCached */\n      sload(0x00)\n        /* \"contracts/lens/Quoter.sol\":2596:2616  amountOutCached != 0 */\n      iszero\n        /* \"contracts/lens/Quoter.sol\":2592:2660  if (amountOutCached != 0) require(amountReceived == amountOutCached) */\n      tag_118\n      jumpi\n        /* \"contracts/lens/Quoter.sol\":2644:2659  amountOutCached */\n      sload(0x00)\n        /* \"contracts/lens/Quoter.sol\":2626:2640  amountReceived */\n      dup2\n        /* \"contracts/lens/Quoter.sol\":2626:2659  amountReceived == amountOutCached */\n      eq\n        /* \"contracts/lens/Quoter.sol\":2618:2660  require(amountReceived == amountOutCached) */\n      tag_118\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_118:\n        /* \"contracts/lens/Quoter.sol\":2720:2724  0x40 */\n      0x40\n        /* \"contracts/lens/Quoter.sol\":2714:2725  mload(0x40) */\n      mload\n        /* \"contracts/lens/Quoter.sol\":2755:2766  amountToPay */\n      dup3\n        /* \"contracts/lens/Quoter.sol\":2750:2753  ptr */\n      dup2\n        /* \"contracts/lens/Quoter.sol\":2743:2767  mstore(ptr, amountToPay) */\n      mstore\n        /* \"contracts/lens/Quoter.sol\":2797:2799  32 */\n      0x20\n        /* \"contracts/lens/Quoter.sol\":2792:2795  ptr */\n      dup2\n        /* \"contracts/lens/Quoter.sol\":2785:2800  revert(ptr, 32) */\n      revert\n        /* \"contracts/libraries/Path.sol\":1016:1156  function hasMultiplePools(bytes memory path) internal pure returns (bool) {\r... */\n    tag_43:\n        /* \"contracts/libraries/Path.sol\":1108:1119  path.length */\n      mload\n        /* \"contracts/libraries/Path.sol\":796:820  POP_OFFSET + NEXT_OFFSET */\n      0x42\n      gt\n        /* \"contracts/libraries/Path.sol\":1108:1148  path.length >= MULTIPLE_POOLS_MIN_LENGTH */\n      iszero\n      swap1\n        /* \"contracts/libraries/Path.sol\":1016:1156  function hasMultiplePools(bytes memory path) internal pure returns (bool) {\r... */\n      jump\t// out\n        /* \"contracts/libraries/Path.sol\":1820:2146  function decodeFirstPool(bytes memory path)\r... */\n    tag_45:\n        /* \"contracts/libraries/Path.sol\":1928:1942  address tokenA */\n      0x00\n      dup1\n      dup1\n        /* \"contracts/libraries/Path.sol\":2033:2050  path.toAddress(0) */\n      tag_121\n        /* \"contracts/libraries/Path.sol\":2033:2037  path */\n      dup5\n        /* \"contracts/libraries/Path.sol\":1928:1942  address tokenA */\n      dup3\n        /* \"contracts/libraries/Path.sol\":2033:2047  path.toAddress */\n      tag_122\n        /* \"contracts/libraries/Path.sol\":2033:2050  path.toAddress(0) */\n      jump\t// in\n    tag_121:\n        /* \"contracts/libraries/Path.sol\":2024:2050  tokenA = path.toAddress(0) */\n      swap3\n      pop\n        /* \"contracts/libraries/Path.sol\":2067:2091  path.toUint24(ADDR_SIZE) */\n      tag_123\n        /* \"contracts/libraries/Path.sol\":2067:2071  path */\n      dup5\n        /* \"contracts/libraries/Path.sol\":314:316  20 */\n      0x14\n        /* \"contracts/libraries/Path.sol\":2067:2080  path.toUint24 */\n      tag_124\n        /* \"contracts/libraries/Path.sol\":2067:2091  path.toUint24(ADDR_SIZE) */\n      jump\t// in\n    tag_123:\n        /* \"contracts/libraries/Path.sol\":2061:2091  fee = path.toUint24(ADDR_SIZE) */\n      swap1\n      pop\n        /* \"contracts/libraries/Path.sol\":2111:2138  path.toAddress(NEXT_OFFSET) */\n      tag_125\n        /* \"contracts/libraries/Path.sol\":2111:2115  path */\n      dup5\n        /* \"contracts/libraries/Path.sol\":522:542  ADDR_SIZE + FEE_SIZE */\n      0x17\n        /* \"contracts/libraries/Path.sol\":2111:2125  path.toAddress */\n      tag_122\n        /* \"contracts/libraries/Path.sol\":2111:2138  path.toAddress(NEXT_OFFSET) */\n      jump\t// in\n    tag_125:\n        /* \"contracts/libraries/Path.sol\":2102:2138  tokenB = path.toAddress(NEXT_OFFSET) */\n      swap2\n      pop\n        /* \"contracts/libraries/Path.sol\":1820:2146  function decodeFirstPool(bytes memory path)\r... */\n      swap2\n      swap4\n      swap1\n      swap3\n      pop\n      jump\t// out\n        /* \"contracts/libraries/Path.sol\":2700:2851  function skipToken(bytes memory path) internal pure returns (bytes memory) {\r... */\n    tag_49:\n        /* \"contracts/libraries/Path.sol\":2817:2828  path.length */\n      dup1\n      mload\n        /* \"contracts/libraries/Path.sol\":2761:2773  bytes memory */\n      0x60\n      swap1\n        /* \"contracts/libraries/Path.sol\":2793:2843  path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET) */\n      tag_41\n      swap1\n        /* \"contracts/libraries/Path.sol\":2817:2821  path */\n      dup4\n      swap1\n        /* \"contracts/libraries/Path.sol\":522:542  ADDR_SIZE + FEE_SIZE */\n      0x17\n      swap1\n      not(0x16)\n        /* \"contracts/libraries/Path.sol\":2817:2842  path.length - NEXT_OFFSET */\n      add\n        /* \"contracts/libraries/Path.sol\":2793:2803  path.slice */\n      tag_128\n        /* \"contracts/libraries/Path.sol\":2793:2843  path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET) */\n      jump\t// in\n        /* \"contracts/lens/Quoter.sol\":1253:1508  function getPool(\r... */\n    tag_54:\n        /* \"contracts/lens/Quoter.sol\":1370:1384  IUniswapV3Pool */\n      0x00\n        /* \"contracts/lens/Quoter.sol\":1419:1499  PoolAddress.computeAddress(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee)) */\n      tag_130\n        /* \"contracts/lens/Quoter.sol\":1446:1453  factory */\n      immutable(\"0x912cdad641b4408bd64eb5a331e5fe393f33f2296e0c7fad54e613ac760cfb47\")\n        /* \"contracts/lens/Quoter.sol\":1455:1498  PoolAddress.getPoolKey(tokenA, tokenB, fee) */\n      tag_131\n        /* \"contracts/lens/Quoter.sol\":1478:1484  tokenA */\n      dup7\n        /* \"contracts/lens/Quoter.sol\":1486:1492  tokenB */\n      dup7\n        /* \"contracts/lens/Quoter.sol\":1494:1497  fee */\n      dup7\n        /* \"contracts/lens/Quoter.sol\":1455:1477  PoolAddress.getPoolKey */\n      tag_132\n        /* \"contracts/lens/Quoter.sol\":1455:1498  PoolAddress.getPoolKey(tokenA, tokenB, fee) */\n      jump\t// in\n    tag_131:\n        /* \"contracts/lens/Quoter.sol\":1419:1445  PoolAddress.computeAddress */\n      tag_133\n        /* \"contracts/lens/Quoter.sol\":1419:1499  PoolAddress.computeAddress(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee)) */\n      jump\t// in\n    tag_130:\n        /* \"contracts/lens/Quoter.sol\":1397:1500  return IUniswapV3Pool(PoolAddress.computeAddress(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee))) */\n      swap5\n        /* \"contracts/lens/Quoter.sol\":1253:1508  function getPool(\r... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/SafeCast.sol\":924:1045  function toInt256(uint256 y) internal pure returns (int256 z) {... */\n    tag_56:\n        /* \"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/SafeCast.sol\":976:984  int256 z */\n      0x00\n      shl(0xff, 0x01)\n        /* \"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/SafeCast.sol\":1004:1005  y */\n      dup3\n        /* \"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/SafeCast.sol\":1004:1014  y < 2**255 */\n      lt\n        /* \"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/SafeCast.sol\":996:1015  require(y < 2**255) */\n      tag_135\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_135:\n      pop\n        /* \"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/SafeCast.sol\":1036:1037  y */\n      swap1\n        /* \"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/SafeCast.sol\":924:1045  function toInt256(uint256 y) internal pure returns (int256 z) {... */\n      jump\t// out\n        /* \"contracts/lens/Quoter.sol\":2916:3297  function parseRevertReason(bytes memory reason) private pure returns (uint256) {\r... */\n    tag_75:\n        /* \"contracts/lens/Quoter.sol\":2986:2993  uint256 */\n      0x00\n        /* \"contracts/lens/Quoter.sol\":3010:3016  reason */\n      dup2\n        /* \"contracts/lens/Quoter.sol\":3010:3023  reason.length */\n      mload\n        /* \"contracts/lens/Quoter.sol\":3027:3029  32 */\n      0x20\n        /* \"contracts/lens/Quoter.sol\":3010:3029  reason.length != 32 */\n      eq\n        /* \"contracts/lens/Quoter.sol\":3006:3243  if (reason.length != 32) {\r... */\n      tag_137\n      jumpi\n        /* \"contracts/lens/Quoter.sol\":3066:3068  68 */\n      0x44\n        /* \"contracts/lens/Quoter.sol\":3050:3056  reason */\n      dup3\n        /* \"contracts/lens/Quoter.sol\":3050:3063  reason.length */\n      mload\n        /* \"contracts/lens/Quoter.sol\":3050:3068  reason.length < 68 */\n      lt\n        /* \"contracts/lens/Quoter.sol\":3046:3096  if (reason.length < 68) revert('Unexpected error') */\n      iszero\n      tag_138\n      jumpi\n        /* \"contracts/lens/Quoter.sol\":3070:3096  revert('Unexpected error') */\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x10\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x81, 0x2ab732bc3832b1ba32b21032b93937b9)\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n        /* \"contracts/lens/Quoter.sol\":3046:3096  if (reason.length < 68) revert('Unexpected error') */\n    tag_138:\n        /* \"contracts/lens/Quoter.sol\":3161:3165  0x04 */\n      0x04\n        /* \"contracts/lens/Quoter.sol\":3149:3166  add(reason, 0x04) */\n      dup3\n      add\n        /* \"contracts/lens/Quoter.sol\":3202:3230  abi.decode(reason, (string)) */\n      dup1\n      mload\n        /* \"contracts/lens/Quoter.sol\":3149:3166  add(reason, 0x04) */\n      swap1\n      swap3\n        /* \"contracts/lens/Quoter.sol\":3202:3230  abi.decode(reason, (string)) */\n      0x24\n      add\n      swap1\n      0x20\n      dup2\n      lt\n      iszero\n      tag_139\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_139:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      mload\n      mload(0x40)\n      swap4\n      swap3\n      swap2\n      swap1\n      dup5\n      shl(0x20, 0x01)\n      dup3\n      gt\n      iszero\n      tag_140\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_140:\n      swap1\n      dup4\n      add\n      swap1\n      0x20\n      dup3\n      add\n      dup6\n      dup2\n      gt\n      iszero\n      tag_141\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_141:\n      dup3\n      mload\n      shl(0x20, 0x01)\n      dup2\n      gt\n      dup3\n      dup3\n      add\n      dup9\n      lt\n      or\n      iszero\n      tag_142\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_142:\n      dup3\n      mstore\n      pop\n      dup2\n      mload\n      0x20\n      swap2\n      dup3\n      add\n      swap3\n      swap1\n      swap2\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n      0x00\n    tag_143:\n      dup4\n      dup2\n      lt\n      iszero\n      tag_145\n      jumpi\n      dup2\n      dup2\n      add\n      mload\n      dup4\n      dup3\n      add\n      mstore\n      0x20\n      add\n      jump(tag_143)\n    tag_145:\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      swap1\n      dup2\n      add\n      swap1\n      0x1f\n      and\n      dup1\n      iszero\n      tag_146\n      jumpi\n      dup1\n      dup3\n      sub\n      dup1\n      mload\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      not\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n    tag_146:\n      pop\n      0x40\n      mstore\n      pop\n      pop\n      pop\n        /* \"contracts/lens/Quoter.sol\":3195:3231  revert(abi.decode(reason, (string))) */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      dup4\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n      0x00\n    tag_147:\n      dup4\n      dup2\n      lt\n      iszero\n      tag_149\n      jumpi\n      dup2\n      dup2\n      add\n      mload\n      dup4\n      dup3\n      add\n      mstore\n      0x20\n      add\n      jump(tag_147)\n    tag_149:\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      swap1\n      dup2\n      add\n      swap1\n      0x1f\n      and\n      dup1\n      iszero\n      tag_150\n      jumpi\n      dup1\n      dup3\n      sub\n      dup1\n      mload\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      not\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n    tag_150:\n      pop\n      swap3\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/lens/Quoter.sol\":3006:3243  if (reason.length != 32) {\r... */\n    tag_137:\n        /* \"contracts/lens/Quoter.sol\":3271:3277  reason */\n      dup2\n        /* \"contracts/lens/Quoter.sol\":3260:3289  abi.decode(reason, (uint256)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      0x20\n      dup2\n      lt\n      iszero\n      tag_151\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_151:\n      pop\n      mload\n      swap3\n        /* \"contracts/lens/Quoter.sol\":2916:3297  function parseRevertReason(bytes memory reason) private pure returns (uint256) {\r... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/libraries/CallbackValidation.sol\":697:963  function verifyCallback(\r... */\n    tag_112:\n        /* \"contracts/libraries/CallbackValidation.sol\":848:867  IUniswapV3Pool pool */\n      0x00\n        /* \"contracts/libraries/CallbackValidation.sol\":887:955  verifyCallback(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee)) */\n      tag_51\n        /* \"contracts/libraries/CallbackValidation.sol\":902:909  factory */\n      dup6\n        /* \"contracts/libraries/CallbackValidation.sol\":911:954  PoolAddress.getPoolKey(tokenA, tokenB, fee) */\n      tag_154\n        /* \"contracts/libraries/CallbackValidation.sol\":934:940  tokenA */\n      dup7\n        /* \"contracts/libraries/CallbackValidation.sol\":942:948  tokenB */\n      dup7\n        /* \"contracts/libraries/CallbackValidation.sol\":950:953  fee */\n      dup7\n        /* \"contracts/libraries/CallbackValidation.sol\":911:933  PoolAddress.getPoolKey */\n      tag_132\n        /* \"contracts/libraries/CallbackValidation.sol\":911:954  PoolAddress.getPoolKey(tokenA, tokenB, fee) */\n      jump\t// in\n    tag_154:\n        /* \"contracts/libraries/CallbackValidation.sol\":887:901  verifyCallback */\n      tag_155\n        /* \"contracts/libraries/CallbackValidation.sol\":887:955  verifyCallback(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee)) */\n      jump\t// in\n        /* \"contracts/libraries/BytesLib.sol\":3489:3915  function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\r... */\n    tag_122:\n        /* \"contracts/libraries/BytesLib.sol\":3568:3575  address */\n      0x00\n        /* \"contracts/libraries/BytesLib.sol\":3611:3617  _start */\n      dup2\n        /* \"contracts/libraries/BytesLib.sol\":3596:3602  _start */\n      dup3\n        /* \"contracts/libraries/BytesLib.sol\":3605:3607  20 */\n      0x14\n        /* \"contracts/libraries/BytesLib.sol\":3596:3607  _start + 20 */\n      add\n        /* \"contracts/libraries/BytesLib.sol\":3596:3617  _start + 20 >= _start */\n      lt\n      iszero\n        /* \"contracts/libraries/BytesLib.sol\":3588:3640  require(_start + 20 >= _start, 'toAddress_overflow') */\n      tag_157\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x12\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x70, 0x746f416464726573735f6f766572666c6f77)\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_157:\n        /* \"contracts/libraries/BytesLib.sol\":3676:3682  _start */\n      dup2\n        /* \"contracts/libraries/BytesLib.sol\":3685:3687  20 */\n      0x14\n        /* \"contracts/libraries/BytesLib.sol\":3676:3687  _start + 20 */\n      add\n        /* \"contracts/libraries/BytesLib.sol\":3659:3665  _bytes */\n      dup4\n        /* \"contracts/libraries/BytesLib.sol\":3659:3672  _bytes.length */\n      mload\n        /* \"contracts/libraries/BytesLib.sol\":3659:3687  _bytes.length >= _start + 20 */\n      lt\n      iszero\n        /* \"contracts/libraries/BytesLib.sol\":3651:3713  require(_bytes.length >= _start + 20, 'toAddress_outOfBounds') */\n      tag_158\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x15\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x58, 0x746f416464726573735f6f75744f66426f756e6473)\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_158:\n      pop\n        /* \"contracts/libraries/BytesLib.sol\":3805:3835  add(add(_bytes, 0x20), _start) */\n      add\n        /* \"contracts/libraries/BytesLib.sol\":3821:3825  0x20 */\n      0x20\n        /* \"contracts/libraries/BytesLib.sol\":3805:3835  add(add(_bytes, 0x20), _start) */\n      add\n        /* \"contracts/libraries/BytesLib.sol\":3799:3836  mload(add(add(_bytes, 0x20), _start)) */\n      mload\n      shl(0x60, 0x01)\n        /* \"contracts/libraries/BytesLib.sol\":3795:3866  div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000) */\n      swap1\n      div\n      swap1\n        /* \"contracts/libraries/BytesLib.sol\":3489:3915  function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\r... */\n      jump\t// out\n        /* \"contracts/libraries/BytesLib.sol\":3923:4298  function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\r... */\n    tag_124:\n        /* \"contracts/libraries/BytesLib.sol\":4001:4007  uint24 */\n      0x00\n        /* \"contracts/libraries/BytesLib.sol\":4042:4048  _start */\n      dup2\n        /* \"contracts/libraries/BytesLib.sol\":4028:4034  _start */\n      dup3\n        /* \"contracts/libraries/BytesLib.sol\":4037:4038  3 */\n      0x03\n        /* \"contracts/libraries/BytesLib.sol\":4028:4038  _start + 3 */\n      add\n        /* \"contracts/libraries/BytesLib.sol\":4028:4048  _start + 3 >= _start */\n      lt\n      iszero\n        /* \"contracts/libraries/BytesLib.sol\":4020:4070  require(_start + 3 >= _start, 'toUint24_overflow') */\n      tag_160\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x11\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x78, 0x746f55696e7432345f6f766572666c6f77)\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_160:\n        /* \"contracts/libraries/BytesLib.sol\":4106:4112  _start */\n      dup2\n        /* \"contracts/libraries/BytesLib.sol\":4115:4116  3 */\n      0x03\n        /* \"contracts/libraries/BytesLib.sol\":4106:4116  _start + 3 */\n      add\n        /* \"contracts/libraries/BytesLib.sol\":4089:4095  _bytes */\n      dup4\n        /* \"contracts/libraries/BytesLib.sol\":4089:4102  _bytes.length */\n      mload\n        /* \"contracts/libraries/BytesLib.sol\":4089:4116  _bytes.length >= _start + 3 */\n      lt\n      iszero\n        /* \"contracts/libraries/BytesLib.sol\":4081:4141  require(_bytes.length >= _start + 3, 'toUint24_outOfBounds') */\n      tag_161\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x14\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x60, 0x746f55696e7432345f6f75744f66426f756e6473)\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_161:\n      pop\n        /* \"contracts/libraries/BytesLib.sol\":4222:4251  add(add(_bytes, 0x3), _start) */\n      add\n        /* \"contracts/libraries/BytesLib.sol\":4238:4241  0x3 */\n      0x03\n        /* \"contracts/libraries/BytesLib.sol\":4222:4251  add(add(_bytes, 0x3), _start) */\n      add\n        /* \"contracts/libraries/BytesLib.sol\":4216:4252  mload(add(add(_bytes, 0x3), _start)) */\n      mload\n      swap1\n        /* \"contracts/libraries/BytesLib.sol\":3923:4298  function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\r... */\n      jump\t// out\n        /* \"contracts/libraries/BytesLib.sol\":410:3481  function slice(\r... */\n    tag_128:\n        /* \"contracts/libraries/BytesLib.sol\":536:548  bytes memory */\n      0x60\n        /* \"contracts/libraries/BytesLib.sol\":585:592  _length */\n      dup2\n        /* \"contracts/libraries/BytesLib.sol\":569:576  _length */\n      dup3\n        /* \"contracts/libraries/BytesLib.sol\":579:581  31 */\n      0x1f\n        /* \"contracts/libraries/BytesLib.sol\":569:581  _length + 31 */\n      add\n        /* \"contracts/libraries/BytesLib.sol\":569:592  _length + 31 >= _length */\n      lt\n      iszero\n        /* \"contracts/libraries/BytesLib.sol\":561:611  require(_length + 31 >= _length, 'slice_overflow') */\n      tag_163\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x0e\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x90, 0x736c6963655f6f766572666c6f77)\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_163:\n        /* \"contracts/libraries/BytesLib.sol\":650:656  _start */\n      dup3\n        /* \"contracts/libraries/BytesLib.sol\":639:646  _length */\n      dup3\n        /* \"contracts/libraries/BytesLib.sol\":630:636  _start */\n      dup5\n        /* \"contracts/libraries/BytesLib.sol\":630:646  _start + _length */\n      add\n        /* \"contracts/libraries/BytesLib.sol\":630:656  _start + _length >= _start */\n      lt\n      iszero\n        /* \"contracts/libraries/BytesLib.sol\":622:675  require(_start + _length >= _start, 'slice_overflow') */\n      tag_164\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x0e\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x90, 0x736c6963655f6f766572666c6f77)\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_164:\n        /* \"contracts/libraries/BytesLib.sol\":720:727  _length */\n      dup2\n        /* \"contracts/libraries/BytesLib.sol\":711:717  _start */\n      dup4\n        /* \"contracts/libraries/BytesLib.sol\":711:727  _start + _length */\n      add\n        /* \"contracts/libraries/BytesLib.sol\":694:700  _bytes */\n      dup5\n        /* \"contracts/libraries/BytesLib.sol\":694:707  _bytes.length */\n      mload\n        /* \"contracts/libraries/BytesLib.sol\":694:727  _bytes.length >= _start + _length */\n      lt\n      iszero\n        /* \"contracts/libraries/BytesLib.sol\":686:749  require(_bytes.length >= _start + _length, 'slice_outOfBounds') */\n      tag_165\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x11\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x78, 0x736c6963655f6f75744f66426f756e6473)\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_165:\n        /* \"contracts/libraries/BytesLib.sol\":762:784  bytes memory tempBytes */\n      0x60\n        /* \"contracts/libraries/BytesLib.sol\":828:843  iszero(_length) */\n      dup3\n      iszero\n        /* \"contracts/libraries/BytesLib.sol\":861:2998  case 0 {\r... */\n      dup1\n      iszero\n      tag_167\n      jumpi\n        /* \"contracts/libraries/BytesLib.sol\":3154:3158  0x40 */\n      0x40\n        /* \"contracts/libraries/BytesLib.sol\":3148:3159  mload(0x40) */\n      mload\n        /* \"contracts/libraries/BytesLib.sol\":3135:3159  tempBytes := mload(0x40) */\n      swap2\n      pop\n        /* \"contracts/libraries/BytesLib.sol\":3355:3356  0 */\n      0x00\n        /* \"contracts/libraries/BytesLib.sol\":3344:3353  tempBytes */\n      dup3\n        /* \"contracts/libraries/BytesLib.sol\":3337:3357  mstore(tempBytes, 0) */\n      mstore\n        /* \"contracts/libraries/BytesLib.sol\":3409:3413  0x20 */\n      0x20\n        /* \"contracts/libraries/BytesLib.sol\":3398:3407  tempBytes */\n      dup3\n        /* \"contracts/libraries/BytesLib.sol\":3394:3414  add(tempBytes, 0x20) */\n      add\n        /* \"contracts/libraries/BytesLib.sol\":3388:3392  0x40 */\n      0x40\n        /* \"contracts/libraries/BytesLib.sol\":3381:3415  mstore(0x40, add(tempBytes, 0x20)) */\n      mstore\n        /* \"contracts/libraries/BytesLib.sol\":821:3434  switch iszero(_length)\r... */\n      jump(tag_166)\n        /* \"contracts/libraries/BytesLib.sol\":861:2998  case 0 {\r... */\n    tag_167:\n        /* \"contracts/libraries/BytesLib.sol\":1058:1062  0x40 */\n      0x40\n        /* \"contracts/libraries/BytesLib.sol\":1052:1063  mload(0x40) */\n      mload\n        /* \"contracts/libraries/BytesLib.sol\":1039:1063  tempBytes := mload(0x40) */\n      swap2\n      pop\n        /* \"contracts/libraries/BytesLib.sol\":1763:1765  31 */\n      0x1f\n        /* \"contracts/libraries/BytesLib.sol\":1754:1761  _length */\n      dup5\n        /* \"contracts/libraries/BytesLib.sol\":1750:1766  and(_length, 31) */\n      and\n        /* \"contracts/libraries/BytesLib.sol\":2171:2180  lengthmod */\n      dup1\n        /* \"contracts/libraries/BytesLib.sol\":2164:2181  iszero(lengthmod) */\n      iszero\n        /* \"contracts/libraries/BytesLib.sol\":2158:2162  0x20 */\n      0x20\n        /* \"contracts/libraries/BytesLib.sol\":2154:2182  mul(0x20, iszero(lengthmod)) */\n      mul\n        /* \"contracts/libraries/BytesLib.sol\":2142:2151  lengthmod */\n      dup2\n        /* \"contracts/libraries/BytesLib.sol\":2131:2140  tempBytes */\n      dup5\n        /* \"contracts/libraries/BytesLib.sol\":2127:2152  add(tempBytes, lengthmod) */\n      add\n        /* \"contracts/libraries/BytesLib.sol\":2123:2183  add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod))) */\n      add\n        /* \"contracts/libraries/BytesLib.sol\":2224:2231  _length */\n      dup6\n        /* \"contracts/libraries/BytesLib.sol\":2220:2222  mc */\n      dup2\n        /* \"contracts/libraries/BytesLib.sol\":2216:2232  add(mc, _length) */\n      add\n        /* \"contracts/libraries/BytesLib.sol\":2497:2503  _start */\n      dup8\n        /* \"contracts/libraries/BytesLib.sol\":2483:2492  lengthmod */\n      dup4\n        /* \"contracts/libraries/BytesLib.sol\":2476:2493  iszero(lengthmod) */\n      iszero\n        /* \"contracts/libraries/BytesLib.sol\":2470:2474  0x20 */\n      0x20\n        /* \"contracts/libraries/BytesLib.sol\":2466:2494  mul(0x20, iszero(lengthmod)) */\n      mul\n        /* \"contracts/libraries/BytesLib.sol\":2454:2463  lengthmod */\n      dup5\n        /* \"contracts/libraries/BytesLib.sol\":2446:2452  _bytes */\n      dup12\n        /* \"contracts/libraries/BytesLib.sol\":2442:2464  add(_bytes, lengthmod) */\n      add\n        /* \"contracts/libraries/BytesLib.sol\":2438:2495  add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))) */\n      add\n        /* \"contracts/libraries/BytesLib.sol\":2434:2504  add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start) */\n      add\n        /* \"contracts/libraries/BytesLib.sol\":2256:2726  for {\r... */\n    tag_168:\n        /* \"contracts/libraries/BytesLib.sol\":2535:2538  end */\n      dup2\n        /* \"contracts/libraries/BytesLib.sol\":2531:2533  mc */\n      dup4\n        /* \"contracts/libraries/BytesLib.sol\":2528:2539  lt(mc, end) */\n      lt\n        /* \"contracts/libraries/BytesLib.sol\":2256:2726  for {\r... */\n      iszero\n      tag_170\n      jumpi\n        /* \"contracts/libraries/BytesLib.sol\":2693:2702  mload(cc) */\n      dup1\n      mload\n        /* \"contracts/libraries/BytesLib.sol\":2682:2703  mstore(mc, mload(cc)) */\n      dup4\n      mstore\n        /* \"contracts/libraries/BytesLib.sol\":2581:2585  0x20 */\n      0x20\n        /* \"contracts/libraries/BytesLib.sol\":2573:2586  add(mc, 0x20) */\n      swap3\n      dup4\n      add\n      swap3\n        /* \"contracts/libraries/BytesLib.sol\":2618:2631  add(cc, 0x20) */\n      add\n        /* \"contracts/libraries/BytesLib.sol\":2256:2726  for {\r... */\n      jump(tag_168)\n    tag_170:\n      pop\n      pop\n        /* \"contracts/libraries/BytesLib.sol\":2750:2776  mstore(tempBytes, _length) */\n      dup6\n      dup5\n      mstore\n        /* \"contracts/libraries/BytesLib.sol\":2974:2976  31 */\n      0x1f\n        /* \"contracts/libraries/BytesLib.sol\":2957:2968  add(mc, 31) */\n      add\n      not(0x1f)\n        /* \"contracts/libraries/BytesLib.sol\":2953:2978  and(add(mc, 31), not(31)) */\n      and\n        /* \"contracts/libraries/BytesLib.sol\":2947:2951  0x40 */\n      0x40\n        /* \"contracts/libraries/BytesLib.sol\":2940:2979  mstore(0x40, and(add(mc, 31), not(31))) */\n      mstore\n      pop\n        /* \"contracts/libraries/BytesLib.sol\":821:3434  switch iszero(_length)\r... */\n    tag_166:\n      pop\n        /* \"contracts/libraries/BytesLib.sol\":3464:3473  tempBytes */\n      swap5\n        /* \"contracts/libraries/BytesLib.sol\":410:3481  function slice(\r... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/libraries/PoolAddress.sol\":803:1084  function getPoolKey(\r... */\n    tag_132:\n        /* \"contracts/libraries/PoolAddress.sol\":924:938  PoolKey memory */\n      tag_171\n      tag_172\n      jump\t// in\n    tag_171:\n        /* \"contracts/libraries/PoolAddress.sol\":964:970  tokenB */\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/libraries/PoolAddress.sol\":955:970  tokenA > tokenB */\n      and\n        /* \"contracts/libraries/PoolAddress.sol\":955:961  tokenA */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/libraries/PoolAddress.sol\":955:970  tokenA > tokenB */\n      and\n      gt\n        /* \"contracts/libraries/PoolAddress.sol\":951:1007  if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA) */\n      iszero\n      tag_174\n      jumpi\n        /* \"contracts/libraries/PoolAddress.sol\":992:998  tokenB */\n      swap2\n      swap3\n        /* \"contracts/libraries/PoolAddress.sol\":1000:1006  tokenA */\n      swap2\n        /* \"contracts/libraries/PoolAddress.sol\":951:1007  if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA) */\n    tag_174:\n      pop\n        /* \"contracts/libraries/PoolAddress.sol\":1025:1076  PoolKey({token0: tokenA, token1: tokenB, fee: fee}) */\n      0x40\n      dup1\n      mload\n      0x60\n      dup2\n      add\n      dup3\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n      swap5\n      dup6\n      and\n      dup2\n      mstore\n      swap3\n      swap1\n      swap4\n      and\n      0x20\n      dup4\n      add\n      mstore\n      0xffffff\n      and\n      swap2\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      swap1\n        /* \"contracts/libraries/PoolAddress.sol\":803:1084  function getPoolKey(\r... */\n      jump\t// out\n        /* \"contracts/libraries/PoolAddress.sol\":1337:1863  function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\r... */\n    tag_133:\n        /* \"contracts/libraries/PoolAddress.sol\":1421:1433  address pool */\n      0x00\n        /* \"contracts/libraries/PoolAddress.sol\":1467:1470  key */\n      dup2\n        /* \"contracts/libraries/PoolAddress.sol\":1467:1477  key.token1 */\n      0x20\n      add\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/libraries/PoolAddress.sol\":1454:1477  key.token0 < key.token1 */\n      and\n        /* \"contracts/libraries/PoolAddress.sol\":1454:1457  key */\n      dup3\n        /* \"contracts/libraries/PoolAddress.sol\":1454:1464  key.token0 */\n      0x00\n      add\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/libraries/PoolAddress.sol\":1454:1477  key.token0 < key.token1 */\n      and\n      lt\n        /* \"contracts/libraries/PoolAddress.sol\":1446:1478  require(key.token0 < key.token1) */\n      tag_176\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_176:\n      pop\n        /* \"contracts/libraries/PoolAddress.sol\":1708:1718  key.token0 */\n      dup1\n      mload\n        /* \"contracts/libraries/PoolAddress.sol\":1720:1730  key.token1 */\n      0x20\n      dup1\n      dup4\n      add\n      mload\n        /* \"contracts/libraries/PoolAddress.sol\":1732:1739  key.fee */\n      0x40\n      swap4\n      dup5\n      add\n      mload\n        /* \"contracts/libraries/PoolAddress.sol\":1697:1740  abi.encode(key.token0, key.token1, key.fee) */\n      dup5\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n      swap5\n      dup6\n      and\n      dup2\n      dup6\n      add\n      mstore\n      swap4\n      swap1\n      swap2\n      and\n      dup4\n      dup6\n      add\n      mstore\n      0xffffff\n      and\n      0x60\n      dup1\n      dup5\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      dup4\n      mload\n      dup1\n      dup5\n      sub\n      dup3\n      add\n      dup2\n      mstore\n      0x80\n      dup5\n      add\n      dup6\n      mstore\n        /* \"contracts/libraries/PoolAddress.sol\":1687:1741  keccak256(abi.encode(key.token0, key.token1, key.fee)) */\n      dup1\n      mload\n      swap1\n      dup4\n      add\n      keccak256\n      not(sub(shl(0xf8, 0x01), 0x01))\n        /* \"contracts/libraries/PoolAddress.sol\":1576:1810  abi.encodePacked(\r... */\n      0xa0\n      dup6\n      add\n      mstore\n      swap5\n      swap1\n      shl\n      not(0xffffffffffffffffffffffff)\n      and\n      0xa1\n      dup4\n      add\n      mstore\n      0xb5\n      dup3\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n        /* \"contracts/libraries/PoolAddress.sol\":246:312  0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54 */\n      0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54\n        /* \"contracts/libraries/PoolAddress.sol\":1576:1810  abi.encodePacked(\r... */\n      0xd5\n      dup1\n      dup4\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      dup3\n      mload\n      dup1\n      dup4\n      sub\n      swap1\n      swap2\n      add\n      dup2\n      mstore\n      0xf5\n      swap1\n      swap2\n      add\n      swap1\n      swap2\n      mstore\n        /* \"contracts/libraries/PoolAddress.sol\":1544:1829  keccak256(\r... */\n      dup1\n      mload\n      swap2\n      add\n      keccak256\n      swap1\n        /* \"contracts/libraries/PoolAddress.sol\":1337:1863  function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\r... */\n      jump\t// out\n        /* \"contracts/libraries/CallbackValidation.sol\":1216:1502  function verifyCallback(address factory, PoolAddress.PoolKey memory poolKey)\r... */\n    tag_155:\n        /* \"contracts/libraries/CallbackValidation.sol\":1343:1362  IUniswapV3Pool pool */\n      0x00\n        /* \"contracts/libraries/CallbackValidation.sol\":1402:1446  PoolAddress.computeAddress(factory, poolKey) */\n      tag_178\n        /* \"contracts/libraries/CallbackValidation.sol\":1429:1436  factory */\n      dup4\n        /* \"contracts/libraries/CallbackValidation.sol\":1438:1445  poolKey */\n      dup4\n        /* \"contracts/libraries/CallbackValidation.sol\":1402:1428  PoolAddress.computeAddress */\n      tag_133\n        /* \"contracts/libraries/CallbackValidation.sol\":1402:1446  PoolAddress.computeAddress(factory, poolKey) */\n      jump\t// in\n    tag_178:\n        /* \"contracts/libraries/CallbackValidation.sol\":1380:1447  pool = IUniswapV3Pool(PoolAddress.computeAddress(factory, poolKey)) */\n      swap1\n      pop\n        /* \"contracts/libraries/CallbackValidation.sol\":1466:1476  msg.sender */\n      caller\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/libraries/CallbackValidation.sol\":1466:1493  msg.sender == address(pool) */\n      dup3\n      and\n      eq\n        /* \"contracts/libraries/CallbackValidation.sol\":1458:1494  require(msg.sender == address(pool)) */\n      tag_41\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_172:\n      0x40\n      dup1\n      mload\n      0x60\n      dup2\n      add\n      dup3\n      mstore\n      0x00\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      swap2\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      swap1\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220934f0cabd75fbc5170927a0fe70889f701a9955ddb6289f60f552f2727c767f764736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60c060405234801561001057600080fd5b506040516110963803806110968339818101604052604081101561003357600080fd5b5080516020909101516001600160601b0319606092831b8116608052911b1660a05260805160601c60a05160601c61100e610088600039806105e052508061060452806108955280610992525061100e6000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063c45a01551161005b578063c45a0155146101a7578063cdca1753146101af578063f7729d4314610255578063fa461e331461029e5761007d565b80632f80bb1d1461008257806330d07f211461013a5780634aa4a4fc14610183575b600080fd5b6101286004803603604081101561009857600080fd5b810190602081018135600160201b8111156100b257600080fd5b8201836020820111156100c457600080fd5b803590602001918460018302840111600160201b831117156100e557600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505091359250610350915050565b60408051918252519081900360200190f35b610128600480360360a081101561015057600080fd5b506001600160a01b038135811691602081013582169162ffffff60408301351691606081013591608090910135166103b5565b61018b6105de565b604080516001600160a01b039092168252519081900360200190f35b61018b610602565b610128600480360360408110156101c557600080fd5b810190602081018135600160201b8111156101df57600080fd5b8201836020820111156101f157600080fd5b803590602001918460018302840111600160201b8311171561021257600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505091359250610626915050565b610128600480360360a081101561026b57600080fd5b506001600160a01b038135811691602081013582169162ffffff6040830135169160608101359160809091013516610674565b61034e600480360360608110156102b457600080fd5b813591602081013591810190606081016040820135600160201b8111156102da57600080fd5b8201836020820111156102ec57600080fd5b803590602001918460018302840111600160201b8311171561030d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610864945050505050565b005b60005b600061035e8461093b565b9050600080600061036e87610943565b9250925092506103828284838960006103b5565b9550831561039a5761039387610974565b96506103a6565b859450505050506103af565b50505050610353565b92915050565b60006001600160a01b03808616878216109083166103d35760008490555b6103de87878761098b565b6001600160a01b031663128acb0830836103f7886109c9565b6000036001600160a01b0388161561040f5787610435565b8561042e5773fffd8963efd1fc6a506488495d951d5263988d25610435565b6401000276a45b8b8b8e60405160200180846001600160a01b031660601b81526014018362ffffff1660e81b8152600301826001600160a01b031660601b815260140193505050506040516020818303038152906040526040518663ffffffff1660e01b815260040180866001600160a01b031681526020018515158152602001848152602001836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b838110156104fd5781810151838201526020016104e5565b50505050905090810190601f16801561052a5780820380516001836020036101000a031916815260200191505b5096505050505050506040805180830381600087803b15801561054c57600080fd5b505af192505050801561057857506040513d604081101561056c57600080fd5b50805160209091015160015b6105d1573d8080156105a6576040519150601f19603f3d011682016040523d82523d6000602084013e6105ab565b606091505b506001600160a01b0384166105bf57600080555b6105c8816109df565b925050506105d5565b5050505b95945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60005b60006106348461093b565b9050600080600061064487610943565b925092509250610658838383896000610674565b9550831561039a5761066987610974565b965050505050610629565b60006001600160a01b038086169087161061069087878761098b565b6001600160a01b031663128acb0830836106a9886109c9565b6001600160a01b038816156106be57876106e4565b856106dd5773fffd8963efd1fc6a506488495d951d5263988d256106e4565b6401000276a45b8c8b8d60405160200180846001600160a01b031660601b81526014018362ffffff1660e81b8152600301826001600160a01b031660601b815260140193505050506040516020818303038152906040526040518663ffffffff1660e01b815260040180866001600160a01b031681526020018515158152602001848152602001836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b838110156107ac578181015183820152602001610794565b50505050905090810190601f1680156107d95780820380516001836020036101000a031916815260200191505b5096505050505050506040805180830381600087803b1580156107fb57600080fd5b505af192505050801561082757506040513d604081101561081b57600080fd5b50805160209091015160015b6105d1573d808015610855576040519150601f19603f3d011682016040523d82523d6000602084013e61085a565b606091505b506105c8816109df565b60008313806108735750600082135b61087c57600080fd5b600080600061088a84610943565b9250925092506108bc7f0000000000000000000000000000000000000000000000000000000000000000848484610b9d565b5060008060008089136108e857856001600160a01b0316856001600160a01b031610888a600003610903565b846001600160a01b0316866001600160a01b03161089896000035b925092509250821561091a57604051818152602081fd5b6000541561093057600054811461093057600080fd5b604051828152602081fd5b516042111590565b600080806109518482610bb3565b925061095e846014610c63565b905061096b846017610bb3565b91509193909250565b80516060906103af90839060179060161901610d0a565b60006109c17f00000000000000000000000000000000000000000000000000000000000000006109bc868686610e5b565b610eb1565b949350505050565b6000600160ff1b82106109db57600080fd5b5090565b60008151602014610b8057604482511015610a34576040805162461bcd60e51b815260206004820152601060248201526f2ab732bc3832b1ba32b21032b93937b960811b604482015290519081900360640190fd5b6004820180519092602401906020811015610a4e57600080fd5b8101908080516040519392919084600160201b821115610a6d57600080fd5b908301906020820185811115610a8257600080fd5b8251600160201b811182820188101715610a9b57600080fd5b82525081516020918201929091019080838360005b83811015610ac8578181015183820152602001610ab0565b50505050905090810190601f168015610af55780820380516001836020036101000a031916815260200191505b5060405250505060405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610b45578181015183820152602001610b2d565b50505050905090810190601f168015610b725780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b818060200190516020811015610b9557600080fd5b505192915050565b60006105d585610bae868686610e5b565b610f95565b600081826014011015610c02576040805162461bcd60e51b8152602060048201526012602482015271746f416464726573735f6f766572666c6f7760701b604482015290519081900360640190fd5b8160140183511015610c53576040805162461bcd60e51b8152602060048201526015602482015274746f416464726573735f6f75744f66426f756e647360581b604482015290519081900360640190fd5b500160200151600160601b900490565b600081826003011015610cb1576040805162461bcd60e51b8152602060048201526011602482015270746f55696e7432345f6f766572666c6f7760781b604482015290519081900360640190fd5b8160030183511015610d01576040805162461bcd60e51b8152602060048201526014602482015273746f55696e7432345f6f75744f66426f756e647360601b604482015290519081900360640190fd5b50016003015190565b60608182601f011015610d55576040805162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b604482015290519081900360640190fd5b828284011015610d9d576040805162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b604482015290519081900360640190fd5b81830184511015610de9576040805162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b604482015290519081900360640190fd5b606082158015610e085760405191506000825260208201604052610e52565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015610e41578051835260209283019201610e29565b5050858452601f01601f1916604052505b50949350505050565b610e63610fb8565b826001600160a01b0316846001600160a01b03161115610e81579192915b50604080516060810182526001600160a01b03948516815292909316602083015262ffffff169181019190915290565b600081602001516001600160a01b031682600001516001600160a01b031610610ed957600080fd5b50805160208083015160409384015184516001600160a01b0394851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301206001600160f81b031960a085015294901b6bffffffffffffffffffffffff191660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b6000610fa18383610eb1565b9050336001600160a01b038216146103af57600080fd5b60408051606081018252600080825260208201819052918101919091529056fea2646970667358221220934f0cabd75fbc5170927a0fe70889f701a9955ddb6289f60f552f2727c767f764736f6c63430007060033",
							"opcodes": "PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x1096 CODESIZE SUB DUP1 PUSH2 0x1096 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT PUSH1 0x60 SWAP3 DUP4 SHL DUP2 AND PUSH1 0x80 MSTORE SWAP2 SHL AND PUSH1 0xA0 MSTORE PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0x60 SHR PUSH2 0x100E PUSH2 0x88 PUSH1 0x0 CODECOPY DUP1 PUSH2 0x5E0 MSTORE POP DUP1 PUSH2 0x604 MSTORE DUP1 PUSH2 0x895 MSTORE DUP1 PUSH2 0x992 MSTORE POP PUSH2 0x100E PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xC45A0155 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xC45A0155 EQ PUSH2 0x1A7 JUMPI DUP1 PUSH4 0xCDCA1753 EQ PUSH2 0x1AF JUMPI DUP1 PUSH4 0xF7729D43 EQ PUSH2 0x255 JUMPI DUP1 PUSH4 0xFA461E33 EQ PUSH2 0x29E JUMPI PUSH2 0x7D JUMP JUMPDEST DUP1 PUSH4 0x2F80BB1D EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0x30D07F21 EQ PUSH2 0x13A JUMPI DUP1 PUSH4 0x4AA4A4FC EQ PUSH2 0x183 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x128 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 PUSH1 0x20 DUP2 ADD DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x20 SHL DUP2 GT ISZERO PUSH2 0xB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH1 0x1 PUSH1 0x20 SHL DUP4 GT OR ISZERO PUSH2 0xE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 POP POP SWAP2 CALLDATALOAD SWAP3 POP PUSH2 0x350 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x128 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x150 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD DUP3 AND SWAP2 PUSH3 0xFFFFFF PUSH1 0x40 DUP4 ADD CALLDATALOAD AND SWAP2 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0x80 SWAP1 SWAP2 ADD CALLDATALOAD AND PUSH2 0x3B5 JUMP JUMPDEST PUSH2 0x18B PUSH2 0x5DE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x18B PUSH2 0x602 JUMP JUMPDEST PUSH2 0x128 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 PUSH1 0x20 DUP2 ADD DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x20 SHL DUP2 GT ISZERO PUSH2 0x1DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x1F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH1 0x1 PUSH1 0x20 SHL DUP4 GT OR ISZERO PUSH2 0x212 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 POP POP SWAP2 CALLDATALOAD SWAP3 POP PUSH2 0x626 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x128 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x26B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD DUP3 AND SWAP2 PUSH3 0xFFFFFF PUSH1 0x40 DUP4 ADD CALLDATALOAD AND SWAP2 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0x80 SWAP1 SWAP2 ADD CALLDATALOAD AND PUSH2 0x674 JUMP JUMPDEST PUSH2 0x34E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x2B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP2 DUP2 ADD SWAP1 PUSH1 0x60 DUP2 ADD PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x20 SHL DUP2 GT ISZERO PUSH2 0x2DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x2EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH1 0x1 PUSH1 0x20 SHL DUP4 GT OR ISZERO PUSH2 0x30D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 POP PUSH2 0x864 SWAP5 POP POP POP POP POP JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x0 PUSH2 0x35E DUP5 PUSH2 0x93B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x36E DUP8 PUSH2 0x943 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x382 DUP3 DUP5 DUP4 DUP10 PUSH1 0x0 PUSH2 0x3B5 JUMP JUMPDEST SWAP6 POP DUP4 ISZERO PUSH2 0x39A JUMPI PUSH2 0x393 DUP8 PUSH2 0x974 JUMP JUMPDEST SWAP7 POP PUSH2 0x3A6 JUMP JUMPDEST DUP6 SWAP5 POP POP POP POP POP PUSH2 0x3AF JUMP JUMPDEST POP POP POP POP PUSH2 0x353 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND DUP8 DUP3 AND LT SWAP1 DUP4 AND PUSH2 0x3D3 JUMPI PUSH1 0x0 DUP5 SWAP1 SSTORE JUMPDEST PUSH2 0x3DE DUP8 DUP8 DUP8 PUSH2 0x98B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x128ACB08 ADDRESS DUP4 PUSH2 0x3F7 DUP9 PUSH2 0x9C9 JUMP JUMPDEST PUSH1 0x0 SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND ISZERO PUSH2 0x40F JUMPI DUP8 PUSH2 0x435 JUMP JUMPDEST DUP6 PUSH2 0x42E JUMPI PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D25 PUSH2 0x435 JUMP JUMPDEST PUSH5 0x1000276A4 JUMPDEST DUP12 DUP12 DUP15 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD DUP4 PUSH3 0xFFFFFF AND PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x3 ADD DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4FD JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x4E5 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x52A JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP7 POP POP POP POP POP POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x54C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x578 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x56C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD PUSH1 0x1 JUMPDEST PUSH2 0x5D1 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x5A6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5AB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x5BF JUMPI PUSH1 0x0 DUP1 SSTORE JUMPDEST PUSH2 0x5C8 DUP2 PUSH2 0x9DF JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x5D5 JUMP JUMPDEST POP POP POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x0 PUSH2 0x634 DUP5 PUSH2 0x93B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x644 DUP8 PUSH2 0x943 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x658 DUP4 DUP4 DUP4 DUP10 PUSH1 0x0 PUSH2 0x674 JUMP JUMPDEST SWAP6 POP DUP4 ISZERO PUSH2 0x39A JUMPI PUSH2 0x669 DUP8 PUSH2 0x974 JUMP JUMPDEST SWAP7 POP POP POP POP POP PUSH2 0x629 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND SWAP1 DUP8 AND LT PUSH2 0x690 DUP8 DUP8 DUP8 PUSH2 0x98B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x128ACB08 ADDRESS DUP4 PUSH2 0x6A9 DUP9 PUSH2 0x9C9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND ISZERO PUSH2 0x6BE JUMPI DUP8 PUSH2 0x6E4 JUMP JUMPDEST DUP6 PUSH2 0x6DD JUMPI PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D25 PUSH2 0x6E4 JUMP JUMPDEST PUSH5 0x1000276A4 JUMPDEST DUP13 DUP12 DUP14 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD DUP4 PUSH3 0xFFFFFF AND PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x3 ADD DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x7AC JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x794 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x7D9 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP7 POP POP POP POP POP POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x827 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x81B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD PUSH1 0x1 JUMPDEST PUSH2 0x5D1 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x855 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x85A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH2 0x5C8 DUP2 PUSH2 0x9DF JUMP JUMPDEST PUSH1 0x0 DUP4 SGT DUP1 PUSH2 0x873 JUMPI POP PUSH1 0x0 DUP3 SGT JUMPDEST PUSH2 0x87C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x88A DUP5 PUSH2 0x943 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x8BC PUSH32 0x0 DUP5 DUP5 DUP5 PUSH2 0xB9D JUMP JUMPDEST POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP10 SGT PUSH2 0x8E8 JUMPI DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT DUP9 DUP11 PUSH1 0x0 SUB PUSH2 0x903 JUMP JUMPDEST DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT DUP10 DUP10 PUSH1 0x0 SUB JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP3 ISZERO PUSH2 0x91A JUMPI PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 REVERT JUMPDEST PUSH1 0x0 SLOAD ISZERO PUSH2 0x930 JUMPI PUSH1 0x0 SLOAD DUP2 EQ PUSH2 0x930 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 REVERT JUMPDEST MLOAD PUSH1 0x42 GT ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x951 DUP5 DUP3 PUSH2 0xBB3 JUMP JUMPDEST SWAP3 POP PUSH2 0x95E DUP5 PUSH1 0x14 PUSH2 0xC63 JUMP JUMPDEST SWAP1 POP PUSH2 0x96B DUP5 PUSH1 0x17 PUSH2 0xBB3 JUMP JUMPDEST SWAP2 POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 PUSH2 0x3AF SWAP1 DUP4 SWAP1 PUSH1 0x17 SWAP1 PUSH1 0x16 NOT ADD PUSH2 0xD0A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9C1 PUSH32 0x0 PUSH2 0x9BC DUP7 DUP7 DUP7 PUSH2 0xE5B JUMP JUMPDEST PUSH2 0xEB1 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0xFF SHL DUP3 LT PUSH2 0x9DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x20 EQ PUSH2 0xB80 JUMPI PUSH1 0x44 DUP3 MLOAD LT ISZERO PUSH2 0xA34 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x2AB732BC3832B1BA32B21032B93937B9 PUSH1 0x81 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x4 DUP3 ADD DUP1 MLOAD SWAP1 SWAP3 PUSH1 0x24 ADD SWAP1 PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xA4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH1 0x1 PUSH1 0x20 SHL DUP3 GT ISZERO PUSH2 0xA6D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0xA82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x20 SHL DUP2 GT DUP3 DUP3 ADD DUP9 LT OR ISZERO PUSH2 0xA9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MSTORE POP DUP2 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xAC8 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xAB0 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xAF5 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP PUSH1 0x40 MSTORE POP POP POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xB45 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xB2D JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xB72 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xB95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5D5 DUP6 PUSH2 0xBAE DUP7 DUP7 DUP7 PUSH2 0xE5B JUMP JUMPDEST PUSH2 0xF95 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP3 PUSH1 0x14 ADD LT ISZERO PUSH2 0xC02 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x746F416464726573735F6F766572666C6F77 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH2 0xC53 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x746F416464726573735F6F75744F66426F756E6473 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP3 PUSH1 0x3 ADD LT ISZERO PUSH2 0xCB1 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x746F55696E7432345F6F766572666C6F77 PUSH1 0x78 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x3 ADD DUP4 MLOAD LT ISZERO PUSH2 0xD01 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x746F55696E7432345F6F75744F66426F756E6473 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP ADD PUSH1 0x3 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 DUP3 PUSH1 0x1F ADD LT ISZERO PUSH2 0xD55 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x736C6963655F6F766572666C6F77 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP3 DUP3 DUP5 ADD LT ISZERO PUSH2 0xD9D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x736C6963655F6F766572666C6F77 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 DUP4 ADD DUP5 MLOAD LT ISZERO PUSH2 0xDE9 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x736C6963655F6F75744F66426F756E6473 PUSH1 0x78 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x60 DUP3 ISZERO DUP1 ISZERO PUSH2 0xE08 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x0 DUP3 MSTORE PUSH1 0x20 DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xE52 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F DUP5 AND DUP1 ISZERO PUSH1 0x20 MUL DUP2 DUP5 ADD ADD DUP6 DUP2 ADD DUP8 DUP4 ISZERO PUSH1 0x20 MUL DUP5 DUP12 ADD ADD ADD JUMPDEST DUP2 DUP4 LT ISZERO PUSH2 0xE41 JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0xE29 JUMP JUMPDEST POP POP DUP6 DUP5 MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x40 MSTORE POP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xE63 PUSH2 0xFB8 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0xE81 JUMPI SWAP2 SWAP3 SWAP2 JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 SWAP1 SWAP4 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH3 0xFFFFFF AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT PUSH2 0xED9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD PUSH1 0x40 SWAP4 DUP5 ADD MLOAD DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 DUP6 ADD MSTORE SWAP4 SWAP1 SWAP2 AND DUP4 DUP6 ADD MSTORE PUSH3 0xFFFFFF AND PUSH1 0x60 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MLOAD DUP1 DUP5 SUB DUP3 ADD DUP2 MSTORE PUSH1 0x80 DUP5 ADD DUP6 MSTORE DUP1 MLOAD SWAP1 DUP4 ADD KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT PUSH1 0xA0 DUP6 ADD MSTORE SWAP5 SWAP1 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0xA1 DUP4 ADD MSTORE PUSH1 0xB5 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH32 0xE34F199B19B2B4F47F68442619D555527D244F78A3297EA89325F843F87B8B54 PUSH1 0xD5 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xF5 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFA1 DUP4 DUP4 PUSH2 0xEB1 JUMP JUMPDEST SWAP1 POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ PUSH2 0x3AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP4 0x4F 0xC 0xAB 0xD7 0x5F 0xBC MLOAD PUSH17 0x927A0FE70889F701A9955DDB6289F60F55 0x2F 0x27 0x27 0xC7 PUSH8 0xF764736F6C634300 SMOD MOD STOP CALLER ",
							"sourceMap": "873:5871:13:-:0;;;1155:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1155:90:13;;;;;;;-1:-1:-1;;;;;;536:18:10;;;;;;;;565:14;;;;;873:5871:13;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {
								"1070": [
									{
										"length": 32,
										"start": 1540
									},
									{
										"length": 32,
										"start": 2197
									},
									{
										"length": 32,
										"start": 2450
									}
								],
								"1074": [
									{
										"length": 32,
										"start": 1504
									}
								]
							},
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xC45A0155 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xC45A0155 EQ PUSH2 0x1A7 JUMPI DUP1 PUSH4 0xCDCA1753 EQ PUSH2 0x1AF JUMPI DUP1 PUSH4 0xF7729D43 EQ PUSH2 0x255 JUMPI DUP1 PUSH4 0xFA461E33 EQ PUSH2 0x29E JUMPI PUSH2 0x7D JUMP JUMPDEST DUP1 PUSH4 0x2F80BB1D EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0x30D07F21 EQ PUSH2 0x13A JUMPI DUP1 PUSH4 0x4AA4A4FC EQ PUSH2 0x183 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x128 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 PUSH1 0x20 DUP2 ADD DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x20 SHL DUP2 GT ISZERO PUSH2 0xB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH1 0x1 PUSH1 0x20 SHL DUP4 GT OR ISZERO PUSH2 0xE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 POP POP SWAP2 CALLDATALOAD SWAP3 POP PUSH2 0x350 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x128 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x150 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD DUP3 AND SWAP2 PUSH3 0xFFFFFF PUSH1 0x40 DUP4 ADD CALLDATALOAD AND SWAP2 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0x80 SWAP1 SWAP2 ADD CALLDATALOAD AND PUSH2 0x3B5 JUMP JUMPDEST PUSH2 0x18B PUSH2 0x5DE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x18B PUSH2 0x602 JUMP JUMPDEST PUSH2 0x128 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 PUSH1 0x20 DUP2 ADD DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x20 SHL DUP2 GT ISZERO PUSH2 0x1DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x1F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH1 0x1 PUSH1 0x20 SHL DUP4 GT OR ISZERO PUSH2 0x212 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 POP POP SWAP2 CALLDATALOAD SWAP3 POP PUSH2 0x626 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x128 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x26B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD DUP3 AND SWAP2 PUSH3 0xFFFFFF PUSH1 0x40 DUP4 ADD CALLDATALOAD AND SWAP2 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0x80 SWAP1 SWAP2 ADD CALLDATALOAD AND PUSH2 0x674 JUMP JUMPDEST PUSH2 0x34E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x2B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP2 DUP2 ADD SWAP1 PUSH1 0x60 DUP2 ADD PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x20 SHL DUP2 GT ISZERO PUSH2 0x2DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x2EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH1 0x1 PUSH1 0x20 SHL DUP4 GT OR ISZERO PUSH2 0x30D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 POP PUSH2 0x864 SWAP5 POP POP POP POP POP JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x0 PUSH2 0x35E DUP5 PUSH2 0x93B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x36E DUP8 PUSH2 0x943 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x382 DUP3 DUP5 DUP4 DUP10 PUSH1 0x0 PUSH2 0x3B5 JUMP JUMPDEST SWAP6 POP DUP4 ISZERO PUSH2 0x39A JUMPI PUSH2 0x393 DUP8 PUSH2 0x974 JUMP JUMPDEST SWAP7 POP PUSH2 0x3A6 JUMP JUMPDEST DUP6 SWAP5 POP POP POP POP POP PUSH2 0x3AF JUMP JUMPDEST POP POP POP POP PUSH2 0x353 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND DUP8 DUP3 AND LT SWAP1 DUP4 AND PUSH2 0x3D3 JUMPI PUSH1 0x0 DUP5 SWAP1 SSTORE JUMPDEST PUSH2 0x3DE DUP8 DUP8 DUP8 PUSH2 0x98B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x128ACB08 ADDRESS DUP4 PUSH2 0x3F7 DUP9 PUSH2 0x9C9 JUMP JUMPDEST PUSH1 0x0 SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND ISZERO PUSH2 0x40F JUMPI DUP8 PUSH2 0x435 JUMP JUMPDEST DUP6 PUSH2 0x42E JUMPI PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D25 PUSH2 0x435 JUMP JUMPDEST PUSH5 0x1000276A4 JUMPDEST DUP12 DUP12 DUP15 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD DUP4 PUSH3 0xFFFFFF AND PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x3 ADD DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4FD JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x4E5 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x52A JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP7 POP POP POP POP POP POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x54C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x578 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x56C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD PUSH1 0x1 JUMPDEST PUSH2 0x5D1 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x5A6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5AB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x5BF JUMPI PUSH1 0x0 DUP1 SSTORE JUMPDEST PUSH2 0x5C8 DUP2 PUSH2 0x9DF JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x5D5 JUMP JUMPDEST POP POP POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x0 PUSH2 0x634 DUP5 PUSH2 0x93B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x644 DUP8 PUSH2 0x943 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x658 DUP4 DUP4 DUP4 DUP10 PUSH1 0x0 PUSH2 0x674 JUMP JUMPDEST SWAP6 POP DUP4 ISZERO PUSH2 0x39A JUMPI PUSH2 0x669 DUP8 PUSH2 0x974 JUMP JUMPDEST SWAP7 POP POP POP POP POP PUSH2 0x629 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND SWAP1 DUP8 AND LT PUSH2 0x690 DUP8 DUP8 DUP8 PUSH2 0x98B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x128ACB08 ADDRESS DUP4 PUSH2 0x6A9 DUP9 PUSH2 0x9C9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND ISZERO PUSH2 0x6BE JUMPI DUP8 PUSH2 0x6E4 JUMP JUMPDEST DUP6 PUSH2 0x6DD JUMPI PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D25 PUSH2 0x6E4 JUMP JUMPDEST PUSH5 0x1000276A4 JUMPDEST DUP13 DUP12 DUP14 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD DUP4 PUSH3 0xFFFFFF AND PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x3 ADD DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x7AC JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x794 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x7D9 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP7 POP POP POP POP POP POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x827 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x81B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD PUSH1 0x1 JUMPDEST PUSH2 0x5D1 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x855 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x85A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH2 0x5C8 DUP2 PUSH2 0x9DF JUMP JUMPDEST PUSH1 0x0 DUP4 SGT DUP1 PUSH2 0x873 JUMPI POP PUSH1 0x0 DUP3 SGT JUMPDEST PUSH2 0x87C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x88A DUP5 PUSH2 0x943 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x8BC PUSH32 0x0 DUP5 DUP5 DUP5 PUSH2 0xB9D JUMP JUMPDEST POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP10 SGT PUSH2 0x8E8 JUMPI DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT DUP9 DUP11 PUSH1 0x0 SUB PUSH2 0x903 JUMP JUMPDEST DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT DUP10 DUP10 PUSH1 0x0 SUB JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP3 ISZERO PUSH2 0x91A JUMPI PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 REVERT JUMPDEST PUSH1 0x0 SLOAD ISZERO PUSH2 0x930 JUMPI PUSH1 0x0 SLOAD DUP2 EQ PUSH2 0x930 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 REVERT JUMPDEST MLOAD PUSH1 0x42 GT ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x951 DUP5 DUP3 PUSH2 0xBB3 JUMP JUMPDEST SWAP3 POP PUSH2 0x95E DUP5 PUSH1 0x14 PUSH2 0xC63 JUMP JUMPDEST SWAP1 POP PUSH2 0x96B DUP5 PUSH1 0x17 PUSH2 0xBB3 JUMP JUMPDEST SWAP2 POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 PUSH2 0x3AF SWAP1 DUP4 SWAP1 PUSH1 0x17 SWAP1 PUSH1 0x16 NOT ADD PUSH2 0xD0A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9C1 PUSH32 0x0 PUSH2 0x9BC DUP7 DUP7 DUP7 PUSH2 0xE5B JUMP JUMPDEST PUSH2 0xEB1 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0xFF SHL DUP3 LT PUSH2 0x9DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x20 EQ PUSH2 0xB80 JUMPI PUSH1 0x44 DUP3 MLOAD LT ISZERO PUSH2 0xA34 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x2AB732BC3832B1BA32B21032B93937B9 PUSH1 0x81 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x4 DUP3 ADD DUP1 MLOAD SWAP1 SWAP3 PUSH1 0x24 ADD SWAP1 PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xA4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH1 0x1 PUSH1 0x20 SHL DUP3 GT ISZERO PUSH2 0xA6D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0xA82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x20 SHL DUP2 GT DUP3 DUP3 ADD DUP9 LT OR ISZERO PUSH2 0xA9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MSTORE POP DUP2 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xAC8 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xAB0 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xAF5 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP PUSH1 0x40 MSTORE POP POP POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xB45 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xB2D JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xB72 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xB95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5D5 DUP6 PUSH2 0xBAE DUP7 DUP7 DUP7 PUSH2 0xE5B JUMP JUMPDEST PUSH2 0xF95 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP3 PUSH1 0x14 ADD LT ISZERO PUSH2 0xC02 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x746F416464726573735F6F766572666C6F77 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH2 0xC53 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x746F416464726573735F6F75744F66426F756E6473 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x60 SHL SWAP1 DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP3 PUSH1 0x3 ADD LT ISZERO PUSH2 0xCB1 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x746F55696E7432345F6F766572666C6F77 PUSH1 0x78 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x3 ADD DUP4 MLOAD LT ISZERO PUSH2 0xD01 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x746F55696E7432345F6F75744F66426F756E6473 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP ADD PUSH1 0x3 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 DUP3 PUSH1 0x1F ADD LT ISZERO PUSH2 0xD55 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x736C6963655F6F766572666C6F77 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP3 DUP3 DUP5 ADD LT ISZERO PUSH2 0xD9D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x736C6963655F6F766572666C6F77 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 DUP4 ADD DUP5 MLOAD LT ISZERO PUSH2 0xDE9 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x736C6963655F6F75744F66426F756E6473 PUSH1 0x78 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x60 DUP3 ISZERO DUP1 ISZERO PUSH2 0xE08 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x0 DUP3 MSTORE PUSH1 0x20 DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xE52 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F DUP5 AND DUP1 ISZERO PUSH1 0x20 MUL DUP2 DUP5 ADD ADD DUP6 DUP2 ADD DUP8 DUP4 ISZERO PUSH1 0x20 MUL DUP5 DUP12 ADD ADD ADD JUMPDEST DUP2 DUP4 LT ISZERO PUSH2 0xE41 JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0xE29 JUMP JUMPDEST POP POP DUP6 DUP5 MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x40 MSTORE POP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xE63 PUSH2 0xFB8 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0xE81 JUMPI SWAP2 SWAP3 SWAP2 JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 SWAP1 SWAP4 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH3 0xFFFFFF AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT PUSH2 0xED9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD PUSH1 0x40 SWAP4 DUP5 ADD MLOAD DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 DUP6 ADD MSTORE SWAP4 SWAP1 SWAP2 AND DUP4 DUP6 ADD MSTORE PUSH3 0xFFFFFF AND PUSH1 0x60 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MLOAD DUP1 DUP5 SUB DUP3 ADD DUP2 MSTORE PUSH1 0x80 DUP5 ADD DUP6 MSTORE DUP1 MLOAD SWAP1 DUP4 ADD KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT PUSH1 0xA0 DUP6 ADD MSTORE SWAP5 SWAP1 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0xA1 DUP4 ADD MSTORE PUSH1 0xB5 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH32 0xE34F199B19B2B4F47F68442619D555527D244F78A3297EA89325F843F87B8B54 PUSH1 0xD5 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xF5 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFA1 DUP4 DUP4 PUSH2 0xEB1 JUMP JUMPDEST SWAP1 POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ PUSH2 0x3AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP4 0x4F 0xC 0xAB 0xD7 0x5F 0xBC MLOAD PUSH17 0x927A0FE70889F701A9955DDB6289F60F55 0x2F 0x27 0x27 0xC7 PUSH8 0xF764736F6C634300 SMOD MOD STOP CALLER ",
							"sourceMap": "873:5871:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6060:681;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;6060:681:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;6060:681:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6060:681:13;;-1:-1:-1;;6060:681:13;;;-1:-1:-1;6060:681:13;;-1:-1:-1;;6060:681:13:i;:::-;;;;;;;;;;;;;;;;4924:1099;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;4924:1099:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;431:39:10:-;;;:::i;:::-;;;;-1:-1:-1;;;;;431:39:10;;;;;;;;;;;;;;337:41;;;:::i;4211:676:13:-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;4211:676:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;4211:676:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4211:676:13;;-1:-1:-1;;4211:676:13;;;-1:-1:-1;4211:676:13;;-1:-1:-1;;4211:676:13:i;3334:840::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;3334:840:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1560:1273::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1560:1273:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1560:1273:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1560:1273:13;;-1:-1:-1;1560:1273:13;;-1:-1:-1;;;;;1560:1273:13:i;:::-;;6060:681;6151:16;6180:554;6208:21;6232:23;:4;:21;:23::i;:::-;6208:47;;6273:16;6291:15;6308:10;6322:22;:4;:20;:22::i;:::-;6272:72;;;;;;6453:60;6476:7;6485:8;6495:3;6500:9;6511:1;6453:22;:60::i;:::-;6441:72;;6590:16;6586:137;;;6634:16;:4;:14;:16::i;:::-;6627:23;;6586:137;;;6698:9;6691:16;;;;;;;;6586:137;6180:554;;;;;;;6060:681;;;;:::o;4924:1099::-;5126:16;-1:-1:-1;;;;;5173:18:13;;;;;;;;5318:22;;5314:55;;5342:15;:27;;;5314:55;5397:31;5405:7;5414:8;5424:3;5397:7;:31::i;:::-;-1:-1:-1;;;;;5397:36:13;;5460:4;5534:10;5564:20;:9;:18;:20::i;:::-;5563:21;;-1:-1:-1;;;;;5603:22:13;;;:159;;5745:17;5603:159;;;5650:10;:70;;5693:27;5650:70;;;5663:27;5650:70;5798:8;5808:3;5813:7;5781:40;;;;;;-1:-1:-1;;;;;5781:40:13;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5781:40:13;;;;;;;;;;;;;;;;;;;;;;;;5397:439;;;;;;;;;;;;;-1:-1:-1;;;;;5397:439:13;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5397:439:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5397:439:13;;;;;;;;;5380:636;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;5896:22:13;;5892:50;;5927:15;5920:22;;5892:50;5979:25;5997:6;5979:17;:25::i;:::-;5972:32;;;;;;5380:636;;;4924:1099;;;;;;;;;:::o;431:39:10:-;;;:::o;337:41::-;;;:::o;4211:676:13:-;4300:17;4330:550;4358:21;4382:23;:4;:21;:23::i;:::-;4358:47;;4423:15;4440:16;4458:10;4472:22;:4;:20;:22::i;:::-;4422:72;;;;;;4602:58;4624:7;4633:8;4643:3;4648:8;4658:1;4602:21;:58::i;:::-;4591:69;;4737:16;4733:136;;;4781:16;:4;:14;:16::i;:::-;4774:23;;4330:550;;;;;;3334:840;3534:17;-1:-1:-1;;;;;3582:18:13;;;;;;;3630:31;3582:7;3592:8;3657:3;3630:7;:31::i;:::-;-1:-1:-1;;;;;3630:36:13;;3693:4;3767:10;3796:19;:8;:17;:19::i;:::-;-1:-1:-1;;;;;3834:22:13;;;:159;;3976:17;3834:159;;;3881:10;:70;;3924:27;3881:70;;;3894:27;3881:70;4029:7;4038:3;4043:8;4012:40;;;;;;-1:-1:-1;;;;;4012:40:13;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4012:40:13;;;;;;;;;;;;;;;;;;;;;;;;3630:437;;;;;;;;;;;;;-1:-1:-1;;;;;3630:437:13;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3630:437:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3630:437:13;;;;;;;;;3613:554;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4130:25;4148:6;4130:17;:25::i;1560:1273::-;1743:1;1728:12;:16;:36;;;;1763:1;1748:12;:16;1728:36;1720:45;;;;;;1840:15;1857:16;1875:10;1889:22;:4;:20;:22::i;:::-;1839:72;;;;;;1922:66;1956:7;1965;1974:8;1984:3;1922:33;:66::i;:::-;;2002:17;2021:19;2042:22;2096:1;2081:12;:16;:190;;2216:7;-1:-1:-1;;;;;2205:18:13;:8;-1:-1:-1;;;;;2205:18:13;;2233:12;2257;2256:13;;2081:190;;;2128:8;-1:-1:-1;;;;;2118:18:13;:7;-1:-1:-1;;;;;2118:18:13;;2146:12;2170;2169:13;;2081:190;2001:270;;;;;;2286:12;2282:544;;;2360:4;2354:11;2395:14;2390:3;2383:27;2440:2;2435:3;2428:15;2324:134;2596:15;;:20;2592:68;;2644:15;;2626:14;:33;2618:42;;;;;;2720:4;2714:11;2755;2750:3;2743:24;2797:2;2792:3;2785:15;1016:140:16;1108:11;796:24;-1:-1:-1;1108:40:16;;1016:140::o;1820:326::-;1928:14;;;2033:17;:4;1928:14;2033;:17::i;:::-;2024:26;-1:-1:-1;2067:24:16;:4;314:2;2067:13;:24::i;:::-;2061:30;-1:-1:-1;2111:27:16;:4;522:20;2111:14;:27::i;:::-;2102:36;;1820:326;;;;;:::o;2700:151::-;2817:11;;2761:12;;2793:50;;2817:4;;522:20;;-1:-1:-1;;2817:25:16;2793:10;:50::i;1253:255:13:-;1370:14;1419:80;1446:7;1455:43;1478:6;1486;1494:3;1455:22;:43::i;:::-;1419:26;:80::i;:::-;1397:103;1253:255;-1:-1:-1;;;;1253:255:13:o;924:121:8:-;976:8;-1:-1:-1;;;1004:1:8;:10;996:19;;;;;;-1:-1:-1;1036:1:8;924:121::o;2916:381:13:-;2986:7;3010:6;:13;3027:2;3010:19;3006:237;;3066:2;3050:6;:13;:18;3046:50;;;3070:26;;;-1:-1:-1;;;3070:26:13;;;;;;;;;;;;-1:-1:-1;;;3070:26:13;;;;;;;;;;;;;;3046:50;3161:4;3149:17;;3202:28;;3149:17;;3202:28;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;3202:28:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;3202:28:13;;;;;;-1:-1:-1;3202:28:13;;;;;;;;;;-1:-1:-1;3202:28:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3195:36;;-1:-1:-1;;;3195:36:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3006:237;3271:6;3260:29;;;;;;;;;;;;;;;-1:-1:-1;3260:29:13;;2916:381;-1:-1:-1;;2916:381:13:o;697:266:15:-;848:19;887:68;902:7;911:43;934:6;942;950:3;911:22;:43::i;:::-;887:14;:68::i;3489:426:14:-;3568:7;3611:6;3596;3605:2;3596:11;:21;;3588:52;;;;;-1:-1:-1;;;3588:52:14;;;;;;;;;;;;-1:-1:-1;;;3588:52:14;;;;;;;;;;;;;;;3676:6;3685:2;3676:11;3659:6;:13;:28;;3651:62;;;;;-1:-1:-1;;;3651:62:14;;;;;;;;;;;;-1:-1:-1;;;3651:62:14;;;;;;;;;;;;;;;-1:-1:-1;3805:30:14;3821:4;3805:30;3799:37;-1:-1:-1;;;3795:71:14;;;3489:426::o;3923:375::-;4001:6;4042;4028;4037:1;4028:10;:20;;4020:50;;;;;-1:-1:-1;;;4020:50:14;;;;;;;;;;;;-1:-1:-1;;;4020:50:14;;;;;;;;;;;;;;;4106:6;4115:1;4106:10;4089:6;:13;:27;;4081:60;;;;;-1:-1:-1;;;4081:60:14;;;;;;;;;;;;-1:-1:-1;;;4081:60:14;;;;;;;;;;;;;;;-1:-1:-1;4222:29:14;4238:3;4222:29;4216:36;;3923:375::o;410:3071::-;536:12;585:7;569;579:2;569:12;:23;;561:50;;;;;-1:-1:-1;;;561:50:14;;;;;;;;;;;;-1:-1:-1;;;561:50:14;;;;;;;;;;;;;;;650:6;639:7;630:6;:16;:26;;622:53;;;;;-1:-1:-1;;;622:53:14;;;;;;;;;;;;-1:-1:-1;;;622:53:14;;;;;;;;;;;;;;;720:7;711:6;:16;694:6;:13;:33;;686:63;;;;;-1:-1:-1;;;686:63:14;;;;;;;;;;;;-1:-1:-1;;;686:63:14;;;;;;;;;;;;;;;762:22;828:15;;861:2137;;;;3154:4;3148:11;3135:24;;3355:1;3344:9;3337:20;3409:4;3398:9;3394:20;3388:4;3381:34;821:2613;;861:2137;1058:4;1052:11;1039:24;;1763:2;1754:7;1750:16;2171:9;2164:17;2158:4;2154:28;2142:9;2131;2127:25;2123:60;2224:7;2220:2;2216:16;2497:6;2483:9;2476:17;2470:4;2466:28;2454:9;2446:6;2442:22;2438:57;2434:70;2256:470;2535:3;2531:2;2528:11;2256:470;;;2693:9;;2682:21;;2581:4;2573:13;;;;2618;2256:470;;;-1:-1:-1;;2750:26:14;;;2974:2;2957:11;-1:-1:-1;;2953:25:14;2947:4;2940:39;-1:-1:-1;821:2613:14;-1:-1:-1;3464:9:14;410:3071;-1:-1:-1;;;;410:3071:14:o;803:281:17:-;924:14;;:::i;:::-;964:6;-1:-1:-1;;;;;955:15:17;:6;-1:-1:-1;;;;;955:15:17;;951:56;;;992:6;;1000;951:56;-1:-1:-1;1025:51:17;;;;;;;;-1:-1:-1;;;;;1025:51:17;;;;;;;;;;;;;;;;;;;;;;;803:281::o;1337:526::-;1421:12;1467:3;:10;;;-1:-1:-1;;;;;1454:23:17;:3;:10;;;-1:-1:-1;;;;;1454:23:17;;1446:32;;;;;;-1:-1:-1;1708:10:17;;1720;;;;;1732:7;;;;;1697:43;;-1:-1:-1;;;;;1697:43:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1687:54;;;;;;-1:-1:-1;;;;;;1576:234:17;;;;;;;-1:-1:-1;;1576:234:17;;;;;;;;;;;;246:66;1576:234;;;;;;;;;;;;;;;;;;;;;;;;;1544:285;;;;;;1337:526::o;1216:286:15:-;1343:19;1402:44;1429:7;1438;1402:26;:44::i;:::-;1380:67;-1:-1:-1;1466:10:15;-1:-1:-1;;;;;1466:27:15;;;1458:36;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "822000",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"WETH9()": "infinite",
								"factory()": "infinite",
								"quoteExactInput(bytes,uint256)": "infinite",
								"quoteExactInputSingle(address,address,uint24,uint256,uint160)": "infinite",
								"quoteExactOutput(bytes,uint256)": "infinite",
								"quoteExactOutputSingle(address,address,uint24,uint256,uint160)": "infinite",
								"uniswapV3SwapCallback(int256,int256,bytes)": "infinite"
							},
							"internal": {
								"getPool(address,address,uint24)": "infinite",
								"parseRevertReason(bytes memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 873,
									"end": 6744,
									"name": "PUSH",
									"source": 13,
									"value": "C0"
								},
								{
									"begin": 873,
									"end": 6744,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 873,
									"end": 6744,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "CALLVALUE",
									"source": 13
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "tag",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "PUSHSIZE",
									"source": 13
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "CODESIZE",
									"source": 13
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "SUB",
									"source": 13
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "PUSHSIZE",
									"source": 13
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "CODECOPY",
									"source": 13
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "LT",
									"source": 13
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "2"
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "tag",
									"source": 13,
									"value": "2"
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 1155,
									"end": 1245,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "60"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 536,
									"end": 554,
									"name": "PUSH",
									"source": 10,
									"value": "60"
								},
								{
									"begin": 536,
									"end": 554,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 536,
									"end": 554,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 536,
									"end": 554,
									"name": "SHL",
									"source": 10
								},
								{
									"begin": 536,
									"end": 554,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 536,
									"end": 554,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 536,
									"end": 554,
									"name": "PUSH",
									"source": 10,
									"value": "80"
								},
								{
									"begin": 536,
									"end": 554,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 565,
									"end": 579,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 565,
									"end": 579,
									"name": "SHL",
									"source": 10
								},
								{
									"begin": 565,
									"end": 579,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 565,
									"end": 579,
									"name": "PUSH",
									"source": 10,
									"value": "A0"
								},
								{
									"begin": 565,
									"end": 579,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 873,
									"end": 6744,
									"name": "PUSH",
									"source": 13,
									"value": "80"
								},
								{
									"begin": 873,
									"end": 6744,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 873,
									"end": 6744,
									"name": "PUSH",
									"source": 13,
									"value": "60"
								},
								{
									"begin": 873,
									"end": 6744,
									"name": "SHR",
									"source": 13
								},
								{
									"begin": 873,
									"end": 6744,
									"name": "PUSH",
									"source": 13,
									"value": "A0"
								},
								{
									"begin": 873,
									"end": 6744,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 873,
									"end": 6744,
									"name": "PUSH",
									"source": 13,
									"value": "60"
								},
								{
									"begin": 873,
									"end": 6744,
									"name": "SHR",
									"source": 13
								},
								{
									"begin": 873,
									"end": 6744,
									"name": "PUSH #[$]",
									"source": 13,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 873,
									"end": 6744,
									"name": "PUSH [$]",
									"source": 13,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 873,
									"end": 6744,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 873,
									"end": 6744,
									"name": "CODECOPY",
									"source": 13
								},
								{
									"begin": 873,
									"end": 6744,
									"name": "ASSIGNIMMUTABLE",
									"source": 13,
									"value": "1074"
								},
								{
									"begin": 873,
									"end": 6744,
									"name": "ASSIGNIMMUTABLE",
									"source": 13,
									"value": "1070"
								},
								{
									"begin": 873,
									"end": 6744,
									"name": "PUSH #[$]",
									"source": 13,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 873,
									"end": 6744,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 873,
									"end": 6744,
									"name": "RETURN",
									"source": 13
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220934f0cabd75fbc5170927a0fe70889f701a9955ddb6289f60f552f2727c767f764736f6c63430007060033",
									".code": [
										{
											"begin": 873,
											"end": 6744,
											"name": "PUSH",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "CALLVALUE",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "tag",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "PUSH",
											"source": 13,
											"value": "E0"
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "SHR",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "PUSH",
											"source": 13,
											"value": "C45A0155"
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "10"
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "PUSH",
											"source": 13,
											"value": "C45A0155"
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "6"
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "PUSH",
											"source": 13,
											"value": "CDCA1753"
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "7"
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "PUSH",
											"source": 13,
											"value": "F7729D43"
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "8"
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "PUSH",
											"source": 13,
											"value": "FA461E33"
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "9"
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "tag",
											"source": 13,
											"value": "10"
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "PUSH",
											"source": 13,
											"value": "2F80BB1D"
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "3"
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "PUSH",
											"source": 13,
											"value": "30D07F21"
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "PUSH",
											"source": 13,
											"value": "4AA4A4FC"
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "5"
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "tag",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 873,
											"end": 6744,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "tag",
											"source": 13,
											"value": "3"
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "11"
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "12"
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "tag",
											"source": 13,
											"value": "12"
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "13"
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "tag",
											"source": 13,
											"value": "13"
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "14"
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "tag",
											"source": 13,
											"value": "14"
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "MUL",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "GT",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "OR",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "15"
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "tag",
											"source": 13,
											"value": "15"
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "MUL",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "CALLDATACOPY",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "SWAP6",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "16"
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "tag",
											"source": 13,
											"value": "11"
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "RETURN",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "tag",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "11"
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "PUSH",
											"source": 13,
											"value": "A0"
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "18"
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "tag",
											"source": 13,
											"value": "18"
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFF"
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "PUSH",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "19"
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 431,
											"end": 470,
											"name": "tag",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 431,
											"end": 470,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 431,
											"end": 470,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 431,
											"end": 470,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "21"
										},
										{
											"begin": 431,
											"end": 470,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 431,
											"end": 470,
											"name": "tag",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 431,
											"end": 470,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 431,
											"end": 470,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 431,
											"end": 470,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 431,
											"end": 470,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 431,
											"end": 470,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 431,
											"end": 470,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 431,
											"end": 470,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 431,
											"end": 470,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 431,
											"end": 470,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 431,
											"end": 470,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 431,
											"end": 470,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 431,
											"end": 470,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 431,
											"end": 470,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 431,
											"end": 470,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 431,
											"end": 470,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 431,
											"end": 470,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 431,
											"end": 470,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 431,
											"end": 470,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 337,
											"end": 378,
											"name": "tag",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 337,
											"end": 378,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 337,
											"end": 378,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 337,
											"end": 378,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "23"
										},
										{
											"begin": 337,
											"end": 378,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "tag",
											"source": 13,
											"value": "7"
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "11"
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "25"
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "tag",
											"source": 13,
											"value": "25"
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "26"
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "tag",
											"source": 13,
											"value": "26"
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "27"
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "tag",
											"source": 13,
											"value": "27"
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "MUL",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "GT",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "OR",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "28"
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "tag",
											"source": 13,
											"value": "28"
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "MUL",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "CALLDATACOPY",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "SWAP6",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "29"
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "tag",
											"source": 13,
											"value": "8"
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "11"
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "PUSH",
											"source": 13,
											"value": "A0"
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "31"
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "tag",
											"source": 13,
											"value": "31"
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFF"
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "PUSH",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "32"
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "tag",
											"source": 13,
											"value": "9"
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "33"
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "34"
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "tag",
											"source": 13,
											"value": "34"
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "35"
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "tag",
											"source": 13,
											"value": "35"
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "36"
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "tag",
											"source": 13,
											"value": "36"
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "MUL",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "GT",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "OR",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "37"
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "tag",
											"source": 13,
											"value": "37"
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "MUL",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "CALLDATACOPY",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "SWAP6",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "38"
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "tag",
											"source": 13,
											"value": "33"
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "STOP",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "tag",
											"source": 13,
											"value": "16"
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6151,
											"end": 6167,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6180,
											"end": 6734,
											"name": "tag",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 6180,
											"end": 6734,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6208,
											"end": 6229,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6232,
											"end": 6255,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "42"
										},
										{
											"begin": 6232,
											"end": 6236,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 6232,
											"end": 6253,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "43"
										},
										{
											"begin": 6232,
											"end": 6255,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 6232,
											"end": 6255,
											"name": "tag",
											"source": 13,
											"value": "42"
										},
										{
											"begin": 6232,
											"end": 6255,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6208,
											"end": 6255,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6208,
											"end": 6255,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6273,
											"end": 6289,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6291,
											"end": 6306,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6308,
											"end": 6318,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6322,
											"end": 6344,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 6322,
											"end": 6326,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 6322,
											"end": 6342,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "45"
										},
										{
											"begin": 6322,
											"end": 6344,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 6322,
											"end": 6344,
											"name": "tag",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 6322,
											"end": 6344,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6272,
											"end": 6344,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 6272,
											"end": 6344,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6272,
											"end": 6344,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 6272,
											"end": 6344,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6272,
											"end": 6344,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 6272,
											"end": 6344,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6453,
											"end": 6513,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "46"
										},
										{
											"begin": 6476,
											"end": 6483,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 6485,
											"end": 6493,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 6495,
											"end": 6498,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 6500,
											"end": 6509,
											"name": "DUP10",
											"source": 13
										},
										{
											"begin": 6511,
											"end": 6512,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6453,
											"end": 6475,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "19"
										},
										{
											"begin": 6453,
											"end": 6513,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 6453,
											"end": 6513,
											"name": "tag",
											"source": 13,
											"value": "46"
										},
										{
											"begin": 6453,
											"end": 6513,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6441,
											"end": 6513,
											"name": "SWAP6",
											"source": 13
										},
										{
											"begin": 6441,
											"end": 6513,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6590,
											"end": 6606,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 6586,
											"end": 6723,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 6586,
											"end": 6723,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "47"
										},
										{
											"begin": 6586,
											"end": 6723,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 6634,
											"end": 6650,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "48"
										},
										{
											"begin": 6634,
											"end": 6638,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 6634,
											"end": 6648,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "49"
										},
										{
											"begin": 6634,
											"end": 6650,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 6634,
											"end": 6650,
											"name": "tag",
											"source": 13,
											"value": "48"
										},
										{
											"begin": 6634,
											"end": 6650,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6627,
											"end": 6650,
											"name": "SWAP7",
											"source": 13
										},
										{
											"begin": 6627,
											"end": 6650,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6586,
											"end": 6723,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "50"
										},
										{
											"begin": 6586,
											"end": 6723,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6586,
											"end": 6723,
											"name": "tag",
											"source": 13,
											"value": "47"
										},
										{
											"begin": 6586,
											"end": 6723,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6698,
											"end": 6707,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 6691,
											"end": 6707,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 6691,
											"end": 6707,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6691,
											"end": 6707,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6691,
											"end": 6707,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6691,
											"end": 6707,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6691,
											"end": 6707,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6691,
											"end": 6707,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "41"
										},
										{
											"begin": 6691,
											"end": 6707,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6586,
											"end": 6723,
											"name": "tag",
											"source": 13,
											"value": "50"
										},
										{
											"begin": 6586,
											"end": 6723,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6180,
											"end": 6734,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6180,
											"end": 6734,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6180,
											"end": 6734,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6180,
											"end": 6734,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6180,
											"end": 6734,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 6180,
											"end": 6734,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6180,
											"end": 6734,
											"name": "tag",
											"source": 13,
											"value": "41"
										},
										{
											"begin": 6180,
											"end": 6734,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6060,
											"end": 6741,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "tag",
											"source": 13,
											"value": "19"
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5126,
											"end": 5142,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5173,
											"end": 5191,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 5173,
											"end": 5191,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 5173,
											"end": 5191,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 5173,
											"end": 5191,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 5173,
											"end": 5191,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5173,
											"end": 5191,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 5173,
											"end": 5191,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 5173,
											"end": 5191,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5318,
											"end": 5340,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 5318,
											"end": 5340,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 5314,
											"end": 5369,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "52"
										},
										{
											"begin": 5314,
											"end": 5369,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 5342,
											"end": 5357,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5342,
											"end": 5369,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 5342,
											"end": 5369,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5342,
											"end": 5369,
											"name": "SSTORE",
											"source": 13
										},
										{
											"begin": 5314,
											"end": 5369,
											"name": "tag",
											"source": 13,
											"value": "52"
										},
										{
											"begin": 5314,
											"end": 5369,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5428,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "53"
										},
										{
											"begin": 5405,
											"end": 5412,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 5414,
											"end": 5422,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 5424,
											"end": 5427,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5404,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "54"
										},
										{
											"begin": 5397,
											"end": 5428,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 5397,
											"end": 5428,
											"name": "tag",
											"source": 13,
											"value": "53"
										},
										{
											"begin": 5397,
											"end": 5428,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5397,
											"end": 5433,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5433,
											"name": "PUSH",
											"source": 13,
											"value": "128ACB08"
										},
										{
											"begin": 5460,
											"end": 5464,
											"name": "ADDRESS",
											"source": 13
										},
										{
											"begin": 5534,
											"end": 5544,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 5564,
											"end": 5584,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "55"
										},
										{
											"begin": 5564,
											"end": 5573,
											"name": "DUP9",
											"source": 13
										},
										{
											"begin": 5564,
											"end": 5582,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "56"
										},
										{
											"begin": 5564,
											"end": 5584,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 5564,
											"end": 5584,
											"name": "tag",
											"source": 13,
											"value": "55"
										},
										{
											"begin": 5564,
											"end": 5584,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5563,
											"end": 5584,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5563,
											"end": 5584,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5603,
											"end": 5625,
											"name": "DUP9",
											"source": 13
										},
										{
											"begin": 5603,
											"end": 5625,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 5603,
											"end": 5625,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 5603,
											"end": 5762,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "57"
										},
										{
											"begin": 5603,
											"end": 5762,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 5745,
											"end": 5762,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 5603,
											"end": 5762,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 5603,
											"end": 5762,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5603,
											"end": 5762,
											"name": "tag",
											"source": 13,
											"value": "57"
										},
										{
											"begin": 5603,
											"end": 5762,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5650,
											"end": 5660,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 5650,
											"end": 5720,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "59"
										},
										{
											"begin": 5650,
											"end": 5720,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 5693,
											"end": 5720,
											"name": "PUSH",
											"source": 13,
											"value": "FFFD8963EFD1FC6A506488495D951D5263988D25"
										},
										{
											"begin": 5650,
											"end": 5720,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 5650,
											"end": 5720,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5650,
											"end": 5720,
											"name": "tag",
											"source": 13,
											"value": "59"
										},
										{
											"begin": 5650,
											"end": 5720,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5663,
											"end": 5690,
											"name": "PUSH",
											"source": 13,
											"value": "1000276A4"
										},
										{
											"begin": 5650,
											"end": 5720,
											"name": "tag",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 5650,
											"end": 5720,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5798,
											"end": 5806,
											"name": "DUP12",
											"source": 13
										},
										{
											"begin": 5808,
											"end": 5811,
											"name": "DUP12",
											"source": 13
										},
										{
											"begin": 5813,
											"end": 5820,
											"name": "DUP15",
											"source": 13
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "SHL",
											"source": 13
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "PUSH",
											"source": 13,
											"value": "14"
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFF"
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "PUSH",
											"source": 13,
											"value": "E8"
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "SHL",
											"source": 13
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "PUSH",
											"source": 13,
											"value": "3"
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "SHL",
											"source": 13
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "PUSH",
											"source": 13,
											"value": "14"
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 5781,
											"end": 5821,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "PUSH",
											"source": 13,
											"value": "E0"
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "SHL",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "tag",
											"source": 13,
											"value": "61"
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "63"
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "61"
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "tag",
											"source": 13,
											"value": "63"
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "PUSH",
											"source": 13,
											"value": "100"
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "EXP",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "NOT",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "tag",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "SWAP7",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "EXTCODESIZE",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "65"
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "tag",
											"source": 13,
											"value": "65"
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "GAS",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "CALL",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "66"
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "67"
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "tag",
											"source": 13,
											"value": "67"
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "tag",
											"source": 13,
											"value": "66"
										},
										{
											"begin": 5397,
											"end": 5836,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "68"
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "72"
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "NOT",
											"source": 13
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "PUSH",
											"source": 13,
											"value": "3F"
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "RETURNDATACOPY",
											"source": 13
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "71"
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "tag",
											"source": 13,
											"value": "72"
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "tag",
											"source": 13,
											"value": "71"
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5896,
											"end": 5918,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 5896,
											"end": 5918,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 5892,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "73"
										},
										{
											"begin": 5892,
											"end": 5942,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 5927,
											"end": 5942,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5920,
											"end": 5942,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 5920,
											"end": 5942,
											"name": "SSTORE",
											"source": 13
										},
										{
											"begin": 5892,
											"end": 5942,
											"name": "tag",
											"source": 13,
											"value": "73"
										},
										{
											"begin": 5892,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5979,
											"end": 6004,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "74"
										},
										{
											"begin": 5997,
											"end": 6003,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5979,
											"end": 5996,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "75"
										},
										{
											"begin": 5979,
											"end": 6004,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 5979,
											"end": 6004,
											"name": "tag",
											"source": 13,
											"value": "74"
										},
										{
											"begin": 5979,
											"end": 6004,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5972,
											"end": 6004,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 5972,
											"end": 6004,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5972,
											"end": 6004,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5972,
											"end": 6004,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5972,
											"end": 6004,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "51"
										},
										{
											"begin": 5972,
											"end": 6004,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "tag",
											"source": 13,
											"value": "68"
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5380,
											"end": 6016,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "tag",
											"source": 13,
											"value": "51"
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "SWAP6",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4924,
											"end": 6023,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 431,
											"end": 470,
											"name": "tag",
											"source": 10,
											"value": "21"
										},
										{
											"begin": 431,
											"end": 470,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 431,
											"end": 470,
											"name": "PUSHIMMUTABLE",
											"source": 10,
											"value": "1074"
										},
										{
											"begin": 431,
											"end": 470,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 431,
											"end": 470,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 337,
											"end": 378,
											"name": "tag",
											"source": 10,
											"value": "23"
										},
										{
											"begin": 337,
											"end": 378,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 337,
											"end": 378,
											"name": "PUSHIMMUTABLE",
											"source": 10,
											"value": "1070"
										},
										{
											"begin": 337,
											"end": 378,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 337,
											"end": 378,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "tag",
											"source": 13,
											"value": "29"
										},
										{
											"begin": 4211,
											"end": 4887,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4300,
											"end": 4317,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4330,
											"end": 4880,
											"name": "tag",
											"source": 13,
											"value": "78"
										},
										{
											"begin": 4330,
											"end": 4880,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4358,
											"end": 4379,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4382,
											"end": 4405,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 4382,
											"end": 4386,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 4382,
											"end": 4403,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "43"
										},
										{
											"begin": 4382,
											"end": 4405,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 4382,
											"end": 4405,
											"name": "tag",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 4382,
											"end": 4405,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4358,
											"end": 4405,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4358,
											"end": 4405,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4423,
											"end": 4438,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4440,
											"end": 4456,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4458,
											"end": 4468,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4472,
											"end": 4494,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "81"
										},
										{
											"begin": 4472,
											"end": 4476,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 4472,
											"end": 4492,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "45"
										},
										{
											"begin": 4472,
											"end": 4494,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 4472,
											"end": 4494,
											"name": "tag",
											"source": 13,
											"value": "81"
										},
										{
											"begin": 4472,
											"end": 4494,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4422,
											"end": 4494,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 4422,
											"end": 4494,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4422,
											"end": 4494,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 4422,
											"end": 4494,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4422,
											"end": 4494,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 4422,
											"end": 4494,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4602,
											"end": 4660,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "82"
										},
										{
											"begin": 4624,
											"end": 4631,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 4633,
											"end": 4641,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 4643,
											"end": 4646,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 4648,
											"end": 4656,
											"name": "DUP10",
											"source": 13
										},
										{
											"begin": 4658,
											"end": 4659,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4602,
											"end": 4623,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "32"
										},
										{
											"begin": 4602,
											"end": 4660,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 4602,
											"end": 4660,
											"name": "tag",
											"source": 13,
											"value": "82"
										},
										{
											"begin": 4602,
											"end": 4660,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4591,
											"end": 4660,
											"name": "SWAP6",
											"source": 13
										},
										{
											"begin": 4591,
											"end": 4660,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4737,
											"end": 4753,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 4733,
											"end": 4869,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 4733,
											"end": 4869,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "47"
										},
										{
											"begin": 4733,
											"end": 4869,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4781,
											"end": 4797,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "84"
										},
										{
											"begin": 4781,
											"end": 4785,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 4781,
											"end": 4795,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "49"
										},
										{
											"begin": 4781,
											"end": 4797,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 4781,
											"end": 4797,
											"name": "tag",
											"source": 13,
											"value": "84"
										},
										{
											"begin": 4781,
											"end": 4797,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4774,
											"end": 4797,
											"name": "SWAP7",
											"source": 13
										},
										{
											"begin": 4774,
											"end": 4797,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4330,
											"end": 4880,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4330,
											"end": 4880,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4330,
											"end": 4880,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4330,
											"end": 4880,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4330,
											"end": 4880,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "78"
										},
										{
											"begin": 4330,
											"end": 4880,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "tag",
											"source": 13,
											"value": "32"
										},
										{
											"begin": 3334,
											"end": 4174,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3534,
											"end": 3551,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3582,
											"end": 3600,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3582,
											"end": 3600,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 3582,
											"end": 3600,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3582,
											"end": 3600,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3582,
											"end": 3600,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 3582,
											"end": 3600,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3582,
											"end": 3600,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 3661,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "87"
										},
										{
											"begin": 3582,
											"end": 3589,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 3592,
											"end": 3600,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 3657,
											"end": 3660,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 3637,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "54"
										},
										{
											"begin": 3630,
											"end": 3661,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 3630,
											"end": 3661,
											"name": "tag",
											"source": 13,
											"value": "87"
										},
										{
											"begin": 3630,
											"end": 3661,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3630,
											"end": 3666,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 3666,
											"name": "PUSH",
											"source": 13,
											"value": "128ACB08"
										},
										{
											"begin": 3693,
											"end": 3697,
											"name": "ADDRESS",
											"source": 13
										},
										{
											"begin": 3767,
											"end": 3777,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3796,
											"end": 3815,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "88"
										},
										{
											"begin": 3796,
											"end": 3804,
											"name": "DUP9",
											"source": 13
										},
										{
											"begin": 3796,
											"end": 3813,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "56"
										},
										{
											"begin": 3796,
											"end": 3815,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 3796,
											"end": 3815,
											"name": "tag",
											"source": 13,
											"value": "88"
										},
										{
											"begin": 3796,
											"end": 3815,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3834,
											"end": 3856,
											"name": "DUP9",
											"source": 13
										},
										{
											"begin": 3834,
											"end": 3856,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3834,
											"end": 3856,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3834,
											"end": 3993,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "89"
										},
										{
											"begin": 3834,
											"end": 3993,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3976,
											"end": 3993,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 3834,
											"end": 3993,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "92"
										},
										{
											"begin": 3834,
											"end": 3993,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3834,
											"end": 3993,
											"name": "tag",
											"source": 13,
											"value": "89"
										},
										{
											"begin": 3834,
											"end": 3993,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3881,
											"end": 3891,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 3881,
											"end": 3951,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "91"
										},
										{
											"begin": 3881,
											"end": 3951,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3924,
											"end": 3951,
											"name": "PUSH",
											"source": 13,
											"value": "FFFD8963EFD1FC6A506488495D951D5263988D25"
										},
										{
											"begin": 3881,
											"end": 3951,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "92"
										},
										{
											"begin": 3881,
											"end": 3951,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3881,
											"end": 3951,
											"name": "tag",
											"source": 13,
											"value": "91"
										},
										{
											"begin": 3881,
											"end": 3951,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3894,
											"end": 3921,
											"name": "PUSH",
											"source": 13,
											"value": "1000276A4"
										},
										{
											"begin": 3881,
											"end": 3951,
											"name": "tag",
											"source": 13,
											"value": "92"
										},
										{
											"begin": 3881,
											"end": 3951,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4029,
											"end": 4036,
											"name": "DUP13",
											"source": 13
										},
										{
											"begin": 4038,
											"end": 4041,
											"name": "DUP12",
											"source": 13
										},
										{
											"begin": 4043,
											"end": 4051,
											"name": "DUP14",
											"source": 13
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "SHL",
											"source": 13
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "PUSH",
											"source": 13,
											"value": "14"
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFF"
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "PUSH",
											"source": 13,
											"value": "E8"
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "SHL",
											"source": 13
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "PUSH",
											"source": 13,
											"value": "3"
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "SHL",
											"source": 13
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "PUSH",
											"source": 13,
											"value": "14"
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4012,
											"end": 4052,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "PUSH",
											"source": 13,
											"value": "E0"
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "SHL",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "tag",
											"source": 13,
											"value": "93"
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "95"
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "93"
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "tag",
											"source": 13,
											"value": "95"
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "96"
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "PUSH",
											"source": 13,
											"value": "100"
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "EXP",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "NOT",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "tag",
											"source": 13,
											"value": "96"
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "SWAP7",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "EXTCODESIZE",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "97"
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "tag",
											"source": 13,
											"value": "97"
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "GAS",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "CALL",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "98"
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "99"
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "tag",
											"source": 13,
											"value": "99"
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "tag",
											"source": 13,
											"value": "98"
										},
										{
											"begin": 3630,
											"end": 4067,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3613,
											"end": 4167,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "68"
										},
										{
											"begin": 3613,
											"end": 4167,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3613,
											"end": 4167,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 3613,
											"end": 4167,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3613,
											"end": 4167,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3613,
											"end": 4167,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3613,
											"end": 4167,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "104"
										},
										{
											"begin": 3613,
											"end": 4167,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3613,
											"end": 4167,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3613,
											"end": 4167,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3613,
											"end": 4167,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3613,
											"end": 4167,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3613,
											"end": 4167,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 3613,
											"end": 4167,
											"name": "NOT",
											"source": 13
										},
										{
											"begin": 3613,
											"end": 4167,
											"name": "PUSH",
											"source": 13,
											"value": "3F"
										},
										{
											"begin": 3613,
											"end": 4167,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 3613,
											"end": 4167,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3613,
											"end": 4167,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3613,
											"end": 4167,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3613,
											"end": 4167,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3613,
											"end": 4167,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3613,
											"end": 4167,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3613,
											"end": 4167,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 3613,
											"end": 4167,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3613,
											"end": 4167,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3613,
											"end": 4167,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 3613,
											"end": 4167,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3613,
											"end": 4167,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3613,
											"end": 4167,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 3613,
											"end": 4167,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3613,
											"end": 4167,
											"name": "RETURNDATACOPY",
											"source": 13
										},
										{
											"begin": 3613,
											"end": 4167,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "103"
										},
										{
											"begin": 3613,
											"end": 4167,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3613,
											"end": 4167,
											"name": "tag",
											"source": 13,
											"value": "104"
										},
										{
											"begin": 3613,
											"end": 4167,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3613,
											"end": 4167,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 3613,
											"end": 4167,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3613,
											"end": 4167,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3613,
											"end": 4167,
											"name": "tag",
											"source": 13,
											"value": "103"
										},
										{
											"begin": 3613,
											"end": 4167,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3613,
											"end": 4167,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4130,
											"end": 4155,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "74"
										},
										{
											"begin": 4148,
											"end": 4154,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4130,
											"end": 4147,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "75"
										},
										{
											"begin": 4130,
											"end": 4155,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "tag",
											"source": 13,
											"value": "38"
										},
										{
											"begin": 1560,
											"end": 2833,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1743,
											"end": 1744,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1728,
											"end": 1740,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1728,
											"end": 1744,
											"name": "SGT",
											"source": 13
										},
										{
											"begin": 1728,
											"end": 1764,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1728,
											"end": 1764,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "108"
										},
										{
											"begin": 1728,
											"end": 1764,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1728,
											"end": 1764,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1763,
											"end": 1764,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1748,
											"end": 1760,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1748,
											"end": 1764,
											"name": "SGT",
											"source": 13
										},
										{
											"begin": 1728,
											"end": 1764,
											"name": "tag",
											"source": 13,
											"value": "108"
										},
										{
											"begin": 1728,
											"end": 1764,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1720,
											"end": 1765,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "109"
										},
										{
											"begin": 1720,
											"end": 1765,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1720,
											"end": 1765,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1720,
											"end": 1765,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1720,
											"end": 1765,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 1720,
											"end": 1765,
											"name": "tag",
											"source": 13,
											"value": "109"
										},
										{
											"begin": 1720,
											"end": 1765,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1840,
											"end": 1855,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1857,
											"end": 1873,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1875,
											"end": 1885,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1889,
											"end": 1911,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "110"
										},
										{
											"begin": 1889,
											"end": 1893,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 1889,
											"end": 1909,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "45"
										},
										{
											"begin": 1889,
											"end": 1911,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1889,
											"end": 1911,
											"name": "tag",
											"source": 13,
											"value": "110"
										},
										{
											"begin": 1889,
											"end": 1911,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1839,
											"end": 1911,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 1839,
											"end": 1911,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1839,
											"end": 1911,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 1839,
											"end": 1911,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1839,
											"end": 1911,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 1839,
											"end": 1911,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1922,
											"end": 1988,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "111"
										},
										{
											"begin": 1956,
											"end": 1963,
											"name": "PUSHIMMUTABLE",
											"source": 13,
											"value": "1070"
										},
										{
											"begin": 1965,
											"end": 1972,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 1974,
											"end": 1982,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 1984,
											"end": 1987,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 1922,
											"end": 1955,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "112"
										},
										{
											"begin": 1922,
											"end": 1988,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1922,
											"end": 1988,
											"name": "tag",
											"source": 13,
											"value": "111"
										},
										{
											"begin": 1922,
											"end": 1988,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1922,
											"end": 1988,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2002,
											"end": 2019,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2021,
											"end": 2040,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2042,
											"end": 2064,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2096,
											"end": 2097,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2081,
											"end": 2093,
											"name": "DUP10",
											"source": 13
										},
										{
											"begin": 2081,
											"end": 2097,
											"name": "SGT",
											"source": 13
										},
										{
											"begin": 2081,
											"end": 2271,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "113"
										},
										{
											"begin": 2081,
											"end": 2271,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2216,
											"end": 2223,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2205,
											"end": 2223,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2205,
											"end": 2213,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2205,
											"end": 2223,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2205,
											"end": 2223,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP9",
											"source": 13
										},
										{
											"begin": 2257,
											"end": 2269,
											"name": "DUP11",
											"source": 13
										},
										{
											"begin": 2256,
											"end": 2269,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2256,
											"end": 2269,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 2081,
											"end": 2271,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "114"
										},
										{
											"begin": 2081,
											"end": 2271,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2081,
											"end": 2271,
											"name": "tag",
											"source": 13,
											"value": "113"
										},
										{
											"begin": 2081,
											"end": 2271,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2128,
											"end": 2136,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2118,
											"end": 2136,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2118,
											"end": 2125,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2118,
											"end": 2136,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2118,
											"end": 2136,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 2146,
											"end": 2158,
											"name": "DUP10",
											"source": 13
										},
										{
											"begin": 2170,
											"end": 2182,
											"name": "DUP10",
											"source": 13
										},
										{
											"begin": 2169,
											"end": 2182,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2169,
											"end": 2182,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 2081,
											"end": 2271,
											"name": "tag",
											"source": 13,
											"value": "114"
										},
										{
											"begin": 2081,
											"end": 2271,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2001,
											"end": 2271,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 2001,
											"end": 2271,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2001,
											"end": 2271,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 2001,
											"end": 2271,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2001,
											"end": 2271,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 2001,
											"end": 2271,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2286,
											"end": 2298,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2282,
											"end": 2826,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2282,
											"end": 2826,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "115"
										},
										{
											"begin": 2282,
											"end": 2826,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2360,
											"end": 2364,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2354,
											"end": 2365,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 2395,
											"end": 2409,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2390,
											"end": 2393,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2383,
											"end": 2410,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2440,
											"end": 2442,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2435,
											"end": 2438,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2428,
											"end": 2443,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 2324,
											"end": 2458,
											"name": "tag",
											"source": 13,
											"value": "115"
										},
										{
											"begin": 2324,
											"end": 2458,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2596,
											"end": 2611,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2596,
											"end": 2611,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 2596,
											"end": 2616,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2592,
											"end": 2660,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "118"
										},
										{
											"begin": 2592,
											"end": 2660,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2644,
											"end": 2659,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2644,
											"end": 2659,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 2626,
											"end": 2640,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2626,
											"end": 2659,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 2618,
											"end": 2660,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "118"
										},
										{
											"begin": 2618,
											"end": 2660,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2618,
											"end": 2660,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2618,
											"end": 2660,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2618,
											"end": 2660,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 2618,
											"end": 2660,
											"name": "tag",
											"source": 13,
											"value": "118"
										},
										{
											"begin": 2618,
											"end": 2660,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2720,
											"end": 2724,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2714,
											"end": 2725,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 2755,
											"end": 2766,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2750,
											"end": 2753,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2743,
											"end": 2767,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2797,
											"end": 2799,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2792,
											"end": 2795,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2785,
											"end": 2800,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 1016,
											"end": 1156,
											"name": "tag",
											"source": 16,
											"value": "43"
										},
										{
											"begin": 1016,
											"end": 1156,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1108,
											"end": 1119,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 796,
											"end": 820,
											"name": "PUSH",
											"source": 16,
											"value": "42"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1148,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 1108,
											"end": 1148,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1016,
											"end": 1156,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 1820,
											"end": 2146,
											"name": "tag",
											"source": 16,
											"value": "45"
										},
										{
											"begin": 1820,
											"end": 2146,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 1928,
											"end": 1942,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 1928,
											"end": 1942,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1928,
											"end": 1942,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2033,
											"end": 2050,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "121"
										},
										{
											"begin": 2033,
											"end": 2037,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 1928,
											"end": 1942,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 2033,
											"end": 2047,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "122"
										},
										{
											"begin": 2033,
											"end": 2050,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 2033,
											"end": 2050,
											"name": "tag",
											"source": 16,
											"value": "121"
										},
										{
											"begin": 2033,
											"end": 2050,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2024,
											"end": 2050,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2067,
											"end": 2091,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "123"
										},
										{
											"begin": 2067,
											"end": 2071,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 314,
											"end": 316,
											"name": "PUSH",
											"source": 16,
											"value": "14"
										},
										{
											"begin": 2067,
											"end": 2080,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "124"
										},
										{
											"begin": 2067,
											"end": 2091,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 2067,
											"end": 2091,
											"name": "tag",
											"source": 16,
											"value": "123"
										},
										{
											"begin": 2067,
											"end": 2091,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2061,
											"end": 2091,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2111,
											"end": 2138,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "125"
										},
										{
											"begin": 2111,
											"end": 2115,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 522,
											"end": 542,
											"name": "PUSH",
											"source": 16,
											"value": "17"
										},
										{
											"begin": 2111,
											"end": 2125,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "122"
										},
										{
											"begin": 2111,
											"end": 2138,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 2111,
											"end": 2138,
											"name": "tag",
											"source": 16,
											"value": "125"
										},
										{
											"begin": 2111,
											"end": 2138,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2102,
											"end": 2138,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 2102,
											"end": 2138,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1820,
											"end": 2146,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 1820,
											"end": 2146,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 1820,
											"end": 2146,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 1820,
											"end": 2146,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 1820,
											"end": 2146,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 1820,
											"end": 2146,
											"name": "JUMP",
											"source": 16,
											"value": "[out]"
										},
										{
											"begin": 2700,
											"end": 2851,
											"name": "tag",
											"source": 16,
											"value": "49"
										},
										{
											"begin": 2700,
											"end": 2851,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 2817,
											"end": 2828,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 2817,
											"end": 2828,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 2761,
											"end": 2773,
											"name": "PUSH",
											"source": 16,
											"value": "60"
										},
										{
											"begin": 2761,
											"end": 2773,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2793,
											"end": 2843,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "41"
										},
										{
											"begin": 2793,
											"end": 2843,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 2817,
											"end": 2821,
											"name": "DUP4",
											"source": 16
										},
										{
											"begin": 2817,
											"end": 2821,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 522,
											"end": 542,
											"name": "PUSH",
											"source": 16,
											"value": "17"
										},
										{
											"begin": 522,
											"end": 542,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "16"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2817,
											"end": 2842,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 2793,
											"end": 2803,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "128"
										},
										{
											"begin": 2793,
											"end": 2843,
											"name": "JUMP",
											"source": 16,
											"value": "[in]"
										},
										{
											"begin": 1253,
											"end": 1508,
											"name": "tag",
											"source": 13,
											"value": "54"
										},
										{
											"begin": 1253,
											"end": 1508,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1370,
											"end": 1384,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1419,
											"end": 1499,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "130"
										},
										{
											"begin": 1446,
											"end": 1453,
											"name": "PUSHIMMUTABLE",
											"source": 13,
											"value": "1070"
										},
										{
											"begin": 1455,
											"end": 1498,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "131"
										},
										{
											"begin": 1478,
											"end": 1484,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 1486,
											"end": 1492,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 1494,
											"end": 1497,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 1455,
											"end": 1477,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "132"
										},
										{
											"begin": 1455,
											"end": 1498,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1455,
											"end": 1498,
											"name": "tag",
											"source": 13,
											"value": "131"
										},
										{
											"begin": 1455,
											"end": 1498,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1419,
											"end": 1445,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "133"
										},
										{
											"begin": 1419,
											"end": 1499,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1419,
											"end": 1499,
											"name": "tag",
											"source": 13,
											"value": "130"
										},
										{
											"begin": 1419,
											"end": 1499,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1397,
											"end": 1500,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 1253,
											"end": 1508,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1253,
											"end": 1508,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 924,
											"end": 1045,
											"name": "tag",
											"source": 8,
											"value": "56"
										},
										{
											"begin": 924,
											"end": 1045,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 976,
											"end": 984,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1004,
											"end": 1005,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1004,
											"end": 1014,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 996,
											"end": 1015,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "135"
										},
										{
											"begin": 996,
											"end": 1015,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 996,
											"end": 1015,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 996,
											"end": 1015,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 996,
											"end": 1015,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 996,
											"end": 1015,
											"name": "tag",
											"source": 8,
											"value": "135"
										},
										{
											"begin": 996,
											"end": 1015,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1036,
											"end": 1037,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 924,
											"end": 1045,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 2916,
											"end": 3297,
											"name": "tag",
											"source": 13,
											"value": "75"
										},
										{
											"begin": 2916,
											"end": 3297,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2986,
											"end": 2993,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3010,
											"end": 3016,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3010,
											"end": 3023,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3027,
											"end": 3029,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3010,
											"end": 3029,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 3006,
											"end": 3243,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "137"
										},
										{
											"begin": 3006,
											"end": 3243,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3066,
											"end": 3068,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 3050,
											"end": 3056,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3050,
											"end": 3063,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3050,
											"end": 3068,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 3046,
											"end": 3096,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3046,
											"end": 3096,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "138"
										},
										{
											"begin": 3046,
											"end": 3096,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3070,
											"end": 3096,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3070,
											"end": 3096,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3070,
											"end": 3096,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3070,
											"end": 3096,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3070,
											"end": 3096,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3070,
											"end": 3096,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3070,
											"end": 3096,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 3070,
											"end": 3096,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3070,
											"end": 3096,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3070,
											"end": 3096,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3070,
											"end": 3096,
											"name": "PUSH",
											"source": 13,
											"value": "10"
										},
										{
											"begin": 3070,
											"end": 3096,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 3070,
											"end": 3096,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3070,
											"end": 3096,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3070,
											"end": 3096,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2AB732BC3832B1BA32B21032B93937B9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "81"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3070,
											"end": 3096,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 3070,
											"end": 3096,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3070,
											"end": 3096,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3070,
											"end": 3096,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3070,
											"end": 3096,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3070,
											"end": 3096,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3070,
											"end": 3096,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3070,
											"end": 3096,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3070,
											"end": 3096,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3070,
											"end": 3096,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 3070,
											"end": 3096,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 3070,
											"end": 3096,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3070,
											"end": 3096,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3070,
											"end": 3096,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 3046,
											"end": 3096,
											"name": "tag",
											"source": 13,
											"value": "138"
										},
										{
											"begin": 3046,
											"end": 3096,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3161,
											"end": 3165,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 3149,
											"end": 3166,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3149,
											"end": 3166,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3149,
											"end": 3166,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3149,
											"end": 3166,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "139"
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "tag",
											"source": 13,
											"value": "139"
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "140"
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "tag",
											"source": 13,
											"value": "140"
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "141"
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "tag",
											"source": 13,
											"value": "141"
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "DUP9",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "LT",
											"source": -1
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "OR",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "142"
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "tag",
											"source": 13,
											"value": "142"
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "tag",
											"source": 13,
											"value": "143"
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "145"
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "143"
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "tag",
											"source": 13,
											"value": "145"
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "146"
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "PUSH",
											"source": 13,
											"value": "100"
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "EXP",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "NOT",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "tag",
											"source": 13,
											"value": "146"
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3202,
											"end": 3230,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "tag",
											"source": 13,
											"value": "147"
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "149"
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "147"
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "tag",
											"source": 13,
											"value": "149"
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "150"
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "PUSH",
											"source": 13,
											"value": "100"
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "EXP",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "NOT",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "tag",
											"source": 13,
											"value": "150"
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3195,
											"end": 3231,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 3006,
											"end": 3243,
											"name": "tag",
											"source": 13,
											"value": "137"
										},
										{
											"begin": 3006,
											"end": 3243,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3271,
											"end": 3277,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3260,
											"end": 3289,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3260,
											"end": 3289,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3260,
											"end": 3289,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3260,
											"end": 3289,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3260,
											"end": 3289,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3260,
											"end": 3289,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3260,
											"end": 3289,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3260,
											"end": 3289,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 3260,
											"end": 3289,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3260,
											"end": 3289,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "151"
										},
										{
											"begin": 3260,
											"end": 3289,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3260,
											"end": 3289,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3260,
											"end": 3289,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3260,
											"end": 3289,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 3260,
											"end": 3289,
											"name": "tag",
											"source": 13,
											"value": "151"
										},
										{
											"begin": 3260,
											"end": 3289,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3260,
											"end": 3289,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3260,
											"end": 3289,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 2916,
											"end": 3297,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2916,
											"end": 3297,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 697,
											"end": 963,
											"name": "tag",
											"source": 15,
											"value": "112"
										},
										{
											"begin": 697,
											"end": 963,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 848,
											"end": 867,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 887,
											"end": 955,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "51"
										},
										{
											"begin": 902,
											"end": 909,
											"name": "DUP6",
											"source": 15
										},
										{
											"begin": 911,
											"end": 954,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "154"
										},
										{
											"begin": 934,
											"end": 940,
											"name": "DUP7",
											"source": 15
										},
										{
											"begin": 942,
											"end": 948,
											"name": "DUP7",
											"source": 15
										},
										{
											"begin": 950,
											"end": 953,
											"name": "DUP7",
											"source": 15
										},
										{
											"begin": 911,
											"end": 933,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "132"
										},
										{
											"begin": 911,
											"end": 954,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 911,
											"end": 954,
											"name": "tag",
											"source": 15,
											"value": "154"
										},
										{
											"begin": 911,
											"end": 954,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 887,
											"end": 901,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "155"
										},
										{
											"begin": 887,
											"end": 955,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 3489,
											"end": 3915,
											"name": "tag",
											"source": 14,
											"value": "122"
										},
										{
											"begin": 3489,
											"end": 3915,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3568,
											"end": 3575,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3611,
											"end": 3617,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3596,
											"end": 3602,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3605,
											"end": 3607,
											"name": "PUSH",
											"source": 14,
											"value": "14"
										},
										{
											"begin": 3596,
											"end": 3607,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3596,
											"end": 3617,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 3596,
											"end": 3617,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 3588,
											"end": 3640,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "157"
										},
										{
											"begin": 3588,
											"end": 3640,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 3588,
											"end": 3640,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 3588,
											"end": 3640,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3588,
											"end": 3640,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3588,
											"end": 3640,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3588,
											"end": 3640,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3588,
											"end": 3640,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 3588,
											"end": 3640,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 3588,
											"end": 3640,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3588,
											"end": 3640,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3588,
											"end": 3640,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3588,
											"end": 3640,
											"name": "PUSH",
											"source": 14,
											"value": "12"
										},
										{
											"begin": 3588,
											"end": 3640,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 3588,
											"end": 3640,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3588,
											"end": 3640,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3588,
											"end": 3640,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "746F416464726573735F6F766572666C6F77"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3588,
											"end": 3640,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 3588,
											"end": 3640,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3588,
											"end": 3640,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3588,
											"end": 3640,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3588,
											"end": 3640,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3588,
											"end": 3640,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 3588,
											"end": 3640,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3588,
											"end": 3640,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3588,
											"end": 3640,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3588,
											"end": 3640,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 3588,
											"end": 3640,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 3588,
											"end": 3640,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3588,
											"end": 3640,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3588,
											"end": 3640,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 3588,
											"end": 3640,
											"name": "tag",
											"source": 14,
											"value": "157"
										},
										{
											"begin": 3588,
											"end": 3640,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3676,
											"end": 3682,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3685,
											"end": 3687,
											"name": "PUSH",
											"source": 14,
											"value": "14"
										},
										{
											"begin": 3676,
											"end": 3687,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3659,
											"end": 3665,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 3659,
											"end": 3672,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 3659,
											"end": 3687,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 3659,
											"end": 3687,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 3651,
											"end": 3713,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "158"
										},
										{
											"begin": 3651,
											"end": 3713,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 3651,
											"end": 3713,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 3651,
											"end": 3713,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3651,
											"end": 3713,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3651,
											"end": 3713,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3651,
											"end": 3713,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3651,
											"end": 3713,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 3651,
											"end": 3713,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 3651,
											"end": 3713,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3651,
											"end": 3713,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3651,
											"end": 3713,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3651,
											"end": 3713,
											"name": "PUSH",
											"source": 14,
											"value": "15"
										},
										{
											"begin": 3651,
											"end": 3713,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 3651,
											"end": 3713,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3651,
											"end": 3713,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3651,
											"end": 3713,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "746F416464726573735F6F75744F66426F756E6473"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "58"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3651,
											"end": 3713,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 3651,
											"end": 3713,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3651,
											"end": 3713,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3651,
											"end": 3713,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3651,
											"end": 3713,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3651,
											"end": 3713,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 3651,
											"end": 3713,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3651,
											"end": 3713,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3651,
											"end": 3713,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3651,
											"end": 3713,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 3651,
											"end": 3713,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 3651,
											"end": 3713,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3651,
											"end": 3713,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3651,
											"end": 3713,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 3651,
											"end": 3713,
											"name": "tag",
											"source": 14,
											"value": "158"
										},
										{
											"begin": 3651,
											"end": 3713,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3805,
											"end": 3835,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3821,
											"end": 3825,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 3805,
											"end": 3835,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3799,
											"end": 3836,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3795,
											"end": 3866,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3795,
											"end": 3866,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 3795,
											"end": 3866,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3489,
											"end": 3915,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 3923,
											"end": 4298,
											"name": "tag",
											"source": 14,
											"value": "124"
										},
										{
											"begin": 3923,
											"end": 4298,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4001,
											"end": 4007,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 4042,
											"end": 4048,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4028,
											"end": 4034,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4037,
											"end": 4038,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 4028,
											"end": 4038,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4028,
											"end": 4048,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 4028,
											"end": 4048,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 4020,
											"end": 4070,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "160"
										},
										{
											"begin": 4020,
											"end": 4070,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 4020,
											"end": 4070,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 4020,
											"end": 4070,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 4020,
											"end": 4070,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4020,
											"end": 4070,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4020,
											"end": 4070,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4020,
											"end": 4070,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4020,
											"end": 4070,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 4020,
											"end": 4070,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4020,
											"end": 4070,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4020,
											"end": 4070,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4020,
											"end": 4070,
											"name": "PUSH",
											"source": 14,
											"value": "11"
										},
										{
											"begin": 4020,
											"end": 4070,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 4020,
											"end": 4070,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4020,
											"end": 4070,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4020,
											"end": 4070,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "746F55696E7432345F6F766572666C6F77"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "78"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4020,
											"end": 4070,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 4020,
											"end": 4070,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4020,
											"end": 4070,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4020,
											"end": 4070,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4020,
											"end": 4070,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4020,
											"end": 4070,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 4020,
											"end": 4070,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4020,
											"end": 4070,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4020,
											"end": 4070,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4020,
											"end": 4070,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 4020,
											"end": 4070,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 4020,
											"end": 4070,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4020,
											"end": 4070,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4020,
											"end": 4070,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 4020,
											"end": 4070,
											"name": "tag",
											"source": 14,
											"value": "160"
										},
										{
											"begin": 4020,
											"end": 4070,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4106,
											"end": 4112,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4115,
											"end": 4116,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 4106,
											"end": 4116,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4089,
											"end": 4095,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 4089,
											"end": 4102,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 4089,
											"end": 4116,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 4089,
											"end": 4116,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 4081,
											"end": 4141,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "161"
										},
										{
											"begin": 4081,
											"end": 4141,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 4081,
											"end": 4141,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 4081,
											"end": 4141,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 4081,
											"end": 4141,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4081,
											"end": 4141,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4081,
											"end": 4141,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4081,
											"end": 4141,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4081,
											"end": 4141,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 4081,
											"end": 4141,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4081,
											"end": 4141,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4081,
											"end": 4141,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4081,
											"end": 4141,
											"name": "PUSH",
											"source": 14,
											"value": "14"
										},
										{
											"begin": 4081,
											"end": 4141,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 4081,
											"end": 4141,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4081,
											"end": 4141,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4081,
											"end": 4141,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "746F55696E7432345F6F75744F66426F756E6473"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4081,
											"end": 4141,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 4081,
											"end": 4141,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4081,
											"end": 4141,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4081,
											"end": 4141,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4081,
											"end": 4141,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4081,
											"end": 4141,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 4081,
											"end": 4141,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4081,
											"end": 4141,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4081,
											"end": 4141,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4081,
											"end": 4141,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 4081,
											"end": 4141,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 4081,
											"end": 4141,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4081,
											"end": 4141,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4081,
											"end": 4141,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 4081,
											"end": 4141,
											"name": "tag",
											"source": 14,
											"value": "161"
										},
										{
											"begin": 4081,
											"end": 4141,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4222,
											"end": 4251,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4238,
											"end": 4241,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 4222,
											"end": 4251,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4216,
											"end": 4252,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 4216,
											"end": 4252,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3923,
											"end": 4298,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 410,
											"end": 3481,
											"name": "tag",
											"source": 14,
											"value": "128"
										},
										{
											"begin": 410,
											"end": 3481,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 536,
											"end": 548,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 585,
											"end": 592,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 569,
											"end": 576,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 579,
											"end": 581,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 569,
											"end": 581,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 569,
											"end": 592,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 569,
											"end": 592,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 561,
											"end": 611,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "163"
										},
										{
											"begin": 561,
											"end": 611,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 561,
											"end": 611,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 561,
											"end": 611,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 561,
											"end": 611,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 561,
											"end": 611,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 561,
											"end": 611,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 561,
											"end": 611,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 561,
											"end": 611,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 561,
											"end": 611,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 561,
											"end": 611,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 561,
											"end": 611,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 561,
											"end": 611,
											"name": "PUSH",
											"source": 14,
											"value": "E"
										},
										{
											"begin": 561,
											"end": 611,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 561,
											"end": 611,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 561,
											"end": 611,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 561,
											"end": 611,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "736C6963655F6F766572666C6F77"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "90"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 561,
											"end": 611,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 561,
											"end": 611,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 561,
											"end": 611,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 561,
											"end": 611,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 561,
											"end": 611,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 561,
											"end": 611,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 561,
											"end": 611,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 561,
											"end": 611,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 561,
											"end": 611,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 561,
											"end": 611,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 561,
											"end": 611,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 561,
											"end": 611,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 561,
											"end": 611,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 561,
											"end": 611,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 561,
											"end": 611,
											"name": "tag",
											"source": 14,
											"value": "163"
										},
										{
											"begin": 561,
											"end": 611,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 650,
											"end": 656,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 639,
											"end": 646,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 630,
											"end": 636,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 630,
											"end": 646,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 630,
											"end": 656,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 630,
											"end": 656,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 622,
											"end": 675,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "164"
										},
										{
											"begin": 622,
											"end": 675,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 622,
											"end": 675,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 622,
											"end": 675,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 622,
											"end": 675,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 622,
											"end": 675,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 622,
											"end": 675,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 622,
											"end": 675,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 622,
											"end": 675,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 622,
											"end": 675,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 622,
											"end": 675,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 622,
											"end": 675,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 622,
											"end": 675,
											"name": "PUSH",
											"source": 14,
											"value": "E"
										},
										{
											"begin": 622,
											"end": 675,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 622,
											"end": 675,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 622,
											"end": 675,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 622,
											"end": 675,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "736C6963655F6F766572666C6F77"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "90"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 622,
											"end": 675,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 622,
											"end": 675,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 622,
											"end": 675,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 622,
											"end": 675,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 622,
											"end": 675,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 622,
											"end": 675,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 622,
											"end": 675,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 622,
											"end": 675,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 622,
											"end": 675,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 622,
											"end": 675,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 622,
											"end": 675,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 622,
											"end": 675,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 622,
											"end": 675,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 622,
											"end": 675,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 622,
											"end": 675,
											"name": "tag",
											"source": 14,
											"value": "164"
										},
										{
											"begin": 622,
											"end": 675,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 720,
											"end": 727,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 711,
											"end": 717,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 711,
											"end": 727,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 694,
											"end": 700,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 694,
											"end": 707,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 694,
											"end": 727,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 694,
											"end": 727,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 686,
											"end": 749,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "165"
										},
										{
											"begin": 686,
											"end": 749,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 686,
											"end": 749,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 686,
											"end": 749,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 686,
											"end": 749,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 686,
											"end": 749,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 686,
											"end": 749,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 686,
											"end": 749,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 686,
											"end": 749,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 686,
											"end": 749,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 686,
											"end": 749,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 686,
											"end": 749,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 686,
											"end": 749,
											"name": "PUSH",
											"source": 14,
											"value": "11"
										},
										{
											"begin": 686,
											"end": 749,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 686,
											"end": 749,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 686,
											"end": 749,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 686,
											"end": 749,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "736C6963655F6F75744F66426F756E6473"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "78"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 686,
											"end": 749,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 686,
											"end": 749,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 686,
											"end": 749,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 686,
											"end": 749,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 686,
											"end": 749,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 686,
											"end": 749,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 686,
											"end": 749,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 686,
											"end": 749,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 686,
											"end": 749,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 686,
											"end": 749,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 686,
											"end": 749,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 686,
											"end": 749,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 686,
											"end": 749,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 686,
											"end": 749,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 686,
											"end": 749,
											"name": "tag",
											"source": 14,
											"value": "165"
										},
										{
											"begin": 686,
											"end": 749,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 762,
											"end": 784,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 828,
											"end": 843,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 828,
											"end": 843,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 861,
											"end": 2998,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 861,
											"end": 2998,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 861,
											"end": 2998,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "167"
										},
										{
											"begin": 861,
											"end": 2998,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 3154,
											"end": 3158,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 3148,
											"end": 3159,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 3135,
											"end": 3159,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 3135,
											"end": 3159,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3355,
											"end": 3356,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3344,
											"end": 3353,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3337,
											"end": 3357,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3409,
											"end": 3413,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 3398,
											"end": 3407,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3394,
											"end": 3414,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3388,
											"end": 3392,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 3381,
											"end": 3415,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 821,
											"end": 3434,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "166"
										},
										{
											"begin": 821,
											"end": 3434,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 861,
											"end": 2998,
											"name": "tag",
											"source": 14,
											"value": "167"
										},
										{
											"begin": 861,
											"end": 2998,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1058,
											"end": 1062,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 1052,
											"end": 1063,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 1039,
											"end": 1063,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 1039,
											"end": 1063,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1763,
											"end": 1765,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 1754,
											"end": 1761,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 1750,
											"end": 1766,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 2171,
											"end": 2180,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 2164,
											"end": 2181,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 2158,
											"end": 2162,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 2154,
											"end": 2182,
											"name": "MUL",
											"source": 14
										},
										{
											"begin": 2142,
											"end": 2151,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 2131,
											"end": 2140,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 2127,
											"end": 2152,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2123,
											"end": 2183,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2224,
											"end": 2231,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 2220,
											"end": 2222,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 2216,
											"end": 2232,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2497,
											"end": 2503,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 2483,
											"end": 2492,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 2476,
											"end": 2493,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 2470,
											"end": 2474,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 2466,
											"end": 2494,
											"name": "MUL",
											"source": 14
										},
										{
											"begin": 2454,
											"end": 2463,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 2446,
											"end": 2452,
											"name": "DUP12",
											"source": 14
										},
										{
											"begin": 2442,
											"end": 2464,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2438,
											"end": 2495,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2434,
											"end": 2504,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2256,
											"end": 2726,
											"name": "tag",
											"source": 14,
											"value": "168"
										},
										{
											"begin": 2256,
											"end": 2726,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2535,
											"end": 2538,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 2531,
											"end": 2533,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 2528,
											"end": 2539,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 2256,
											"end": 2726,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 2256,
											"end": 2726,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "170"
										},
										{
											"begin": 2256,
											"end": 2726,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 2693,
											"end": 2702,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 2693,
											"end": 2702,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 2682,
											"end": 2703,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 2682,
											"end": 2703,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 2581,
											"end": 2585,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 2573,
											"end": 2586,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 2573,
											"end": 2586,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 2573,
											"end": 2586,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2573,
											"end": 2586,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 2618,
											"end": 2631,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2256,
											"end": 2726,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "168"
										},
										{
											"begin": 2256,
											"end": 2726,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 2256,
											"end": 2726,
											"name": "tag",
											"source": 14,
											"value": "170"
										},
										{
											"begin": 2256,
											"end": 2726,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2750,
											"end": 2776,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 2750,
											"end": 2776,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 2750,
											"end": 2776,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 2974,
											"end": 2976,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 2957,
											"end": 2968,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2953,
											"end": 2978,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 2947,
											"end": 2951,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 2940,
											"end": 2979,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 821,
											"end": 3434,
											"name": "tag",
											"source": 14,
											"value": "166"
										},
										{
											"begin": 821,
											"end": 3434,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3464,
											"end": 3473,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 410,
											"end": 3481,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 410,
											"end": 3481,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 803,
											"end": 1084,
											"name": "tag",
											"source": 17,
											"value": "132"
										},
										{
											"begin": 803,
											"end": 1084,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 924,
											"end": 938,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "171"
										},
										{
											"begin": 924,
											"end": 938,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "172"
										},
										{
											"begin": 924,
											"end": 938,
											"name": "JUMP",
											"source": 17,
											"value": "[in]"
										},
										{
											"begin": 924,
											"end": 938,
											"name": "tag",
											"source": 17,
											"value": "171"
										},
										{
											"begin": 924,
											"end": 938,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 964,
											"end": 970,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 955,
											"end": 970,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 955,
											"end": 961,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 955,
											"end": 970,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 955,
											"end": 970,
											"name": "GT",
											"source": 17
										},
										{
											"begin": 951,
											"end": 1007,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 951,
											"end": 1007,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "174"
										},
										{
											"begin": 951,
											"end": 1007,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 992,
											"end": 998,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 992,
											"end": 998,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 1000,
											"end": 1006,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 951,
											"end": 1007,
											"name": "tag",
											"source": 17,
											"value": "174"
										},
										{
											"begin": 951,
											"end": 1007,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1025,
											"end": 1076,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 1025,
											"end": 1076,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 1025,
											"end": 1076,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 1025,
											"end": 1076,
											"name": "PUSH",
											"source": 17,
											"value": "60"
										},
										{
											"begin": 1025,
											"end": 1076,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1025,
											"end": 1076,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1025,
											"end": 1076,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 1025,
											"end": 1076,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1025,
											"end": 1076,
											"name": "SWAP5",
											"source": 17
										},
										{
											"begin": 1025,
											"end": 1076,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 1025,
											"end": 1076,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 1025,
											"end": 1076,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1025,
											"end": 1076,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 1025,
											"end": 1076,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 1025,
											"end": 1076,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1025,
											"end": 1076,
											"name": "SWAP4",
											"source": 17
										},
										{
											"begin": 1025,
											"end": 1076,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 1025,
											"end": 1076,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 1025,
											"end": 1076,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 1025,
											"end": 1076,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1025,
											"end": 1076,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 1025,
											"end": 1076,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFF"
										},
										{
											"begin": 1025,
											"end": 1076,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 1025,
											"end": 1076,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 1025,
											"end": 1076,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1025,
											"end": 1076,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1025,
											"end": 1076,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 1025,
											"end": 1076,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1025,
											"end": 1076,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 1025,
											"end": 1076,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 1025,
											"end": 1076,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 803,
											"end": 1084,
											"name": "JUMP",
											"source": 17,
											"value": "[out]"
										},
										{
											"begin": 1337,
											"end": 1863,
											"name": "tag",
											"source": 17,
											"value": "133"
										},
										{
											"begin": 1337,
											"end": 1863,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 1421,
											"end": 1433,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 1467,
											"end": 1470,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1467,
											"end": 1477,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 1467,
											"end": 1477,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1467,
											"end": 1477,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1454,
											"end": 1477,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 1454,
											"end": 1457,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 1454,
											"end": 1464,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 1454,
											"end": 1464,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1454,
											"end": 1464,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1454,
											"end": 1477,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 1454,
											"end": 1477,
											"name": "LT",
											"source": 17
										},
										{
											"begin": 1446,
											"end": 1478,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "176"
										},
										{
											"begin": 1446,
											"end": 1478,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 1446,
											"end": 1478,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 1446,
											"end": 1478,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 1446,
											"end": 1478,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 1446,
											"end": 1478,
											"name": "tag",
											"source": 17,
											"value": "176"
										},
										{
											"begin": 1446,
											"end": 1478,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1708,
											"end": 1718,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 1708,
											"end": 1718,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 1720,
											"end": 1730,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 1720,
											"end": 1730,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 1720,
											"end": 1730,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 1720,
											"end": 1730,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1720,
											"end": 1730,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 1732,
											"end": 1739,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 1732,
											"end": 1739,
											"name": "SWAP4",
											"source": 17
										},
										{
											"begin": 1732,
											"end": 1739,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 1732,
											"end": 1739,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1732,
											"end": 1739,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 1697,
											"end": 1740,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 1697,
											"end": 1740,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1697,
											"end": 1740,
											"name": "SWAP5",
											"source": 17
										},
										{
											"begin": 1697,
											"end": 1740,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 1697,
											"end": 1740,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 1697,
											"end": 1740,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1697,
											"end": 1740,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 1697,
											"end": 1740,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1697,
											"end": 1740,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 1697,
											"end": 1740,
											"name": "SWAP4",
											"source": 17
										},
										{
											"begin": 1697,
											"end": 1740,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1697,
											"end": 1740,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 1697,
											"end": 1740,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 1697,
											"end": 1740,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 1697,
											"end": 1740,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 1697,
											"end": 1740,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1697,
											"end": 1740,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 1697,
											"end": 1740,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFF"
										},
										{
											"begin": 1697,
											"end": 1740,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 1697,
											"end": 1740,
											"name": "PUSH",
											"source": 17,
											"value": "60"
										},
										{
											"begin": 1697,
											"end": 1740,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 1697,
											"end": 1740,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 1697,
											"end": 1740,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1697,
											"end": 1740,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 1697,
											"end": 1740,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1697,
											"end": 1740,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 1697,
											"end": 1740,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 1697,
											"end": 1740,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 1697,
											"end": 1740,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 1697,
											"end": 1740,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 1697,
											"end": 1740,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 1697,
											"end": 1740,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 1697,
											"end": 1740,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 1697,
											"end": 1740,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1697,
											"end": 1740,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1697,
											"end": 1740,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 1697,
											"end": 1740,
											"name": "PUSH",
											"source": 17,
											"value": "80"
										},
										{
											"begin": 1697,
											"end": 1740,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 1697,
											"end": 1740,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1697,
											"end": 1740,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 1697,
											"end": 1740,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 1687,
											"end": 1741,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 1687,
											"end": 1741,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 1687,
											"end": 1741,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1687,
											"end": 1741,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 1687,
											"end": 1741,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1687,
											"end": 1741,
											"name": "KECCAK256",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "PUSH",
											"source": 17,
											"value": "A0"
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "SWAP5",
											"source": 17
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "SHL",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "PUSH",
											"source": 17,
											"value": "A1"
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "PUSH",
											"source": 17,
											"value": "B5"
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "SWAP4",
											"source": 17
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "SWAP4",
											"source": 17
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 246,
											"end": 312,
											"name": "PUSH",
											"source": 17,
											"value": "E34F199B19B2B4F47F68442619D555527D244F78A3297EA89325F843F87B8B54"
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "PUSH",
											"source": 17,
											"value": "D5"
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "PUSH",
											"source": 17,
											"value": "F5"
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 1576,
											"end": 1810,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 1544,
											"end": 1829,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 1544,
											"end": 1829,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 1544,
											"end": 1829,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 1544,
											"end": 1829,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1544,
											"end": 1829,
											"name": "KECCAK256",
											"source": 17
										},
										{
											"begin": 1544,
											"end": 1829,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 1337,
											"end": 1863,
											"name": "JUMP",
											"source": 17,
											"value": "[out]"
										},
										{
											"begin": 1216,
											"end": 1502,
											"name": "tag",
											"source": 15,
											"value": "155"
										},
										{
											"begin": 1216,
											"end": 1502,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 1343,
											"end": 1362,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 1402,
											"end": 1446,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "178"
										},
										{
											"begin": 1429,
											"end": 1436,
											"name": "DUP4",
											"source": 15
										},
										{
											"begin": 1438,
											"end": 1445,
											"name": "DUP4",
											"source": 15
										},
										{
											"begin": 1402,
											"end": 1428,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "133"
										},
										{
											"begin": 1402,
											"end": 1446,
											"name": "JUMP",
											"source": 15,
											"value": "[in]"
										},
										{
											"begin": 1402,
											"end": 1446,
											"name": "tag",
											"source": 15,
											"value": "178"
										},
										{
											"begin": 1402,
											"end": 1446,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 1380,
											"end": 1447,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1466,
											"end": 1476,
											"name": "CALLER",
											"source": 15
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1466,
											"end": 1493,
											"name": "DUP3",
											"source": 15
										},
										{
											"begin": 1466,
											"end": 1493,
											"name": "AND",
											"source": 15
										},
										{
											"begin": 1466,
											"end": 1493,
											"name": "EQ",
											"source": 15
										},
										{
											"begin": 1458,
											"end": 1494,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "41"
										},
										{
											"begin": 1458,
											"end": 1494,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 1458,
											"end": 1494,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 1458,
											"end": 1494,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 1458,
											"end": 1494,
											"name": "REVERT",
											"source": 15
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "172"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"WETH9()": "4aa4a4fc",
							"factory()": "c45a0155",
							"quoteExactInput(bytes,uint256)": "cdca1753",
							"quoteExactInputSingle(address,address,uint24,uint256,uint160)": "f7729d43",
							"quoteExactOutput(bytes,uint256)": "2f80bb1d",
							"quoteExactOutputSingle(address,address,uint24,uint256,uint160)": "30d07f21",
							"uniswapV3SwapCallback(int256,int256,bytes)": "fa461e33"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH9\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"quoteExactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"name\":\"quoteExactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"quoteExactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"name\":\"quoteExactOutputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"These functions are not gas efficient and should _not_ be called on chain. Instead, optimistically execute the swap and check the amounts in the callback.\",\"kind\":\"dev\",\"methods\":{\"quoteExactInput(bytes,uint256)\":{\"params\":{\"amountIn\":\"The amount of the first token to swap\",\"path\":\"The path of the swap, i.e. each token pair and the pool fee\"},\"returns\":{\"amountOut\":\"The amount of the last token that would be received\"}},\"quoteExactInputSingle(address,address,uint24,uint256,uint160)\":{\"params\":{\"amountIn\":\"The desired input amount\",\"fee\":\"The fee of the token pool to consider for the pair\",\"sqrtPriceLimitX96\":\"The price limit of the pool that cannot be exceeded by the swap\",\"tokenIn\":\"The token being swapped in\",\"tokenOut\":\"The token being swapped out\"},\"returns\":{\"amountOut\":\"The amount of `tokenOut` that would be received\"}},\"quoteExactOutput(bytes,uint256)\":{\"params\":{\"amountOut\":\"The amount of the last token to receive\",\"path\":\"The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\"},\"returns\":{\"amountIn\":\"The amount of first token required to be paid\"}},\"quoteExactOutputSingle(address,address,uint24,uint256,uint160)\":{\"params\":{\"amountOut\":\"The desired output amount\",\"fee\":\"The fee of the token pool to consider for the pair\",\"sqrtPriceLimitX96\":\"The price limit of the pool that cannot be exceeded by the swap\",\"tokenIn\":\"The token being swapped in\",\"tokenOut\":\"The token being swapped out\"},\"returns\":{\"amountIn\":\"The amount required as the input for the swap in order to receive `amountOut`\"}},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the IUniswapV3PoolActions#swap call\"}}},\"stateVariables\":{\"amountOutCached\":{\"details\":\"Transient storage variable used to check a safety condition in exact output swaps.\"}},\"title\":\"Provides quotes for swaps\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"quoteExactInput(bytes,uint256)\":{\"notice\":\"Returns the amount out received for a given exact input swap without executing the swap\"},\"quoteExactInputSingle(address,address,uint24,uint256,uint160)\":{\"notice\":\"Returns the amount out received for a given exact input but for a swap of a single pool\"},\"quoteExactOutput(bytes,uint256)\":{\"notice\":\"Returns the amount in required for a given exact output swap without executing the swap\"},\"quoteExactOutputSingle(address,address,uint24,uint256,uint160)\":{\"notice\":\"Returns the amount in required to receive the given exact output amount but for a swap of a single pool\"},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\"}},\"notice\":\"Allows getting the expected amount out or amount in for a given swap without executing the swap\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lens/Quoter.sol\":\"Quoter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://1c42b9e6f5902ac38dd43e25750939baa7e0c1425dc75afd717c4412731065d5\",\"dweb:/ipfs/QmWaoacnzsucTvBME2o7YgZBZMhaHv7fkj83htHMVWJKWh\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://095ce0626b41318c772b3ebf19d548282607f6a8f3d6c41c13edfbd5370c8652\",\"dweb:/ipfs/QmVDZfJJ89UUCE1hMyzqpkZAtQ8jUsBgZNE5AMRG7RzRFS\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5\",\"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7\",\"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03\",\"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047\",\"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735\",\"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f\",\"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/SafeCast.sol\":{\"keccak256\":\"0x4c12bf820c0b011f5490a209960ca34dd8af34660ef9e01de0438393d15e3fd8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://fed11489e218e55d087d42b4f350a30e10cd2aedec8f432bd3cc712f648d5869\",\"dweb:/ipfs/QmWfRnRxyXwHUDcTQPazxYYk5jxErGeQqdvnYtyg5nBPbU\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/TickMath.sol\":{\"keccak256\":\"0x1f864a2bf61ba05f3173eaf2e3f94c5e1da4bec0554757527b6d1ef1fe439e4e\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://5139b586df546a9d1c46804ca400b1cb9ce87236eaf212ebd64edee6747a172a\",\"dweb:/ipfs/QmVa2kcRw3VyuB6j1EVWXACKnkbQZgfXYXNi5voq3XkYG8\"]},\"contracts/base/PeripheryImmutableState.sol\":{\"keccak256\":\"0x1d0175136fda60c5e1b6aab6dfa4a35856717413d754d0750eb75866f3f5e43f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8e19496cd2a7239e9e869bafbfb9f762691a9ab52f169b579f11d752d7df79a5\",\"dweb:/ipfs/QmTaLVPUVMGp4ZywHwpFupnz2873NPyqYs3EzbJTHpVNSA\"]},\"contracts/interfaces/IPeripheryImmutableState.sol\":{\"keccak256\":\"0x23bb9671c6188fe826d384acb88182efc75c55ee7b6e7c5792de8f26581f0390\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://eb0b086015acc6d97e15e71a406e5ba393d188df878c71eaeb98b6ce4c99a353\",\"dweb:/ipfs/QmWvXDAjebKmEJcvoB7S7e981zcvLvMLT11BLZZMf7D2rL\"]},\"contracts/interfaces/IQuoter.sol\":{\"keccak256\":\"0x216c7b70ca8811513d2c78eb82b25ee6ab89ad59192fb8ae2cbf8c92e5db1adf\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://0346d5f05f11c49ff3abbb00e9e422500d3922cd934b5e29f1dbd49cf778ac1d\",\"dweb:/ipfs/Qmd7KvVPLNFzQJ2vThN2mJYbDDbqWtmvnHY5QdGB9Qbsbu\"]},\"contracts/lens/Quoter.sol\":{\"keccak256\":\"0x32ff09a7b065602eb1409a9849a1cbc218437b27637296133ebd60e794ba90b4\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://e2339b3a1bc60a60edb6726d9329a0cc5c21a37664a813c27be8cc90a6d2ea76\",\"dweb:/ipfs/QmaZkf28rtMWdP8hvA8AaTGwtqPFEEqEfMjmcMbjqjpQPz\"]},\"contracts/libraries/BytesLib.sol\":{\"keccak256\":\"0xbf23f73b0ec504e799b3e8ea71063eaeec08d6e688c56951fc645afaf5c1e7fd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://863b16fdc6f8b9a22622fe4f9b991b4b7039db2beec8095134ed18ec4843683f\",\"dweb:/ipfs/QmatVX7apv6drzj8WvDjQs8sREGApz1U4pvhPnk6MCyPFT\"]},\"contracts/libraries/CallbackValidation.sol\":{\"keccak256\":\"0x5746582acca706899078ff8b36da7022e364bd8631a1fc15d37512ce02595d29\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://7d6629973b50846597a167a4b20869936d994cb61b396b3bac3e2eaa3973e552\",\"dweb:/ipfs/Qme9rPk7AayixV3wHwnq1XcMXDVbZqi2pjBFNcUXqGo8GW\"]},\"contracts/libraries/Path.sol\":{\"keccak256\":\"0x13c1302a21dbc2bbac527052506140eb3ed342c3b83054e07d0040d22c3dd284\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ed3ce8db752fabe37b23d6fd1205a35102f2f6e91ad14f42536538b6ea71ae08\",\"dweb:/ipfs/QmSpSmvuTcavQW3HixkdAcFhCyzLwSkHKNUa7RrEM47jet\"]},\"contracts/libraries/PoolAddress.sol\":{\"keccak256\":\"0xd8fca2727cc0b80b46f9bef41aa958c46c075dc785bc3ad3cda3b822e31a7354\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://54877e50ab00753f73eed0a4a9f2ff735401c07e78a76603738a6b9879eb39ae\",\"dweb:/ipfs/QmXuiT99xKNdZVTZ2gQkAxa6rSVKohSxYUU9BtYB5RXX5D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1191,
								"contract": "contracts/lens/Quoter.sol:Quoter",
								"label": "amountOutCached",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"quoteExactInput(bytes,uint256)": {
								"notice": "Returns the amount out received for a given exact input swap without executing the swap"
							},
							"quoteExactInputSingle(address,address,uint24,uint256,uint160)": {
								"notice": "Returns the amount out received for a given exact input but for a swap of a single pool"
							},
							"quoteExactOutput(bytes,uint256)": {
								"notice": "Returns the amount in required for a given exact output swap without executing the swap"
							},
							"quoteExactOutputSingle(address,address,uint24,uint256,uint160)": {
								"notice": "Returns the amount in required to receive the given exact output amount but for a swap of a single pool"
							},
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"notice": "Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap."
							}
						},
						"notice": "Allows getting the expected amount out or amount in for a given swap without executing the swap",
						"version": 1
					}
				}
			},
			"contracts/libraries/BytesLib.sol": {
				"BytesLib": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/libraries/BytesLib.sol\":386:4301  library BytesLib {\r... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/libraries/BytesLib.sol\":386:4301  library BytesLib {\r... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122006d6d0404fecc9740438ede47c7fe2ebca12d2476b07548c2c434c0b726add9364736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122006d6d0404fecc9740438ede47c7fe2ebca12d2476b07548c2c434c0b726add9364736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MOD 0xD6 0xD0 BLOCKHASH 0x4F 0xEC 0xC9 PUSH21 0x438EDE47C7FE2EBCA12D2476B07548C2C434C0B72 PUSH11 0xDD9364736F6C6343000706 STOP CALLER ",
							"sourceMap": "386:3915:14:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122006d6d0404fecc9740438ede47c7fe2ebca12d2476b07548c2c434c0b726add9364736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MOD 0xD6 0xD0 BLOCKHASH 0x4F 0xEC 0xC9 PUSH21 0x438EDE47C7FE2EBCA12D2476B07548C2C434C0B72 PUSH11 0xDD9364736F6C6343000706 STOP CALLER ",
							"sourceMap": "386:3915:14:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"slice(bytes memory,uint256,uint256)": "infinite",
								"toAddress(bytes memory,uint256)": "infinite",
								"toUint24(bytes memory,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 386,
									"end": 4301,
									"name": "PUSH #[$]",
									"source": 14,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 386,
									"end": 4301,
									"name": "PUSH [$]",
									"source": 14,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 386,
									"end": 4301,
									"name": "PUSH",
									"source": 14,
									"value": "B"
								},
								{
									"begin": 386,
									"end": 4301,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 386,
									"end": 4301,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 386,
									"end": 4301,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 386,
									"end": 4301,
									"name": "CODECOPY",
									"source": 14
								},
								{
									"begin": 386,
									"end": 4301,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 386,
									"end": 4301,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 386,
									"end": 4301,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 386,
									"end": 4301,
									"name": "BYTE",
									"source": 14
								},
								{
									"begin": 386,
									"end": 4301,
									"name": "PUSH",
									"source": 14,
									"value": "73"
								},
								{
									"begin": 386,
									"end": 4301,
									"name": "EQ",
									"source": 14
								},
								{
									"begin": 386,
									"end": 4301,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 386,
									"end": 4301,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 386,
									"end": 4301,
									"name": "INVALID",
									"source": 14
								},
								{
									"begin": 386,
									"end": 4301,
									"name": "tag",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 386,
									"end": 4301,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 386,
									"end": 4301,
									"name": "ADDRESS",
									"source": 14
								},
								{
									"begin": 386,
									"end": 4301,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 386,
									"end": 4301,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 386,
									"end": 4301,
									"name": "PUSH",
									"source": 14,
									"value": "73"
								},
								{
									"begin": 386,
									"end": 4301,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 386,
									"end": 4301,
									"name": "MSTORE8",
									"source": 14
								},
								{
									"begin": 386,
									"end": 4301,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 386,
									"end": 4301,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 386,
									"end": 4301,
									"name": "RETURN",
									"source": 14
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122006d6d0404fecc9740438ede47c7fe2ebca12d2476b07548c2c434c0b726add9364736f6c63430007060033",
									".code": [
										{
											"begin": 386,
											"end": 4301,
											"name": "PUSHDEPLOYADDRESS",
											"source": 14
										},
										{
											"begin": 386,
											"end": 4301,
											"name": "ADDRESS",
											"source": 14
										},
										{
											"begin": 386,
											"end": 4301,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 386,
											"end": 4301,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 386,
											"end": 4301,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 386,
											"end": 4301,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 386,
											"end": 4301,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 386,
											"end": 4301,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 386,
											"end": 4301,
											"name": "REVERT",
											"source": 14
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/BytesLib.sol\":\"BytesLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/BytesLib.sol\":{\"keccak256\":\"0xbf23f73b0ec504e799b3e8ea71063eaeec08d6e688c56951fc645afaf5c1e7fd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://863b16fdc6f8b9a22622fe4f9b991b4b7039db2beec8095134ed18ec4843683f\",\"dweb:/ipfs/QmatVX7apv6drzj8WvDjQs8sREGApz1U4pvhPnk6MCyPFT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/libraries/CallbackValidation.sol": {
				"CallbackValidation": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/libraries/CallbackValidation.sol\":241:1505  library CallbackValidation {\r... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/libraries/CallbackValidation.sol\":241:1505  library CallbackValidation {\r... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220422411c5c1bf0b5e55e982e19a1401cad581127cba19db03c0ac68ff3fc539e164736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220422411c5c1bf0b5e55e982e19a1401cad581127cba19db03c0ac68ff3fc539e164736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 TIMESTAMP 0x24 GT 0xC5 0xC1 0xBF SIGNEXTEND 0x5E SSTORE 0xE9 DUP3 0xE1 SWAP11 EQ ADD 0xCA 0xD5 DUP2 SLT PUSH29 0xBA19DB03C0AC68FF3FC539E164736F6C63430007060033000000000000 ",
							"sourceMap": "241:1264:15:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220422411c5c1bf0b5e55e982e19a1401cad581127cba19db03c0ac68ff3fc539e164736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 TIMESTAMP 0x24 GT 0xC5 0xC1 0xBF SIGNEXTEND 0x5E SSTORE 0xE9 DUP3 0xE1 SWAP11 EQ ADD 0xCA 0xD5 DUP2 SLT PUSH29 0xBA19DB03C0AC68FF3FC539E164736F6C63430007060033000000000000 ",
							"sourceMap": "241:1264:15:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"verifyCallback(address,address,address,uint24)": "infinite",
								"verifyCallback(address,struct PoolAddress.PoolKey memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 241,
									"end": 1505,
									"name": "PUSH #[$]",
									"source": 15,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 241,
									"end": 1505,
									"name": "PUSH [$]",
									"source": 15,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 241,
									"end": 1505,
									"name": "PUSH",
									"source": 15,
									"value": "B"
								},
								{
									"begin": 241,
									"end": 1505,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 241,
									"end": 1505,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 241,
									"end": 1505,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 241,
									"end": 1505,
									"name": "CODECOPY",
									"source": 15
								},
								{
									"begin": 241,
									"end": 1505,
									"name": "DUP1",
									"source": 15
								},
								{
									"begin": 241,
									"end": 1505,
									"name": "MLOAD",
									"source": 15
								},
								{
									"begin": 241,
									"end": 1505,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 241,
									"end": 1505,
									"name": "BYTE",
									"source": 15
								},
								{
									"begin": 241,
									"end": 1505,
									"name": "PUSH",
									"source": 15,
									"value": "73"
								},
								{
									"begin": 241,
									"end": 1505,
									"name": "EQ",
									"source": 15
								},
								{
									"begin": 241,
									"end": 1505,
									"name": "PUSH [tag]",
									"source": 15,
									"value": "1"
								},
								{
									"begin": 241,
									"end": 1505,
									"name": "JUMPI",
									"source": 15
								},
								{
									"begin": 241,
									"end": 1505,
									"name": "INVALID",
									"source": 15
								},
								{
									"begin": 241,
									"end": 1505,
									"name": "tag",
									"source": 15,
									"value": "1"
								},
								{
									"begin": 241,
									"end": 1505,
									"name": "JUMPDEST",
									"source": 15
								},
								{
									"begin": 241,
									"end": 1505,
									"name": "ADDRESS",
									"source": 15
								},
								{
									"begin": 241,
									"end": 1505,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 241,
									"end": 1505,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 241,
									"end": 1505,
									"name": "PUSH",
									"source": 15,
									"value": "73"
								},
								{
									"begin": 241,
									"end": 1505,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 241,
									"end": 1505,
									"name": "MSTORE8",
									"source": 15
								},
								{
									"begin": 241,
									"end": 1505,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 241,
									"end": 1505,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 241,
									"end": 1505,
									"name": "RETURN",
									"source": 15
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220422411c5c1bf0b5e55e982e19a1401cad581127cba19db03c0ac68ff3fc539e164736f6c63430007060033",
									".code": [
										{
											"begin": 241,
											"end": 1505,
											"name": "PUSHDEPLOYADDRESS",
											"source": 15
										},
										{
											"begin": 241,
											"end": 1505,
											"name": "ADDRESS",
											"source": 15
										},
										{
											"begin": 241,
											"end": 1505,
											"name": "EQ",
											"source": 15
										},
										{
											"begin": 241,
											"end": 1505,
											"name": "PUSH",
											"source": 15,
											"value": "80"
										},
										{
											"begin": 241,
											"end": 1505,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 241,
											"end": 1505,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 241,
											"end": 1505,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 241,
											"end": 1505,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 241,
											"end": 1505,
											"name": "REVERT",
											"source": 15
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Provides validation for callbacks from Uniswap V3 Pools\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/CallbackValidation.sol\":\"CallbackValidation\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://1c42b9e6f5902ac38dd43e25750939baa7e0c1425dc75afd717c4412731065d5\",\"dweb:/ipfs/QmWaoacnzsucTvBME2o7YgZBZMhaHv7fkj83htHMVWJKWh\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5\",\"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7\",\"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03\",\"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047\",\"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735\",\"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u\"]},\"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f\",\"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg\"]},\"contracts/libraries/CallbackValidation.sol\":{\"keccak256\":\"0x5746582acca706899078ff8b36da7022e364bd8631a1fc15d37512ce02595d29\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://7d6629973b50846597a167a4b20869936d994cb61b396b3bac3e2eaa3973e552\",\"dweb:/ipfs/Qme9rPk7AayixV3wHwnq1XcMXDVbZqi2pjBFNcUXqGo8GW\"]},\"contracts/libraries/PoolAddress.sol\":{\"keccak256\":\"0xd8fca2727cc0b80b46f9bef41aa958c46c075dc785bc3ad3cda3b822e31a7354\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://54877e50ab00753f73eed0a4a9f2ff735401c07e78a76603738a6b9879eb39ae\",\"dweb:/ipfs/QmXuiT99xKNdZVTZ2gQkAxa6rSVKohSxYUU9BtYB5RXX5D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Provides validation for callbacks from Uniswap V3 Pools",
						"version": 1
					}
				}
			},
			"contracts/libraries/Path.sol": {
				"Path": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"ADDR_SIZE": {
								"details": "The length of the bytes encoded address"
							},
							"FEE_SIZE": {
								"details": "The length of the bytes encoded fee"
							},
							"MULTIPLE_POOLS_MIN_LENGTH": {
								"details": "The minimum length of an encoding that contains 2 or more pools"
							},
							"NEXT_OFFSET": {
								"details": "The offset of a single token address and pool fee"
							},
							"POP_OFFSET": {
								"details": "The offset of an encoded pool key"
							}
						},
						"title": "Functions for manipulating path data for multihop swaps",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/libraries/Path.sol\":170:2854  library Path {\r... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/libraries/Path.sol\":170:2854  library Path {\r... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122041f90938c1e6424affd80c4f58a98f7840267f0934333d24bde8ec46f7e8f5f664736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122041f90938c1e6424affd80c4f58a98f7840267f0934333d24bde8ec46f7e8f5f664736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 COINBASE 0xF9 MULMOD CODESIZE 0xC1 0xE6 TIMESTAMP 0x4A SELFDESTRUCT 0xD8 0xC 0x4F PC 0xA9 DUP16 PUSH25 0x40267F0934333D24BDE8EC46F7E8F5F664736F6C6343000706 STOP CALLER ",
							"sourceMap": "170:2684:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122041f90938c1e6424affd80c4f58a98f7840267f0934333d24bde8ec46f7e8f5f664736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 COINBASE 0xF9 MULMOD CODESIZE 0xC1 0xE6 TIMESTAMP 0x4A SELFDESTRUCT 0xD8 0xC 0x4F PC 0xA9 DUP16 PUSH25 0x40267F0934333D24BDE8EC46F7E8F5F664736F6C6343000706 STOP CALLER ",
							"sourceMap": "170:2684:16:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"decodeFirstPool(bytes memory)": "infinite",
								"getFirstPool(bytes memory)": "infinite",
								"hasMultiplePools(bytes memory)": "infinite",
								"numPools(bytes memory)": "infinite",
								"skipToken(bytes memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 170,
									"end": 2854,
									"name": "PUSH #[$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 170,
									"end": 2854,
									"name": "PUSH [$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 170,
									"end": 2854,
									"name": "PUSH",
									"source": 16,
									"value": "B"
								},
								{
									"begin": 170,
									"end": 2854,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 170,
									"end": 2854,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 170,
									"end": 2854,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 170,
									"end": 2854,
									"name": "CODECOPY",
									"source": 16
								},
								{
									"begin": 170,
									"end": 2854,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 170,
									"end": 2854,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 170,
									"end": 2854,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 170,
									"end": 2854,
									"name": "BYTE",
									"source": 16
								},
								{
									"begin": 170,
									"end": 2854,
									"name": "PUSH",
									"source": 16,
									"value": "73"
								},
								{
									"begin": 170,
									"end": 2854,
									"name": "EQ",
									"source": 16
								},
								{
									"begin": 170,
									"end": 2854,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 170,
									"end": 2854,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 170,
									"end": 2854,
									"name": "INVALID",
									"source": 16
								},
								{
									"begin": 170,
									"end": 2854,
									"name": "tag",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 170,
									"end": 2854,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 170,
									"end": 2854,
									"name": "ADDRESS",
									"source": 16
								},
								{
									"begin": 170,
									"end": 2854,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 170,
									"end": 2854,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 170,
									"end": 2854,
									"name": "PUSH",
									"source": 16,
									"value": "73"
								},
								{
									"begin": 170,
									"end": 2854,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 170,
									"end": 2854,
									"name": "MSTORE8",
									"source": 16
								},
								{
									"begin": 170,
									"end": 2854,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 170,
									"end": 2854,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 170,
									"end": 2854,
									"name": "RETURN",
									"source": 16
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122041f90938c1e6424affd80c4f58a98f7840267f0934333d24bde8ec46f7e8f5f664736f6c63430007060033",
									".code": [
										{
											"begin": 170,
											"end": 2854,
											"name": "PUSHDEPLOYADDRESS",
											"source": 16
										},
										{
											"begin": 170,
											"end": 2854,
											"name": "ADDRESS",
											"source": 16
										},
										{
											"begin": 170,
											"end": 2854,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 170,
											"end": 2854,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 170,
											"end": 2854,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 170,
											"end": 2854,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 170,
											"end": 2854,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 170,
											"end": 2854,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 170,
											"end": 2854,
											"name": "REVERT",
											"source": 16
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"ADDR_SIZE\":{\"details\":\"The length of the bytes encoded address\"},\"FEE_SIZE\":{\"details\":\"The length of the bytes encoded fee\"},\"MULTIPLE_POOLS_MIN_LENGTH\":{\"details\":\"The minimum length of an encoding that contains 2 or more pools\"},\"NEXT_OFFSET\":{\"details\":\"The offset of a single token address and pool fee\"},\"POP_OFFSET\":{\"details\":\"The offset of an encoded pool key\"}},\"title\":\"Functions for manipulating path data for multihop swaps\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/Path.sol\":\"Path\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/BytesLib.sol\":{\"keccak256\":\"0xbf23f73b0ec504e799b3e8ea71063eaeec08d6e688c56951fc645afaf5c1e7fd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://863b16fdc6f8b9a22622fe4f9b991b4b7039db2beec8095134ed18ec4843683f\",\"dweb:/ipfs/QmatVX7apv6drzj8WvDjQs8sREGApz1U4pvhPnk6MCyPFT\"]},\"contracts/libraries/Path.sol\":{\"keccak256\":\"0x13c1302a21dbc2bbac527052506140eb3ed342c3b83054e07d0040d22c3dd284\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ed3ce8db752fabe37b23d6fd1205a35102f2f6e91ad14f42536538b6ea71ae08\",\"dweb:/ipfs/QmSpSmvuTcavQW3HixkdAcFhCyzLwSkHKNUa7RrEM47jet\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/libraries/PoolAddress.sol": {
				"PoolAddress": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Provides functions for deriving a pool address from the factory, tokens, and the fee",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/libraries/PoolAddress.sol\":171:1866  library PoolAddress {\r... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/libraries/PoolAddress.sol\":171:1866  library PoolAddress {\r... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122029f90a86b932a1451810ba9fb55b6eccf418070cd3ec5dd99b31517ebe34b96f64736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122029f90a86b932a1451810ba9fb55b6eccf418070cd3ec5dd99b31517ebe34b96f64736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x29 0xF9 EXP DUP7 0xB9 ORIGIN LOG1 GASLIMIT XOR LT 0xBA SWAP16 0xB5 JUMPDEST PUSH15 0xCCF418070CD3EC5DD99B31517EBE34 0xB9 PUSH16 0x64736F6C634300070600330000000000 ",
							"sourceMap": "171:1695:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122029f90a86b932a1451810ba9fb55b6eccf418070cd3ec5dd99b31517ebe34b96f64736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x29 0xF9 EXP DUP7 0xB9 ORIGIN LOG1 GASLIMIT XOR LT 0xBA SWAP16 0xB5 JUMPDEST PUSH15 0xCCF418070CD3EC5DD99B31517EBE34 0xB9 PUSH16 0x64736F6C634300070600330000000000 ",
							"sourceMap": "171:1695:17:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"computeAddress(address,struct PoolAddress.PoolKey memory)": "infinite",
								"getPoolKey(address,address,uint24)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 171,
									"end": 1866,
									"name": "PUSH #[$]",
									"source": 17,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "PUSH [$]",
									"source": 17,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "PUSH",
									"source": 17,
									"value": "B"
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "CODECOPY",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "BYTE",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "PUSH",
									"source": 17,
									"value": "73"
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "EQ",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "INVALID",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "tag",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "ADDRESS",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "PUSH",
									"source": 17,
									"value": "73"
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "MSTORE8",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 171,
									"end": 1866,
									"name": "RETURN",
									"source": 17
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122029f90a86b932a1451810ba9fb55b6eccf418070cd3ec5dd99b31517ebe34b96f64736f6c63430007060033",
									".code": [
										{
											"begin": 171,
											"end": 1866,
											"name": "PUSHDEPLOYADDRESS",
											"source": 17
										},
										{
											"begin": 171,
											"end": 1866,
											"name": "ADDRESS",
											"source": 17
										},
										{
											"begin": 171,
											"end": 1866,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 171,
											"end": 1866,
											"name": "PUSH",
											"source": 17,
											"value": "80"
										},
										{
											"begin": 171,
											"end": 1866,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 171,
											"end": 1866,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 171,
											"end": 1866,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 171,
											"end": 1866,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 171,
											"end": 1866,
											"name": "REVERT",
											"source": 17
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Provides functions for deriving a pool address from the factory, tokens, and the fee\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/PoolAddress.sol\":\"PoolAddress\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/PoolAddress.sol\":{\"keccak256\":\"0xd8fca2727cc0b80b46f9bef41aa958c46c075dc785bc3ad3cda3b822e31a7354\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://54877e50ab00753f73eed0a4a9f2ff735401c07e78a76603738a6b9879eb39ae\",\"dweb:/ipfs/QmXuiT99xKNdZVTZ2gQkAxa6rSVKohSxYUU9BtYB5RXX5D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
				"ast": {
					"absolutePath": "@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/IUniswapV3Pool.sol",
					"exportedSymbols": {
						"IUniswapV3Pool": [
							21
						],
						"IUniswapV3PoolActions": [
							131
						],
						"IUniswapV3PoolDerivedState": [
							162
						],
						"IUniswapV3PoolEvents": [
							281
						],
						"IUniswapV3PoolImmutables": [
							321
						],
						"IUniswapV3PoolOwnerActions": [
							347
						],
						"IUniswapV3PoolState": [
							455
						]
					},
					"id": 22,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:0"
						},
						{
							"absolutePath": "@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol",
							"file": "./pool/IUniswapV3PoolImmutables.sol",
							"id": 2,
							"nodeType": "ImportDirective",
							"scope": 22,
							"sourceUnit": 322,
							"src": "71:45:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol",
							"file": "./pool/IUniswapV3PoolState.sol",
							"id": 3,
							"nodeType": "ImportDirective",
							"scope": 22,
							"sourceUnit": 456,
							"src": "117:40:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol",
							"file": "./pool/IUniswapV3PoolDerivedState.sol",
							"id": 4,
							"nodeType": "ImportDirective",
							"scope": 22,
							"sourceUnit": 163,
							"src": "158:47:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol",
							"file": "./pool/IUniswapV3PoolActions.sol",
							"id": 5,
							"nodeType": "ImportDirective",
							"scope": 22,
							"sourceUnit": 132,
							"src": "206:42:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol",
							"file": "./pool/IUniswapV3PoolOwnerActions.sol",
							"id": 6,
							"nodeType": "ImportDirective",
							"scope": 22,
							"sourceUnit": 348,
							"src": "249:47:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol",
							"file": "./pool/IUniswapV3PoolEvents.sol",
							"id": 7,
							"nodeType": "ImportDirective",
							"scope": 22,
							"sourceUnit": 282,
							"src": "297:41:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 9,
										"name": "IUniswapV3PoolImmutables",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 321,
										"src": "637:24:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolImmutables_$321",
											"typeString": "contract IUniswapV3PoolImmutables"
										}
									},
									"id": 10,
									"nodeType": "InheritanceSpecifier",
									"src": "637:24:0"
								},
								{
									"baseName": {
										"id": 11,
										"name": "IUniswapV3PoolState",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 455,
										"src": "667:19:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolState_$455",
											"typeString": "contract IUniswapV3PoolState"
										}
									},
									"id": 12,
									"nodeType": "InheritanceSpecifier",
									"src": "667:19:0"
								},
								{
									"baseName": {
										"id": 13,
										"name": "IUniswapV3PoolDerivedState",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 162,
										"src": "692:26:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolDerivedState_$162",
											"typeString": "contract IUniswapV3PoolDerivedState"
										}
									},
									"id": 14,
									"nodeType": "InheritanceSpecifier",
									"src": "692:26:0"
								},
								{
									"baseName": {
										"id": 15,
										"name": "IUniswapV3PoolActions",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 131,
										"src": "724:21:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolActions_$131",
											"typeString": "contract IUniswapV3PoolActions"
										}
									},
									"id": 16,
									"nodeType": "InheritanceSpecifier",
									"src": "724:21:0"
								},
								{
									"baseName": {
										"id": 17,
										"name": "IUniswapV3PoolOwnerActions",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 347,
										"src": "751:26:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolOwnerActions_$347",
											"typeString": "contract IUniswapV3PoolOwnerActions"
										}
									},
									"id": 18,
									"nodeType": "InheritanceSpecifier",
									"src": "751:26:0"
								},
								{
									"baseName": {
										"id": 19,
										"name": "IUniswapV3PoolEvents",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 281,
										"src": "783:20:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3PoolEvents_$281",
											"typeString": "contract IUniswapV3PoolEvents"
										}
									},
									"id": 20,
									"nodeType": "InheritanceSpecifier",
									"src": "783:20:0"
								}
							],
							"contractDependencies": [
								131,
								162,
								281,
								321,
								347,
								455
							],
							"contractKind": "interface",
							"documentation": {
								"id": 8,
								"nodeType": "StructuredDocumentation",
								"src": "340:265:0",
								"text": "@title The interface for a Uniswap V3 Pool\n @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n to the ERC20 specification\n @dev The pool interface is broken up into many smaller pieces"
							},
							"fullyImplemented": false,
							"id": 21,
							"linearizedBaseContracts": [
								21,
								281,
								347,
								131,
								162,
								455,
								321
							],
							"name": "IUniswapV3Pool",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 22,
							"src": "605:203:0"
						}
					],
					"src": "45:764:0"
				},
				"id": 0
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
				"ast": {
					"absolutePath": "@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol",
					"exportedSymbols": {
						"IUniswapV3SwapCallback": [
							35
						]
					},
					"id": 36,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 23,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 24,
								"nodeType": "StructuredDocumentation",
								"src": "71:144:1",
								"text": "@title Callback for IUniswapV3PoolActions#swap\n @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface"
							},
							"fullyImplemented": false,
							"id": 35,
							"linearizedBaseContracts": [
								35
							],
							"name": "IUniswapV3SwapCallback",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 25,
										"nodeType": "StructuredDocumentation",
										"src": "254:898:1",
										"text": "@notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n @dev In the implementation you must pay the pool tokens owed for the swap.\n The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call"
									},
									"functionSelector": "fa461e33",
									"id": 34,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "uniswapV3SwapCallback",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 32,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "amount0Delta",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "1197:19:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 26,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1197:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 29,
												"mutability": "mutable",
												"name": "amount1Delta",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "1226:19:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 28,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1226:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 31,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "1255:19:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 30,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1255:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1187:93:1"
									},
									"returnParameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1289:0:1"
									},
									"scope": 35,
									"src": "1157:133:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 36,
							"src": "215:1077:1"
						}
					],
					"src": "45:1248:1"
				},
				"id": 1
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
				"ast": {
					"absolutePath": "@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol",
					"exportedSymbols": {
						"IUniswapV3PoolActions": [
							131
						]
					},
					"id": 132,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 37,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 38,
								"nodeType": "StructuredDocumentation",
								"src": "71:102:2",
								"text": "@title Permissionless pool actions\n @notice Contains pool methods that can be called by anyone"
							},
							"fullyImplemented": false,
							"id": 131,
							"linearizedBaseContracts": [
								131
							],
							"name": "IUniswapV3PoolActions",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 39,
										"nodeType": "StructuredDocumentation",
										"src": "211:206:2",
										"text": "@notice Sets the initial price for the pool\n @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96"
									},
									"functionSelector": "f637731d",
									"id": 44,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 41,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "442:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 40,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "442:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "441:22:2"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "472:0:2"
									},
									"scope": 131,
									"src": "422:51:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 45,
										"nodeType": "StructuredDocumentation",
										"src": "479:1029:2",
										"text": "@notice Adds liquidity for the given recipient/tickLower/tickUpper position\n @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n on tickLower, tickUpper, the amount of liquidity, and the current price.\n @param recipient The address for which the liquidity will be created\n @param tickLower The lower tick of the position in which to add liquidity\n @param tickUpper The upper tick of the position in which to add liquidity\n @param amount The amount of liquidity to mint\n @param data Any data that should be passed through to the callback\n @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
									},
									"functionSelector": "3c8a7d8d",
									"id": 62,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 47,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 62,
												"src": "1536:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 46,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1536:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 62,
												"src": "1563:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 48,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1563:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 51,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 62,
												"src": "1588:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 50,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1588:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 53,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 62,
												"src": "1613:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 52,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1613:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 55,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 62,
												"src": "1637:19:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 54,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1637:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1526:136:2"
									},
									"returnParameters": {
										"id": 61,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 58,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 62,
												"src": "1681:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 57,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1681:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 60,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 62,
												"src": "1698:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 59,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1698:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1680:34:2"
									},
									"scope": 131,
									"src": "1513:202:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 63,
										"nodeType": "StructuredDocumentation",
										"src": "1721:1053:2",
										"text": "@notice Collects tokens owed to a position\n @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n @param recipient The address which should receive the fees collected\n @param tickLower The lower tick of the position for which to collect fees\n @param tickUpper The upper tick of the position for which to collect fees\n @param amount0Requested How much token0 should be withdrawn from the fees owed\n @param amount1Requested How much token1 should be withdrawn from the fees owed\n @return amount0 The amount of fees collected in token0\n @return amount1 The amount of fees collected in token1"
									},
									"functionSelector": "4f1eb3d8",
									"id": 80,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collect",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 74,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 65,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "2805:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 64,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2805:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 67,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "2832:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 66,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2832:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 69,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "2857:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 68,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2857:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "amount0Requested",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "2882:24:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 70,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2882:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 73,
												"mutability": "mutable",
												"name": "amount1Requested",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "2916:24:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 72,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2916:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2795:151:2"
									},
									"returnParameters": {
										"id": 79,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 76,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "2965:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 75,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2965:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 78,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "2982:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 77,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2982:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2964:34:2"
									},
									"scope": 131,
									"src": "2779:220:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 81,
										"nodeType": "StructuredDocumentation",
										"src": "3005:631:2",
										"text": "@notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n @dev Fees must be collected separately via a call to #collect\n @param tickLower The lower tick of the position for which to burn liquidity\n @param tickUpper The upper tick of the position for which to burn liquidity\n @param amount How much liquidity to burn\n @return amount0 The amount of token0 sent to the recipient\n @return amount1 The amount of token1 sent to the recipient"
									},
									"functionSelector": "a34123a7",
									"id": 94,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 88,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 83,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 94,
												"src": "3664:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 82,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3664:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 85,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 94,
												"src": "3689:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 84,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3689:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 87,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 94,
												"src": "3714:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 86,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3714:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3654:80:2"
									},
									"returnParameters": {
										"id": 93,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 90,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 94,
												"src": "3753:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 89,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3753:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 92,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 94,
												"src": "3770:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 91,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3770:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3752:34:2"
									},
									"scope": 131,
									"src": "3641:146:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 95,
										"nodeType": "StructuredDocumentation",
										"src": "3793:1015:2",
										"text": "@notice Swap token0 for token1, or token1 for token0\n @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n @param recipient The address to receive the output of the swap\n @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n value after the swap. If one for zero, the price cannot be greater than this value after the swap\n @param data Any data to be passed through to the callback\n @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
									},
									"functionSelector": "128acb08",
									"id": 112,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "swap",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 106,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 97,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 112,
												"src": "4836:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 96,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4836:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 99,
												"mutability": "mutable",
												"name": "zeroForOne",
												"nodeType": "VariableDeclaration",
												"scope": 112,
												"src": "4863:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 98,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4863:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 101,
												"mutability": "mutable",
												"name": "amountSpecified",
												"nodeType": "VariableDeclaration",
												"scope": 112,
												"src": "4888:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 100,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "4888:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 103,
												"mutability": "mutable",
												"name": "sqrtPriceLimitX96",
												"nodeType": "VariableDeclaration",
												"scope": 112,
												"src": "4920:25:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 102,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "4920:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 105,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 112,
												"src": "4955:19:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 104,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4955:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4826:154:2"
									},
									"returnParameters": {
										"id": 111,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 108,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 112,
												"src": "4999:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 107,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "4999:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 110,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 112,
												"src": "5015:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 109,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "5015:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4998:32:2"
									},
									"scope": 131,
									"src": "4813:218:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 113,
										"nodeType": "StructuredDocumentation",
										"src": "5037:657:2",
										"text": "@notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n with 0 amount{0,1} and sending the donation amount(s) from the callback\n @param recipient The address which will receive the token0 and token1 amounts\n @param amount0 The amount of token0 to send\n @param amount1 The amount of token1 to send\n @param data Any data to be passed through to the callback"
									},
									"functionSelector": "490e6cbc",
									"id": 124,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "flash",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 122,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 115,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "5723:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 114,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5723:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 117,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "5750:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 116,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5750:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 119,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "5775:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 118,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5775:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 121,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "5800:19:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 120,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5800:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5713:112:2"
									},
									"returnParameters": {
										"id": 123,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5834:0:2"
									},
									"scope": 131,
									"src": "5699:136:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 125,
										"nodeType": "StructuredDocumentation",
										"src": "5841:367:2",
										"text": "@notice Increase the maximum number of price and liquidity observations that this pool will store\n @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n the input observationCardinalityNext.\n @param observationCardinalityNext The desired minimum number of observations for the pool to store"
									},
									"functionSelector": "32148f67",
									"id": 130,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "increaseObservationCardinalityNext",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 128,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 127,
												"mutability": "mutable",
												"name": "observationCardinalityNext",
												"nodeType": "VariableDeclaration",
												"scope": 130,
												"src": "6257:33:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 126,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "6257:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6256:35:2"
									},
									"returnParameters": {
										"id": 129,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6300:0:2"
									},
									"scope": 131,
									"src": "6213:88:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 132,
							"src": "173:6130:2"
						}
					],
					"src": "45:6259:2"
				},
				"id": 2
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
				"ast": {
					"absolutePath": "@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol",
					"exportedSymbols": {
						"IUniswapV3PoolDerivedState": [
							162
						]
					},
					"id": 163,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 133,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 134,
								"nodeType": "StructuredDocumentation",
								"src": "71:222:3",
								"text": "@title Pool state that is not stored\n @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n blockchain. The functions here may have variable gas costs."
							},
							"fullyImplemented": false,
							"id": 162,
							"linearizedBaseContracts": [
								162
							],
							"name": "IUniswapV3PoolDerivedState",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 135,
										"nodeType": "StructuredDocumentation",
										"src": "336:1045:3",
										"text": "@notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n you must call it with secondsAgos = [3600, 0].\n @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n timestamp"
									},
									"functionSelector": "883bdbfd",
									"id": 147,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "observe",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 139,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 138,
												"mutability": "mutable",
												"name": "secondsAgos",
												"nodeType": "VariableDeclaration",
												"scope": 147,
												"src": "1403:29:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint32_$dyn_calldata_ptr",
													"typeString": "uint32[]"
												},
												"typeName": {
													"baseType": {
														"id": 136,
														"name": "uint32",
														"nodeType": "ElementaryTypeName",
														"src": "1403:6:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"id": 137,
													"nodeType": "ArrayTypeName",
													"src": "1403:8:3",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint32_$dyn_storage_ptr",
														"typeString": "uint32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1402:31:3"
									},
									"returnParameters": {
										"id": 146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 142,
												"mutability": "mutable",
												"name": "tickCumulatives",
												"nodeType": "VariableDeclaration",
												"scope": 147,
												"src": "1481:30:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_int56_$dyn_memory_ptr",
													"typeString": "int56[]"
												},
												"typeName": {
													"baseType": {
														"id": 140,
														"name": "int56",
														"nodeType": "ElementaryTypeName",
														"src": "1481:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_int56",
															"typeString": "int56"
														}
													},
													"id": 141,
													"nodeType": "ArrayTypeName",
													"src": "1481:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_int56_$dyn_storage_ptr",
														"typeString": "int56[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 145,
												"mutability": "mutable",
												"name": "secondsPerLiquidityCumulativeX128s",
												"nodeType": "VariableDeclaration",
												"scope": 147,
												"src": "1513:51:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint160_$dyn_memory_ptr",
													"typeString": "uint160[]"
												},
												"typeName": {
													"baseType": {
														"id": 143,
														"name": "uint160",
														"nodeType": "ElementaryTypeName",
														"src": "1513:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"id": 144,
													"nodeType": "ArrayTypeName",
													"src": "1513:9:3",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint160_$dyn_storage_ptr",
														"typeString": "uint160[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1480:85:3"
									},
									"scope": 162,
									"src": "1386:180:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 148,
										"nodeType": "StructuredDocumentation",
										"src": "1572:771:3",
										"text": "@notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n snapshot is taken and the second snapshot is taken.\n @param tickLower The lower tick of the range\n @param tickUpper The upper tick of the range\n @return tickCumulativeInside The snapshot of the tick accumulator for the range\n @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n @return secondsInside The snapshot of seconds per liquidity for the range"
									},
									"functionSelector": "a38807f2",
									"id": 161,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "snapshotCumulativesInside",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 153,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 150,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 161,
												"src": "2383:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 149,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2383:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 152,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 161,
												"src": "2400:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 151,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2400:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2382:34:3"
									},
									"returnParameters": {
										"id": 160,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 155,
												"mutability": "mutable",
												"name": "tickCumulativeInside",
												"nodeType": "VariableDeclaration",
												"scope": 161,
												"src": "2477:26:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 154,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "2477:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 157,
												"mutability": "mutable",
												"name": "secondsPerLiquidityInsideX128",
												"nodeType": "VariableDeclaration",
												"scope": 161,
												"src": "2517:37:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 156,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "2517:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 159,
												"mutability": "mutable",
												"name": "secondsInside",
												"nodeType": "VariableDeclaration",
												"scope": 161,
												"src": "2568:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 158,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "2568:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2463:135:3"
									},
									"scope": 162,
									"src": "2348:251:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 163,
							"src": "293:2308:3"
						}
					],
					"src": "45:2557:3"
				},
				"id": 3
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
				"ast": {
					"absolutePath": "@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol",
					"exportedSymbols": {
						"IUniswapV3PoolEvents": [
							281
						]
					},
					"id": 282,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 164,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 165,
								"nodeType": "StructuredDocumentation",
								"src": "71:88:4",
								"text": "@title Events emitted by a pool\n @notice Contains all events emitted by the pool"
							},
							"fullyImplemented": true,
							"id": 281,
							"linearizedBaseContracts": [
								281
							],
							"name": "IUniswapV3PoolEvents",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 166,
										"nodeType": "StructuredDocumentation",
										"src": "196:344:4",
										"text": "@notice Emitted exactly once by a pool when #initialize is first called on the pool\n @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"
									},
									"id": 172,
									"name": "Initialize",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 171,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 168,
												"indexed": false,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 172,
												"src": "562:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 167,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "562:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 170,
												"indexed": false,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 172,
												"src": "584:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 169,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "584:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "561:34:4"
									},
									"src": "545:51:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 173,
										"nodeType": "StructuredDocumentation",
										"src": "602:551:4",
										"text": "@notice Emitted when liquidity is minted for a given position\n @param sender The address that minted the liquidity\n @param owner The owner of the position and recipient of any minted liquidity\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount The amount of liquidity minted to the position range\n @param amount0 How much token0 was required for the minted liquidity\n @param amount1 How much token1 was required for the minted liquidity"
									},
									"id": 189,
									"name": "Mint",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 175,
												"indexed": false,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "1178:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 174,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1178:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 177,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "1202:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 176,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1202:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 179,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "1233:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 178,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1233:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 181,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "1266:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 180,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1266:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 183,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "1299:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 182,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1299:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 185,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "1323:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 184,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1323:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 187,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "1348:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 186,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1348:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1168:201:4"
									},
									"src": "1158:212:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 190,
										"nodeType": "StructuredDocumentation",
										"src": "1376:493:4",
										"text": "@notice Emitted when fees are collected by the owner of a position\n @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n @param owner The owner of the position for which fees are collected\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount0 The amount of token0 fees collected\n @param amount1 The amount of token1 fees collected"
									},
									"id": 204,
									"name": "Collect",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 203,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 192,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 204,
												"src": "1897:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 191,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1897:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 194,
												"indexed": false,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 204,
												"src": "1928:17:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 193,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1928:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 196,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 204,
												"src": "1955:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 195,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1955:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 198,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 204,
												"src": "1988:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 197,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1988:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 200,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 204,
												"src": "2021:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 199,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2021:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 202,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 204,
												"src": "2046:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 201,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2046:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1887:180:4"
									},
									"src": "1874:194:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 205,
										"nodeType": "StructuredDocumentation",
										"src": "2074:523:4",
										"text": "@notice Emitted when a position's liquidity is removed\n @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n @param owner The owner of the position for which liquidity is removed\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount The amount of liquidity to remove\n @param amount0 The amount of token0 withdrawn\n @param amount1 The amount of token1 withdrawn"
									},
									"id": 219,
									"name": "Burn",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 218,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 207,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "2622:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 206,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2622:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 209,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "2653:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 208,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2653:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 211,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "2686:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 210,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2686:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 213,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "2719:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 212,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2719:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 215,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "2743:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 214,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2743:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 217,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "2768:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 216,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2768:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2612:177:4"
									},
									"src": "2602:188:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 220,
										"nodeType": "StructuredDocumentation",
										"src": "2796:600:4",
										"text": "@notice Emitted by the pool for any swaps between token0 and token1\n @param sender The address that initiated the swap call, and that received the callback\n @param recipient The address that received the output of the swap\n @param amount0 The delta of the token0 balance of the pool\n @param amount1 The delta of the token1 balance of the pool\n @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n @param liquidity The liquidity of the pool after the swap\n @param tick The log base 1.0001 of price of the pool after the swap"
									},
									"id": 236,
									"name": "Swap",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 235,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 222,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "3421:22:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 221,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3421:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 224,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "3453:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 223,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3453:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 226,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "3488:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 225,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "3488:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 228,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "3512:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 227,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "3512:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 230,
												"indexed": false,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "3536:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 229,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "3536:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 232,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "3566:17:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 231,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3566:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 234,
												"indexed": false,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "3593:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 233,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3593:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3411:198:4"
									},
									"src": "3401:209:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 237,
										"nodeType": "StructuredDocumentation",
										"src": "3616:562:4",
										"text": "@notice Emitted by the pool for any flashes of token0/token1\n @param sender The address that initiated the swap call, and that received the callback\n @param recipient The address that received the tokens from flash\n @param amount0 The amount of token0 that was flashed\n @param amount1 The amount of token1 that was flashed\n @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee"
									},
									"id": 251,
									"name": "Flash",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 250,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 239,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 251,
												"src": "4204:22:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 238,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4204:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 241,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 251,
												"src": "4236:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 240,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4236:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 243,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 251,
												"src": "4271:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 242,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4271:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 245,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 251,
												"src": "4296:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 244,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4296:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 247,
												"indexed": false,
												"mutability": "mutable",
												"name": "paid0",
												"nodeType": "VariableDeclaration",
												"scope": 251,
												"src": "4321:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 246,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4321:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 249,
												"indexed": false,
												"mutability": "mutable",
												"name": "paid1",
												"nodeType": "VariableDeclaration",
												"scope": 251,
												"src": "4344:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 248,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4344:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4194:169:4"
									},
									"src": "4183:181:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 252,
										"nodeType": "StructuredDocumentation",
										"src": "4370:451:4",
										"text": "@notice Emitted by the pool for increases to the number of observations that can be stored\n @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n just before a mint/swap/burn.\n @param observationCardinalityNextOld The previous value of the next observation cardinality\n @param observationCardinalityNextNew The updated value of the next observation cardinality"
									},
									"id": 258,
									"name": "IncreaseObservationCardinalityNext",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 257,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 254,
												"indexed": false,
												"mutability": "mutable",
												"name": "observationCardinalityNextOld",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "4876:36:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 253,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "4876:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 256,
												"indexed": false,
												"mutability": "mutable",
												"name": "observationCardinalityNextNew",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "4922:36:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 255,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "4922:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4866:98:4"
									},
									"src": "4826:139:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 259,
										"nodeType": "StructuredDocumentation",
										"src": "4971:370:4",
										"text": "@notice Emitted when the protocol fee is changed by the pool\n @param feeProtocol0Old The previous value of the token0 protocol fee\n @param feeProtocol1Old The previous value of the token1 protocol fee\n @param feeProtocol0New The updated value of the token0 protocol fee\n @param feeProtocol1New The updated value of the token1 protocol fee"
									},
									"id": 269,
									"name": "SetFeeProtocol",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 268,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 261,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol0Old",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "5367:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 260,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5367:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 263,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol1Old",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "5390:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 262,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5390:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 265,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol0New",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "5413:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 264,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5413:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 267,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol1New",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "5436:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 266,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5436:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5366:92:4"
									},
									"src": "5346:113:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 270,
										"nodeType": "StructuredDocumentation",
										"src": "5465:384:4",
										"text": "@notice Emitted when the collected protocol fees are withdrawn by the factory owner\n @param sender The address that collects the protocol fees\n @param recipient The address that receives the collected protocol fees\n @param amount0 The amount of token0 protocol fees that is withdrawn\n @param amount0 The amount of token1 protocol fees that is withdrawn"
									},
									"id": 280,
									"name": "CollectProtocol",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 279,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 272,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 280,
												"src": "5876:22:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 271,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5876:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 274,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 280,
												"src": "5900:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 273,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5900:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 276,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 280,
												"src": "5927:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 275,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5927:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 278,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 280,
												"src": "5944:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 277,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5944:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5875:85:4"
									},
									"src": "5854:107:4"
								}
							],
							"scope": 282,
							"src": "159:5804:4"
						}
					],
					"src": "45:5919:4"
				},
				"id": 4
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
				"ast": {
					"absolutePath": "@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol",
					"exportedSymbols": {
						"IUniswapV3PoolImmutables": [
							321
						]
					},
					"id": 322,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 283,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 284,
								"nodeType": "StructuredDocumentation",
								"src": "71:153:5",
								"text": "@title Pool state that never changes\n @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values"
							},
							"fullyImplemented": false,
							"id": 321,
							"linearizedBaseContracts": [
								321
							],
							"name": "IUniswapV3PoolImmutables",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 285,
										"nodeType": "StructuredDocumentation",
										"src": "265:138:5",
										"text": "@notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n @return The contract address"
									},
									"functionSelector": "c45a0155",
									"id": 290,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "factory",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 286,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "424:2:5"
									},
									"returnParameters": {
										"id": 289,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 288,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 290,
												"src": "450:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 287,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "450:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "449:9:5"
									},
									"scope": 321,
									"src": "408:51:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 291,
										"nodeType": "StructuredDocumentation",
										"src": "465:113:5",
										"text": "@notice The first of the two tokens of the pool, sorted by address\n @return The token contract address"
									},
									"functionSelector": "0dfe1681",
									"id": 296,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "token0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 292,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "598:2:5"
									},
									"returnParameters": {
										"id": 295,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 294,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 296,
												"src": "624:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 293,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "624:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "623:9:5"
									},
									"scope": 321,
									"src": "583:50:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 297,
										"nodeType": "StructuredDocumentation",
										"src": "639:114:5",
										"text": "@notice The second of the two tokens of the pool, sorted by address\n @return The token contract address"
									},
									"functionSelector": "d21220a7",
									"id": 302,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "token1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 298,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "773:2:5"
									},
									"returnParameters": {
										"id": 301,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 300,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 302,
												"src": "799:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 299,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "799:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "798:9:5"
									},
									"scope": 321,
									"src": "758:50:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 303,
										"nodeType": "StructuredDocumentation",
										"src": "814:84:5",
										"text": "@notice The pool's fee in hundredths of a bip, i.e. 1e-6\n @return The fee"
									},
									"functionSelector": "ddca3f43",
									"id": 308,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "fee",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 304,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "915:2:5"
									},
									"returnParameters": {
										"id": 307,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 306,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 308,
												"src": "941:6:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 305,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "941:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "940:8:5"
									},
									"scope": 321,
									"src": "903:46:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 309,
										"nodeType": "StructuredDocumentation",
										"src": "955:358:5",
										"text": "@notice The pool tick spacing\n @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n This value is an int24 to avoid casting even though it is always positive.\n @return The tick spacing"
									},
									"functionSelector": "d0c93a7c",
									"id": 314,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tickSpacing",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 310,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1338:2:5"
									},
									"returnParameters": {
										"id": 313,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 312,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 314,
												"src": "1364:5:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 311,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1364:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1363:7:5"
									},
									"scope": 321,
									"src": "1318:53:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 315,
										"nodeType": "StructuredDocumentation",
										"src": "1377:363:5",
										"text": "@notice The maximum amount of position liquidity that can use any tick in the range\n @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n @return The max amount of liquidity per tick"
									},
									"functionSelector": "70cf754a",
									"id": 320,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "maxLiquidityPerTick",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 316,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1773:2:5"
									},
									"returnParameters": {
										"id": 319,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 318,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 320,
												"src": "1799:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 317,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1799:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1798:9:5"
									},
									"scope": 321,
									"src": "1745:63:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 322,
							"src": "224:1586:5"
						}
					],
					"src": "45:1766:5"
				},
				"id": 5
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
				"ast": {
					"absolutePath": "@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol",
					"exportedSymbols": {
						"IUniswapV3PoolOwnerActions": [
							347
						]
					},
					"id": 348,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 323,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 324,
								"nodeType": "StructuredDocumentation",
								"src": "71:116:6",
								"text": "@title Permissioned pool actions\n @notice Contains pool methods that may only be called by the factory owner"
							},
							"fullyImplemented": false,
							"id": 347,
							"linearizedBaseContracts": [
								347
							],
							"name": "IUniswapV3PoolOwnerActions",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 325,
										"nodeType": "StructuredDocumentation",
										"src": "230:205:6",
										"text": "@notice Set the denominator of the protocol's % share of the fees\n @param feeProtocol0 new protocol fee for token0 of the pool\n @param feeProtocol1 new protocol fee for token1 of the pool"
									},
									"functionSelector": "8206a4d1",
									"id": 332,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setFeeProtocol",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 330,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 327,
												"mutability": "mutable",
												"name": "feeProtocol0",
												"nodeType": "VariableDeclaration",
												"scope": 332,
												"src": "464:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 326,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "464:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 329,
												"mutability": "mutable",
												"name": "feeProtocol1",
												"nodeType": "VariableDeclaration",
												"scope": 332,
												"src": "484:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 328,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "484:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "463:40:6"
									},
									"returnParameters": {
										"id": 331,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "512:0:6"
									},
									"scope": 347,
									"src": "440:73:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 333,
										"nodeType": "StructuredDocumentation",
										"src": "519:483:6",
										"text": "@notice Collect the protocol fee accrued to the pool\n @param recipient The address to which collected protocol fees should be sent\n @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n @return amount0 The protocol fee collected in token0\n @return amount1 The protocol fee collected in token1"
									},
									"functionSelector": "85b66729",
									"id": 346,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collectProtocol",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 340,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 335,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 346,
												"src": "1041:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 334,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1041:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 337,
												"mutability": "mutable",
												"name": "amount0Requested",
												"nodeType": "VariableDeclaration",
												"scope": 346,
												"src": "1068:24:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 336,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1068:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 339,
												"mutability": "mutable",
												"name": "amount1Requested",
												"nodeType": "VariableDeclaration",
												"scope": 346,
												"src": "1102:24:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 338,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1102:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1031:101:6"
									},
									"returnParameters": {
										"id": 345,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 342,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 346,
												"src": "1151:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 341,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1151:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 344,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 346,
												"src": "1168:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 343,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1168:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1150:34:6"
									},
									"scope": 347,
									"src": "1007:178:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 348,
							"src": "187:1000:6"
						}
					],
					"src": "45:1143:6"
				},
				"id": 6
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
				"ast": {
					"absolutePath": "@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol",
					"exportedSymbols": {
						"IUniswapV3PoolState": [
							455
						]
					},
					"id": 456,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 349,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 350,
								"nodeType": "StructuredDocumentation",
								"src": "71:169:7",
								"text": "@title Pool state that can change\n @notice These methods compose the pool's state, and can change with any frequency including multiple times\n per transaction"
							},
							"fullyImplemented": false,
							"id": 455,
							"linearizedBaseContracts": [
								455
							],
							"name": "IUniswapV3PoolState",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 351,
										"nodeType": "StructuredDocumentation",
										"src": "276:1140:7",
										"text": "@notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n when accessed externally.\n @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n tick The current tick of the pool, i.e. according to the last tick transition that was run.\n This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n boundary.\n observationIndex The index of the last oracle observation that was written,\n observationCardinality The current maximum number of observations stored in the pool,\n observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n feeProtocol The protocol fee for both tokens of the pool.\n Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n unlocked Whether the pool is currently locked to reentrancy"
									},
									"functionSelector": "3850c7bd",
									"id": 368,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "slot0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 352,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1435:2:7"
									},
									"returnParameters": {
										"id": 367,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 354,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 368,
												"src": "1498:20:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 353,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1498:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 356,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 368,
												"src": "1532:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 355,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1532:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 358,
												"mutability": "mutable",
												"name": "observationIndex",
												"nodeType": "VariableDeclaration",
												"scope": 368,
												"src": "1556:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 357,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1556:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 360,
												"mutability": "mutable",
												"name": "observationCardinality",
												"nodeType": "VariableDeclaration",
												"scope": 368,
												"src": "1593:29:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 359,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1593:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 362,
												"mutability": "mutable",
												"name": "observationCardinalityNext",
												"nodeType": "VariableDeclaration",
												"scope": 368,
												"src": "1636:33:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 361,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1636:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 364,
												"mutability": "mutable",
												"name": "feeProtocol",
												"nodeType": "VariableDeclaration",
												"scope": 368,
												"src": "1683:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 363,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1683:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 366,
												"mutability": "mutable",
												"name": "unlocked",
												"nodeType": "VariableDeclaration",
												"scope": 368,
												"src": "1714:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 365,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1714:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1484:253:7"
									},
									"scope": 455,
									"src": "1421:317:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 369,
										"nodeType": "StructuredDocumentation",
										"src": "1744:168:7",
										"text": "@notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n @dev This value can overflow the uint256"
									},
									"functionSelector": "f3058399",
									"id": 374,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "feeGrowthGlobal0X128",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 370,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1946:2:7"
									},
									"returnParameters": {
										"id": 373,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 372,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 374,
												"src": "1972:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 371,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1972:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1971:9:7"
									},
									"scope": 455,
									"src": "1917:64:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 375,
										"nodeType": "StructuredDocumentation",
										"src": "1987:168:7",
										"text": "@notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n @dev This value can overflow the uint256"
									},
									"functionSelector": "46141319",
									"id": 380,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "feeGrowthGlobal1X128",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 376,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2189:2:7"
									},
									"returnParameters": {
										"id": 379,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 378,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 380,
												"src": "2215:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 377,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2215:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2214:9:7"
									},
									"scope": 455,
									"src": "2160:64:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 381,
										"nodeType": "StructuredDocumentation",
										"src": "2230:147:7",
										"text": "@notice The amounts of token0 and token1 that are owed to the protocol\n @dev Protocol fees will never exceed uint128 max in either token"
									},
									"functionSelector": "1ad8b03b",
									"id": 388,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "protocolFees",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 382,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2403:2:7"
									},
									"returnParameters": {
										"id": 387,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 384,
												"mutability": "mutable",
												"name": "token0",
												"nodeType": "VariableDeclaration",
												"scope": 388,
												"src": "2429:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 383,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2429:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 386,
												"mutability": "mutable",
												"name": "token1",
												"nodeType": "VariableDeclaration",
												"scope": 388,
												"src": "2445:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 385,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2445:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2428:32:7"
									},
									"scope": 455,
									"src": "2382:79:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 389,
										"nodeType": "StructuredDocumentation",
										"src": "2467:150:7",
										"text": "@notice The currently in range liquidity available to the pool\n @dev This value has no relationship to the total liquidity across all ticks"
									},
									"functionSelector": "1a686502",
									"id": 394,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "liquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 390,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2640:2:7"
									},
									"returnParameters": {
										"id": 393,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 392,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 394,
												"src": "2666:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 391,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2666:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2665:9:7"
									},
									"scope": 455,
									"src": "2622:53:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 395,
										"nodeType": "StructuredDocumentation",
										"src": "2681:1244:7",
										"text": "@notice Look up information about a specific tick in the pool\n @param tick The tick to look up\n @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n tick upper,\n liquidityNet how much liquidity changes when the pool price crosses the tick,\n feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n secondsOutside the seconds spent on the other side of the tick from the current tick,\n initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n In addition, these values are only relative and must be used only in comparison to previous snapshots for\n a specific position."
									},
									"functionSelector": "f30dba93",
									"id": 416,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ticks",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 398,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 397,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 416,
												"src": "3945:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 396,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3945:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3944:12:7"
									},
									"returnParameters": {
										"id": 415,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 400,
												"mutability": "mutable",
												"name": "liquidityGross",
												"nodeType": "VariableDeclaration",
												"scope": 416,
												"src": "4017:22:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 399,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "4017:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 402,
												"mutability": "mutable",
												"name": "liquidityNet",
												"nodeType": "VariableDeclaration",
												"scope": 416,
												"src": "4053:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												},
												"typeName": {
													"id": 401,
													"name": "int128",
													"nodeType": "ElementaryTypeName",
													"src": "4053:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 404,
												"mutability": "mutable",
												"name": "feeGrowthOutside0X128",
												"nodeType": "VariableDeclaration",
												"scope": 416,
												"src": "4086:29:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 403,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4086:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 406,
												"mutability": "mutable",
												"name": "feeGrowthOutside1X128",
												"nodeType": "VariableDeclaration",
												"scope": 416,
												"src": "4129:29:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 405,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4129:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 408,
												"mutability": "mutable",
												"name": "tickCumulativeOutside",
												"nodeType": "VariableDeclaration",
												"scope": 416,
												"src": "4172:27:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 407,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "4172:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 410,
												"mutability": "mutable",
												"name": "secondsPerLiquidityOutsideX128",
												"nodeType": "VariableDeclaration",
												"scope": 416,
												"src": "4213:38:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 409,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "4213:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 412,
												"mutability": "mutable",
												"name": "secondsOutside",
												"nodeType": "VariableDeclaration",
												"scope": 416,
												"src": "4265:21:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 411,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "4265:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 414,
												"mutability": "mutable",
												"name": "initialized",
												"nodeType": "VariableDeclaration",
												"scope": 416,
												"src": "4300:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 413,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4300:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4003:323:7"
									},
									"scope": 455,
									"src": "3930:397:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 417,
										"nodeType": "StructuredDocumentation",
										"src": "4333:99:7",
										"text": "@notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
									},
									"functionSelector": "5339c296",
									"id": 424,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tickBitmap",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 420,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 419,
												"mutability": "mutable",
												"name": "wordPosition",
												"nodeType": "VariableDeclaration",
												"scope": 424,
												"src": "4457:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int16",
													"typeString": "int16"
												},
												"typeName": {
													"id": 418,
													"name": "int16",
													"nodeType": "ElementaryTypeName",
													"src": "4457:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int16",
														"typeString": "int16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4456:20:7"
									},
									"returnParameters": {
										"id": 423,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 422,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 424,
												"src": "4500:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 421,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4500:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4499:9:7"
									},
									"scope": 455,
									"src": "4437:72:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 425,
										"nodeType": "StructuredDocumentation",
										"src": "4515:700:7",
										"text": "@notice Returns the information about a position by the position's key\n @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n @return _liquidity The amount of liquidity in the position,\n Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
									},
									"functionSelector": "514ea4bf",
									"id": 440,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "positions",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 428,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 427,
												"mutability": "mutable",
												"name": "key",
												"nodeType": "VariableDeclaration",
												"scope": 440,
												"src": "5239:11:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 426,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5239:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5238:13:7"
									},
									"returnParameters": {
										"id": 439,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 430,
												"mutability": "mutable",
												"name": "_liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 440,
												"src": "5312:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 429,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5312:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 432,
												"mutability": "mutable",
												"name": "feeGrowthInside0LastX128",
												"nodeType": "VariableDeclaration",
												"scope": 440,
												"src": "5344:32:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 431,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5344:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 434,
												"mutability": "mutable",
												"name": "feeGrowthInside1LastX128",
												"nodeType": "VariableDeclaration",
												"scope": 440,
												"src": "5390:32:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 433,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5390:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 436,
												"mutability": "mutable",
												"name": "tokensOwed0",
												"nodeType": "VariableDeclaration",
												"scope": 440,
												"src": "5436:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 435,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5436:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 438,
												"mutability": "mutable",
												"name": "tokensOwed1",
												"nodeType": "VariableDeclaration",
												"scope": 440,
												"src": "5469:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 437,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5469:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5298:200:7"
									},
									"scope": 455,
									"src": "5220:279:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 441,
										"nodeType": "StructuredDocumentation",
										"src": "5505:749:7",
										"text": "@notice Returns data about a specific observation index\n @param index The element of the observations array to fetch\n @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n ago, rather than at a specific index in the array.\n @return blockTimestamp The timestamp of the observation,\n Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n Returns initialized whether the observation has been initialized and the values are safe to use"
									},
									"functionSelector": "252c09d7",
									"id": 454,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "observations",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 444,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 443,
												"mutability": "mutable",
												"name": "index",
												"nodeType": "VariableDeclaration",
												"scope": 454,
												"src": "6281:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 442,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6281:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6280:15:7"
									},
									"returnParameters": {
										"id": 453,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 446,
												"mutability": "mutable",
												"name": "blockTimestamp",
												"nodeType": "VariableDeclaration",
												"scope": 454,
												"src": "6356:21:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 445,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "6356:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 448,
												"mutability": "mutable",
												"name": "tickCumulative",
												"nodeType": "VariableDeclaration",
												"scope": 454,
												"src": "6391:20:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 447,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "6391:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 450,
												"mutability": "mutable",
												"name": "secondsPerLiquidityCumulativeX128",
												"nodeType": "VariableDeclaration",
												"scope": 454,
												"src": "6425:41:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 449,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "6425:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 452,
												"mutability": "mutable",
												"name": "initialized",
												"nodeType": "VariableDeclaration",
												"scope": 454,
												"src": "6480:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 451,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6480:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6342:164:7"
									},
									"scope": 455,
									"src": "6259:248:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 456,
							"src": "240:6269:7"
						}
					],
					"src": "45:6465:7"
				},
				"id": 7
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/SafeCast.sol": {
				"ast": {
					"absolutePath": "@thinkincoin-libs/uniswap-v3-core/contracts/libraries/SafeCast.sol",
					"exportedSymbols": {
						"SafeCast": [
							525
						]
					},
					"id": 526,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 457,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 458,
								"nodeType": "StructuredDocumentation",
								"src": "71:94:8",
								"text": "@title Safe casting methods\n @notice Contains methods for safely casting between types"
							},
							"fullyImplemented": true,
							"id": 525,
							"linearizedBaseContracts": [
								525
							],
							"name": "SafeCast",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 478,
										"nodeType": "Block",
										"src": "421:47:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 475,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"id": 472,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 467,
																			"name": "z",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 464,
																			"src": "440:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"arguments": [
																				{
																					"id": 470,
																					"name": "y",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 461,
																					"src": "452:1:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 469,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "444:7:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint160_$",
																					"typeString": "type(uint160)"
																				},
																				"typeName": {
																					"id": 468,
																					"name": "uint160",
																					"nodeType": "ElementaryTypeName",
																					"src": "444:7:8",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 471,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "444:10:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		"src": "440:14:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	}
																],
																"id": 473,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "439:16:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 474,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 461,
																"src": "459:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "439:21:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 466,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "431:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 476,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "431:30:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 477,
												"nodeType": "ExpressionStatement",
												"src": "431:30:8"
											}
										]
									},
									"documentation": {
										"id": 459,
										"nodeType": "StructuredDocumentation",
										"src": "188:164:8",
										"text": "@notice Cast a uint256 to a uint160, revert on overflow\n @param y The uint256 to be downcasted\n @return z The downcasted integer, now type uint160"
									},
									"id": 479,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toUint160",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 462,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 461,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 479,
												"src": "376:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 460,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "376:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "375:11:8"
									},
									"returnParameters": {
										"id": 465,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 464,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 479,
												"src": "410:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 463,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "410:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "409:11:8"
									},
									"scope": 525,
									"src": "357:111:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 499,
										"nodeType": "Block",
										"src": "713:46:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															"id": 496,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"id": 493,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 488,
																			"name": "z",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 485,
																			"src": "732:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int128",
																				"typeString": "int128"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"arguments": [
																				{
																					"id": 491,
																					"name": "y",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 482,
																					"src": "743:1:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				],
																				"id": 490,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "736:6:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_int128_$",
																					"typeString": "type(int128)"
																				},
																				"typeName": {
																					"id": 489,
																					"name": "int128",
																					"nodeType": "ElementaryTypeName",
																					"src": "736:6:8",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 492,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "736:9:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_int128",
																				"typeString": "int128"
																			}
																		},
																		"src": "732:13:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int128",
																			"typeString": "int128"
																		}
																	}
																],
																"id": 494,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "731:15:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_int128",
																	"typeString": "int128"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 495,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 482,
																"src": "750:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"src": "731:20:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 487,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "723:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 497,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "723:29:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 498,
												"nodeType": "ExpressionStatement",
												"src": "723:29:8"
											}
										]
									},
									"documentation": {
										"id": 480,
										"nodeType": "StructuredDocumentation",
										"src": "474:173:8",
										"text": "@notice Cast a int256 to a int128, revert on overflow or underflow\n @param y The int256 to be downcasted\n @return z The downcasted integer, now type int128"
									},
									"id": 500,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toInt128",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 483,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 482,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 500,
												"src": "670:8:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 481,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "670:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "669:10:8"
									},
									"returnParameters": {
										"id": 486,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 485,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 500,
												"src": "703:8:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												},
												"typeName": {
													"id": 484,
													"name": "int128",
													"nodeType": "ElementaryTypeName",
													"src": "703:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "702:10:8"
									},
									"scope": 525,
									"src": "652:107:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 523,
										"nodeType": "Block",
										"src": "986:59:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 513,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 509,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 503,
																"src": "1004:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819968_by_1",
																	"typeString": "int_const 5789...(69 digits omitted)...9968"
																},
																"id": 512,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 510,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1008:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "323535",
																	"id": 511,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1011:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_255_by_1",
																		"typeString": "int_const 255"
																	},
																	"value": "255"
																},
																"src": "1008:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819968_by_1",
																	"typeString": "int_const 5789...(69 digits omitted)...9968"
																}
															},
															"src": "1004:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 508,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "996:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 514,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "996:19:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 515,
												"nodeType": "ExpressionStatement",
												"src": "996:19:8"
											},
											{
												"expression": {
													"id": 521,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 516,
														"name": "z",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 506,
														"src": "1025:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 519,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 503,
																"src": "1036:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 518,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1029:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_int256_$",
																"typeString": "type(int256)"
															},
															"typeName": {
																"id": 517,
																"name": "int256",
																"nodeType": "ElementaryTypeName",
																"src": "1029:6:8",
																"typeDescriptions": {}
															}
														},
														"id": 520,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1029:9:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "1025:13:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"id": 522,
												"nodeType": "ExpressionStatement",
												"src": "1025:13:8"
											}
										]
									},
									"documentation": {
										"id": 501,
										"nodeType": "StructuredDocumentation",
										"src": "765:154:8",
										"text": "@notice Cast a uint256 to a int256, revert on overflow\n @param y The uint256 to be casted\n @return z The casted integer, now type int256"
									},
									"id": 524,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toInt256",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 504,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 503,
												"mutability": "mutable",
												"name": "y",
												"nodeType": "VariableDeclaration",
												"scope": 524,
												"src": "942:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 502,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "942:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "941:11:8"
									},
									"returnParameters": {
										"id": 507,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 506,
												"mutability": "mutable",
												"name": "z",
												"nodeType": "VariableDeclaration",
												"scope": 524,
												"src": "976:8:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 505,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "976:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "975:10:8"
									},
									"scope": 525,
									"src": "924:121:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 526,
							"src": "165:882:8"
						}
					],
					"src": "45:1003:8"
				},
				"id": 8
			},
			"@thinkincoin-libs/uniswap-v3-core/contracts/libraries/TickMath.sol": {
				"ast": {
					"absolutePath": "@thinkincoin-libs/uniswap-v3-core/contracts/libraries/TickMath.sol",
					"exportedSymbols": {
						"TickMath": [
							1060
						]
					},
					"id": 1061,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 527,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 528,
								"nodeType": "StructuredDocumentation",
								"src": "71:235:9",
								"text": "@title Math library for computing sqrt prices from ticks and vice versa\n @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n prices between 2**-128 and 2**128"
							},
							"fullyImplemented": true,
							"id": 1060,
							"linearizedBaseContracts": [
								1060
							],
							"name": "TickMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"documentation": {
										"id": 529,
										"nodeType": "StructuredDocumentation",
										"src": "329:108:9",
										"text": "@dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128"
									},
									"id": 533,
									"mutability": "constant",
									"name": "MIN_TICK",
									"nodeType": "VariableDeclaration",
									"scope": 1060,
									"src": "442:42:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_int24",
										"typeString": "int24"
									},
									"typeName": {
										"id": 530,
										"name": "int24",
										"nodeType": "ElementaryTypeName",
										"src": "442:5:9",
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"value": {
										"id": 532,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"nodeType": "UnaryOperation",
										"operator": "-",
										"prefix": true,
										"src": "477:7:9",
										"subExpression": {
											"hexValue": "383837323732",
											"id": 531,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "478:6:9",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_887272_by_1",
												"typeString": "int_const 887272"
											},
											"value": "887272"
										},
										"typeDescriptions": {
											"typeIdentifier": "t_rational_minus_887272_by_1",
											"typeString": "int_const -887272"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 534,
										"nodeType": "StructuredDocumentation",
										"src": "490:107:9",
										"text": "@dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128"
									},
									"id": 538,
									"mutability": "constant",
									"name": "MAX_TICK",
									"nodeType": "VariableDeclaration",
									"scope": 1060,
									"src": "602:44:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_int24",
										"typeString": "int24"
									},
									"typeName": {
										"id": 535,
										"name": "int24",
										"nodeType": "ElementaryTypeName",
										"src": "602:5:9",
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"value": {
										"id": 537,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"nodeType": "UnaryOperation",
										"operator": "-",
										"prefix": true,
										"src": "637:9:9",
										"subExpression": {
											"id": 536,
											"name": "MIN_TICK",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 533,
											"src": "638:8:9",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											}
										},
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 539,
										"nodeType": "StructuredDocumentation",
										"src": "653:116:9",
										"text": "@dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)"
									},
									"id": 542,
									"mutability": "constant",
									"name": "MIN_SQRT_RATIO",
									"nodeType": "VariableDeclaration",
									"scope": 1060,
									"src": "774:53:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint160",
										"typeString": "uint160"
									},
									"typeName": {
										"id": 540,
										"name": "uint160",
										"nodeType": "ElementaryTypeName",
										"src": "774:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint160",
											"typeString": "uint160"
										}
									},
									"value": {
										"hexValue": "34323935313238373339",
										"id": 541,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "817:10:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_4295128739_by_1",
											"typeString": "int_const 4295128739"
										},
										"value": "4295128739"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 543,
										"nodeType": "StructuredDocumentation",
										"src": "833:116:9",
										"text": "@dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)"
									},
									"id": 546,
									"mutability": "constant",
									"name": "MAX_SQRT_RATIO",
									"nodeType": "VariableDeclaration",
									"scope": 1060,
									"src": "954:92:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint160",
										"typeString": "uint160"
									},
									"typeName": {
										"id": 544,
										"name": "uint160",
										"nodeType": "ElementaryTypeName",
										"src": "954:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint160",
											"typeString": "uint160"
										}
									},
									"value": {
										"hexValue": "31343631343436373033343835323130313033323837323733303532323033393838383232333738373233393730333432",
										"id": 545,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "997:49:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1461446703485210103287273052203988822378723970342_by_1",
											"typeString": "int_const 1461...(41 digits omitted)...0342"
										},
										"value": "1461446703485210103287273052203988822378723970342"
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 919,
										"nodeType": "Block",
										"src": "1440:2495:9",
										"statements": [
											{
												"assignments": [
													555
												],
												"declarations": [
													{
														"constant": false,
														"id": 555,
														"mutability": "mutable",
														"name": "absTick",
														"nodeType": "VariableDeclaration",
														"scope": 919,
														"src": "1450:15:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 554,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1450:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 575,
												"initialValue": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"id": 558,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 556,
															"name": "tick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 549,
															"src": "1468:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"hexValue": "30",
															"id": 557,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1475:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1468:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 571,
																		"name": "tick",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 549,
																		"src": "1519:4:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	],
																	"id": 570,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1512:6:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_int256_$",
																		"typeString": "type(int256)"
																	},
																	"typeName": {
																		"id": 569,
																		"name": "int256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1512:6:9",
																		"typeDescriptions": {}
																	}
																},
																"id": 572,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1512:12:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															],
															"id": 568,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1504:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 567,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1504:7:9",
																"typeDescriptions": {}
															}
														},
														"id": 573,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1504:21:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 574,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "1468:57:9",
													"trueExpression": {
														"arguments": [
															{
																"id": 565,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "-",
																"prefix": true,
																"src": "1487:13:9",
																"subExpression": {
																	"arguments": [
																		{
																			"id": 563,
																			"name": "tick",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 549,
																			"src": "1495:4:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		],
																		"id": 562,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "1488:6:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 561,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "1488:6:9",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 564,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1488:12:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															],
															"id": 560,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1479:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 559,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1479:7:9",
																"typeDescriptions": {}
															}
														},
														"id": 566,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1479:22:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1450:75:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 582,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 577,
																"name": "absTick",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 555,
																"src": "1543:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 580,
																		"name": "MAX_TICK",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 538,
																		"src": "1562:8:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	],
																	"id": 579,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1554:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 578,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1554:7:9",
																		"typeDescriptions": {}
																	}
																},
																"id": 581,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1554:17:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1543:28:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "54",
															"id": 583,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1573:3:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_846b7b6deb1cfa110d0ea7ec6162a7123b761785528db70cceed5143183b11fc",
																"typeString": "literal_string \"T\""
															},
															"value": "T"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_846b7b6deb1cfa110d0ea7ec6162a7123b761785528db70cceed5143183b11fc",
																"typeString": "literal_string \"T\""
															}
														],
														"id": 576,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1535:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 584,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1535:42:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 585,
												"nodeType": "ExpressionStatement",
												"src": "1535:42:9"
											},
											{
												"assignments": [
													587
												],
												"declarations": [
													{
														"constant": false,
														"id": 587,
														"mutability": "mutable",
														"name": "ratio",
														"nodeType": "VariableDeclaration",
														"scope": 919,
														"src": "1588:13:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 586,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1588:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 596,
												"initialValue": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 592,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 590,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 588,
																"name": "absTick",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 555,
																"src": "1604:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"hexValue": "307831",
																"id": 589,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1614:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "0x1"
															},
															"src": "1604:13:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "30",
															"id": 591,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1621:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1604:18:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"hexValue": "3078313030303030303030303030303030303030303030303030303030303030303030",
														"id": 594,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1662:35:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_340282366920938463463374607431768211456_by_1",
															"typeString": "int_const 3402...(31 digits omitted)...1456"
														},
														"value": "0x100000000000000000000000000000000"
													},
													"id": 595,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "1604:93:9",
													"trueExpression": {
														"hexValue": "30786666666362393333626436666164333761613264313632643161353934303031",
														"id": 593,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1625:34:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_340265354078544963557816517032075149313_by_1",
															"typeString": "int_const 3402...(31 digits omitted)...9313"
														},
														"value": "0xfffcb933bd6fad37aa2d162d1a594001"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint136",
														"typeString": "uint136"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1588:109:9"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 601,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 599,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 597,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 555,
															"src": "1711:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307832",
															"id": 598,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1721:3:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "0x2"
														},
														"src": "1711:13:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 600,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1728:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1711:18:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 611,
												"nodeType": "IfStatement",
												"src": "1707:83:9",
												"trueBody": {
													"expression": {
														"id": 609,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 602,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 587,
															"src": "1731:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 608,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 605,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 603,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 587,
																			"src": "1740:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666663937323732333733643431333235396134363939303538306532313361",
																			"id": 604,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1748:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340248342086729790484326174814286782778_by_1",
																				"typeString": "int_const 3402...(31 digits omitted)...2778"
																			},
																			"value": "0xfff97272373d413259a46990580e213a"
																		},
																		"src": "1740:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 606,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1739:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 607,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1787:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "1739:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1731:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 610,
													"nodeType": "ExpressionStatement",
													"src": "1731:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 616,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 614,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 612,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 555,
															"src": "1804:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307834",
															"id": 613,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1814:3:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_4_by_1",
																"typeString": "int_const 4"
															},
															"value": "0x4"
														},
														"src": "1804:13:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 615,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1821:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1804:18:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 626,
												"nodeType": "IfStatement",
												"src": "1800:83:9",
												"trueBody": {
													"expression": {
														"id": 624,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 617,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 587,
															"src": "1824:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 623,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 620,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 618,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 587,
																			"src": "1833:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666663265353066356636353639333265663132333537636633633766646363",
																			"id": 619,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1841:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340214320654664324051920982716015181260_by_1",
																				"typeString": "int_const 3402...(31 digits omitted)...1260"
																			},
																			"value": "0xfff2e50f5f656932ef12357cf3c7fdcc"
																		},
																		"src": "1833:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 621,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1832:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 622,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1880:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "1832:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1824:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 625,
													"nodeType": "ExpressionStatement",
													"src": "1824:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 631,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 629,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 627,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 555,
															"src": "1897:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307838",
															"id": 628,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1907:3:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_8_by_1",
																"typeString": "int_const 8"
															},
															"value": "0x8"
														},
														"src": "1897:13:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 630,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1914:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1897:18:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 641,
												"nodeType": "IfStatement",
												"src": "1893:83:9",
												"trueBody": {
													"expression": {
														"id": 639,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 632,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 587,
															"src": "1917:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 638,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 635,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 633,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 587,
																			"src": "1926:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666653563616361376531306534653631633336323465616130393431636430",
																			"id": 634,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1934:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340146287995602323631171512101879684304_by_1",
																				"typeString": "int_const 3401...(31 digits omitted)...4304"
																			},
																			"value": "0xffe5caca7e10e4e61c3624eaa0941cd0"
																		},
																		"src": "1926:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 636,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1925:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 637,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1973:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "1925:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1917:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 640,
													"nodeType": "ExpressionStatement",
													"src": "1917:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 646,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 644,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 642,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 555,
															"src": "1990:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783130",
															"id": 643,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2000:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_16_by_1",
																"typeString": "int_const 16"
															},
															"value": "0x10"
														},
														"src": "1990:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 645,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2008:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1990:19:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 656,
												"nodeType": "IfStatement",
												"src": "1986:84:9",
												"trueBody": {
													"expression": {
														"id": 654,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 647,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 587,
															"src": "2011:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 653,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 650,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 648,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 587,
																			"src": "2020:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666636239383433643630663631353963396462353838333563393236363434",
																			"id": 649,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2028:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340010263488231146823593991679159461444_by_1",
																				"typeString": "int_const 3400...(31 digits omitted)...1444"
																			},
																			"value": "0xffcb9843d60f6159c9db58835c926644"
																		},
																		"src": "2020:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 651,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2019:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 652,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2067:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2019:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2011:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 655,
													"nodeType": "ExpressionStatement",
													"src": "2011:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 661,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 659,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 657,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 555,
															"src": "2084:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783230",
															"id": 658,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2094:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															},
															"value": "0x20"
														},
														"src": "2084:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 660,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2102:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2084:19:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 671,
												"nodeType": "IfStatement",
												"src": "2080:84:9",
												"trueBody": {
													"expression": {
														"id": 669,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 662,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 587,
															"src": "2105:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 668,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 665,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 663,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 587,
																			"src": "2114:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666393733623431666139386330383134373265363839366466623235346330",
																			"id": 664,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2122:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_339738377640345403697157401104375502016_by_1",
																				"typeString": "int_const 3397...(31 digits omitted)...2016"
																			},
																			"value": "0xff973b41fa98c081472e6896dfb254c0"
																		},
																		"src": "2114:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 666,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2113:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 667,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2161:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2113:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2105:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 670,
													"nodeType": "ExpressionStatement",
													"src": "2105:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 676,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 674,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 672,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 555,
															"src": "2178:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783430",
															"id": 673,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2188:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_64_by_1",
																"typeString": "int_const 64"
															},
															"value": "0x40"
														},
														"src": "2178:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 675,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2196:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2178:19:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 686,
												"nodeType": "IfStatement",
												"src": "2174:84:9",
												"trueBody": {
													"expression": {
														"id": 684,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 677,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 587,
															"src": "2199:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 683,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 680,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 678,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 587,
																			"src": "2208:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666326561313634363663393661333834336563373862333236623532383631",
																			"id": 679,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2216:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_339195258003219555707034227454543997025_by_1",
																				"typeString": "int_const 3391...(31 digits omitted)...7025"
																			},
																			"value": "0xff2ea16466c96a3843ec78b326b52861"
																		},
																		"src": "2208:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 681,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2207:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 682,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2255:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2207:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2199:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 685,
													"nodeType": "ExpressionStatement",
													"src": "2199:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 691,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 689,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 687,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 555,
															"src": "2272:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783830",
															"id": 688,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2282:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_128_by_1",
																"typeString": "int_const 128"
															},
															"value": "0x80"
														},
														"src": "2272:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 690,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2290:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2272:19:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 701,
												"nodeType": "IfStatement",
												"src": "2268:84:9",
												"trueBody": {
													"expression": {
														"id": 699,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 692,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 587,
															"src": "2293:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 698,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 695,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 693,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 587,
																			"src": "2302:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786665356465653034366139396132613831316334363166313936396333303533",
																			"id": 694,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2310:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_338111622100601834656805679988414885971_by_1",
																				"typeString": "int_const 3381...(31 digits omitted)...5971"
																			},
																			"value": "0xfe5dee046a99a2a811c461f1969c3053"
																		},
																		"src": "2302:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 696,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2301:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 697,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2349:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2301:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2293:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 700,
													"nodeType": "ExpressionStatement",
													"src": "2293:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 706,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 704,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 702,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 555,
															"src": "2366:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078313030",
															"id": 703,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2376:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_256_by_1",
																"typeString": "int_const 256"
															},
															"value": "0x100"
														},
														"src": "2366:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 705,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2385:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2366:20:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 716,
												"nodeType": "IfStatement",
												"src": "2362:85:9",
												"trueBody": {
													"expression": {
														"id": 714,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 707,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 587,
															"src": "2388:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 713,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 710,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 708,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 587,
																			"src": "2397:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786663626538366337393030613838616564636666633833623437396161336134",
																			"id": 709,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2405:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_335954724994790223023589805789778977700_by_1",
																				"typeString": "int_const 3359...(31 digits omitted)...7700"
																			},
																			"value": "0xfcbe86c7900a88aedcffc83b479aa3a4"
																		},
																		"src": "2397:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 711,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2396:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 712,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2444:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2396:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2388:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 715,
													"nodeType": "ExpressionStatement",
													"src": "2388:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 721,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 719,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 717,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 555,
															"src": "2461:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078323030",
															"id": 718,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2471:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_512_by_1",
																"typeString": "int_const 512"
															},
															"value": "0x200"
														},
														"src": "2461:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 720,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2480:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2461:20:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 731,
												"nodeType": "IfStatement",
												"src": "2457:85:9",
												"trueBody": {
													"expression": {
														"id": 729,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 722,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 587,
															"src": "2483:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 728,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 725,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 723,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 587,
																			"src": "2492:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786639383761373235336163343133313736663262303734636637383135653534",
																			"id": 724,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2500:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_331682121138379247127172139078559817300_by_1",
																				"typeString": "int_const 3316...(31 digits omitted)...7300"
																			},
																			"value": "0xf987a7253ac413176f2b074cf7815e54"
																		},
																		"src": "2492:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 726,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2491:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 727,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2539:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2491:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2483:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 730,
													"nodeType": "ExpressionStatement",
													"src": "2483:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 736,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 734,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 732,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 555,
															"src": "2556:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078343030",
															"id": 733,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2566:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1024_by_1",
																"typeString": "int_const 1024"
															},
															"value": "0x400"
														},
														"src": "2556:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 735,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2575:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2556:20:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 746,
												"nodeType": "IfStatement",
												"src": "2552:85:9",
												"trueBody": {
													"expression": {
														"id": 744,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 737,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 587,
															"src": "2578:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 743,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 740,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 738,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 587,
																			"src": "2587:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786633333932623038323262373030303539343063376133393865346237306633",
																			"id": 739,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2595:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_323299236684853023288211250268160618739_by_1",
																				"typeString": "int_const 3232...(31 digits omitted)...8739"
																			},
																			"value": "0xf3392b0822b70005940c7a398e4b70f3"
																		},
																		"src": "2587:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 741,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2586:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 742,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2634:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2586:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2578:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 745,
													"nodeType": "ExpressionStatement",
													"src": "2578:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 751,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 749,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 747,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 555,
															"src": "2651:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078383030",
															"id": 748,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2661:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2048_by_1",
																"typeString": "int_const 2048"
															},
															"value": "0x800"
														},
														"src": "2651:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 750,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2670:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2651:20:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 761,
												"nodeType": "IfStatement",
												"src": "2647:85:9",
												"trueBody": {
													"expression": {
														"id": 759,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 752,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 587,
															"src": "2673:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 758,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 755,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 753,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 587,
																			"src": "2682:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786537313539343735613263323962373434336232396337666136653838396439",
																			"id": 754,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2690:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_307163716377032989948697243942600083929_by_1",
																				"typeString": "int_const 3071...(31 digits omitted)...3929"
																			},
																			"value": "0xe7159475a2c29b7443b29c7fa6e889d9"
																		},
																		"src": "2682:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 756,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2681:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 757,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2729:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2681:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2673:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 760,
													"nodeType": "ExpressionStatement",
													"src": "2673:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 766,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 764,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 762,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 555,
															"src": "2746:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307831303030",
															"id": 763,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2756:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_4096_by_1",
																"typeString": "int_const 4096"
															},
															"value": "0x1000"
														},
														"src": "2746:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 765,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2766:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2746:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 776,
												"nodeType": "IfStatement",
												"src": "2742:86:9",
												"trueBody": {
													"expression": {
														"id": 774,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 767,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 587,
															"src": "2769:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 773,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 770,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 768,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 587,
																			"src": "2778:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786430393766336264666432303232623838343561643866373932616135383235",
																			"id": 769,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2786:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_277268403626896220162999269216087595045_by_1",
																				"typeString": "int_const 2772...(31 digits omitted)...5045"
																			},
																			"value": "0xd097f3bdfd2022b8845ad8f792aa5825"
																		},
																		"src": "2778:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 771,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2777:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 772,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2825:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2777:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2769:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 775,
													"nodeType": "ExpressionStatement",
													"src": "2769:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 781,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 779,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 777,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 555,
															"src": "2842:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307832303030",
															"id": 778,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2852:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_8192_by_1",
																"typeString": "int_const 8192"
															},
															"value": "0x2000"
														},
														"src": "2842:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 780,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2862:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2842:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 791,
												"nodeType": "IfStatement",
												"src": "2838:86:9",
												"trueBody": {
													"expression": {
														"id": 789,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 782,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 587,
															"src": "2865:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 788,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 785,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 783,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 587,
																			"src": "2874:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786139663734363436326438373066646638613635646331663930653036316535",
																			"id": 784,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2882:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_225923453940442621947126027127485391333_by_1",
																				"typeString": "int_const 2259...(31 digits omitted)...1333"
																			},
																			"value": "0xa9f746462d870fdf8a65dc1f90e061e5"
																		},
																		"src": "2874:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 786,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2873:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 787,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2921:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2873:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2865:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 790,
													"nodeType": "ExpressionStatement",
													"src": "2865:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 796,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 794,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 792,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 555,
															"src": "2938:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307834303030",
															"id": 793,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2948:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_16384_by_1",
																"typeString": "int_const 16384"
															},
															"value": "0x4000"
														},
														"src": "2938:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 795,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2958:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2938:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 806,
												"nodeType": "IfStatement",
												"src": "2934:86:9",
												"trueBody": {
													"expression": {
														"id": 804,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 797,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 587,
															"src": "2961:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 803,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 800,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 798,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 587,
																			"src": "2970:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30783730643836396131353664326131623839306262336466363262616633326637",
																			"id": 799,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2978:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_149997214084966997727330242082538205943_by_1",
																				"typeString": "int_const 1499...(31 digits omitted)...5943"
																			},
																			"value": "0x70d869a156d2a1b890bb3df62baf32f7"
																		},
																		"src": "2970:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 801,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2969:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 802,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3017:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2969:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2961:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 805,
													"nodeType": "ExpressionStatement",
													"src": "2961:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 811,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 809,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 807,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 555,
															"src": "3034:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307838303030",
															"id": 808,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3044:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32768_by_1",
																"typeString": "int_const 32768"
															},
															"value": "0x8000"
														},
														"src": "3034:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 810,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3054:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3034:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 821,
												"nodeType": "IfStatement",
												"src": "3030:86:9",
												"trueBody": {
													"expression": {
														"id": 819,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 812,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 587,
															"src": "3057:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 818,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 815,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 813,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 587,
																			"src": "3066:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30783331626531333566393764303866643938313233313530353534326663666136",
																			"id": 814,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3074:34:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_66119101136024775622716233608466517926_by_1",
																				"typeString": "int_const 6611...(30 digits omitted)...7926"
																			},
																			"value": "0x31be135f97d08fd981231505542fcfa6"
																		},
																		"src": "3066:42:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 816,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3065:44:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 817,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3113:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3065:51:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3057:59:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 820,
													"nodeType": "ExpressionStatement",
													"src": "3057:59:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 826,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 824,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 822,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 555,
															"src": "3130:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783130303030",
															"id": 823,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3140:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_65536_by_1",
																"typeString": "int_const 65536"
															},
															"value": "0x10000"
														},
														"src": "3130:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 825,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3151:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3130:22:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 836,
												"nodeType": "IfStatement",
												"src": "3126:86:9",
												"trueBody": {
													"expression": {
														"id": 834,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 827,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 587,
															"src": "3154:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 833,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 830,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 828,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 587,
																			"src": "3163:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "307839616135303862356237613834653163363737646535346633653939626339",
																			"id": 829,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3171:33:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_12847376061809297530290974190478138313_by_1",
																				"typeString": "int_const 1284...(30 digits omitted)...8313"
																			},
																			"value": "0x9aa508b5b7a84e1c677de54f3e99bc9"
																		},
																		"src": "3163:41:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 831,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3162:43:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 832,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3209:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3162:50:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3154:58:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 835,
													"nodeType": "ExpressionStatement",
													"src": "3154:58:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 841,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 839,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 837,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 555,
															"src": "3226:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783230303030",
															"id": 838,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3236:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_131072_by_1",
																"typeString": "int_const 131072"
															},
															"value": "0x20000"
														},
														"src": "3226:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 840,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3247:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3226:22:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 851,
												"nodeType": "IfStatement",
												"src": "3222:85:9",
												"trueBody": {
													"expression": {
														"id": 849,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 842,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 587,
															"src": "3250:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 848,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 845,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 843,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 587,
																			"src": "3259:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "3078356436616638646564623831313936363939633332393232356565363034",
																			"id": 844,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3267:32:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_485053260817066172746253684029974020_by_1",
																				"typeString": "int_const 4850...(28 digits omitted)...4020"
																			},
																			"value": "0x5d6af8dedb81196699c329225ee604"
																		},
																		"src": "3259:40:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 846,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3258:42:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 847,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3304:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3258:49:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3250:57:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 850,
													"nodeType": "ExpressionStatement",
													"src": "3250:57:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 856,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 854,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 852,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 555,
															"src": "3321:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783430303030",
															"id": 853,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3331:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_262144_by_1",
																"typeString": "int_const 262144"
															},
															"value": "0x40000"
														},
														"src": "3321:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 855,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3342:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3321:22:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 866,
												"nodeType": "IfStatement",
												"src": "3317:83:9",
												"trueBody": {
													"expression": {
														"id": 864,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 857,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 587,
															"src": "3345:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 863,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 860,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 858,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 587,
																			"src": "3354:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "307832323136653538346635666131656139323630343162656466653938",
																			"id": 859,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3362:30:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_691415978906521570653435304214168_by_1",
																				"typeString": "int_const 6914...(25 digits omitted)...4168"
																			},
																			"value": "0x2216e584f5fa1ea926041bedfe98"
																		},
																		"src": "3354:38:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 861,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3353:40:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 862,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3397:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3353:47:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3345:55:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 865,
													"nodeType": "ExpressionStatement",
													"src": "3345:55:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 871,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 869,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 867,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 555,
															"src": "3414:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783830303030",
															"id": 868,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3424:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_524288_by_1",
																"typeString": "int_const 524288"
															},
															"value": "0x80000"
														},
														"src": "3414:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 870,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3435:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3414:22:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 881,
												"nodeType": "IfStatement",
												"src": "3410:78:9",
												"trueBody": {
													"expression": {
														"id": 879,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 872,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 587,
															"src": "3438:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 878,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 875,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 873,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 587,
																			"src": "3447:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30783438613137303339316637646334323434346538666132",
																			"id": 874,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3455:25:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1404880482679654955896180642_by_1",
																				"typeString": "int_const 1404880482679654955896180642"
																			},
																			"value": "0x48a170391f7dc42444e8fa2"
																		},
																		"src": "3447:33:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 876,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3446:35:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 877,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3485:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3446:42:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3438:50:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 880,
													"nodeType": "ExpressionStatement",
													"src": "3438:50:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													},
													"id": 884,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 882,
														"name": "tick",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 549,
														"src": "3503:4:9",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 883,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3510:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3503:8:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 895,
												"nodeType": "IfStatement",
												"src": "3499:47:9",
												"trueBody": {
													"expression": {
														"id": 893,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 885,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 587,
															"src": "3513:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 892,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 888,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3526:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			},
																			"typeName": {
																				"id": 887,
																				"name": "uint256",
																				"nodeType": "ElementaryTypeName",
																				"src": "3526:7:9",
																				"typeDescriptions": {}
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			}
																		],
																		"id": 886,
																		"name": "type",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967269,
																		"src": "3521:4:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 889,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3521:13:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_meta_type_t_uint256",
																		"typeString": "type(uint256)"
																	}
																},
																"id": 890,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "max",
																"nodeType": "MemberAccess",
																"src": "3521:17:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 891,
																"name": "ratio",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 587,
																"src": "3541:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3521:25:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3513:33:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 894,
													"nodeType": "ExpressionStatement",
													"src": "3513:33:9"
												}
											},
											{
												"expression": {
													"id": 917,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 896,
														"name": "sqrtPriceX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 552,
														"src": "3856:12:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 915,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 901,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 899,
																				"name": "ratio",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 587,
																				"src": "3880:5:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": ">>",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 900,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3889:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "3880:11:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 902,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "3879:13:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"components": [
																		{
																			"condition": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 910,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 908,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 903,
																						"name": "ratio",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 587,
																						"src": "3896:5:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "%",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_rational_4294967296_by_1",
																									"typeString": "int_const 4294967296"
																								},
																								"id": 906,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"lValueRequested": false,
																								"leftExpression": {
																									"hexValue": "31",
																									"id": 904,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "3905:1:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_1_by_1",
																										"typeString": "int_const 1"
																									},
																									"value": "1"
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "<<",
																								"rightExpression": {
																									"hexValue": "3332",
																									"id": 905,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "3910:2:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_32_by_1",
																										"typeString": "int_const 32"
																									},
																									"value": "32"
																								},
																								"src": "3905:7:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_4294967296_by_1",
																									"typeString": "int_const 4294967296"
																								}
																							}
																						],
																						"id": 907,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "3904:9:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_4294967296_by_1",
																							"typeString": "int_const 4294967296"
																						}
																					},
																					"src": "3896:17:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"hexValue": "30",
																					"id": 909,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3917:1:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					},
																					"value": "0"
																				},
																				"src": "3896:22:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"falseExpression": {
																				"hexValue": "31",
																				"id": 912,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3925:1:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"id": 913,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "Conditional",
																			"src": "3896:30:9",
																			"trueExpression": {
																				"hexValue": "30",
																				"id": 911,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3921:1:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		}
																	],
																	"id": 914,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "3895:32:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "3879:48:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 898,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3871:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint160_$",
																"typeString": "type(uint160)"
															},
															"typeName": {
																"id": 897,
																"name": "uint160",
																"nodeType": "ElementaryTypeName",
																"src": "3871:7:9",
																"typeDescriptions": {}
															}
														},
														"id": 916,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3871:57:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "3856:72:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"id": 918,
												"nodeType": "ExpressionStatement",
												"src": "3856:72:9"
											}
										]
									},
									"documentation": {
										"id": 547,
										"nodeType": "StructuredDocumentation",
										"src": "1053:297:9",
										"text": "@notice Calculates sqrt(1.0001^tick) * 2^96\n @dev Throws if |tick| > max tick\n @param tick The input tick for the above formula\n @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n at the given tick"
									},
									"id": 920,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getSqrtRatioAtTick",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 550,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 549,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 920,
												"src": "1383:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 548,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1383:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1382:12:9"
									},
									"returnParameters": {
										"id": 553,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 552,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 920,
												"src": "1418:20:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 551,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1418:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1417:22:9"
									},
									"scope": 1060,
									"src": "1355:2580:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1058,
										"nodeType": "Block",
										"src": "4439:4196:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 935,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 931,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 929,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 923,
																	"src": "4556:12:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">=",
																"rightExpression": {
																	"id": 930,
																	"name": "MIN_SQRT_RATIO",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 542,
																	"src": "4572:14:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "4556:30:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 934,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 932,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 923,
																	"src": "4590:12:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 933,
																	"name": "MAX_SQRT_RATIO",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 546,
																	"src": "4605:14:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "4590:29:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "4556:63:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "52",
															"id": 936,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4621:3:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef22bddd350b943170a67d35191c27e310709a28c38b5762a152ff640108f5b2",
																"typeString": "literal_string \"R\""
															},
															"value": "R"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef22bddd350b943170a67d35191c27e310709a28c38b5762a152ff640108f5b2",
																"typeString": "literal_string \"R\""
															}
														],
														"id": 928,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4548:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 937,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4548:77:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 938,
												"nodeType": "ExpressionStatement",
												"src": "4548:77:9"
											},
											{
												"assignments": [
													940
												],
												"declarations": [
													{
														"constant": false,
														"id": 940,
														"mutability": "mutable",
														"name": "ratio",
														"nodeType": "VariableDeclaration",
														"scope": 1058,
														"src": "4635:13:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 939,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4635:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 947,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 946,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 943,
																"name": "sqrtPriceX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 923,
																"src": "4659:12:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															],
															"id": 942,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "4651:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 941,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "4651:7:9",
																"typeDescriptions": {}
															}
														},
														"id": 944,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4651:21:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"hexValue": "3332",
														"id": 945,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4676:2:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"src": "4651:27:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4635:43:9"
											},
											{
												"assignments": [
													949
												],
												"declarations": [
													{
														"constant": false,
														"id": 949,
														"mutability": "mutable",
														"name": "r",
														"nodeType": "VariableDeclaration",
														"scope": 1058,
														"src": "4689:9:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 948,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4689:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 951,
												"initialValue": {
													"id": 950,
													"name": "ratio",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 940,
													"src": "4701:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4689:17:9"
											},
											{
												"assignments": [
													953
												],
												"declarations": [
													{
														"constant": false,
														"id": 953,
														"mutability": "mutable",
														"name": "msb",
														"nodeType": "VariableDeclaration",
														"scope": 1058,
														"src": "4716:11:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 952,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4716:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 955,
												"initialValue": {
													"hexValue": "30",
													"id": 954,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4730:1:9",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4716:15:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "4751:139:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4765:58:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4778:1:9",
																		"type": "",
																		"value": "7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "4784:1:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4787:34:9",
																				"type": "",
																				"value": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "4781:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4781:41:9"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "4774:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4774:49:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "4769:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4836:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "4846:3:9"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "4851:1:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "4843:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4843:10:9"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "4836:3:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4866:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "4875:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "4878:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "4871:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4871:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "4866:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 953,
														"isOffset": false,
														"isSlot": false,
														"src": "4836:3:9",
														"valueSize": 1
													},
													{
														"declaration": 953,
														"isOffset": false,
														"isSlot": false,
														"src": "4846:3:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "4784:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "4866:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "4878:1:9",
														"valueSize": 1
													}
												],
												"id": 956,
												"nodeType": "InlineAssembly",
												"src": "4742:148:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "4908:123:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4922:42:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4935:1:9",
																		"type": "",
																		"value": "6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "4941:1:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4944:18:9",
																				"type": "",
																				"value": "0xFFFFFFFFFFFFFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "4938:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4938:25:9"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "4931:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4931:33:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "4926:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4977:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "4987:3:9"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "4992:1:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "4984:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4984:10:9"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "4977:3:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5007:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5016:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5019:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5012:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5012:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5007:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 953,
														"isOffset": false,
														"isSlot": false,
														"src": "4977:3:9",
														"valueSize": 1
													},
													{
														"declaration": 953,
														"isOffset": false,
														"isSlot": false,
														"src": "4987:3:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "4941:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "5007:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "5019:1:9",
														"valueSize": 1
													}
												],
												"id": 957,
												"nodeType": "InlineAssembly",
												"src": "4899:132:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5049:115:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5063:34:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5076:1:9",
																		"type": "",
																		"value": "5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5082:1:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5085:10:9",
																				"type": "",
																				"value": "0xFFFFFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5079:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5079:17:9"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5072:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5072:25:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5067:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5110:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5120:3:9"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5125:1:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5117:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5117:10:9"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5110:3:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5140:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5149:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5152:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5145:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5145:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5140:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 953,
														"isOffset": false,
														"isSlot": false,
														"src": "5110:3:9",
														"valueSize": 1
													},
													{
														"declaration": 953,
														"isOffset": false,
														"isSlot": false,
														"src": "5120:3:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "5082:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "5140:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "5152:1:9",
														"valueSize": 1
													}
												],
												"id": 958,
												"nodeType": "InlineAssembly",
												"src": "5040:124:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5182:111:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5196:30:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5209:1:9",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5215:1:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5218:6:9",
																				"type": "",
																				"value": "0xFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5212:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5212:13:9"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5205:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5205:21:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5200:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5239:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5249:3:9"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5254:1:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5246:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5246:10:9"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5239:3:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5269:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5278:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5281:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5274:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5274:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5269:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 953,
														"isOffset": false,
														"isSlot": false,
														"src": "5239:3:9",
														"valueSize": 1
													},
													{
														"declaration": 953,
														"isOffset": false,
														"isSlot": false,
														"src": "5249:3:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "5215:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "5269:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "5281:1:9",
														"valueSize": 1
													}
												],
												"id": 959,
												"nodeType": "InlineAssembly",
												"src": "5173:120:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5311:109:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5325:28:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5338:1:9",
																		"type": "",
																		"value": "3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5344:1:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5347:4:9",
																				"type": "",
																				"value": "0xFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5341:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5341:11:9"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5334:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5334:19:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5329:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5366:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5376:3:9"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5381:1:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5373:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5373:10:9"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5366:3:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5396:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5405:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5408:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5401:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5401:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5396:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 953,
														"isOffset": false,
														"isSlot": false,
														"src": "5366:3:9",
														"valueSize": 1
													},
													{
														"declaration": 953,
														"isOffset": false,
														"isSlot": false,
														"src": "5376:3:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "5344:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "5396:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "5408:1:9",
														"valueSize": 1
													}
												],
												"id": 960,
												"nodeType": "InlineAssembly",
												"src": "5302:118:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5438:108:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5452:27:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5465:1:9",
																		"type": "",
																		"value": "2"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5471:1:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5474:3:9",
																				"type": "",
																				"value": "0xF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5468:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5468:10:9"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5461:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5461:18:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5456:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5492:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5502:3:9"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5507:1:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5499:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5499:10:9"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5492:3:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5522:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5531:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5534:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5527:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5527:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5522:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 953,
														"isOffset": false,
														"isSlot": false,
														"src": "5492:3:9",
														"valueSize": 1
													},
													{
														"declaration": 953,
														"isOffset": false,
														"isSlot": false,
														"src": "5502:3:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "5471:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "5522:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "5534:1:9",
														"valueSize": 1
													}
												],
												"id": 961,
												"nodeType": "InlineAssembly",
												"src": "5429:117:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5564:108:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5578:27:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5591:1:9",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5597:1:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5600:3:9",
																				"type": "",
																				"value": "0x3"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5594:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5594:10:9"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5587:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5587:18:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5582:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5618:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5628:3:9"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5633:1:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5625:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5625:10:9"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5618:3:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5648:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5657:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5660:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5653:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5653:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5648:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 953,
														"isOffset": false,
														"isSlot": false,
														"src": "5618:3:9",
														"valueSize": 1
													},
													{
														"declaration": 953,
														"isOffset": false,
														"isSlot": false,
														"src": "5628:3:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "5597:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "5648:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "5660:1:9",
														"valueSize": 1
													}
												],
												"id": 962,
												"nodeType": "InlineAssembly",
												"src": "5555:117:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5690:73:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5704:19:9",
															"value": {
																"arguments": [
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5716:1:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5719:3:9",
																		"type": "",
																		"value": "0x1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5713:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5713:10:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5708:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5736:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5746:3:9"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5751:1:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5743:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5743:10:9"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5736:3:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 953,
														"isOffset": false,
														"isSlot": false,
														"src": "5736:3:9",
														"valueSize": 1
													},
													{
														"declaration": 953,
														"isOffset": false,
														"isSlot": false,
														"src": "5746:3:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "5716:1:9",
														"valueSize": 1
													}
												],
												"id": 963,
												"nodeType": "InlineAssembly",
												"src": "5681:82:9"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 966,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 964,
														"name": "msb",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 953,
														"src": "5777:3:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"hexValue": "313238",
														"id": 965,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5784:3:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_128_by_1",
															"typeString": "int_const 128"
														},
														"value": "128"
													},
													"src": "5777:10:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"expression": {
														"id": 983,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 976,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 949,
															"src": "5828:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 982,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 977,
																"name": "ratio",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 940,
																"src": "5832:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<<",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 980,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "313237",
																			"id": 978,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5842:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_127_by_1",
																				"typeString": "int_const 127"
																			},
																			"value": "127"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 979,
																			"name": "msb",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 953,
																			"src": "5848:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5842:9:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 981,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5841:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5832:20:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "5828:24:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 984,
													"nodeType": "ExpressionStatement",
													"src": "5828:24:9"
												},
												"id": 985,
												"nodeType": "IfStatement",
												"src": "5773:79:9",
												"trueBody": {
													"expression": {
														"id": 974,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 967,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 949,
															"src": "5789:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 973,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 968,
																"name": "ratio",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 940,
																"src": "5793:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 971,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 969,
																			"name": "msb",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 953,
																			"src": "5803:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "313237",
																			"id": 970,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5809:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_127_by_1",
																				"typeString": "int_const 127"
																			},
																			"value": "127"
																		},
																		"src": "5803:9:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 972,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5802:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5793:20:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "5789:24:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 975,
													"nodeType": "ExpressionStatement",
													"src": "5789:24:9"
												}
											},
											{
												"assignments": [
													987
												],
												"declarations": [
													{
														"constant": false,
														"id": 987,
														"mutability": "mutable",
														"name": "log_2",
														"nodeType": "VariableDeclaration",
														"scope": 1058,
														"src": "5863:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 986,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "5863:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 997,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 996,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 993,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 990,
																			"name": "msb",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 953,
																			"src": "5886:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 989,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5879:6:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 988,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "5879:6:9",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 991,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5879:11:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 992,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5893:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "5879:17:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 994,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "5878:19:9",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"hexValue": "3634",
														"id": 995,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5901:2:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_64_by_1",
															"typeString": "int_const 64"
														},
														"value": "64"
													},
													"src": "5878:25:9",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5863:40:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5923:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5937:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5946:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5955:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5958:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "5951:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5951:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5942:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5942:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5937:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5974:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5987:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5992:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5983:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5983:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5978:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6007:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6019:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6030:2:9",
																				"type": "",
																				"value": "63"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6034:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6026:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6026:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6016:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6016:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6007:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6050:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6059:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6062:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6055:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6055:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6050:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 987,
														"isOffset": false,
														"isSlot": false,
														"src": "6007:5:9",
														"valueSize": 1
													},
													{
														"declaration": 987,
														"isOffset": false,
														"isSlot": false,
														"src": "6019:5:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "5937:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "5955:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "5958:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "5992:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "6050:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "6062:1:9",
														"valueSize": 1
													}
												],
												"id": 998,
												"nodeType": "InlineAssembly",
												"src": "5914:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6092:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6106:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6115:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6124:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6127:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6120:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6120:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6111:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6111:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6106:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6143:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6156:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6161:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6152:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6152:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6147:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6176:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6188:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6199:2:9",
																				"type": "",
																				"value": "62"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6203:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6195:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6195:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6185:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6185:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6176:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6219:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6228:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6231:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6224:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6224:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6219:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 987,
														"isOffset": false,
														"isSlot": false,
														"src": "6176:5:9",
														"valueSize": 1
													},
													{
														"declaration": 987,
														"isOffset": false,
														"isSlot": false,
														"src": "6188:5:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "6106:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "6124:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "6127:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "6161:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "6219:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "6231:1:9",
														"valueSize": 1
													}
												],
												"id": 999,
												"nodeType": "InlineAssembly",
												"src": "6083:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6261:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6275:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6284:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6293:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6296:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6289:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6289:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6280:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6280:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6275:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6312:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6325:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6330:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6321:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6321:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6316:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6345:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6357:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6368:2:9",
																				"type": "",
																				"value": "61"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6372:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6364:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6364:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6354:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6354:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6345:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6388:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6397:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6400:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6393:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6393:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6388:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 987,
														"isOffset": false,
														"isSlot": false,
														"src": "6345:5:9",
														"valueSize": 1
													},
													{
														"declaration": 987,
														"isOffset": false,
														"isSlot": false,
														"src": "6357:5:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "6275:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "6293:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "6296:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "6330:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "6388:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "6400:1:9",
														"valueSize": 1
													}
												],
												"id": 1000,
												"nodeType": "InlineAssembly",
												"src": "6252:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6430:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6444:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6453:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6462:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6465:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6458:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6458:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6449:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6449:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6444:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6481:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6494:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6499:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6490:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6490:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6485:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6514:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6526:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6537:2:9",
																				"type": "",
																				"value": "60"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6541:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6533:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6533:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6523:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6523:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6514:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6557:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6566:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6569:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6562:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6562:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6557:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 987,
														"isOffset": false,
														"isSlot": false,
														"src": "6514:5:9",
														"valueSize": 1
													},
													{
														"declaration": 987,
														"isOffset": false,
														"isSlot": false,
														"src": "6526:5:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "6444:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "6462:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "6465:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "6499:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "6557:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "6569:1:9",
														"valueSize": 1
													}
												],
												"id": 1001,
												"nodeType": "InlineAssembly",
												"src": "6421:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6599:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6613:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6622:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6631:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6634:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6627:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6627:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6618:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6618:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6613:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6650:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6663:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6668:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6659:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6659:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6654:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6683:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6695:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6706:2:9",
																				"type": "",
																				"value": "59"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6710:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6702:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6702:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6692:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6692:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6683:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6726:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6735:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6738:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6731:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6731:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6726:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 987,
														"isOffset": false,
														"isSlot": false,
														"src": "6683:5:9",
														"valueSize": 1
													},
													{
														"declaration": 987,
														"isOffset": false,
														"isSlot": false,
														"src": "6695:5:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "6613:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "6631:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "6634:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "6668:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "6726:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "6738:1:9",
														"valueSize": 1
													}
												],
												"id": 1002,
												"nodeType": "InlineAssembly",
												"src": "6590:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6768:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6782:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6791:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6800:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6803:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6796:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6796:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6787:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6787:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6782:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6819:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6832:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6837:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6828:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6828:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6823:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6852:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6864:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6875:2:9",
																				"type": "",
																				"value": "58"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6879:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6871:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6871:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6861:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6861:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6852:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6895:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6904:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6907:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6900:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6900:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6895:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 987,
														"isOffset": false,
														"isSlot": false,
														"src": "6852:5:9",
														"valueSize": 1
													},
													{
														"declaration": 987,
														"isOffset": false,
														"isSlot": false,
														"src": "6864:5:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "6782:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "6800:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "6803:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "6837:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "6895:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "6907:1:9",
														"valueSize": 1
													}
												],
												"id": 1003,
												"nodeType": "InlineAssembly",
												"src": "6759:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6937:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6951:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6960:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6969:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6972:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6965:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6965:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6956:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6956:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6951:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6988:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7001:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7006:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6997:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6997:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6992:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7021:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7033:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7044:2:9",
																				"type": "",
																				"value": "57"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7048:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7040:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7040:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7030:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7030:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7021:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7064:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7073:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7076:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7069:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7069:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7064:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 987,
														"isOffset": false,
														"isSlot": false,
														"src": "7021:5:9",
														"valueSize": 1
													},
													{
														"declaration": 987,
														"isOffset": false,
														"isSlot": false,
														"src": "7033:5:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "6951:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "6969:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "6972:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "7006:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "7064:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "7076:1:9",
														"valueSize": 1
													}
												],
												"id": 1004,
												"nodeType": "InlineAssembly",
												"src": "6928:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7106:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7120:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7129:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7138:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7141:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7134:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7134:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7125:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7125:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7120:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7157:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7170:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7175:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7166:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7166:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7161:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7190:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7202:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7213:2:9",
																				"type": "",
																				"value": "56"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7217:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7209:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7209:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7199:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7199:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7190:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7233:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7242:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7245:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7238:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7238:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7233:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 987,
														"isOffset": false,
														"isSlot": false,
														"src": "7190:5:9",
														"valueSize": 1
													},
													{
														"declaration": 987,
														"isOffset": false,
														"isSlot": false,
														"src": "7202:5:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "7120:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "7138:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "7141:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "7175:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "7233:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "7245:1:9",
														"valueSize": 1
													}
												],
												"id": 1005,
												"nodeType": "InlineAssembly",
												"src": "7097:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7275:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7289:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7298:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7307:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7310:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7303:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7303:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7294:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7294:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7289:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7326:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7339:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7344:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7335:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7335:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7330:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7359:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7371:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7382:2:9",
																				"type": "",
																				"value": "55"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7386:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7378:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7378:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7368:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7368:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7359:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7402:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7411:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7414:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7407:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7407:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7402:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 987,
														"isOffset": false,
														"isSlot": false,
														"src": "7359:5:9",
														"valueSize": 1
													},
													{
														"declaration": 987,
														"isOffset": false,
														"isSlot": false,
														"src": "7371:5:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "7289:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "7307:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "7310:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "7344:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "7402:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "7414:1:9",
														"valueSize": 1
													}
												],
												"id": 1006,
												"nodeType": "InlineAssembly",
												"src": "7266:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7444:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7458:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7467:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7476:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7479:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7472:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7472:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7463:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7463:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7458:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7495:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7508:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7513:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7504:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7504:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7499:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7528:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7540:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7551:2:9",
																				"type": "",
																				"value": "54"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7555:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7547:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7547:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7537:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7537:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7528:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7571:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7580:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7583:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7576:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7576:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7571:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 987,
														"isOffset": false,
														"isSlot": false,
														"src": "7528:5:9",
														"valueSize": 1
													},
													{
														"declaration": 987,
														"isOffset": false,
														"isSlot": false,
														"src": "7540:5:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "7458:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "7476:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "7479:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "7513:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "7571:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "7583:1:9",
														"valueSize": 1
													}
												],
												"id": 1007,
												"nodeType": "InlineAssembly",
												"src": "7435:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7613:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7627:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7636:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7645:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7648:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7641:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7641:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7632:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7632:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7627:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7664:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7677:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7682:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7673:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7673:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7668:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7697:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7709:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7720:2:9",
																				"type": "",
																				"value": "53"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7724:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7716:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7716:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7706:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7706:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7697:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7740:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7749:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7752:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7745:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7745:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7740:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 987,
														"isOffset": false,
														"isSlot": false,
														"src": "7697:5:9",
														"valueSize": 1
													},
													{
														"declaration": 987,
														"isOffset": false,
														"isSlot": false,
														"src": "7709:5:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "7627:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "7645:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "7648:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "7682:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "7740:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "7752:1:9",
														"valueSize": 1
													}
												],
												"id": 1008,
												"nodeType": "InlineAssembly",
												"src": "7604:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7782:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7796:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7805:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7814:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7817:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7810:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7810:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7801:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7801:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7796:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7833:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7846:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7851:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7842:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7842:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7837:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7866:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7878:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7889:2:9",
																				"type": "",
																				"value": "52"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7893:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7885:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7885:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7875:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7875:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7866:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7909:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7918:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7921:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7914:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7914:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7909:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 987,
														"isOffset": false,
														"isSlot": false,
														"src": "7866:5:9",
														"valueSize": 1
													},
													{
														"declaration": 987,
														"isOffset": false,
														"isSlot": false,
														"src": "7878:5:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "7796:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "7814:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "7817:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "7851:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "7909:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "7921:1:9",
														"valueSize": 1
													}
												],
												"id": 1009,
												"nodeType": "InlineAssembly",
												"src": "7773:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7951:151:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7965:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7974:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7983:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7986:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7979:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7979:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7970:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7970:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7965:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8002:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8015:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "8020:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8011:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8011:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "8006:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8035:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "8047:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8058:2:9",
																				"type": "",
																				"value": "51"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "8062:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "8054:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8054:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "8044:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8044:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "8035:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8078:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "8087:1:9"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "8090:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8083:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8083:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "8078:1:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 987,
														"isOffset": false,
														"isSlot": false,
														"src": "8035:5:9",
														"valueSize": 1
													},
													{
														"declaration": 987,
														"isOffset": false,
														"isSlot": false,
														"src": "8047:5:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "7965:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "7983:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "7986:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "8020:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "8078:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "8090:1:9",
														"valueSize": 1
													}
												],
												"id": 1010,
												"nodeType": "InlineAssembly",
												"src": "7942:160:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "8120:124:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8134:24:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8143:3:9",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "8152:1:9"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "8155:1:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "8148:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8148:9:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8139:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8139:19:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "8134:1:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8171:20:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8184:3:9",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "8189:1:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8180:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8180:11:9"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "8175:1:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8204:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "8216:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8227:2:9",
																				"type": "",
																				"value": "50"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "8231:1:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "8223:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8223:10:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "8213:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8213:21:9"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "8204:5:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 987,
														"isOffset": false,
														"isSlot": false,
														"src": "8204:5:9",
														"valueSize": 1
													},
													{
														"declaration": 987,
														"isOffset": false,
														"isSlot": false,
														"src": "8216:5:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "8134:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "8152:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "8155:1:9",
														"valueSize": 1
													},
													{
														"declaration": 949,
														"isOffset": false,
														"isSlot": false,
														"src": "8189:1:9",
														"valueSize": 1
													}
												],
												"id": 1011,
												"nodeType": "InlineAssembly",
												"src": "8111:133:9"
											},
											{
												"assignments": [
													1013
												],
												"declarations": [
													{
														"constant": false,
														"id": 1013,
														"mutability": "mutable",
														"name": "log_sqrt10001",
														"nodeType": "VariableDeclaration",
														"scope": 1058,
														"src": "8254:20:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 1012,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "8254:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1017,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 1016,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1014,
														"name": "log_2",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 987,
														"src": "8277:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"hexValue": "323535373338393538393939363033383236333437313431",
														"id": 1015,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8285:24:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_255738958999603826347141_by_1",
															"typeString": "int_const 255738958999603826347141"
														},
														"value": "255738958999603826347141"
													},
													"src": "8277:32:9",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8254:55:9"
											},
											{
												"assignments": [
													1019
												],
												"declarations": [
													{
														"constant": false,
														"id": 1019,
														"mutability": "mutable",
														"name": "tickLow",
														"nodeType": "VariableDeclaration",
														"scope": 1058,
														"src": "8338:13:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"typeName": {
															"id": 1018,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8338:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1029,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															"id": 1027,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 1024,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1022,
																			"name": "log_sqrt10001",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1013,
																			"src": "8361:13:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "33343032393932393536383039313332343138353936313430313030363630323437323130",
																			"id": 1023,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8377:37:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3402992956809132418596140100660247210_by_1",
																				"typeString": "int_const 3402...(29 digits omitted)...7210"
																			},
																			"value": "3402992956809132418596140100660247210"
																		},
																		"src": "8361:53:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	}
																],
																"id": 1025,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "8360:55:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1026,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8419:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "8360:62:9",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														],
														"id": 1021,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "8354:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_int24_$",
															"typeString": "type(int24)"
														},
														"typeName": {
															"id": 1020,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8354:5:9",
															"typeDescriptions": {}
														}
													},
													"id": 1028,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8354:69:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8338:85:9"
											},
											{
												"assignments": [
													1031
												],
												"declarations": [
													{
														"constant": false,
														"id": 1031,
														"mutability": "mutable",
														"name": "tickHi",
														"nodeType": "VariableDeclaration",
														"scope": 1058,
														"src": "8433:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"typeName": {
															"id": 1030,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8433:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1041,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															"id": 1039,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 1036,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1034,
																			"name": "log_sqrt10001",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1013,
																			"src": "8455:13:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"hexValue": "323931333339343634373731393839363232393037303237363231313533333938303838343935",
																			"id": 1035,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8471:39:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_291339464771989622907027621153398088495_by_1",
																				"typeString": "int_const 2913...(31 digits omitted)...8495"
																			},
																			"value": "291339464771989622907027621153398088495"
																		},
																		"src": "8455:55:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	}
																],
																"id": 1037,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "8454:57:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1038,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8515:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "8454:64:9",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														],
														"id": 1033,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "8448:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_int24_$",
															"typeString": "type(int24)"
														},
														"typeName": {
															"id": 1032,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8448:5:9",
															"typeDescriptions": {}
														}
													},
													"id": 1040,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8448:71:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8433:86:9"
											},
											{
												"expression": {
													"id": 1056,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1042,
														"name": "tick",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 926,
														"src": "8530:4:9",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															},
															"id": 1045,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1043,
																"name": "tickLow",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1019,
																"src": "8537:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 1044,
																"name": "tickHi",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1031,
																"src": "8548:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"src": "8537:17:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseExpression": {
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 1051,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 1048,
																			"name": "tickHi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1031,
																			"src": "8586:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		],
																		"id": 1047,
																		"name": "getSqrtRatioAtTick",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 920,
																		"src": "8567:18:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_int24_$returns$_t_uint160_$",
																			"typeString": "function (int24) pure returns (uint160)"
																		}
																	},
																	"id": 1049,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8567:26:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"id": 1050,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 923,
																	"src": "8597:12:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "8567:42:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseExpression": {
																"id": 1053,
																"name": "tickLow",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1019,
																"src": "8621:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"id": 1054,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "Conditional",
															"src": "8567:61:9",
															"trueExpression": {
																"id": 1052,
																"name": "tickHi",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1031,
																"src": "8612:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"id": 1055,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "Conditional",
														"src": "8537:91:9",
														"trueExpression": {
															"id": 1046,
															"name": "tickLow",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1019,
															"src": "8557:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"src": "8530:98:9",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"id": 1057,
												"nodeType": "ExpressionStatement",
												"src": "8530:98:9"
											}
										]
									},
									"documentation": {
										"id": 921,
										"nodeType": "StructuredDocumentation",
										"src": "3941:408:9",
										"text": "@notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n ever return.\n @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n @return tick The greatest tick for which the ratio is less than or equal to the input ratio"
									},
									"id": 1059,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getTickAtSqrtRatio",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 924,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 923,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 1059,
												"src": "4382:20:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 922,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "4382:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4381:22:9"
									},
									"returnParameters": {
										"id": 927,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 926,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 1059,
												"src": "4427:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 925,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "4427:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4426:12:9"
									},
									"scope": 1060,
									"src": "4354:4281:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1061,
							"src": "306:8331:9"
						}
					],
					"src": "45:8593:9"
				},
				"id": 9
			},
			"contracts/base/PeripheryImmutableState.sol": {
				"ast": {
					"absolutePath": "contracts/base/PeripheryImmutableState.sol",
					"exportedSymbols": {
						"IPeripheryImmutableState": [
							1107
						],
						"PeripheryImmutableState": [
							1091
						]
					},
					"id": 1092,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1062,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "46:23:10"
						},
						{
							"absolutePath": "contracts/interfaces/IPeripheryImmutableState.sol",
							"file": "../interfaces/IPeripheryImmutableState.sol",
							"id": 1063,
							"nodeType": "ImportDirective",
							"scope": 1092,
							"sourceUnit": 1108,
							"src": "73:52:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1065,
										"name": "IPeripheryImmutableState",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1107,
										"src": "259:24:10",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IPeripheryImmutableState_$1107",
											"typeString": "contract IPeripheryImmutableState"
										}
									},
									"id": 1066,
									"nodeType": "InheritanceSpecifier",
									"src": "259:24:10"
								}
							],
							"contractDependencies": [
								1107
							],
							"contractKind": "contract",
							"documentation": {
								"id": 1064,
								"nodeType": "StructuredDocumentation",
								"src": "129:85:10",
								"text": "@title Immutable state\n @notice Immutable state used by periphery contracts"
							},
							"fullyImplemented": true,
							"id": 1091,
							"linearizedBaseContracts": [
								1091,
								1107
							],
							"name": "PeripheryImmutableState",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"baseFunctions": [
										1100
									],
									"constant": false,
									"documentation": {
										"id": 1067,
										"nodeType": "StructuredDocumentation",
										"src": "291:40:10",
										"text": "@inheritdoc IPeripheryImmutableState"
									},
									"functionSelector": "c45a0155",
									"id": 1070,
									"mutability": "immutable",
									"name": "factory",
									"nodeType": "VariableDeclaration",
									"overrides": {
										"id": 1069,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "362:8:10"
									},
									"scope": 1091,
									"src": "337:41:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1068,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "337:7:10",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1106
									],
									"constant": false,
									"documentation": {
										"id": 1071,
										"nodeType": "StructuredDocumentation",
										"src": "385:40:10",
										"text": "@inheritdoc IPeripheryImmutableState"
									},
									"functionSelector": "4aa4a4fc",
									"id": 1074,
									"mutability": "immutable",
									"name": "WETH9",
									"nodeType": "VariableDeclaration",
									"overrides": {
										"id": 1073,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "456:8:10"
									},
									"scope": 1091,
									"src": "431:39:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1072,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "431:7:10",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 1089,
										"nodeType": "Block",
										"src": "525:62:10",
										"statements": [
											{
												"expression": {
													"id": 1083,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1081,
														"name": "factory",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1070,
														"src": "536:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1082,
														"name": "_factory",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1076,
														"src": "546:8:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "536:18:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1084,
												"nodeType": "ExpressionStatement",
												"src": "536:18:10"
											},
											{
												"expression": {
													"id": 1087,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1085,
														"name": "WETH9",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1074,
														"src": "565:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1086,
														"name": "_WETH9",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1078,
														"src": "573:6:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "565:14:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1088,
												"nodeType": "ExpressionStatement",
												"src": "565:14:10"
											}
										]
									},
									"id": 1090,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1079,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1076,
												"mutability": "mutable",
												"name": "_factory",
												"nodeType": "VariableDeclaration",
												"scope": 1090,
												"src": "491:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1075,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "491:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1078,
												"mutability": "mutable",
												"name": "_WETH9",
												"nodeType": "VariableDeclaration",
												"scope": 1090,
												"src": "509:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1077,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "509:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "490:34:10"
									},
									"returnParameters": {
										"id": 1080,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "525:0:10"
									},
									"scope": 1091,
									"src": "479:108:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1092,
							"src": "214:376:10"
						}
					],
					"src": "46:546:10"
				},
				"id": 10
			},
			"contracts/interfaces/IPeripheryImmutableState.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/IPeripheryImmutableState.sol",
					"exportedSymbols": {
						"IPeripheryImmutableState": [
							1107
						]
					},
					"id": 1108,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1093,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "46:24:11"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1094,
								"nodeType": "StructuredDocumentation",
								"src": "74:93:11",
								"text": "@title Immutable state\n @notice Functions that return immutable state of the router"
							},
							"fullyImplemented": false,
							"id": 1107,
							"linearizedBaseContracts": [
								1107
							],
							"name": "IPeripheryImmutableState",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1095,
										"nodeType": "StructuredDocumentation",
										"src": "209:57:11",
										"text": "@return Returns the address of the Uniswap V3 factory"
									},
									"functionSelector": "c45a0155",
									"id": 1100,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "factory",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1096,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "288:2:11"
									},
									"returnParameters": {
										"id": 1099,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1098,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1100,
												"src": "314:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1097,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "314:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "313:9:11"
									},
									"scope": 1107,
									"src": "272:51:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1101,
										"nodeType": "StructuredDocumentation",
										"src": "331:40:11",
										"text": "@return Returns the address of WETH9"
									},
									"functionSelector": "4aa4a4fc",
									"id": 1106,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "WETH9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1102,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "391:2:11"
									},
									"returnParameters": {
										"id": 1105,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1104,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1106,
												"src": "417:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1103,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "417:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "416:9:11"
									},
									"scope": 1107,
									"src": "377:49:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1108,
							"src": "167:262:11"
						}
					],
					"src": "46:385:11"
				},
				"id": 11
			},
			"contracts/interfaces/IQuoter.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/IQuoter.sol",
					"exportedSymbols": {
						"IQuoter": [
							1164
						]
					},
					"id": 1165,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1109,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "46:24:12"
						},
						{
							"id": 1110,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "72:19:12"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1111,
								"nodeType": "StructuredDocumentation",
								"src": "95:324:12",
								"text": "@title Quoter Interface\n @notice Supports quoting the calculated amounts from exact input or exact output swaps\n @dev These functions are not marked view because they rely on calling non-view functions and reverting\n to compute the result. They are also not gas efficient and should not be called on-chain."
							},
							"fullyImplemented": false,
							"id": 1164,
							"linearizedBaseContracts": [
								1164
							],
							"name": "IQuoter",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1112,
										"nodeType": "StructuredDocumentation",
										"src": "444:322:12",
										"text": "@notice Returns the amount out received for a given exact input swap without executing the swap\n @param path The path of the swap, i.e. each token pair and the pool fee\n @param amountIn The amount of the first token to swap\n @return amountOut The amount of the last token that would be received"
									},
									"functionSelector": "cdca1753",
									"id": 1121,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "quoteExactInput",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1117,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1114,
												"mutability": "mutable",
												"name": "path",
												"nodeType": "VariableDeclaration",
												"scope": 1121,
												"src": "797:17:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1113,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "797:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1116,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 1121,
												"src": "816:16:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1115,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "816:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "796:37:12"
									},
									"returnParameters": {
										"id": 1120,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1119,
												"mutability": "mutable",
												"name": "amountOut",
												"nodeType": "VariableDeclaration",
												"scope": 1121,
												"src": "852:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1118,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "852:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "851:19:12"
									},
									"scope": 1164,
									"src": "772:99:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1122,
										"nodeType": "StructuredDocumentation",
										"src": "879:497:12",
										"text": "@notice Returns the amount out received for a given exact input but for a swap of a single pool\n @param tokenIn The token being swapped in\n @param tokenOut The token being swapped out\n @param fee The fee of the token pool to consider for the pair\n @param amountIn The desired input amount\n @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n @return amountOut The amount of `tokenOut` that would be received"
									},
									"functionSelector": "f7729d43",
									"id": 1137,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "quoteExactInputSingle",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1133,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1124,
												"mutability": "mutable",
												"name": "tokenIn",
												"nodeType": "VariableDeclaration",
												"scope": 1137,
												"src": "1423:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1123,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1423:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1126,
												"mutability": "mutable",
												"name": "tokenOut",
												"nodeType": "VariableDeclaration",
												"scope": 1137,
												"src": "1449:16:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1125,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1449:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1128,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 1137,
												"src": "1476:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1127,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "1476:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1130,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 1137,
												"src": "1497:16:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1129,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1497:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1132,
												"mutability": "mutable",
												"name": "sqrtPriceLimitX96",
												"nodeType": "VariableDeclaration",
												"scope": 1137,
												"src": "1524:25:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1131,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1524:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1412:144:12"
									},
									"returnParameters": {
										"id": 1136,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1135,
												"mutability": "mutable",
												"name": "amountOut",
												"nodeType": "VariableDeclaration",
												"scope": 1137,
												"src": "1575:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1134,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1575:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1574:19:12"
									},
									"scope": 1164,
									"src": "1382:212:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1138,
										"nodeType": "StructuredDocumentation",
										"src": "1602:358:12",
										"text": "@notice Returns the amount in required for a given exact output swap without executing the swap\n @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\n @param amountOut The amount of the last token to receive\n @return amountIn The amount of first token required to be paid"
									},
									"functionSelector": "2f80bb1d",
									"id": 1147,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "quoteExactOutput",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1140,
												"mutability": "mutable",
												"name": "path",
												"nodeType": "VariableDeclaration",
												"scope": 1147,
												"src": "1992:17:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1139,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1992:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1142,
												"mutability": "mutable",
												"name": "amountOut",
												"nodeType": "VariableDeclaration",
												"scope": 1147,
												"src": "2011:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1141,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2011:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1991:38:12"
									},
									"returnParameters": {
										"id": 1146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1145,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 1147,
												"src": "2048:16:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1144,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2048:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2047:18:12"
									},
									"scope": 1164,
									"src": "1966:100:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1148,
										"nodeType": "StructuredDocumentation",
										"src": "2074:544:12",
										"text": "@notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\n @param tokenIn The token being swapped in\n @param tokenOut The token being swapped out\n @param fee The fee of the token pool to consider for the pair\n @param amountOut The desired output amount\n @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n @return amountIn The amount required as the input for the swap in order to receive `amountOut`"
									},
									"functionSelector": "30d07f21",
									"id": 1163,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "quoteExactOutputSingle",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1159,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1150,
												"mutability": "mutable",
												"name": "tokenIn",
												"nodeType": "VariableDeclaration",
												"scope": 1163,
												"src": "2666:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1149,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2666:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1152,
												"mutability": "mutable",
												"name": "tokenOut",
												"nodeType": "VariableDeclaration",
												"scope": 1163,
												"src": "2692:16:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1151,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2692:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1154,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 1163,
												"src": "2719:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1153,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "2719:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1156,
												"mutability": "mutable",
												"name": "amountOut",
												"nodeType": "VariableDeclaration",
												"scope": 1163,
												"src": "2740:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1155,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2740:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1158,
												"mutability": "mutable",
												"name": "sqrtPriceLimitX96",
												"nodeType": "VariableDeclaration",
												"scope": 1163,
												"src": "2768:25:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1157,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "2768:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2655:145:12"
									},
									"returnParameters": {
										"id": 1162,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1161,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 1163,
												"src": "2819:16:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1160,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2819:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2818:18:12"
									},
									"scope": 1164,
									"src": "2624:213:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1165,
							"src": "419:2421:12"
						}
					],
					"src": "46:2796:12"
				},
				"id": 12
			},
			"contracts/lens/Quoter.sol": {
				"ast": {
					"absolutePath": "contracts/lens/Quoter.sol",
					"exportedSymbols": {
						"BytesLib": [
							1753
						],
						"CallbackValidation": [
							1815
						],
						"IPeripheryImmutableState": [
							1107
						],
						"IQuoter": [
							1164
						],
						"IUniswapV3Pool": [
							21
						],
						"IUniswapV3PoolActions": [
							131
						],
						"IUniswapV3PoolDerivedState": [
							162
						],
						"IUniswapV3PoolEvents": [
							281
						],
						"IUniswapV3PoolImmutables": [
							321
						],
						"IUniswapV3PoolOwnerActions": [
							347
						],
						"IUniswapV3PoolState": [
							455
						],
						"IUniswapV3SwapCallback": [
							35
						],
						"Path": [
							1948
						],
						"PeripheryImmutableState": [
							1091
						],
						"PoolAddress": [
							2040
						],
						"Quoter": [
							1634
						],
						"SafeCast": [
							525
						],
						"TickMath": [
							1060
						]
					},
					"id": 1635,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1166,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "46:23:13"
						},
						{
							"absolutePath": "@thinkincoin-libs/uniswap-v3-core/contracts/libraries/SafeCast.sol",
							"file": "@thinkincoin-libs/uniswap-v3-core/contracts/libraries/SafeCast.sol",
							"id": 1167,
							"nodeType": "ImportDirective",
							"scope": 1635,
							"sourceUnit": 526,
							"src": "73:59:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@thinkincoin-libs/uniswap-v3-core/contracts/libraries/TickMath.sol",
							"file": "@thinkincoin-libs/uniswap-v3-core/contracts/libraries/TickMath.sol",
							"id": 1168,
							"nodeType": "ImportDirective",
							"scope": 1635,
							"sourceUnit": 1061,
							"src": "134:59:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/IUniswapV3Pool.sol",
							"file": "@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/IUniswapV3Pool.sol",
							"id": 1169,
							"nodeType": "ImportDirective",
							"scope": 1635,
							"sourceUnit": 22,
							"src": "195:66:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol",
							"file": "@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol",
							"id": 1170,
							"nodeType": "ImportDirective",
							"scope": 1635,
							"sourceUnit": 36,
							"src": "263:83:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/IQuoter.sol",
							"file": "../interfaces/IQuoter.sol",
							"id": 1171,
							"nodeType": "ImportDirective",
							"scope": 1635,
							"sourceUnit": 1165,
							"src": "350:35:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/base/PeripheryImmutableState.sol",
							"file": "../base/PeripheryImmutableState.sol",
							"id": 1172,
							"nodeType": "ImportDirective",
							"scope": 1635,
							"sourceUnit": 1092,
							"src": "387:45:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/libraries/Path.sol",
							"file": "../libraries/Path.sol",
							"id": 1173,
							"nodeType": "ImportDirective",
							"scope": 1635,
							"sourceUnit": 1949,
							"src": "434:31:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/libraries/PoolAddress.sol",
							"file": "../libraries/PoolAddress.sol",
							"id": 1174,
							"nodeType": "ImportDirective",
							"scope": 1635,
							"sourceUnit": 2041,
							"src": "467:38:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/libraries/CallbackValidation.sol",
							"file": "../libraries/CallbackValidation.sol",
							"id": 1175,
							"nodeType": "ImportDirective",
							"scope": 1635,
							"sourceUnit": 1816,
							"src": "507:45:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1177,
										"name": "IQuoter",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1164,
										"src": "892:7:13",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IQuoter_$1164",
											"typeString": "contract IQuoter"
										}
									},
									"id": 1178,
									"nodeType": "InheritanceSpecifier",
									"src": "892:7:13"
								},
								{
									"baseName": {
										"id": 1179,
										"name": "IUniswapV3SwapCallback",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 35,
										"src": "901:22:13",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapV3SwapCallback_$35",
											"typeString": "contract IUniswapV3SwapCallback"
										}
									},
									"id": 1180,
									"nodeType": "InheritanceSpecifier",
									"src": "901:22:13"
								},
								{
									"baseName": {
										"id": 1181,
										"name": "PeripheryImmutableState",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1091,
										"src": "925:23:13",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_PeripheryImmutableState_$1091",
											"typeString": "contract PeripheryImmutableState"
										}
									},
									"id": 1182,
									"nodeType": "InheritanceSpecifier",
									"src": "925:23:13"
								}
							],
							"contractDependencies": [
								35,
								1091,
								1107,
								1164
							],
							"contractKind": "contract",
							"documentation": {
								"id": 1176,
								"nodeType": "StructuredDocumentation",
								"src": "556:317:13",
								"text": "@title Provides quotes for swaps\n @notice Allows getting the expected amount out or amount in for a given swap without executing the swap\n @dev These functions are not gas efficient and should _not_ be called on chain. Instead, optimistically execute\n the swap and check the amounts in the callback."
							},
							"fullyImplemented": true,
							"id": 1634,
							"linearizedBaseContracts": [
								1634,
								1091,
								1107,
								35,
								1164
							],
							"name": "Quoter",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 1185,
									"libraryName": {
										"id": 1183,
										"name": "Path",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1948,
										"src": "962:4:13",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Path_$1948",
											"typeString": "library Path"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "956:21:13",
									"typeName": {
										"id": 1184,
										"name": "bytes",
										"nodeType": "ElementaryTypeName",
										"src": "971:5:13",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes_storage_ptr",
											"typeString": "bytes"
										}
									}
								},
								{
									"id": 1188,
									"libraryName": {
										"id": 1186,
										"name": "SafeCast",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 525,
										"src": "989:8:13",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeCast_$525",
											"typeString": "library SafeCast"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "983:27:13",
									"typeName": {
										"id": 1187,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1002:7:13",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": false,
									"documentation": {
										"id": 1189,
										"nodeType": "StructuredDocumentation",
										"src": "1018:91:13",
										"text": "@dev Transient storage variable used to check a safety condition in exact output swaps."
									},
									"id": 1191,
									"mutability": "mutable",
									"name": "amountOutCached",
									"nodeType": "VariableDeclaration",
									"scope": 1634,
									"src": "1115:31:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1190,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1115:7:13",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1202,
										"nodeType": "Block",
										"src": "1243:2:13",
										"statements": []
									},
									"id": 1203,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 1198,
													"name": "_factory",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1193,
													"src": "1225:8:13",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												{
													"id": 1199,
													"name": "_WETH9",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1195,
													"src": "1235:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 1200,
											"modifierName": {
												"id": 1197,
												"name": "PeripheryImmutableState",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 1091,
												"src": "1201:23:13",
												"typeDescriptions": {
													"typeIdentifier": "t_type$_t_contract$_PeripheryImmutableState_$1091_$",
													"typeString": "type(contract PeripheryImmutableState)"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "1201:41:13"
										}
									],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1196,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1193,
												"mutability": "mutable",
												"name": "_factory",
												"nodeType": "VariableDeclaration",
												"scope": 1203,
												"src": "1167:16:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1192,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1167:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1195,
												"mutability": "mutable",
												"name": "_WETH9",
												"nodeType": "VariableDeclaration",
												"scope": 1203,
												"src": "1185:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1194,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1185:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1166:34:13"
									},
									"returnParameters": {
										"id": 1201,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1243:0:13"
									},
									"scope": 1634,
									"src": "1155:90:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1227,
										"nodeType": "Block",
										"src": "1386:122:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1217,
																	"name": "factory",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1070,
																	"src": "1446:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 1220,
																			"name": "tokenA",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1205,
																			"src": "1478:6:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1221,
																			"name": "tokenB",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1207,
																			"src": "1486:6:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1222,
																			"name": "fee",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1209,
																			"src": "1494:3:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint24",
																				"typeString": "uint24"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint24",
																				"typeString": "uint24"
																			}
																		],
																		"expression": {
																			"id": 1218,
																			"name": "PoolAddress",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2040,
																			"src": "1455:11:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_PoolAddress_$2040_$",
																				"typeString": "type(library PoolAddress)"
																			}
																		},
																		"id": 1219,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "getPoolKey",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1992,
																		"src": "1455:22:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_address_$_t_address_$_t_uint24_$returns$_t_struct$_PoolKey_$1961_memory_ptr_$",
																			"typeString": "function (address,address,uint24) pure returns (struct PoolAddress.PoolKey memory)"
																		}
																	},
																	"id": 1223,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1455:43:13",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_PoolKey_$1961_memory_ptr",
																		"typeString": "struct PoolAddress.PoolKey memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_struct$_PoolKey_$1961_memory_ptr",
																		"typeString": "struct PoolAddress.PoolKey memory"
																	}
																],
																"expression": {
																	"id": 1215,
																	"name": "PoolAddress",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2040,
																	"src": "1419:11:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_PoolAddress_$2040_$",
																		"typeString": "type(library PoolAddress)"
																	}
																},
																"id": 1216,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "computeAddress",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2039,
																"src": "1419:26:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_address_$_t_struct$_PoolKey_$1961_memory_ptr_$returns$_t_address_$",
																	"typeString": "function (address,struct PoolAddress.PoolKey memory) pure returns (address)"
																}
															},
															"id": 1224,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1419:80:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1214,
														"name": "IUniswapV3Pool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 21,
														"src": "1404:14:13",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_contract$_IUniswapV3Pool_$21_$",
															"typeString": "type(contract IUniswapV3Pool)"
														}
													},
													"id": 1225,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1404:96:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IUniswapV3Pool_$21",
														"typeString": "contract IUniswapV3Pool"
													}
												},
												"functionReturnParameters": 1213,
												"id": 1226,
												"nodeType": "Return",
												"src": "1397:103:13"
											}
										]
									},
									"id": 1228,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getPool",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1210,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1205,
												"mutability": "mutable",
												"name": "tokenA",
												"nodeType": "VariableDeclaration",
												"scope": 1228,
												"src": "1280:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1204,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1280:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1207,
												"mutability": "mutable",
												"name": "tokenB",
												"nodeType": "VariableDeclaration",
												"scope": 1228,
												"src": "1305:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1206,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1305:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1209,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 1228,
												"src": "1330:10:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1208,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "1330:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1269:78:13"
									},
									"returnParameters": {
										"id": 1213,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1212,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1228,
												"src": "1370:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IUniswapV3Pool_$21",
													"typeString": "contract IUniswapV3Pool"
												},
												"typeName": {
													"id": 1211,
													"name": "IUniswapV3Pool",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 21,
													"src": "1370:14:13",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IUniswapV3Pool_$21",
														"typeString": "contract IUniswapV3Pool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1369:16:13"
									},
									"scope": 1634,
									"src": "1253:255:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"baseFunctions": [
										34
									],
									"body": {
										"id": 1321,
										"nodeType": "Block",
										"src": "1709:1124:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1246,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 1242,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1240,
																	"name": "amount0Delta",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1231,
																	"src": "1728:12:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1241,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1743:1:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "1728:16:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 1245,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1243,
																	"name": "amount1Delta",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1233,
																	"src": "1748:12:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1244,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1763:1:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "1748:16:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1728:36:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1239,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1720:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1247,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1720:45:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1248,
												"nodeType": "ExpressionStatement",
												"src": "1720:45:13"
											},
											{
												"assignments": [
													1250,
													1252,
													1254
												],
												"declarations": [
													{
														"constant": false,
														"id": 1250,
														"mutability": "mutable",
														"name": "tokenIn",
														"nodeType": "VariableDeclaration",
														"scope": 1321,
														"src": "1840:15:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1249,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "1840:7:13",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1252,
														"mutability": "mutable",
														"name": "tokenOut",
														"nodeType": "VariableDeclaration",
														"scope": 1321,
														"src": "1857:16:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1251,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "1857:7:13",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1254,
														"mutability": "mutable",
														"name": "fee",
														"nodeType": "VariableDeclaration",
														"scope": 1321,
														"src": "1875:10:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint24",
															"typeString": "uint24"
														},
														"typeName": {
															"id": 1253,
															"name": "uint24",
															"nodeType": "ElementaryTypeName",
															"src": "1875:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1258,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 1255,
															"name": "path",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1235,
															"src": "1889:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1256,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "decodeFirstPool",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1914,
														"src": "1889:20:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_address_$_t_address_$_t_uint24_$bound_to$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) pure returns (address,address,uint24)"
														}
													},
													"id": 1257,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1889:22:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint24_$",
														"typeString": "tuple(address,address,uint24)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1839:72:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1262,
															"name": "factory",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1070,
															"src": "1956:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1263,
															"name": "tokenIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1250,
															"src": "1965:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1264,
															"name": "tokenOut",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1252,
															"src": "1974:8:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1265,
															"name": "fee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1254,
															"src": "1984:3:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														],
														"expression": {
															"id": 1259,
															"name": "CallbackValidation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1815,
															"src": "1922:18:13",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_CallbackValidation_$1815_$",
																"typeString": "type(library CallbackValidation)"
															}
														},
														"id": 1261,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "verifyCallback",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1783,
														"src": "1922:33:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$_t_address_$_t_uint24_$returns$_t_contract$_IUniswapV3Pool_$21_$",
															"typeString": "function (address,address,address,uint24) view returns (contract IUniswapV3Pool)"
														}
													},
													"id": 1266,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1922:66:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IUniswapV3Pool_$21",
														"typeString": "contract IUniswapV3Pool"
													}
												},
												"id": 1267,
												"nodeType": "ExpressionStatement",
												"src": "1922:66:13"
											},
											{
												"assignments": [
													1269,
													1271,
													1273
												],
												"declarations": [
													{
														"constant": false,
														"id": 1269,
														"mutability": "mutable",
														"name": "isExactInput",
														"nodeType": "VariableDeclaration",
														"scope": 1321,
														"src": "2002:17:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1268,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2002:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1271,
														"mutability": "mutable",
														"name": "amountToPay",
														"nodeType": "VariableDeclaration",
														"scope": 1321,
														"src": "2021:19:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1270,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2021:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1273,
														"mutability": "mutable",
														"name": "amountReceived",
														"nodeType": "VariableDeclaration",
														"scope": 1321,
														"src": "2042:22:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1272,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2042:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1304,
												"initialValue": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"id": 1276,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1274,
															"name": "amount0Delta",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1231,
															"src": "2081:12:13",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 1275,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2096:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "2081:16:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 1292,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1290,
																	"name": "tokenOut",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1252,
																	"src": "2205:8:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 1291,
																	"name": "tokenIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1250,
																	"src": "2216:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "2205:18:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															{
																"arguments": [
																	{
																		"id": 1295,
																		"name": "amount1Delta",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1233,
																		"src": "2233:12:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	],
																	"id": 1294,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2225:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 1293,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "2225:7:13",
																		"typeDescriptions": {}
																	}
																},
																"id": 1296,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2225:21:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"arguments": [
																	{
																		"id": 1300,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "-",
																		"prefix": true,
																		"src": "2256:13:13",
																		"subExpression": {
																			"id": 1299,
																			"name": "amount0Delta",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1231,
																			"src": "2257:12:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	],
																	"id": 1298,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2248:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 1297,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "2248:7:13",
																		"typeDescriptions": {}
																	}
																},
																"id": 1301,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2248:22:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1302,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2204:67:13",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$_t_uint256_$",
															"typeString": "tuple(bool,uint256,uint256)"
														}
													},
													"id": 1303,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "2081:190:13",
													"trueExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 1279,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1277,
																	"name": "tokenIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1250,
																	"src": "2118:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 1278,
																	"name": "tokenOut",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1252,
																	"src": "2128:8:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "2118:18:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															{
																"arguments": [
																	{
																		"id": 1282,
																		"name": "amount0Delta",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1231,
																		"src": "2146:12:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	],
																	"id": 1281,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2138:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 1280,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "2138:7:13",
																		"typeDescriptions": {}
																	}
																},
																"id": 1283,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2138:21:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"arguments": [
																	{
																		"id": 1287,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "-",
																		"prefix": true,
																		"src": "2169:13:13",
																		"subExpression": {
																			"id": 1286,
																			"name": "amount1Delta",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1233,
																			"src": "2170:12:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	],
																	"id": 1285,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2161:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 1284,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "2161:7:13",
																		"typeDescriptions": {}
																	}
																},
																"id": 1288,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2161:22:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1289,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2117:67:13",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$_t_uint256_$",
															"typeString": "tuple(bool,uint256,uint256)"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$_t_uint256_$",
														"typeString": "tuple(bool,uint256,uint256)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2001:270:13"
											},
											{
												"condition": {
													"id": 1305,
													"name": "isExactInput",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1269,
													"src": "2286:12:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1319,
													"nodeType": "Block",
													"src": "2475:351:13",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1310,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1308,
																	"name": "amountOutCached",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1191,
																	"src": "2596:15:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1309,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2615:1:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "2596:20:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1317,
															"nodeType": "IfStatement",
															"src": "2592:68:13",
															"trueBody": {
																"expression": {
																	"arguments": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1314,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1312,
																				"name": "amountReceived",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1273,
																				"src": "2626:14:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"id": 1313,
																				"name": "amountOutCached",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1191,
																				"src": "2644:15:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "2626:33:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		],
																		"id": 1311,
																		"name": "require",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			4294967278,
																			4294967278
																		],
																		"referencedDeclaration": 4294967278,
																		"src": "2618:7:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
																			"typeString": "function (bool) pure"
																		}
																	},
																	"id": 1315,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2618:42:13",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 1316,
																"nodeType": "ExpressionStatement",
																"src": "2618:42:13"
															}
														},
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "2684:131:13",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "2703:22:13",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2720:4:13",
																					"type": "",
																					"value": "0x40"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "2714:5:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2714:11:13"
																		},
																		"variables": [
																			{
																				"name": "ptr",
																				"nodeType": "YulTypedName",
																				"src": "2707:3:13",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "ptr",
																					"nodeType": "YulIdentifier",
																					"src": "2750:3:13"
																				},
																				{
																					"name": "amountToPay",
																					"nodeType": "YulIdentifier",
																					"src": "2755:11:13"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2743:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2743:24:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2743:24:13"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "ptr",
																					"nodeType": "YulIdentifier",
																					"src": "2792:3:13"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2797:2:13",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2785:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2785:15:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2785:15:13"
																	}
																]
															},
															"evmVersion": "istanbul",
															"externalReferences": [
																{
																	"declaration": 1271,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2755:11:13",
																	"valueSize": 1
																}
															],
															"id": 1318,
															"nodeType": "InlineAssembly",
															"src": "2675:140:13"
														}
													]
												},
												"id": 1320,
												"nodeType": "IfStatement",
												"src": "2282:544:13",
												"trueBody": {
													"id": 1307,
													"nodeType": "Block",
													"src": "2300:169:13",
													"statements": [
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "2324:134:13",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "2343:22:13",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2360:4:13",
																					"type": "",
																					"value": "0x40"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "2354:5:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2354:11:13"
																		},
																		"variables": [
																			{
																				"name": "ptr",
																				"nodeType": "YulTypedName",
																				"src": "2347:3:13",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "ptr",
																					"nodeType": "YulIdentifier",
																					"src": "2390:3:13"
																				},
																				{
																					"name": "amountReceived",
																					"nodeType": "YulIdentifier",
																					"src": "2395:14:13"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2383:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2383:27:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2383:27:13"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "ptr",
																					"nodeType": "YulIdentifier",
																					"src": "2435:3:13"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2440:2:13",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2428:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2428:15:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2428:15:13"
																	}
																]
															},
															"evmVersion": "istanbul",
															"externalReferences": [
																{
																	"declaration": 1273,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2395:14:13",
																	"valueSize": 1
																}
															],
															"id": 1306,
															"nodeType": "InlineAssembly",
															"src": "2315:143:13"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1229,
										"nodeType": "StructuredDocumentation",
										"src": "1516:38:13",
										"text": "@inheritdoc IUniswapV3SwapCallback"
									},
									"functionSelector": "fa461e33",
									"id": 1322,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "uniswapV3SwapCallback",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1237,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1700:8:13"
									},
									"parameters": {
										"id": 1236,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1231,
												"mutability": "mutable",
												"name": "amount0Delta",
												"nodeType": "VariableDeclaration",
												"scope": 1322,
												"src": "1601:19:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1230,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1601:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1233,
												"mutability": "mutable",
												"name": "amount1Delta",
												"nodeType": "VariableDeclaration",
												"scope": 1322,
												"src": "1631:19:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1232,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1631:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1235,
												"mutability": "mutable",
												"name": "path",
												"nodeType": "VariableDeclaration",
												"scope": 1322,
												"src": "1661:17:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1234,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1661:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1590:95:13"
									},
									"returnParameters": {
										"id": 1238,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1709:0:13"
									},
									"scope": 1634,
									"src": "1560:1273:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1364,
										"nodeType": "Block",
										"src": "2995:302:13",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1333,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1330,
															"name": "reason",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1325,
															"src": "3010:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1331,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "3010:13:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "3332",
														"id": 1332,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3027:2:13",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"src": "3010:19:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1355,
												"nodeType": "IfStatement",
												"src": "3006:237:13",
												"trueBody": {
													"id": 1354,
													"nodeType": "Block",
													"src": "3031:212:13",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1337,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1334,
																		"name": "reason",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1325,
																		"src": "3050:6:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1335,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "3050:13:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"hexValue": "3638",
																	"id": 1336,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3066:2:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_68_by_1",
																		"typeString": "int_const 68"
																	},
																	"value": "68"
																},
																"src": "3050:18:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1342,
															"nodeType": "IfStatement",
															"src": "3046:50:13",
															"trueBody": {
																"expression": {
																	"arguments": [
																		{
																			"hexValue": "556e6578706563746564206572726f72",
																			"id": 1339,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "string",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3077:18:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_stringliteral_9b951eb3fb3742579e39d15610bb1800acf108358e69a1cabf56fc48cbe86cff",
																				"typeString": "literal_string \"Unexpected error\""
																			},
																			"value": "Unexpected error"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_stringliteral_9b951eb3fb3742579e39d15610bb1800acf108358e69a1cabf56fc48cbe86cff",
																				"typeString": "literal_string \"Unexpected error\""
																			}
																		],
																		"id": 1338,
																		"name": "revert",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			4294967277,
																			4294967277
																		],
																		"referencedDeclaration": 4294967277,
																		"src": "3070:6:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																			"typeString": "function (string memory) pure"
																		}
																	},
																	"id": 1340,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3070:26:13",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 1341,
																"nodeType": "ExpressionStatement",
																"src": "3070:26:13"
															}
														},
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "3120:61:13",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "3139:27:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "reason",
																					"nodeType": "YulIdentifier",
																					"src": "3153:6:13"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3161:4:13",
																					"type": "",
																					"value": "0x04"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "3149:3:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3149:17:13"
																		},
																		"variableNames": [
																			{
																				"name": "reason",
																				"nodeType": "YulIdentifier",
																				"src": "3139:6:13"
																			}
																		]
																	}
																]
															},
															"evmVersion": "istanbul",
															"externalReferences": [
																{
																	"declaration": 1325,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "3139:6:13",
																	"valueSize": 1
																},
																{
																	"declaration": 1325,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "3153:6:13",
																	"valueSize": 1
																}
															],
															"id": 1343,
															"nodeType": "InlineAssembly",
															"src": "3111:70:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 1347,
																				"name": "reason",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1325,
																				"src": "3213:6:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 1349,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "3222:6:13",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																							"typeString": "type(string storage pointer)"
																						},
																						"typeName": {
																							"id": 1348,
																							"name": "string",
																							"nodeType": "ElementaryTypeName",
																							"src": "3222:6:13",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 1350,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "3221:8:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																					"typeString": "type(string storage pointer)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																					"typeString": "type(string storage pointer)"
																				}
																			],
																			"expression": {
																				"id": 1345,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "3202:3:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 1346,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "3202:10:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 1351,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3202:28:13",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1344,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "3195:6:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 1352,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3195:36:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1353,
															"nodeType": "ExpressionStatement",
															"src": "3195:36:13"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1358,
															"name": "reason",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1325,
															"src": "3271:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"components": [
																{
																	"id": 1360,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3280:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 1359,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "3280:7:13",
																		"typeDescriptions": {}
																	}
																}
															],
															"id": 1361,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "3279:9:13",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															}
														],
														"expression": {
															"id": 1356,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "3260:3:13",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 1357,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "decode",
														"nodeType": "MemberAccess",
														"src": "3260:10:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
															"typeString": "function () pure"
														}
													},
													"id": 1362,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3260:29:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1329,
												"id": 1363,
												"nodeType": "Return",
												"src": "3253:36:13"
											}
										]
									},
									"documentation": {
										"id": 1323,
										"nodeType": "StructuredDocumentation",
										"src": "2841:69:13",
										"text": "@dev Parses a revert reason that should contain the numeric quote"
									},
									"id": 1365,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "parseRevertReason",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1326,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1325,
												"mutability": "mutable",
												"name": "reason",
												"nodeType": "VariableDeclaration",
												"scope": 1365,
												"src": "2943:19:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1324,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2943:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2942:21:13"
									},
									"returnParameters": {
										"id": 1329,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1328,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1365,
												"src": "2986:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1327,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2986:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2985:9:13"
									},
									"scope": 1634,
									"src": "2916:381:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								},
								{
									"baseFunctions": [
										1137
									],
									"body": {
										"id": 1437,
										"nodeType": "Block",
										"src": "3553:621:13",
										"statements": [
											{
												"assignments": [
													1383
												],
												"declarations": [
													{
														"constant": false,
														"id": 1383,
														"mutability": "mutable",
														"name": "zeroForOne",
														"nodeType": "VariableDeclaration",
														"scope": 1437,
														"src": "3564:15:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1382,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3564:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1387,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1386,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1384,
														"name": "tokenIn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1368,
														"src": "3582:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1385,
														"name": "tokenOut",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1370,
														"src": "3592:8:13",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3582:18:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3564:36:13"
											},
											{
												"clauses": [
													{
														"block": {
															"id": 1425,
															"nodeType": "Block",
															"src": "4077:2:13",
															"statements": []
														},
														"errorName": "",
														"id": 1426,
														"nodeType": "TryCatchClause",
														"src": "4077:2:13"
													},
													{
														"block": {
															"id": 1434,
															"nodeType": "Block",
															"src": "4108:59:13",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 1431,
																				"name": "reason",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1428,
																				"src": "4148:6:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			],
																			"id": 1430,
																			"name": "parseRevertReason",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1365,
																			"src": "4130:17:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_uint256_$",
																				"typeString": "function (bytes memory) pure returns (uint256)"
																			}
																		},
																		"id": 1432,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4130:25:13",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"functionReturnParameters": 1381,
																	"id": 1433,
																	"nodeType": "Return",
																	"src": "4123:32:13"
																}
															]
														},
														"errorName": "",
														"id": 1435,
														"nodeType": "TryCatchClause",
														"parameters": {
															"id": 1429,
															"nodeType": "ParameterList",
															"parameters": [
																{
																	"constant": false,
																	"id": 1428,
																	"mutability": "mutable",
																	"name": "reason",
																	"nodeType": "VariableDeclaration",
																	"scope": 1435,
																	"src": "4087:19:13",
																	"stateVariable": false,
																	"storageLocation": "memory",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes"
																	},
																	"typeName": {
																		"id": 1427,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "4087:5:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_storage_ptr",
																			"typeString": "bytes"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"src": "4086:21:13"
														},
														"src": "4080:87:13"
													}
												],
												"externalCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1396,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3693:4:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Quoter_$1634",
																		"typeString": "contract Quoter"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Quoter_$1634",
																		"typeString": "contract Quoter"
																	}
																],
																"id": 1395,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3685:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1394,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3685:7:13",
																	"typeDescriptions": {}
																}
															},
															"id": 1397,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3685:13:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1398,
															"name": "zeroForOne",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1383,
															"src": "3767:10:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"expression": {
																	"id": 1399,
																	"name": "amountIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1374,
																	"src": "3796:8:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 1400,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "toInt256",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 524,
																"src": "3796:17:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_int256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (int256)"
																}
															},
															"id": 1401,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3796:19:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 1404,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1402,
																	"name": "sqrtPriceLimitX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1376,
																	"src": "3834:17:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1403,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3855:1:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "3834:22:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseExpression": {
																"id": 1416,
																"name": "sqrtPriceLimitX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1376,
																"src": "3976:17:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"id": 1417,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "Conditional",
															"src": "3834:159:13",
															"trueExpression": {
																"components": [
																	{
																		"condition": {
																			"id": 1405,
																			"name": "zeroForOne",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1383,
																			"src": "3881:10:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			"id": 1413,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 1410,
																					"name": "TickMath",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1060,
																					"src": "3924:8:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_TickMath_$1060_$",
																						"typeString": "type(library TickMath)"
																					}
																				},
																				"id": 1411,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "MAX_SQRT_RATIO",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 546,
																				"src": "3924:23:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 1412,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3950:1:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "3924:27:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		"id": 1414,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "3881:70:13",
																		"trueExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			"id": 1409,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 1406,
																					"name": "TickMath",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1060,
																					"src": "3894:8:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_TickMath_$1060_$",
																						"typeString": "type(library TickMath)"
																					}
																				},
																				"id": 1407,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "MIN_SQRT_RATIO",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 542,
																				"src": "3894:23:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 1408,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3920:1:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "3894:27:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	}
																],
																"id": 1415,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3880:72:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														{
															"arguments": [
																{
																	"id": 1420,
																	"name": "tokenIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1368,
																	"src": "4029:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1421,
																	"name": "fee",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1372,
																	"src": "4038:3:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint24",
																		"typeString": "uint24"
																	}
																},
																{
																	"id": 1422,
																	"name": "tokenOut",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1370,
																	"src": "4043:8:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint24",
																		"typeString": "uint24"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 1418,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "4012:3:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1419,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "4012:16:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1423,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4012:40:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1389,
																	"name": "tokenIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1368,
																	"src": "3638:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1390,
																	"name": "tokenOut",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1370,
																	"src": "3647:8:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1391,
																	"name": "fee",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1372,
																	"src": "3657:3:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint24",
																		"typeString": "uint24"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint24",
																		"typeString": "uint24"
																	}
																],
																"id": 1388,
																"name": "getPool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1228,
																"src": "3630:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$_t_uint24_$returns$_t_contract$_IUniswapV3Pool_$21_$",
																	"typeString": "function (address,address,uint24) view returns (contract IUniswapV3Pool)"
																}
															},
															"id": 1392,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3630:31:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IUniswapV3Pool_$21",
																"typeString": "contract IUniswapV3Pool"
															}
														},
														"id": 1393,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "swap",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 112,
														"src": "3630:36:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_bool_$_t_int256_$_t_uint160_$_t_bytes_memory_ptr_$returns$_t_int256_$_t_int256_$",
															"typeString": "function (address,bool,int256,uint160,bytes memory) external returns (int256,int256)"
														}
													},
													"id": 1424,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3630:437:13",
													"tryCall": true,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$",
														"typeString": "tuple(int256,int256)"
													}
												},
												"id": 1436,
												"nodeType": "TryStatement",
												"src": "3613:554:13"
											}
										]
									},
									"documentation": {
										"id": 1366,
										"nodeType": "StructuredDocumentation",
										"src": "3305:23:13",
										"text": "@inheritdoc IQuoter"
									},
									"functionSelector": "f7729d43",
									"id": 1438,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "quoteExactInputSingle",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1378,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3516:8:13"
									},
									"parameters": {
										"id": 1377,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1368,
												"mutability": "mutable",
												"name": "tokenIn",
												"nodeType": "VariableDeclaration",
												"scope": 1438,
												"src": "3375:15:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1367,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3375:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1370,
												"mutability": "mutable",
												"name": "tokenOut",
												"nodeType": "VariableDeclaration",
												"scope": 1438,
												"src": "3401:16:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1369,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3401:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1372,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 1438,
												"src": "3428:10:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1371,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "3428:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1374,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 1438,
												"src": "3449:16:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1373,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3449:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1376,
												"mutability": "mutable",
												"name": "sqrtPriceLimitX96",
												"nodeType": "VariableDeclaration",
												"scope": 1438,
												"src": "3476:25:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1375,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "3476:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3364:144:13"
									},
									"returnParameters": {
										"id": 1381,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1380,
												"mutability": "mutable",
												"name": "amountOut",
												"nodeType": "VariableDeclaration",
												"scope": 1438,
												"src": "3534:17:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1379,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3534:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3533:19:13"
									},
									"scope": 1634,
									"src": "3334:840:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1121
									],
									"body": {
										"id": 1490,
										"nodeType": "Block",
										"src": "4319:568:13",
										"statements": [
											{
												"body": {
													"id": 1488,
													"nodeType": "Block",
													"src": "4343:537:13",
													"statements": [
														{
															"assignments": [
																1451
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1451,
																	"mutability": "mutable",
																	"name": "hasMultiplePools",
																	"nodeType": "VariableDeclaration",
																	"scope": 1488,
																	"src": "4358:21:13",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"typeName": {
																		"id": 1450,
																		"name": "bool",
																		"nodeType": "ElementaryTypeName",
																		"src": "4358:4:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1455,
															"initialValue": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 1452,
																		"name": "path",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1441,
																		"src": "4382:4:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1453,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "hasMultiplePools",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1862,
																	"src": "4382:21:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bool_$bound_to$_t_bytes_memory_ptr_$",
																		"typeString": "function (bytes memory) pure returns (bool)"
																	}
																},
																"id": 1454,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4382:23:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "4358:47:13"
														},
														{
															"assignments": [
																1457,
																1459,
																1461
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1457,
																	"mutability": "mutable",
																	"name": "tokenIn",
																	"nodeType": "VariableDeclaration",
																	"scope": 1488,
																	"src": "4423:15:13",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"typeName": {
																		"id": 1456,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "4423:7:13",
																		"stateMutability": "nonpayable",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"visibility": "internal"
																},
																{
																	"constant": false,
																	"id": 1459,
																	"mutability": "mutable",
																	"name": "tokenOut",
																	"nodeType": "VariableDeclaration",
																	"scope": 1488,
																	"src": "4440:16:13",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"typeName": {
																		"id": 1458,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "4440:7:13",
																		"stateMutability": "nonpayable",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"visibility": "internal"
																},
																{
																	"constant": false,
																	"id": 1461,
																	"mutability": "mutable",
																	"name": "fee",
																	"nodeType": "VariableDeclaration",
																	"scope": 1488,
																	"src": "4458:10:13",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint24",
																		"typeString": "uint24"
																	},
																	"typeName": {
																		"id": 1460,
																		"name": "uint24",
																		"nodeType": "ElementaryTypeName",
																		"src": "4458:6:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint24",
																			"typeString": "uint24"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1465,
															"initialValue": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 1462,
																		"name": "path",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1441,
																		"src": "4472:4:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1463,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "decodeFirstPool",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1914,
																	"src": "4472:20:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_address_$_t_address_$_t_uint24_$bound_to$_t_bytes_memory_ptr_$",
																		"typeString": "function (bytes memory) pure returns (address,address,uint24)"
																	}
																},
																"id": 1464,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4472:22:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint24_$",
																	"typeString": "tuple(address,address,uint24)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "4422:72:13"
														},
														{
															"expression": {
																"id": 1474,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1466,
																	"name": "amountIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1443,
																	"src": "4591:8:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 1468,
																			"name": "tokenIn",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1457,
																			"src": "4624:7:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1469,
																			"name": "tokenOut",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1459,
																			"src": "4633:8:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1470,
																			"name": "fee",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1461,
																			"src": "4643:3:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint24",
																				"typeString": "uint24"
																			}
																		},
																		{
																			"id": 1471,
																			"name": "amountIn",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1443,
																			"src": "4648:8:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"hexValue": "30",
																			"id": 1472,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "4658:1:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint24",
																				"typeString": "uint24"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			}
																		],
																		"id": 1467,
																		"name": "quoteExactInputSingle",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1438,
																		"src": "4602:21:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint24_$_t_uint256_$_t_uint160_$returns$_t_uint256_$",
																			"typeString": "function (address,address,uint24,uint256,uint160) returns (uint256)"
																		}
																	},
																	"id": 1473,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4602:58:13",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4591:69:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1475,
															"nodeType": "ExpressionStatement",
															"src": "4591:69:13"
														},
														{
															"condition": {
																"id": 1476,
																"name": "hasMultiplePools",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1451,
																"src": "4737:16:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 1486,
																"nodeType": "Block",
																"src": "4819:50:13",
																"statements": [
																	{
																		"expression": {
																			"id": 1484,
																			"name": "amountIn",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1443,
																			"src": "4845:8:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"functionReturnParameters": 1448,
																		"id": 1485,
																		"nodeType": "Return",
																		"src": "4838:15:13"
																	}
																]
															},
															"id": 1487,
															"nodeType": "IfStatement",
															"src": "4733:136:13",
															"trueBody": {
																"id": 1483,
																"nodeType": "Block",
																"src": "4755:58:13",
																"statements": [
																	{
																		"expression": {
																			"id": 1481,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 1477,
																				"name": "path",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1441,
																				"src": "4774:4:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"arguments": [],
																				"expression": {
																					"argumentTypes": [],
																					"expression": {
																						"id": 1478,
																						"name": "path",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1441,
																						"src": "4781:4:13",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					},
																					"id": 1479,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "skipToken",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1947,
																					"src": "4781:14:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$",
																						"typeString": "function (bytes memory) pure returns (bytes memory)"
																					}
																				},
																				"id": 1480,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "4781:16:13",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"src": "4774:23:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 1482,
																		"nodeType": "ExpressionStatement",
																		"src": "4774:23:13"
																	}
																]
															}
														}
													]
												},
												"condition": {
													"hexValue": "74727565",
													"id": 1449,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4337:4:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"id": 1489,
												"nodeType": "WhileStatement",
												"src": "4330:550:13"
											}
										]
									},
									"documentation": {
										"id": 1439,
										"nodeType": "StructuredDocumentation",
										"src": "4182:23:13",
										"text": "@inheritdoc IQuoter"
									},
									"functionSelector": "cdca1753",
									"id": 1491,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "quoteExactInput",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1445,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4282:8:13"
									},
									"parameters": {
										"id": 1444,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1441,
												"mutability": "mutable",
												"name": "path",
												"nodeType": "VariableDeclaration",
												"scope": 1491,
												"src": "4236:17:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1440,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4236:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1443,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 1491,
												"src": "4255:16:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1442,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4255:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4235:37:13"
									},
									"returnParameters": {
										"id": 1448,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1447,
												"mutability": "mutable",
												"name": "amountOut",
												"nodeType": "VariableDeclaration",
												"scope": 1491,
												"src": "4300:17:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1446,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4300:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4299:19:13"
									},
									"scope": 1634,
									"src": "4211:676:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										1163
									],
									"body": {
										"id": 1579,
										"nodeType": "Block",
										"src": "5144:879:13",
										"statements": [
											{
												"assignments": [
													1509
												],
												"declarations": [
													{
														"constant": false,
														"id": 1509,
														"mutability": "mutable",
														"name": "zeroForOne",
														"nodeType": "VariableDeclaration",
														"scope": 1579,
														"src": "5155:15:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1508,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5155:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1513,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1512,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1510,
														"name": "tokenIn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1494,
														"src": "5173:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1511,
														"name": "tokenOut",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1496,
														"src": "5183:8:13",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5173:18:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5155:36:13"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													},
													"id": 1516,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1514,
														"name": "sqrtPriceLimitX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1502,
														"src": "5318:17:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1515,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5339:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "5318:22:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1521,
												"nodeType": "IfStatement",
												"src": "5314:55:13",
												"trueBody": {
													"expression": {
														"id": 1519,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1517,
															"name": "amountOutCached",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1191,
															"src": "5342:15:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"id": 1518,
															"name": "amountOut",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1500,
															"src": "5360:9:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "5342:27:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1520,
													"nodeType": "ExpressionStatement",
													"src": "5342:27:13"
												}
											},
											{
												"clauses": [
													{
														"block": {
															"id": 1560,
															"nodeType": "Block",
															"src": "5846:2:13",
															"statements": []
														},
														"errorName": "",
														"id": 1561,
														"nodeType": "TryCatchClause",
														"src": "5846:2:13"
													},
													{
														"block": {
															"id": 1576,
															"nodeType": "Block",
															"src": "5877:139:13",
															"statements": [
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		},
																		"id": 1567,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1565,
																			"name": "sqrtPriceLimitX96",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1502,
																			"src": "5896:17:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 1566,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5917:1:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "5896:22:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 1571,
																	"nodeType": "IfStatement",
																	"src": "5892:50:13",
																	"trueBody": {
																		"expression": {
																			"id": 1569,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "delete",
																			"prefix": true,
																			"src": "5920:22:13",
																			"subExpression": {
																				"id": 1568,
																				"name": "amountOutCached",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1191,
																				"src": "5927:15:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1570,
																		"nodeType": "ExpressionStatement",
																		"src": "5920:22:13"
																	}
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 1573,
																				"name": "reason",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1563,
																				"src": "5997:6:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			],
																			"id": 1572,
																			"name": "parseRevertReason",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1365,
																			"src": "5979:17:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_uint256_$",
																				"typeString": "function (bytes memory) pure returns (uint256)"
																			}
																		},
																		"id": 1574,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5979:25:13",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"functionReturnParameters": 1507,
																	"id": 1575,
																	"nodeType": "Return",
																	"src": "5972:32:13"
																}
															]
														},
														"errorName": "",
														"id": 1577,
														"nodeType": "TryCatchClause",
														"parameters": {
															"id": 1564,
															"nodeType": "ParameterList",
															"parameters": [
																{
																	"constant": false,
																	"id": 1563,
																	"mutability": "mutable",
																	"name": "reason",
																	"nodeType": "VariableDeclaration",
																	"scope": 1577,
																	"src": "5856:19:13",
																	"stateVariable": false,
																	"storageLocation": "memory",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes"
																	},
																	"typeName": {
																		"id": 1562,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "5856:5:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_storage_ptr",
																			"typeString": "bytes"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"src": "5855:21:13"
														},
														"src": "5849:167:13"
													}
												],
												"externalCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1530,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "5460:4:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Quoter_$1634",
																		"typeString": "contract Quoter"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Quoter_$1634",
																		"typeString": "contract Quoter"
																	}
																],
																"id": 1529,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5452:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1528,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5452:7:13",
																	"typeDescriptions": {}
																}
															},
															"id": 1531,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5452:13:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1532,
															"name": "zeroForOne",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1509,
															"src": "5534:10:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1536,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "-",
															"prefix": true,
															"src": "5563:21:13",
															"subExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 1533,
																		"name": "amountOut",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1500,
																		"src": "5564:9:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1534,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "toInt256",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 524,
																	"src": "5564:18:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_int256_$bound_to$_t_uint256_$",
																		"typeString": "function (uint256) pure returns (int256)"
																	}
																},
																"id": 1535,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5564:20:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 1539,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1537,
																	"name": "sqrtPriceLimitX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1502,
																	"src": "5603:17:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1538,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5624:1:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "5603:22:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseExpression": {
																"id": 1551,
																"name": "sqrtPriceLimitX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1502,
																"src": "5745:17:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"id": 1552,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "Conditional",
															"src": "5603:159:13",
															"trueExpression": {
																"components": [
																	{
																		"condition": {
																			"id": 1540,
																			"name": "zeroForOne",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1509,
																			"src": "5650:10:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			"id": 1548,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 1545,
																					"name": "TickMath",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1060,
																					"src": "5693:8:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_TickMath_$1060_$",
																						"typeString": "type(library TickMath)"
																					}
																				},
																				"id": 1546,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "MAX_SQRT_RATIO",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 546,
																				"src": "5693:23:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 1547,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5719:1:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "5693:27:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		"id": 1549,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "5650:70:13",
																		"trueExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			"id": 1544,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 1541,
																					"name": "TickMath",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1060,
																					"src": "5663:8:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_TickMath_$1060_$",
																						"typeString": "type(library TickMath)"
																					}
																				},
																				"id": 1542,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "MIN_SQRT_RATIO",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 542,
																				"src": "5663:23:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 1543,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5689:1:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "5663:27:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	}
																],
																"id": 1550,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5649:72:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														{
															"arguments": [
																{
																	"id": 1555,
																	"name": "tokenOut",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1496,
																	"src": "5798:8:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1556,
																	"name": "fee",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1498,
																	"src": "5808:3:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint24",
																		"typeString": "uint24"
																	}
																},
																{
																	"id": 1557,
																	"name": "tokenIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1494,
																	"src": "5813:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint24",
																		"typeString": "uint24"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 1553,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "5781:3:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1554,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "5781:16:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1558,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5781:40:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1523,
																	"name": "tokenIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1494,
																	"src": "5405:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1524,
																	"name": "tokenOut",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1496,
																	"src": "5414:8:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1525,
																	"name": "fee",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1498,
																	"src": "5424:3:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint24",
																		"typeString": "uint24"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint24",
																		"typeString": "uint24"
																	}
																],
																"id": 1522,
																"name": "getPool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1228,
																"src": "5397:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$_t_uint24_$returns$_t_contract$_IUniswapV3Pool_$21_$",
																	"typeString": "function (address,address,uint24) view returns (contract IUniswapV3Pool)"
																}
															},
															"id": 1526,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5397:31:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IUniswapV3Pool_$21",
																"typeString": "contract IUniswapV3Pool"
															}
														},
														"id": 1527,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "swap",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 112,
														"src": "5397:36:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_bool_$_t_int256_$_t_uint160_$_t_bytes_memory_ptr_$returns$_t_int256_$_t_int256_$",
															"typeString": "function (address,bool,int256,uint160,bytes memory) external returns (int256,int256)"
														}
													},
													"id": 1559,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5397:439:13",
													"tryCall": true,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$",
														"typeString": "tuple(int256,int256)"
													}
												},
												"id": 1578,
												"nodeType": "TryStatement",
												"src": "5380:636:13"
											}
										]
									},
									"documentation": {
										"id": 1492,
										"nodeType": "StructuredDocumentation",
										"src": "4895:23:13",
										"text": "@inheritdoc IQuoter"
									},
									"functionSelector": "30d07f21",
									"id": 1580,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "quoteExactOutputSingle",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1504,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5108:8:13"
									},
									"parameters": {
										"id": 1503,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1494,
												"mutability": "mutable",
												"name": "tokenIn",
												"nodeType": "VariableDeclaration",
												"scope": 1580,
												"src": "4966:15:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1493,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4966:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1496,
												"mutability": "mutable",
												"name": "tokenOut",
												"nodeType": "VariableDeclaration",
												"scope": 1580,
												"src": "4992:16:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1495,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4992:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1498,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 1580,
												"src": "5019:10:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1497,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "5019:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1500,
												"mutability": "mutable",
												"name": "amountOut",
												"nodeType": "VariableDeclaration",
												"scope": 1580,
												"src": "5040:17:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1499,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5040:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1502,
												"mutability": "mutable",
												"name": "sqrtPriceLimitX96",
												"nodeType": "VariableDeclaration",
												"scope": 1580,
												"src": "5068:25:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1501,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "5068:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4955:145:13"
									},
									"returnParameters": {
										"id": 1507,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1506,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 1580,
												"src": "5126:16:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1505,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5126:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5125:18:13"
									},
									"scope": 1634,
									"src": "4924:1099:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1147
									],
									"body": {
										"id": 1632,
										"nodeType": "Block",
										"src": "6169:572:13",
										"statements": [
											{
												"body": {
													"id": 1630,
													"nodeType": "Block",
													"src": "6193:541:13",
													"statements": [
														{
															"assignments": [
																1593
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1593,
																	"mutability": "mutable",
																	"name": "hasMultiplePools",
																	"nodeType": "VariableDeclaration",
																	"scope": 1630,
																	"src": "6208:21:13",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"typeName": {
																		"id": 1592,
																		"name": "bool",
																		"nodeType": "ElementaryTypeName",
																		"src": "6208:4:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1597,
															"initialValue": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 1594,
																		"name": "path",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1583,
																		"src": "6232:4:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1595,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "hasMultiplePools",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1862,
																	"src": "6232:21:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bool_$bound_to$_t_bytes_memory_ptr_$",
																		"typeString": "function (bytes memory) pure returns (bool)"
																	}
																},
																"id": 1596,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6232:23:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6208:47:13"
														},
														{
															"assignments": [
																1599,
																1601,
																1603
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1599,
																	"mutability": "mutable",
																	"name": "tokenOut",
																	"nodeType": "VariableDeclaration",
																	"scope": 1630,
																	"src": "6273:16:13",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"typeName": {
																		"id": 1598,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "6273:7:13",
																		"stateMutability": "nonpayable",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"visibility": "internal"
																},
																{
																	"constant": false,
																	"id": 1601,
																	"mutability": "mutable",
																	"name": "tokenIn",
																	"nodeType": "VariableDeclaration",
																	"scope": 1630,
																	"src": "6291:15:13",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"typeName": {
																		"id": 1600,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "6291:7:13",
																		"stateMutability": "nonpayable",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"visibility": "internal"
																},
																{
																	"constant": false,
																	"id": 1603,
																	"mutability": "mutable",
																	"name": "fee",
																	"nodeType": "VariableDeclaration",
																	"scope": 1630,
																	"src": "6308:10:13",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint24",
																		"typeString": "uint24"
																	},
																	"typeName": {
																		"id": 1602,
																		"name": "uint24",
																		"nodeType": "ElementaryTypeName",
																		"src": "6308:6:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint24",
																			"typeString": "uint24"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1607,
															"initialValue": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 1604,
																		"name": "path",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1583,
																		"src": "6322:4:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1605,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "decodeFirstPool",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1914,
																	"src": "6322:20:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_address_$_t_address_$_t_uint24_$bound_to$_t_bytes_memory_ptr_$",
																		"typeString": "function (bytes memory) pure returns (address,address,uint24)"
																	}
																},
																"id": 1606,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6322:22:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint24_$",
																	"typeString": "tuple(address,address,uint24)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6272:72:13"
														},
														{
															"expression": {
																"id": 1616,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1608,
																	"name": "amountOut",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1585,
																	"src": "6441:9:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 1610,
																			"name": "tokenIn",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1601,
																			"src": "6476:7:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1611,
																			"name": "tokenOut",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1599,
																			"src": "6485:8:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1612,
																			"name": "fee",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1603,
																			"src": "6495:3:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint24",
																				"typeString": "uint24"
																			}
																		},
																		{
																			"id": 1613,
																			"name": "amountOut",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1585,
																			"src": "6500:9:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"hexValue": "30",
																			"id": 1614,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "6511:1:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint24",
																				"typeString": "uint24"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			}
																		],
																		"id": 1609,
																		"name": "quoteExactOutputSingle",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1580,
																		"src": "6453:22:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint24_$_t_uint256_$_t_uint160_$returns$_t_uint256_$",
																			"typeString": "function (address,address,uint24,uint256,uint160) returns (uint256)"
																		}
																	},
																	"id": 1615,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6453:60:13",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6441:72:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1617,
															"nodeType": "ExpressionStatement",
															"src": "6441:72:13"
														},
														{
															"condition": {
																"id": 1618,
																"name": "hasMultiplePools",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1593,
																"src": "6590:16:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 1628,
																"nodeType": "Block",
																"src": "6672:51:13",
																"statements": [
																	{
																		"expression": {
																			"id": 1626,
																			"name": "amountOut",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1585,
																			"src": "6698:9:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"functionReturnParameters": 1590,
																		"id": 1627,
																		"nodeType": "Return",
																		"src": "6691:16:13"
																	}
																]
															},
															"id": 1629,
															"nodeType": "IfStatement",
															"src": "6586:137:13",
															"trueBody": {
																"id": 1625,
																"nodeType": "Block",
																"src": "6608:58:13",
																"statements": [
																	{
																		"expression": {
																			"id": 1623,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 1619,
																				"name": "path",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1583,
																				"src": "6627:4:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"arguments": [],
																				"expression": {
																					"argumentTypes": [],
																					"expression": {
																						"id": 1620,
																						"name": "path",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1583,
																						"src": "6634:4:13",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					},
																					"id": 1621,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "skipToken",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1947,
																					"src": "6634:14:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$",
																						"typeString": "function (bytes memory) pure returns (bytes memory)"
																					}
																				},
																				"id": 1622,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "6634:16:13",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"src": "6627:23:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 1624,
																		"nodeType": "ExpressionStatement",
																		"src": "6627:23:13"
																	}
																]
															}
														}
													]
												},
												"condition": {
													"hexValue": "74727565",
													"id": 1591,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6187:4:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"id": 1631,
												"nodeType": "WhileStatement",
												"src": "6180:554:13"
											}
										]
									},
									"documentation": {
										"id": 1581,
										"nodeType": "StructuredDocumentation",
										"src": "6031:23:13",
										"text": "@inheritdoc IQuoter"
									},
									"functionSelector": "2f80bb1d",
									"id": 1633,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "quoteExactOutput",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1587,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "6133:8:13"
									},
									"parameters": {
										"id": 1586,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1583,
												"mutability": "mutable",
												"name": "path",
												"nodeType": "VariableDeclaration",
												"scope": 1633,
												"src": "6086:17:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1582,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6086:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1585,
												"mutability": "mutable",
												"name": "amountOut",
												"nodeType": "VariableDeclaration",
												"scope": 1633,
												"src": "6105:17:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1584,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6105:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6085:38:13"
									},
									"returnParameters": {
										"id": 1590,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1589,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 1633,
												"src": "6151:16:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1588,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6151:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6150:18:13"
									},
									"scope": 1634,
									"src": "6060:681:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1635,
							"src": "873:5871:13"
						}
					],
					"src": "46:6700:13"
				},
				"id": 13
			},
			"contracts/libraries/BytesLib.sol": {
				"ast": {
					"absolutePath": "contracts/libraries/BytesLib.sol",
					"exportedSymbols": {
						"BytesLib": [
							1753
						]
					},
					"id": 1754,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1636,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "351:31:14"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"fullyImplemented": true,
							"id": 1753,
							"linearizedBaseContracts": [
								1753
							],
							"name": "BytesLib",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1681,
										"nodeType": "Block",
										"src": "550:2931:14",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1652,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1650,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1648,
																	"name": "_length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1642,
																	"src": "569:7:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "3331",
																	"id": 1649,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "579:2:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_31_by_1",
																		"typeString": "int_const 31"
																	},
																	"value": "31"
																},
																"src": "569:12:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1651,
																"name": "_length",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1642,
																"src": "585:7:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "569:23:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "736c6963655f6f766572666c6f77",
															"id": 1653,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "594:16:14",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e",
																"typeString": "literal_string \"slice_overflow\""
															},
															"value": "slice_overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e",
																"typeString": "literal_string \"slice_overflow\""
															}
														],
														"id": 1647,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "561:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1654,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "561:50:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1655,
												"nodeType": "ExpressionStatement",
												"src": "561:50:14"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1661,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1659,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1657,
																	"name": "_start",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1640,
																	"src": "630:6:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"id": 1658,
																	"name": "_length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1642,
																	"src": "639:7:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "630:16:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1660,
																"name": "_start",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1640,
																"src": "650:6:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "630:26:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "736c6963655f6f766572666c6f77",
															"id": 1662,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "658:16:14",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e",
																"typeString": "literal_string \"slice_overflow\""
															},
															"value": "slice_overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e",
																"typeString": "literal_string \"slice_overflow\""
															}
														],
														"id": 1656,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "622:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1663,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "622:53:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1664,
												"nodeType": "ExpressionStatement",
												"src": "622:53:14"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1671,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1666,
																	"name": "_bytes",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1638,
																	"src": "694:6:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																"id": 1667,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "694:13:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1670,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1668,
																	"name": "_start",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1640,
																	"src": "711:6:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"id": 1669,
																	"name": "_length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1642,
																	"src": "720:7:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "711:16:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "694:33:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "736c6963655f6f75744f66426f756e6473",
															"id": 1672,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "729:19:14",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0",
																"typeString": "literal_string \"slice_outOfBounds\""
															},
															"value": "slice_outOfBounds"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0",
																"typeString": "literal_string \"slice_outOfBounds\""
															}
														],
														"id": 1665,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "686:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1673,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "686:63:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1674,
												"nodeType": "ExpressionStatement",
												"src": "686:63:14"
											},
											{
												"assignments": [
													1676
												],
												"declarations": [
													{
														"constant": false,
														"id": 1676,
														"mutability": "mutable",
														"name": "tempBytes",
														"nodeType": "VariableDeclaration",
														"scope": 1681,
														"src": "762:22:14",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1675,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "762:5:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1677,
												"nodeType": "VariableDeclarationStatement",
												"src": "762:22:14"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "806:2639:14",
													"statements": [
														{
															"cases": [
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "868:2130:14",
																		"statements": [
																			{
																				"nodeType": "YulAssignment",
																				"src": "1039:24:14",
																				"value": {
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1058:4:14",
																							"type": "",
																							"value": "0x40"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "1052:5:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1052:11:14"
																				},
																				"variableNames": [
																					{
																						"name": "tempBytes",
																						"nodeType": "YulIdentifier",
																						"src": "1039:9:14"
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "1733:33:14",
																				"value": {
																					"arguments": [
																						{
																							"name": "_length",
																							"nodeType": "YulIdentifier",
																							"src": "1754:7:14"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1763:2:14",
																							"type": "",
																							"value": "31"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nodeType": "YulIdentifier",
																						"src": "1750:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1750:16:14"
																				},
																				"variables": [
																					{
																						"name": "lengthmod",
																						"nodeType": "YulTypedName",
																						"src": "1737:9:14",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "2113:70:14",
																				"value": {
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "tempBytes",
																									"nodeType": "YulIdentifier",
																									"src": "2131:9:14"
																								},
																								{
																									"name": "lengthmod",
																									"nodeType": "YulIdentifier",
																									"src": "2142:9:14"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "2127:3:14"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "2127:25:14"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "2158:4:14",
																									"type": "",
																									"value": "0x20"
																								},
																								{
																									"arguments": [
																										{
																											"name": "lengthmod",
																											"nodeType": "YulIdentifier",
																											"src": "2171:9:14"
																										}
																									],
																									"functionName": {
																										"name": "iszero",
																										"nodeType": "YulIdentifier",
																										"src": "2164:6:14"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "2164:17:14"
																								}
																							],
																							"functionName": {
																								"name": "mul",
																								"nodeType": "YulIdentifier",
																								"src": "2154:3:14"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "2154:28:14"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "2123:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2123:60:14"
																				},
																				"variables": [
																					{
																						"name": "mc",
																						"nodeType": "YulTypedName",
																						"src": "2117:2:14",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "2205:27:14",
																				"value": {
																					"arguments": [
																						{
																							"name": "mc",
																							"nodeType": "YulIdentifier",
																							"src": "2220:2:14"
																						},
																						{
																							"name": "_length",
																							"nodeType": "YulIdentifier",
																							"src": "2224:7:14"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "2216:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2216:16:14"
																				},
																				"variables": [
																					{
																						"name": "end",
																						"nodeType": "YulTypedName",
																						"src": "2209:3:14",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "2655:71:14",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "mc",
																										"nodeType": "YulIdentifier",
																										"src": "2689:2:14"
																									},
																									{
																										"arguments": [
																											{
																												"name": "cc",
																												"nodeType": "YulIdentifier",
																												"src": "2699:2:14"
																											}
																										],
																										"functionName": {
																											"name": "mload",
																											"nodeType": "YulIdentifier",
																											"src": "2693:5:14"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "2693:9:14"
																									}
																								],
																								"functionName": {
																									"name": "mstore",
																									"nodeType": "YulIdentifier",
																									"src": "2682:6:14"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "2682:21:14"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "2682:21:14"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "mc",
																							"nodeType": "YulIdentifier",
																							"src": "2531:2:14"
																						},
																						{
																							"name": "end",
																							"nodeType": "YulIdentifier",
																							"src": "2535:3:14"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nodeType": "YulIdentifier",
																						"src": "2528:2:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2528:11:14"
																				},
																				"nodeType": "YulForLoop",
																				"post": {
																					"nodeType": "YulBlock",
																					"src": "2540:114:14",
																					"statements": [
																						{
																							"nodeType": "YulAssignment",
																							"src": "2567:19:14",
																							"value": {
																								"arguments": [
																									{
																										"name": "mc",
																										"nodeType": "YulIdentifier",
																										"src": "2577:2:14"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "2581:4:14",
																										"type": "",
																										"value": "0x20"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "2573:3:14"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "2573:13:14"
																							},
																							"variableNames": [
																								{
																									"name": "mc",
																									"nodeType": "YulIdentifier",
																									"src": "2567:2:14"
																								}
																							]
																						},
																						{
																							"nodeType": "YulAssignment",
																							"src": "2612:19:14",
																							"value": {
																								"arguments": [
																									{
																										"name": "cc",
																										"nodeType": "YulIdentifier",
																										"src": "2622:2:14"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "2626:4:14",
																										"type": "",
																										"value": "0x20"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "2618:3:14"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "2618:13:14"
																							},
																							"variableNames": [
																								{
																									"name": "cc",
																									"nodeType": "YulIdentifier",
																									"src": "2612:2:14"
																								}
																							]
																						}
																					]
																				},
																				"pre": {
																					"nodeType": "YulBlock",
																					"src": "2260:267:14",
																					"statements": [
																						{
																							"nodeType": "YulVariableDeclaration",
																							"src": "2424:80:14",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"arguments": [
																													{
																														"name": "_bytes",
																														"nodeType": "YulIdentifier",
																														"src": "2446:6:14"
																													},
																													{
																														"name": "lengthmod",
																														"nodeType": "YulIdentifier",
																														"src": "2454:9:14"
																													}
																												],
																												"functionName": {
																													"name": "add",
																													"nodeType": "YulIdentifier",
																													"src": "2442:3:14"
																												},
																												"nodeType": "YulFunctionCall",
																												"src": "2442:22:14"
																											},
																											{
																												"arguments": [
																													{
																														"kind": "number",
																														"nodeType": "YulLiteral",
																														"src": "2470:4:14",
																														"type": "",
																														"value": "0x20"
																													},
																													{
																														"arguments": [
																															{
																																"name": "lengthmod",
																																"nodeType": "YulIdentifier",
																																"src": "2483:9:14"
																															}
																														],
																														"functionName": {
																															"name": "iszero",
																															"nodeType": "YulIdentifier",
																															"src": "2476:6:14"
																														},
																														"nodeType": "YulFunctionCall",
																														"src": "2476:17:14"
																													}
																												],
																												"functionName": {
																													"name": "mul",
																													"nodeType": "YulIdentifier",
																													"src": "2466:3:14"
																												},
																												"nodeType": "YulFunctionCall",
																												"src": "2466:28:14"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "2438:3:14"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "2438:57:14"
																									},
																									{
																										"name": "_start",
																										"nodeType": "YulIdentifier",
																										"src": "2497:6:14"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "2434:3:14"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "2434:70:14"
																							},
																							"variables": [
																								{
																									"name": "cc",
																									"nodeType": "YulTypedName",
																									"src": "2428:2:14",
																									"type": ""
																								}
																							]
																						}
																					]
																				},
																				"src": "2256:470:14"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "tempBytes",
																							"nodeType": "YulIdentifier",
																							"src": "2757:9:14"
																						},
																						{
																							"name": "_length",
																							"nodeType": "YulIdentifier",
																							"src": "2768:7:14"
																						}
																					],
																					"functionName": {
																						"name": "mstore",
																						"nodeType": "YulIdentifier",
																						"src": "2750:6:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2750:26:14"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "2750:26:14"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2947:4:14",
																							"type": "",
																							"value": "0x40"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "mc",
																											"nodeType": "YulIdentifier",
																											"src": "2961:2:14"
																										},
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "2965:2:14",
																											"type": "",
																											"value": "31"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "2957:3:14"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "2957:11:14"
																								},
																								{
																									"arguments": [
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "2974:2:14",
																											"type": "",
																											"value": "31"
																										}
																									],
																									"functionName": {
																										"name": "not",
																										"nodeType": "YulIdentifier",
																										"src": "2970:3:14"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "2970:7:14"
																								}
																							],
																							"functionName": {
																								"name": "and",
																								"nodeType": "YulIdentifier",
																								"src": "2953:3:14"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "2953:25:14"
																						}
																					],
																					"functionName": {
																						"name": "mstore",
																						"nodeType": "YulIdentifier",
																						"src": "2940:6:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2940:39:14"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "2940:39:14"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "861:2137:14",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "866:1:14",
																		"type": "",
																		"value": "0"
																	}
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "3112:322:14",
																		"statements": [
																			{
																				"nodeType": "YulAssignment",
																				"src": "3135:24:14",
																				"value": {
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "3154:4:14",
																							"type": "",
																							"value": "0x40"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "3148:5:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3148:11:14"
																				},
																				"variableNames": [
																					{
																						"name": "tempBytes",
																						"nodeType": "YulIdentifier",
																						"src": "3135:9:14"
																					}
																				]
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "tempBytes",
																							"nodeType": "YulIdentifier",
																							"src": "3344:9:14"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "3355:1:14",
																							"type": "",
																							"value": "0"
																						}
																					],
																					"functionName": {
																						"name": "mstore",
																						"nodeType": "YulIdentifier",
																						"src": "3337:6:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3337:20:14"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "3337:20:14"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "3388:4:14",
																							"type": "",
																							"value": "0x40"
																						},
																						{
																							"arguments": [
																								{
																									"name": "tempBytes",
																									"nodeType": "YulIdentifier",
																									"src": "3398:9:14"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "3409:4:14",
																									"type": "",
																									"value": "0x20"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "3394:3:14"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "3394:20:14"
																						}
																					],
																					"functionName": {
																						"name": "mstore",
																						"nodeType": "YulIdentifier",
																						"src": "3381:6:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3381:34:14"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "3381:34:14"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "3104:330:14",
																	"value": "default"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"name": "_length",
																		"nodeType": "YulIdentifier",
																		"src": "835:7:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "828:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "828:15:14"
															},
															"nodeType": "YulSwitch",
															"src": "821:2613:14"
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1638,
														"isOffset": false,
														"isSlot": false,
														"src": "2446:6:14",
														"valueSize": 1
													},
													{
														"declaration": 1642,
														"isOffset": false,
														"isSlot": false,
														"src": "1754:7:14",
														"valueSize": 1
													},
													{
														"declaration": 1642,
														"isOffset": false,
														"isSlot": false,
														"src": "2224:7:14",
														"valueSize": 1
													},
													{
														"declaration": 1642,
														"isOffset": false,
														"isSlot": false,
														"src": "2768:7:14",
														"valueSize": 1
													},
													{
														"declaration": 1642,
														"isOffset": false,
														"isSlot": false,
														"src": "835:7:14",
														"valueSize": 1
													},
													{
														"declaration": 1640,
														"isOffset": false,
														"isSlot": false,
														"src": "2497:6:14",
														"valueSize": 1
													},
													{
														"declaration": 1676,
														"isOffset": false,
														"isSlot": false,
														"src": "1039:9:14",
														"valueSize": 1
													},
													{
														"declaration": 1676,
														"isOffset": false,
														"isSlot": false,
														"src": "2131:9:14",
														"valueSize": 1
													},
													{
														"declaration": 1676,
														"isOffset": false,
														"isSlot": false,
														"src": "2757:9:14",
														"valueSize": 1
													},
													{
														"declaration": 1676,
														"isOffset": false,
														"isSlot": false,
														"src": "3135:9:14",
														"valueSize": 1
													},
													{
														"declaration": 1676,
														"isOffset": false,
														"isSlot": false,
														"src": "3344:9:14",
														"valueSize": 1
													},
													{
														"declaration": 1676,
														"isOffset": false,
														"isSlot": false,
														"src": "3398:9:14",
														"valueSize": 1
													}
												],
												"id": 1678,
												"nodeType": "InlineAssembly",
												"src": "797:2648:14"
											},
											{
												"expression": {
													"id": 1679,
													"name": "tempBytes",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1676,
													"src": "3464:9:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1646,
												"id": 1680,
												"nodeType": "Return",
												"src": "3457:16:14"
											}
										]
									},
									"id": 1682,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "slice",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1643,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1638,
												"mutability": "mutable",
												"name": "_bytes",
												"nodeType": "VariableDeclaration",
												"scope": 1682,
												"src": "435:19:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1637,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "435:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1640,
												"mutability": "mutable",
												"name": "_start",
												"nodeType": "VariableDeclaration",
												"scope": 1682,
												"src": "465:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1639,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "465:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1642,
												"mutability": "mutable",
												"name": "_length",
												"nodeType": "VariableDeclaration",
												"scope": 1682,
												"src": "490:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1641,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "490:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "424:88:14"
									},
									"returnParameters": {
										"id": 1646,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1645,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1682,
												"src": "536:12:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1644,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "536:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "535:14:14"
									},
									"scope": 1753,
									"src": "410:3071:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1716,
										"nodeType": "Block",
										"src": "3577:338:14",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1696,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1694,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1692,
																	"name": "_start",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1686,
																	"src": "3596:6:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "3230",
																	"id": 1693,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3605:2:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_20_by_1",
																		"typeString": "int_const 20"
																	},
																	"value": "20"
																},
																"src": "3596:11:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1695,
																"name": "_start",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1686,
																"src": "3611:6:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3596:21:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "746f416464726573735f6f766572666c6f77",
															"id": 1697,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3619:20:14",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f71efb0937d5d9d75bbebe9d7207dad811fd47ced903ea9404d5e8d77eb17a95",
																"typeString": "literal_string \"toAddress_overflow\""
															},
															"value": "toAddress_overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f71efb0937d5d9d75bbebe9d7207dad811fd47ced903ea9404d5e8d77eb17a95",
																"typeString": "literal_string \"toAddress_overflow\""
															}
														],
														"id": 1691,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3588:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1698,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3588:52:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1699,
												"nodeType": "ExpressionStatement",
												"src": "3588:52:14"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1706,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1701,
																	"name": "_bytes",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1684,
																	"src": "3659:6:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																"id": 1702,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "3659:13:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1705,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1703,
																	"name": "_start",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1686,
																	"src": "3676:6:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "3230",
																	"id": 1704,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3685:2:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_20_by_1",
																		"typeString": "int_const 20"
																	},
																	"value": "20"
																},
																"src": "3676:11:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3659:28:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "746f416464726573735f6f75744f66426f756e6473",
															"id": 1707,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3689:23:14",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9f688071e1df0f70b63e3651005878331be1fe9591d6cfb3187cb52a13439e5d",
																"typeString": "literal_string \"toAddress_outOfBounds\""
															},
															"value": "toAddress_outOfBounds"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9f688071e1df0f70b63e3651005878331be1fe9591d6cfb3187cb52a13439e5d",
																"typeString": "literal_string \"toAddress_outOfBounds\""
															}
														],
														"id": 1700,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3651:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1708,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3651:62:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1709,
												"nodeType": "ExpressionStatement",
												"src": "3651:62:14"
											},
											{
												"assignments": [
													1711
												],
												"declarations": [
													{
														"constant": false,
														"id": 1711,
														"mutability": "mutable",
														"name": "tempAddress",
														"nodeType": "VariableDeclaration",
														"scope": 1716,
														"src": "3724:19:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1710,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3724:7:14",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1712,
												"nodeType": "VariableDeclarationStatement",
												"src": "3724:19:14"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "3765:112:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3780:86:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "_bytes",
																								"nodeType": "YulIdentifier",
																								"src": "3813:6:14"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3821:4:14",
																								"type": "",
																								"value": "0x20"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "3809:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3809:17:14"
																					},
																					{
																						"name": "_start",
																						"nodeType": "YulIdentifier",
																						"src": "3828:6:14"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3805:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3805:30:14"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "3799:5:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3799:37:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3838:27:14",
																		"type": "",
																		"value": "0x1000000000000000000000000"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "3795:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3795:71:14"
															},
															"variableNames": [
																{
																	"name": "tempAddress",
																	"nodeType": "YulIdentifier",
																	"src": "3780:11:14"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1684,
														"isOffset": false,
														"isSlot": false,
														"src": "3813:6:14",
														"valueSize": 1
													},
													{
														"declaration": 1686,
														"isOffset": false,
														"isSlot": false,
														"src": "3828:6:14",
														"valueSize": 1
													},
													{
														"declaration": 1711,
														"isOffset": false,
														"isSlot": false,
														"src": "3780:11:14",
														"valueSize": 1
													}
												],
												"id": 1713,
												"nodeType": "InlineAssembly",
												"src": "3756:121:14"
											},
											{
												"expression": {
													"id": 1714,
													"name": "tempAddress",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1711,
													"src": "3896:11:14",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1690,
												"id": 1715,
												"nodeType": "Return",
												"src": "3889:18:14"
											}
										]
									},
									"id": 1717,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toAddress",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1687,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1684,
												"mutability": "mutable",
												"name": "_bytes",
												"nodeType": "VariableDeclaration",
												"scope": 1717,
												"src": "3508:19:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1683,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3508:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1686,
												"mutability": "mutable",
												"name": "_start",
												"nodeType": "VariableDeclaration",
												"scope": 1717,
												"src": "3529:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1685,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3529:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3507:37:14"
									},
									"returnParameters": {
										"id": 1690,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1689,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1717,
												"src": "3568:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1688,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3568:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3567:9:14"
									},
									"scope": 1753,
									"src": "3489:426:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1751,
										"nodeType": "Block",
										"src": "4009:289:14",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1731,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1729,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1727,
																	"name": "_start",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1721,
																	"src": "4028:6:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "33",
																	"id": 1728,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4037:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_3_by_1",
																		"typeString": "int_const 3"
																	},
																	"value": "3"
																},
																"src": "4028:10:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1730,
																"name": "_start",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1721,
																"src": "4042:6:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4028:20:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "746f55696e7432345f6f766572666c6f77",
															"id": 1732,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4050:19:14",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_428a8ba368fc474210479d5009a3c2ddaf9d762393b1b3cd3cf1b440d48791c5",
																"typeString": "literal_string \"toUint24_overflow\""
															},
															"value": "toUint24_overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_428a8ba368fc474210479d5009a3c2ddaf9d762393b1b3cd3cf1b440d48791c5",
																"typeString": "literal_string \"toUint24_overflow\""
															}
														],
														"id": 1726,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4020:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1733,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4020:50:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1734,
												"nodeType": "ExpressionStatement",
												"src": "4020:50:14"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1741,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1736,
																	"name": "_bytes",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1719,
																	"src": "4089:6:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																"id": 1737,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "4089:13:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1740,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1738,
																	"name": "_start",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1721,
																	"src": "4106:6:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "33",
																	"id": 1739,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4115:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_3_by_1",
																		"typeString": "int_const 3"
																	},
																	"value": "3"
																},
																"src": "4106:10:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4089:27:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "746f55696e7432345f6f75744f66426f756e6473",
															"id": 1742,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4118:22:14",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_92c5fac6e5cb4f75ffccd9c8f373ae2e2c333a8b9c2fdc616c52c36fa31575dc",
																"typeString": "literal_string \"toUint24_outOfBounds\""
															},
															"value": "toUint24_outOfBounds"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_92c5fac6e5cb4f75ffccd9c8f373ae2e2c333a8b9c2fdc616c52c36fa31575dc",
																"typeString": "literal_string \"toUint24_outOfBounds\""
															}
														],
														"id": 1735,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4081:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1743,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4081:60:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1744,
												"nodeType": "ExpressionStatement",
												"src": "4081:60:14"
											},
											{
												"assignments": [
													1746
												],
												"declarations": [
													{
														"constant": false,
														"id": 1746,
														"mutability": "mutable",
														"name": "tempUint",
														"nodeType": "VariableDeclaration",
														"scope": 1751,
														"src": "4152:15:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint24",
															"typeString": "uint24"
														},
														"typeName": {
															"id": 1745,
															"name": "uint24",
															"nodeType": "ElementaryTypeName",
															"src": "4152:6:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1747,
												"nodeType": "VariableDeclarationStatement",
												"src": "4152:15:14"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "4189:74:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4204:48:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_bytes",
																						"nodeType": "YulIdentifier",
																						"src": "4230:6:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4238:3:14",
																						"type": "",
																						"value": "0x3"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4226:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4226:16:14"
																			},
																			{
																				"name": "_start",
																				"nodeType": "YulIdentifier",
																				"src": "4244:6:14"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4222:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4222:29:14"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4216:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4216:36:14"
															},
															"variableNames": [
																{
																	"name": "tempUint",
																	"nodeType": "YulIdentifier",
																	"src": "4204:8:14"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1719,
														"isOffset": false,
														"isSlot": false,
														"src": "4230:6:14",
														"valueSize": 1
													},
													{
														"declaration": 1721,
														"isOffset": false,
														"isSlot": false,
														"src": "4244:6:14",
														"valueSize": 1
													},
													{
														"declaration": 1746,
														"isOffset": false,
														"isSlot": false,
														"src": "4204:8:14",
														"valueSize": 1
													}
												],
												"id": 1748,
												"nodeType": "InlineAssembly",
												"src": "4180:83:14"
											},
											{
												"expression": {
													"id": 1749,
													"name": "tempUint",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1746,
													"src": "4282:8:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"functionReturnParameters": 1725,
												"id": 1750,
												"nodeType": "Return",
												"src": "4275:15:14"
											}
										]
									},
									"id": 1752,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toUint24",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1722,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1719,
												"mutability": "mutable",
												"name": "_bytes",
												"nodeType": "VariableDeclaration",
												"scope": 1752,
												"src": "3941:19:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1718,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3941:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1721,
												"mutability": "mutable",
												"name": "_start",
												"nodeType": "VariableDeclaration",
												"scope": 1752,
												"src": "3962:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1720,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3962:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3940:37:14"
									},
									"returnParameters": {
										"id": 1725,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1724,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1752,
												"src": "4001:6:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1723,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "4001:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4000:8:14"
									},
									"scope": 1753,
									"src": "3923:375:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1754,
							"src": "386:3915:14"
						}
					],
					"src": "351:3952:14"
				},
				"id": 14
			},
			"contracts/libraries/CallbackValidation.sol": {
				"ast": {
					"absolutePath": "contracts/libraries/CallbackValidation.sol",
					"exportedSymbols": {
						"CallbackValidation": [
							1815
						],
						"IUniswapV3Pool": [
							21
						],
						"IUniswapV3PoolActions": [
							131
						],
						"IUniswapV3PoolDerivedState": [
							162
						],
						"IUniswapV3PoolEvents": [
							281
						],
						"IUniswapV3PoolImmutables": [
							321
						],
						"IUniswapV3PoolOwnerActions": [
							347
						],
						"IUniswapV3PoolState": [
							455
						],
						"PoolAddress": [
							2040
						]
					},
					"id": 1816,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1755,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "46:23:15"
						},
						{
							"absolutePath": "@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/IUniswapV3Pool.sol",
							"file": "@thinkincoin-libs/uniswap-v3-core/contracts/interfaces/IUniswapV3Pool.sol",
							"id": 1756,
							"nodeType": "ImportDirective",
							"scope": 1816,
							"sourceUnit": 22,
							"src": "73:66:15",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/libraries/PoolAddress.sol",
							"file": "./PoolAddress.sol",
							"id": 1757,
							"nodeType": "ImportDirective",
							"scope": 1816,
							"sourceUnit": 2041,
							"src": "141:27:15",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1758,
								"nodeType": "StructuredDocumentation",
								"src": "172:69:15",
								"text": "@notice Provides validation for callbacks from Uniswap V3 Pools"
							},
							"fullyImplemented": true,
							"id": 1815,
							"linearizedBaseContracts": [
								1815
							],
							"name": "CallbackValidation",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1782,
										"nodeType": "Block",
										"src": "869:94:15",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1773,
															"name": "factory",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1761,
															"src": "902:7:15",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1776,
																	"name": "tokenA",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1763,
																	"src": "934:6:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1777,
																	"name": "tokenB",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1765,
																	"src": "942:6:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1778,
																	"name": "fee",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1767,
																	"src": "950:3:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint24",
																		"typeString": "uint24"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint24",
																		"typeString": "uint24"
																	}
																],
																"expression": {
																	"id": 1774,
																	"name": "PoolAddress",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2040,
																	"src": "911:11:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_PoolAddress_$2040_$",
																		"typeString": "type(library PoolAddress)"
																	}
																},
																"id": 1775,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "getPoolKey",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1992,
																"src": "911:22:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_address_$_t_address_$_t_uint24_$returns$_t_struct$_PoolKey_$1961_memory_ptr_$",
																	"typeString": "function (address,address,uint24) pure returns (struct PoolAddress.PoolKey memory)"
																}
															},
															"id": 1779,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "911:43:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_PoolKey_$1961_memory_ptr",
																"typeString": "struct PoolAddress.PoolKey memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_struct$_PoolKey_$1961_memory_ptr",
																"typeString": "struct PoolAddress.PoolKey memory"
															}
														],
														"id": 1772,
														"name": "verifyCallback",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1783,
															1814
														],
														"referencedDeclaration": 1814,
														"src": "887:14:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_struct$_PoolKey_$1961_memory_ptr_$returns$_t_contract$_IUniswapV3Pool_$21_$",
															"typeString": "function (address,struct PoolAddress.PoolKey memory) view returns (contract IUniswapV3Pool)"
														}
													},
													"id": 1780,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "887:68:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IUniswapV3Pool_$21",
														"typeString": "contract IUniswapV3Pool"
													}
												},
												"functionReturnParameters": 1771,
												"id": 1781,
												"nodeType": "Return",
												"src": "880:75:15"
											}
										]
									},
									"documentation": {
										"id": 1759,
										"nodeType": "StructuredDocumentation",
										"src": "275:416:15",
										"text": "@notice Returns the address of a valid Uniswap V3 Pool\n @param factory The contract address of the Uniswap V3 factory\n @param tokenA The contract address of either token0 or token1\n @param tokenB The contract address of the other token\n @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n @return pool The V3 pool contract address"
									},
									"id": 1783,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallback",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1768,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1761,
												"mutability": "mutable",
												"name": "factory",
												"nodeType": "VariableDeclaration",
												"scope": 1783,
												"src": "731:15:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1760,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "731:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1763,
												"mutability": "mutable",
												"name": "tokenA",
												"nodeType": "VariableDeclaration",
												"scope": 1783,
												"src": "757:14:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1762,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "757:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1765,
												"mutability": "mutable",
												"name": "tokenB",
												"nodeType": "VariableDeclaration",
												"scope": 1783,
												"src": "782:14:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1764,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "782:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1767,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 1783,
												"src": "807:10:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1766,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "807:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "720:104:15"
									},
									"returnParameters": {
										"id": 1771,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1770,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 1783,
												"src": "848:19:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IUniswapV3Pool_$21",
													"typeString": "contract IUniswapV3Pool"
												},
												"typeName": {
													"id": 1769,
													"name": "IUniswapV3Pool",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 21,
													"src": "848:14:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IUniswapV3Pool_$21",
														"typeString": "contract IUniswapV3Pool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "847:21:15"
									},
									"scope": 1815,
									"src": "697:266:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1813,
										"nodeType": "Block",
										"src": "1369:133:15",
										"statements": [
											{
												"expression": {
													"id": 1801,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1793,
														"name": "pool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1791,
														"src": "1380:4:15",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IUniswapV3Pool_$21",
															"typeString": "contract IUniswapV3Pool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 1797,
																		"name": "factory",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1786,
																		"src": "1429:7:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1798,
																		"name": "poolKey",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1788,
																		"src": "1438:7:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_PoolKey_$1961_memory_ptr",
																			"typeString": "struct PoolAddress.PoolKey memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_struct$_PoolKey_$1961_memory_ptr",
																			"typeString": "struct PoolAddress.PoolKey memory"
																		}
																	],
																	"expression": {
																		"id": 1795,
																		"name": "PoolAddress",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2040,
																		"src": "1402:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_PoolAddress_$2040_$",
																			"typeString": "type(library PoolAddress)"
																		}
																	},
																	"id": 1796,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "computeAddress",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2039,
																	"src": "1402:26:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_address_$_t_struct$_PoolKey_$1961_memory_ptr_$returns$_t_address_$",
																		"typeString": "function (address,struct PoolAddress.PoolKey memory) pure returns (address)"
																	}
																},
																"id": 1799,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1402:44:15",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 1794,
															"name": "IUniswapV3Pool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 21,
															"src": "1387:14:15",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IUniswapV3Pool_$21_$",
																"typeString": "type(contract IUniswapV3Pool)"
															}
														},
														"id": 1800,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1387:60:15",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IUniswapV3Pool_$21",
															"typeString": "contract IUniswapV3Pool"
														}
													},
													"src": "1380:67:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IUniswapV3Pool_$21",
														"typeString": "contract IUniswapV3Pool"
													}
												},
												"id": 1802,
												"nodeType": "ExpressionStatement",
												"src": "1380:67:15"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1810,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1804,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1466:3:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1805,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1466:10:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 1808,
																		"name": "pool",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1791,
																		"src": "1488:4:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IUniswapV3Pool_$21",
																			"typeString": "contract IUniswapV3Pool"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IUniswapV3Pool_$21",
																			"typeString": "contract IUniswapV3Pool"
																		}
																	],
																	"id": 1807,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1480:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1806,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "1480:7:15",
																		"typeDescriptions": {}
																	}
																},
																"id": 1809,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1480:13:15",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1466:27:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1803,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1458:7:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1811,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1458:36:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1812,
												"nodeType": "ExpressionStatement",
												"src": "1458:36:15"
											}
										]
									},
									"documentation": {
										"id": 1784,
										"nodeType": "StructuredDocumentation",
										"src": "971:239:15",
										"text": "@notice Returns the address of a valid Uniswap V3 Pool\n @param factory The contract address of the Uniswap V3 factory\n @param poolKey The identifying key of the V3 pool\n @return pool The V3 pool contract address"
									},
									"id": 1814,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallback",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1789,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1786,
												"mutability": "mutable",
												"name": "factory",
												"nodeType": "VariableDeclaration",
												"scope": 1814,
												"src": "1240:15:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1785,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1240:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1788,
												"mutability": "mutable",
												"name": "poolKey",
												"nodeType": "VariableDeclaration",
												"scope": 1814,
												"src": "1257:34:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PoolKey_$1961_memory_ptr",
													"typeString": "struct PoolAddress.PoolKey"
												},
												"typeName": {
													"id": 1787,
													"name": "PoolAddress.PoolKey",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1961,
													"src": "1257:19:15",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolKey_$1961_storage_ptr",
														"typeString": "struct PoolAddress.PoolKey"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1239:53:15"
									},
									"returnParameters": {
										"id": 1792,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1791,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 1814,
												"src": "1343:19:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IUniswapV3Pool_$21",
													"typeString": "contract IUniswapV3Pool"
												},
												"typeName": {
													"id": 1790,
													"name": "IUniswapV3Pool",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 21,
													"src": "1343:14:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IUniswapV3Pool_$21",
														"typeString": "contract IUniswapV3Pool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1342:21:15"
									},
									"scope": 1815,
									"src": "1216:286:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1816,
							"src": "241:1264:15"
						}
					],
					"src": "46:1461:15"
				},
				"id": 15
			},
			"contracts/libraries/Path.sol": {
				"ast": {
					"absolutePath": "contracts/libraries/Path.sol",
					"exportedSymbols": {
						"BytesLib": [
							1753
						],
						"Path": [
							1948
						]
					},
					"id": 1949,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1817,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "46:24:16"
						},
						{
							"absolutePath": "contracts/libraries/BytesLib.sol",
							"file": "./BytesLib.sol",
							"id": 1818,
							"nodeType": "ImportDirective",
							"scope": 1949,
							"sourceUnit": 1754,
							"src": "74:24:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1819,
								"nodeType": "StructuredDocumentation",
								"src": "102:68:16",
								"text": "@title Functions for manipulating path data for multihop swaps"
							},
							"fullyImplemented": true,
							"id": 1948,
							"linearizedBaseContracts": [
								1948
							],
							"name": "Path",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 1822,
									"libraryName": {
										"id": 1820,
										"name": "BytesLib",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1753,
										"src": "196:8:16",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_BytesLib_$1753",
											"typeString": "library BytesLib"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "190:25:16",
									"typeName": {
										"id": 1821,
										"name": "bytes",
										"nodeType": "ElementaryTypeName",
										"src": "209:5:16",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes_storage_ptr",
											"typeString": "bytes"
										}
									}
								},
								{
									"constant": true,
									"documentation": {
										"id": 1823,
										"nodeType": "StructuredDocumentation",
										"src": "223:48:16",
										"text": "@dev The length of the bytes encoded address"
									},
									"id": 1826,
									"mutability": "constant",
									"name": "ADDR_SIZE",
									"nodeType": "VariableDeclaration",
									"scope": 1948,
									"src": "277:39:16",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1824,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "277:7:16",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3230",
										"id": 1825,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "314:2:16",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_20_by_1",
											"typeString": "int_const 20"
										},
										"value": "20"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"documentation": {
										"id": 1827,
										"nodeType": "StructuredDocumentation",
										"src": "323:44:16",
										"text": "@dev The length of the bytes encoded fee"
									},
									"id": 1830,
									"mutability": "constant",
									"name": "FEE_SIZE",
									"nodeType": "VariableDeclaration",
									"scope": 1948,
									"src": "373:37:16",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1828,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "373:7:16",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "33",
										"id": 1829,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "409:1:16",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_3_by_1",
											"typeString": "int_const 3"
										},
										"value": "3"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"documentation": {
										"id": 1831,
										"nodeType": "StructuredDocumentation",
										"src": "419:58:16",
										"text": "@dev The offset of a single token address and pool fee"
									},
									"id": 1836,
									"mutability": "constant",
									"name": "NEXT_OFFSET",
									"nodeType": "VariableDeclaration",
									"scope": 1948,
									"src": "483:59:16",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1832,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "483:7:16",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										},
										"id": 1835,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"id": 1833,
											"name": "ADDR_SIZE",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 1826,
											"src": "522:9:16",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "BinaryOperation",
										"operator": "+",
										"rightExpression": {
											"id": 1834,
											"name": "FEE_SIZE",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 1830,
											"src": "534:8:16",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"src": "522:20:16",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"documentation": {
										"id": 1837,
										"nodeType": "StructuredDocumentation",
										"src": "549:42:16",
										"text": "@dev The offset of an encoded pool key"
									},
									"id": 1842,
									"mutability": "constant",
									"name": "POP_OFFSET",
									"nodeType": "VariableDeclaration",
									"scope": 1948,
									"src": "597:61:16",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1838,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "597:7:16",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										},
										"id": 1841,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"id": 1839,
											"name": "NEXT_OFFSET",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 1836,
											"src": "635:11:16",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "BinaryOperation",
										"operator": "+",
										"rightExpression": {
											"id": 1840,
											"name": "ADDR_SIZE",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 1826,
											"src": "649:9:16",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"src": "635:23:16",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"documentation": {
										"id": 1843,
										"nodeType": "StructuredDocumentation",
										"src": "665:72:16",
										"text": "@dev The minimum length of an encoding that contains 2 or more pools"
									},
									"id": 1848,
									"mutability": "constant",
									"name": "MULTIPLE_POOLS_MIN_LENGTH",
									"nodeType": "VariableDeclaration",
									"scope": 1948,
									"src": "743:77:16",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1844,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "743:7:16",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										},
										"id": 1847,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"id": 1845,
											"name": "POP_OFFSET",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 1842,
											"src": "796:10:16",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "BinaryOperation",
										"operator": "+",
										"rightExpression": {
											"id": 1846,
											"name": "NEXT_OFFSET",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 1836,
											"src": "809:11:16",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"src": "796:24:16",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1861,
										"nodeType": "Block",
										"src": "1090:66:16",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1859,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1856,
															"name": "path",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1851,
															"src": "1108:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1857,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1108:11:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"id": 1858,
														"name": "MULTIPLE_POOLS_MIN_LENGTH",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1848,
														"src": "1123:25:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1108:40:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1855,
												"id": 1860,
												"nodeType": "Return",
												"src": "1101:47:16"
											}
										]
									},
									"documentation": {
										"id": 1849,
										"nodeType": "StructuredDocumentation",
										"src": "829:181:16",
										"text": "@notice Returns true iff the path contains two or more pools\n @param path The encoded swap path\n @return True if path contains two or more pools, otherwise false"
									},
									"id": 1862,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "hasMultiplePools",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1852,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1851,
												"mutability": "mutable",
												"name": "path",
												"nodeType": "VariableDeclaration",
												"scope": 1862,
												"src": "1042:17:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1850,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1042:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1041:19:16"
									},
									"returnParameters": {
										"id": 1855,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1854,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1862,
												"src": "1084:4:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1853,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1084:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1083:6:16"
									},
									"scope": 1948,
									"src": "1016:140:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1879,
										"nodeType": "Block",
										"src": "1382:169:16",
										"statements": [
											{
												"expression": {
													"components": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1876,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1873,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"id": 1870,
																				"name": "path",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1865,
																				"src": "1504:4:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"id": 1871,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "length",
																			"nodeType": "MemberAccess",
																			"src": "1504:11:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 1872,
																			"name": "ADDR_SIZE",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1826,
																			"src": "1518:9:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "1504:23:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1874,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1503:25:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 1875,
																"name": "NEXT_OFFSET",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1836,
																"src": "1531:11:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1503:39:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 1877,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "1502:41:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1869,
												"id": 1878,
												"nodeType": "Return",
												"src": "1495:48:16"
											}
										]
									},
									"documentation": {
										"id": 1863,
										"nodeType": "StructuredDocumentation",
										"src": "1164:143:16",
										"text": "@notice Returns the number of pools in the path\n @param path The encoded swap path\n @return The number of pools in the path"
									},
									"id": 1880,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "numPools",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1866,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1865,
												"mutability": "mutable",
												"name": "path",
												"nodeType": "VariableDeclaration",
												"scope": 1880,
												"src": "1331:17:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1864,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1331:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1330:19:16"
									},
									"returnParameters": {
										"id": 1869,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1868,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1880,
												"src": "1373:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1867,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1373:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1372:9:16"
									},
									"scope": 1948,
									"src": "1313:238:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1913,
										"nodeType": "Block",
										"src": "2013:133:16",
										"statements": [
											{
												"expression": {
													"id": 1897,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1892,
														"name": "tokenA",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1886,
														"src": "2024:6:16",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1895,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2048:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"expression": {
																"id": 1893,
																"name": "path",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1883,
																"src": "2033:4:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 1894,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "toAddress",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1717,
															"src": "2033:14:16",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_address_$bound_to$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory,uint256) pure returns (address)"
															}
														},
														"id": 1896,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2033:17:16",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2024:26:16",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1898,
												"nodeType": "ExpressionStatement",
												"src": "2024:26:16"
											},
											{
												"expression": {
													"id": 1904,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1899,
														"name": "fee",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1890,
														"src": "2061:3:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint24",
															"typeString": "uint24"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1902,
																"name": "ADDR_SIZE",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1826,
																"src": "2081:9:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 1900,
																"name": "path",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1883,
																"src": "2067:4:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 1901,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "toUint24",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1752,
															"src": "2067:13:16",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint24_$bound_to$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory,uint256) pure returns (uint24)"
															}
														},
														"id": 1903,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2067:24:16",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint24",
															"typeString": "uint24"
														}
													},
													"src": "2061:30:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"id": 1905,
												"nodeType": "ExpressionStatement",
												"src": "2061:30:16"
											},
											{
												"expression": {
													"id": 1911,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1906,
														"name": "tokenB",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1888,
														"src": "2102:6:16",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1909,
																"name": "NEXT_OFFSET",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1836,
																"src": "2126:11:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 1907,
																"name": "path",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1883,
																"src": "2111:4:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 1908,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "toAddress",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1717,
															"src": "2111:14:16",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_address_$bound_to$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory,uint256) pure returns (address)"
															}
														},
														"id": 1910,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2111:27:16",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2102:36:16",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1912,
												"nodeType": "ExpressionStatement",
												"src": "2102:36:16"
											}
										]
									},
									"documentation": {
										"id": 1881,
										"nodeType": "StructuredDocumentation",
										"src": "1559:255:16",
										"text": "@notice Decodes the first pool in path\n @param path The bytes encoded swap path\n @return tokenA The first token of the given pool\n @return tokenB The second token of the given pool\n @return fee The fee level of the pool"
									},
									"id": 1914,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decodeFirstPool",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1884,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1883,
												"mutability": "mutable",
												"name": "path",
												"nodeType": "VariableDeclaration",
												"scope": 1914,
												"src": "1845:17:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1882,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1845:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1844:19:16"
									},
									"returnParameters": {
										"id": 1891,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1886,
												"mutability": "mutable",
												"name": "tokenA",
												"nodeType": "VariableDeclaration",
												"scope": 1914,
												"src": "1928:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1885,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1928:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1888,
												"mutability": "mutable",
												"name": "tokenB",
												"nodeType": "VariableDeclaration",
												"scope": 1914,
												"src": "1957:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1887,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1957:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1890,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 1914,
												"src": "1986:10:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1889,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "1986:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1913:94:16"
									},
									"scope": 1948,
									"src": "1820:326:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1928,
										"nodeType": "Block",
										"src": "2455:51:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"hexValue": "30",
															"id": 1924,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2484:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 1925,
															"name": "POP_OFFSET",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1842,
															"src": "2487:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1922,
															"name": "path",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1917,
															"src": "2473:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1923,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "slice",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1682,
														"src": "2473:10:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory,uint256,uint256) pure returns (bytes memory)"
														}
													},
													"id": 1926,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2473:25:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1921,
												"id": 1927,
												"nodeType": "Return",
												"src": "2466:32:16"
											}
										]
									},
									"documentation": {
										"id": 1915,
										"nodeType": "StructuredDocumentation",
										"src": "2154:217:16",
										"text": "@notice Gets the segment corresponding to the first pool in the path\n @param path The bytes encoded swap path\n @return The segment containing all data necessary to target the first pool in the path"
									},
									"id": 1929,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getFirstPool",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1918,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1917,
												"mutability": "mutable",
												"name": "path",
												"nodeType": "VariableDeclaration",
												"scope": 1929,
												"src": "2399:17:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1916,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2399:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2398:19:16"
									},
									"returnParameters": {
										"id": 1921,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1920,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1929,
												"src": "2441:12:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1919,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2441:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2440:14:16"
									},
									"scope": 1948,
									"src": "2377:129:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1946,
										"nodeType": "Block",
										"src": "2775:76:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1939,
															"name": "NEXT_OFFSET",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1836,
															"src": "2804:11:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1943,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1940,
																	"name": "path",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1932,
																	"src": "2817:4:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																"id": 1941,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "2817:11:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 1942,
																"name": "NEXT_OFFSET",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1836,
																"src": "2831:11:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2817:25:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1937,
															"name": "path",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1932,
															"src": "2793:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1938,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "slice",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1682,
														"src": "2793:10:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$bound_to$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory,uint256,uint256) pure returns (bytes memory)"
														}
													},
													"id": 1944,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2793:50:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1936,
												"id": 1945,
												"nodeType": "Return",
												"src": "2786:57:16"
											}
										]
									},
									"documentation": {
										"id": 1930,
										"nodeType": "StructuredDocumentation",
										"src": "2514:180:16",
										"text": "@notice Skips a token + fee element from the buffer and returns the remainder\n @param path The swap path\n @return The remaining token + fee elements in the path"
									},
									"id": 1947,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "skipToken",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1933,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1932,
												"mutability": "mutable",
												"name": "path",
												"nodeType": "VariableDeclaration",
												"scope": 1947,
												"src": "2719:17:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1931,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2719:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2718:19:16"
									},
									"returnParameters": {
										"id": 1936,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1935,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1947,
												"src": "2761:12:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1934,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2761:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2760:14:16"
									},
									"scope": 1948,
									"src": "2700:151:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1949,
							"src": "170:2684:16"
						}
					],
					"src": "46:2810:16"
				},
				"id": 16
			},
			"contracts/libraries/PoolAddress.sol": {
				"ast": {
					"absolutePath": "contracts/libraries/PoolAddress.sol",
					"exportedSymbols": {
						"PoolAddress": [
							2040
						]
					},
					"id": 2041,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1950,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "46:24:17"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1951,
								"nodeType": "StructuredDocumentation",
								"src": "74:97:17",
								"text": "@title Provides functions for deriving a pool address from the factory, tokens, and the fee"
							},
							"fullyImplemented": true,
							"id": 2040,
							"linearizedBaseContracts": [
								2040
							],
							"name": "PoolAddress",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1954,
									"mutability": "constant",
									"name": "POOL_INIT_CODE_HASH",
									"nodeType": "VariableDeclaration",
									"scope": 2040,
									"src": "198:114:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1952,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "198:7:17",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307865333466313939623139623262346634376636383434323631396435353535323764323434663738613332393765613839333235663834336638376238623534",
										"id": 1953,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "246:66:17",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_102814774271675688723325049954498779091328469440286648861889194717372678376276_by_1",
											"typeString": "int_const 1028...(70 digits omitted)...6276"
										},
										"value": "0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54"
									},
									"visibility": "internal"
								},
								{
									"canonicalName": "PoolAddress.PoolKey",
									"id": 1961,
									"members": [
										{
											"constant": false,
											"id": 1956,
											"mutability": "mutable",
											"name": "token0",
											"nodeType": "VariableDeclaration",
											"scope": 1961,
											"src": "396:14:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1955,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "396:7:17",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1958,
											"mutability": "mutable",
											"name": "token1",
											"nodeType": "VariableDeclaration",
											"scope": 1961,
											"src": "421:14:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1957,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "421:7:17",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1960,
											"mutability": "mutable",
											"name": "fee",
											"nodeType": "VariableDeclaration",
											"scope": 1961,
											"src": "446:10:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint24",
												"typeString": "uint24"
											},
											"typeName": {
												"id": 1959,
												"name": "uint24",
												"nodeType": "ElementaryTypeName",
												"src": "446:6:17",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "PoolKey",
									"nodeType": "StructDefinition",
									"scope": 2040,
									"src": "370:94:17",
									"visibility": "public"
								},
								{
									"body": {
										"id": 1991,
										"nodeType": "Block",
										"src": "940:144:17",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1975,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1973,
														"name": "tokenA",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1964,
														"src": "955:6:17",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 1974,
														"name": "tokenB",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1966,
														"src": "964:6:17",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "955:15:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1984,
												"nodeType": "IfStatement",
												"src": "951:56:17",
												"trueBody": {
													"expression": {
														"id": 1982,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"components": [
																{
																	"id": 1976,
																	"name": "tokenA",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1964,
																	"src": "973:6:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1977,
																	"name": "tokenB",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1966,
																	"src": "981:6:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"id": 1978,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": true,
															"nodeType": "TupleExpression",
															"src": "972:16:17",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_address_$",
																"typeString": "tuple(address,address)"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"components": [
																{
																	"id": 1979,
																	"name": "tokenB",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1966,
																	"src": "992:6:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1980,
																	"name": "tokenA",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1964,
																	"src": "1000:6:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"id": 1981,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "991:16:17",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_address_$",
																"typeString": "tuple(address,address)"
															}
														},
														"src": "972:35:17",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1983,
													"nodeType": "ExpressionStatement",
													"src": "972:35:17"
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1986,
															"name": "tokenA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1964,
															"src": "1042:6:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1987,
															"name": "tokenB",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1966,
															"src": "1058:6:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1988,
															"name": "fee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1968,
															"src": "1071:3:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														],
														"id": 1985,
														"name": "PoolKey",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1961,
														"src": "1025:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_PoolKey_$1961_storage_ptr_$",
															"typeString": "type(struct PoolAddress.PoolKey storage pointer)"
														}
													},
													"id": 1989,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"names": [
														"token0",
														"token1",
														"fee"
													],
													"nodeType": "FunctionCall",
													"src": "1025:51:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolKey_$1961_memory_ptr",
														"typeString": "struct PoolAddress.PoolKey memory"
													}
												},
												"functionReturnParameters": 1972,
												"id": 1990,
												"nodeType": "Return",
												"src": "1018:58:17"
											}
										]
									},
									"documentation": {
										"id": 1962,
										"nodeType": "StructuredDocumentation",
										"src": "472:325:17",
										"text": "@notice Returns PoolKey: the ordered tokens with the matched fee levels\n @param tokenA The first token of a pool, unsorted\n @param tokenB The second token of a pool, unsorted\n @param fee The fee level of the pool\n @return Poolkey The pool details with ordered token0 and token1 assignments"
									},
									"id": 1992,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getPoolKey",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1969,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1964,
												"mutability": "mutable",
												"name": "tokenA",
												"nodeType": "VariableDeclaration",
												"scope": 1992,
												"src": "833:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1963,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "833:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1966,
												"mutability": "mutable",
												"name": "tokenB",
												"nodeType": "VariableDeclaration",
												"scope": 1992,
												"src": "858:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1965,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "858:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1968,
												"mutability": "mutable",
												"name": "fee",
												"nodeType": "VariableDeclaration",
												"scope": 1992,
												"src": "883:10:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1967,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "883:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "822:78:17"
									},
									"returnParameters": {
										"id": 1972,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1971,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1992,
												"src": "924:14:17",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PoolKey_$1961_memory_ptr",
													"typeString": "struct PoolAddress.PoolKey"
												},
												"typeName": {
													"id": 1970,
													"name": "PoolKey",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1961,
													"src": "924:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolKey_$1961_storage_ptr",
														"typeString": "struct PoolAddress.PoolKey"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "923:16:17"
									},
									"scope": 2040,
									"src": "803:281:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2038,
										"nodeType": "Block",
										"src": "1435:428:17",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2007,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 2003,
																	"name": "key",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1997,
																	"src": "1454:3:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_PoolKey_$1961_memory_ptr",
																		"typeString": "struct PoolAddress.PoolKey memory"
																	}
																},
																"id": 2004,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "token0",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1956,
																"src": "1454:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"expression": {
																	"id": 2005,
																	"name": "key",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1997,
																	"src": "1467:3:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_PoolKey_$1961_memory_ptr",
																		"typeString": "struct PoolAddress.PoolKey memory"
																	}
																},
																"id": 2006,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "token1",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1958,
																"src": "1467:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1454:23:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 2002,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1446:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 2008,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1446:32:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2009,
												"nodeType": "ExpressionStatement",
												"src": "1446:32:17"
											},
											{
												"expression": {
													"id": 2036,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2010,
														"name": "pool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2000,
														"src": "1489:4:17",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"hexValue": "ff",
																						"id": 2018,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "hexString",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "1619:7:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9",
																							"typeString": "literal_string hex\"ff\""
																						}
																					},
																					{
																						"id": 2019,
																						"name": "factory",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1995,
																						"src": "1653:7:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"expression": {
																											"id": 2023,
																											"name": "key",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 1997,
																											"src": "1708:3:17",
																											"typeDescriptions": {
																												"typeIdentifier": "t_struct$_PoolKey_$1961_memory_ptr",
																												"typeString": "struct PoolAddress.PoolKey memory"
																											}
																										},
																										"id": 2024,
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"memberName": "token0",
																										"nodeType": "MemberAccess",
																										"referencedDeclaration": 1956,
																										"src": "1708:10:17",
																										"typeDescriptions": {
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									},
																									{
																										"expression": {
																											"id": 2025,
																											"name": "key",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 1997,
																											"src": "1720:3:17",
																											"typeDescriptions": {
																												"typeIdentifier": "t_struct$_PoolKey_$1961_memory_ptr",
																												"typeString": "struct PoolAddress.PoolKey memory"
																											}
																										},
																										"id": 2026,
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"memberName": "token1",
																										"nodeType": "MemberAccess",
																										"referencedDeclaration": 1958,
																										"src": "1720:10:17",
																										"typeDescriptions": {
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									},
																									{
																										"expression": {
																											"id": 2027,
																											"name": "key",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 1997,
																											"src": "1732:3:17",
																											"typeDescriptions": {
																												"typeIdentifier": "t_struct$_PoolKey_$1961_memory_ptr",
																												"typeString": "struct PoolAddress.PoolKey memory"
																											}
																										},
																										"id": 2028,
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"memberName": "fee",
																										"nodeType": "MemberAccess",
																										"referencedDeclaration": 1960,
																										"src": "1732:7:17",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint24",
																											"typeString": "uint24"
																										}
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										},
																										{
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										},
																										{
																											"typeIdentifier": "t_uint24",
																											"typeString": "uint24"
																										}
																									],
																									"expression": {
																										"id": 2021,
																										"name": "abi",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 4294967295,
																										"src": "1697:3:17",
																										"typeDescriptions": {
																											"typeIdentifier": "t_magic_abi",
																											"typeString": "abi"
																										}
																									},
																									"id": 2022,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"lValueRequested": false,
																									"memberName": "encode",
																									"nodeType": "MemberAccess",
																									"src": "1697:10:17",
																									"typeDescriptions": {
																										"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																										"typeString": "function () pure returns (bytes memory)"
																									}
																								},
																								"id": 2029,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"kind": "functionCall",
																								"lValueRequested": false,
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "1697:43:17",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes_memory_ptr",
																									"typeString": "bytes memory"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_bytes_memory_ptr",
																									"typeString": "bytes memory"
																								}
																							],
																							"id": 2020,
																							"name": "keccak256",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967288,
																							"src": "1687:9:17",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																								"typeString": "function (bytes memory) pure returns (bytes32)"
																							}
																						},
																						"id": 2030,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "1687:54:17",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					},
																					{
																						"id": 2031,
																						"name": "POOL_INIT_CODE_HASH",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1954,
																						"src": "1768:19:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9",
																							"typeString": "literal_string hex\"ff\""
																						},
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						},
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						},
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					],
																					"expression": {
																						"id": 2016,
																						"name": "abi",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967295,
																						"src": "1576:3:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_magic_abi",
																							"typeString": "abi"
																						}
																					},
																					"id": 2017,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "encodePacked",
																					"nodeType": "MemberAccess",
																					"src": "1576:16:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																						"typeString": "function () pure returns (bytes memory)"
																					}
																				},
																				"id": 2032,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "1576:234:17",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			],
																			"id": 2015,
																			"name": "keccak256",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967288,
																			"src": "1544:9:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																				"typeString": "function (bytes memory) pure returns (bytes32)"
																			}
																		},
																		"id": 2033,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1544:285:17",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"id": 2014,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1518:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 2013,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1518:7:17",
																		"typeDescriptions": {}
																	}
																},
																"id": 2034,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1518:326:17",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 2012,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1496:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 2011,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1496:7:17",
																"typeDescriptions": {}
															}
														},
														"id": 2035,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1496:359:17",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "1489:366:17",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2037,
												"nodeType": "ExpressionStatement",
												"src": "1489:366:17"
											}
										]
									},
									"documentation": {
										"id": 1993,
										"nodeType": "StructuredDocumentation",
										"src": "1092:239:17",
										"text": "@notice Deterministically computes the pool address given the factory and PoolKey\n @param factory The Uniswap V3 factory contract address\n @param key The PoolKey\n @return pool The contract address of the V3 pool"
									},
									"id": 2039,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "computeAddress",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1998,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1995,
												"mutability": "mutable",
												"name": "factory",
												"nodeType": "VariableDeclaration",
												"scope": 2039,
												"src": "1361:15:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1994,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1361:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1997,
												"mutability": "mutable",
												"name": "key",
												"nodeType": "VariableDeclaration",
												"scope": 2039,
												"src": "1378:18:17",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PoolKey_$1961_memory_ptr",
													"typeString": "struct PoolAddress.PoolKey"
												},
												"typeName": {
													"id": 1996,
													"name": "PoolKey",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1961,
													"src": "1378:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolKey_$1961_storage_ptr",
														"typeString": "struct PoolAddress.PoolKey"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1360:37:17"
									},
									"returnParameters": {
										"id": 2001,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2000,
												"mutability": "mutable",
												"name": "pool",
												"nodeType": "VariableDeclaration",
												"scope": 2039,
												"src": "1421:12:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1999,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1421:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1420:14:17"
									},
									"scope": 2040,
									"src": "1337:526:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2041,
							"src": "171:1695:17"
						}
					],
					"src": "46:1822:17"
				},
				"id": 17
			}
		}
	}
}